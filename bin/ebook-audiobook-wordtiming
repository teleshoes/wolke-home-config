#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);
use Data::UUID;
use File::Basename qw(basename);
use JSON qw(from_json);
use Time::HiRes qw(time);

my $CACHE_BASE_DIR = "$ENV{HOME}/.cache/ebook-audiobook-wordtiming";
my $CACHE_DIR_VOSK_WORDS = "$CACHE_BASE_DIR/vosk-words";
my $CACHE_DIR_EBOOK_TEXT = "$CACHE_BASE_DIR/ebook-text";

my $FILE_INFO_CACHE = "$CACHE_BASE_DIR/file-info";
my $MODE_CALC = "calc";
my $MODE_CACHE = "cache";

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] EBOOK_FILE AUDIOBOOK_FILE [AUDIOBOOK_FILE AUDIOBOOK_FILE]
    -for each AUDIOBOOK_FILE:
      -ensure VOSK_DATA cache exists as in:
        $0 --cache AUDIOBOOK_FILE
      -read VOSK_DATA from cache
    -create an AUDIOBOOK_WORDS_FILE from VOSK_DATA
      -write all words from all AUDIOBOOK_FILEs, one word per line
      -store an array with the source file and start time
    -create an EBOOK_WORDS_FILE
      -parse EBOOK_FILE into plaintext with `pandoc`
      -replace some unicode quote characters
      -parse all segments of letters/numbers/single-quotes
      -convert all words to lowercase and write to EBOOK_WORDS_FILE, one word per line
    -diff EBOOK_WORDS_FILE and AUDIOBOOK_WORDS_FILE with `diff -y`
      -write a file with one line per word from EBOOK_WORDS_FILE, formated:
        START_TIME_SECONDS,WORD,FILE_BASE_NAME
      -where START_TIME_SECONDS and FILE_BASE_NAME is from the closest matching audiobook word

  $0 [OPTS] --cache AUDIOBOOK_FILE [AUDIOBOOK_FILE AUDIOBOOK_FILE]
    -for each AUDIOBOOK_FILE:
      -check for cached Vosk data
        -if not cached:
          -convert AUDIOBOOK_FILE to mono WAVE (if it is not already)
          -generate Vosk result data, with timing for each word, with `vosk-words-json`
          -compress and store resut in cache (about 100KiB, compressed, per hour of audiobook)

  OPTS
    -o OUTPUT_FILE | --output=OUTPUT_FILE
      write the final ebook words + audiobook start times to OUTPUT_FILE in addition to the console

    --meld
      before outputting word timings, open meld to view diff of ebook+audiobooks words
        run: `meld EBOOK_WORDS_FILE AUDIOBOOK_WORD_FILE`
";

sub getEbookWordFile($);
sub getAudiobookWordFile(@);
sub ensureEbookTextCacheFile($$);
sub ensureVoskWordsCacheFile($$);
sub getEbookWordFileTimestamps($$@);
sub getCleanFileName($);
sub globFirst($);
sub ensureFileInfoCache($$);
sub readFileInfoCache();
sub appendFileInfoCache($$);
sub getRelFile($);
sub getMountpointOfFile($);
sub md5sum($);
sub readFile($);
sub readFileXZ($);
sub writeFile($$);
sub nowMillis();
sub run(@);

sub main(@){
  my $ebookFile;
  my @audiobookFiles;
  my $outputFile;
  my $meld = 0;
  my $mode = $MODE_CALC;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-o|--output)$/ and @_ > 0){
      $outputFile = shift @_;
    }elsif($arg =~ /^--output=(.+)$/){
      $outputFile = $1;
    }elsif($arg =~ /^(--cache)$/){
      $mode = $MODE_CACHE;
    }elsif($arg =~ /^(--meld)$/){
      $meld = 1;
    }elsif(-f $arg and not defined $ebookFile and not $mode eq $MODE_CACHE){
      $ebookFile = $arg;
    }elsif(-f $arg){
      push @audiobookFiles, $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($mode eq $MODE_CACHE){
    die "ERROR: cannot specify EBOOK_FILE with --cache\n" if defined $ebookFile;
  }else{
    die "ERROR: missing EBOOK_FILE\n" if not defined $ebookFile;
  }

  die "ERROR: missing AUDIOBOOK_FILE(s)\n" if @audiobookFiles == 0;

  if($mode eq $MODE_CALC){
    my $fileInfoCache = readFileInfoCache();

    my @audiobookWordInfo;

    for my $audioFile(@audiobookFiles){
      my $cacheFile = ensureVoskWordsCacheFile($audioFile, $fileInfoCache);
      my $json = readFileXZ($cacheFile);
      my $fileName = basename $audioFile;

      my $sentences = from_json $json;
      my @words;
      for my $s(@$sentences){
        @words = (@words, @{$$s{result}});
      }

      for my $word(@words){
        push @audiobookWordInfo, {
          word  => $$word{word},
          start => $$word{start},
          file  => $fileName,
        };
      }
    }
    my $audiobookWordFile = getAudiobookWordFile(@audiobookWordInfo);

    my $ebookTextCacheFile = ensureEbookTextCacheFile($ebookFile, $fileInfoCache);
    my $ebookWordFile = getEbookWordFile($ebookTextCacheFile);

    if($meld){
      system "meld", $ebookWordFile, $audiobookWordFile;
    }

    my $fmt = getEbookWordFileTimestamps($ebookWordFile, $audiobookWordFile, @audiobookWordInfo);
    print $fmt;
    if(defined $outputFile){
      writeFile $outputFile, $fmt;
    }
  }elsif($mode eq $MODE_CACHE){
    my $fileInfoCache = readFileInfoCache();
    for my $audioFile(@audiobookFiles){
      my $cacheFile = ensureVoskWordsCacheFile($audioFile, $fileInfoCache);
      print "cached $audioFile => $cacheFile\n";
    }
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}


sub getEbookWordFile($){
  my ($ebookTextCacheFile) = @_;

  my $nowMillis = nowMillis();
  my $uuid = getUUID();
  my $tmpEbookWordsFile = "/tmp/ebook-words-$nowMillis-$uuid.txt";

  my $content = readFileXZ $ebookTextCacheFile;
  $content =~ s/â€™/'/g;

  my $wordContent = "";
  my @sentences = split /(\.|\n\n+|;)/, $content;
  for my $sentence(@sentences){
    my @words = grep {/\w/} split /[^a-z0-9']/, lc $sentence;
    for my $word(@words){
      $wordContent .= "$word\n";
    }
  }
  writeFile $tmpEbookWordsFile, $wordContent;
  return $tmpEbookWordsFile;
}

sub getAudiobookWordFile(@){
  my @wordInfo = @_;
  my $nowMillis = nowMillis();
  my $uuid = getUUID();
  my $tmpAudiobookWordsFile = "/tmp/audiobook-words-$nowMillis-$uuid.txt";

  my $wordContent = "";
  for my $w(@wordInfo){
    $wordContent .= "$$w{word}\n";
  }
  writeFile $tmpAudiobookWordsFile, $wordContent;
  return $tmpAudiobookWordsFile;
}

sub ensureEbookTextCacheFile($$){
  my ($ebookFile, $fileInfoCache) = @_;
  my $fileInfo = ensureFileInfoCache($ebookFile, $fileInfoCache);
  my $md5 = $$fileInfo{md5};
  my $ebookTextCacheFile = globFirst "$CACHE_DIR_EBOOK_TEXT/*-$md5.txt*";
  if(defined $ebookTextCacheFile){
    return $ebookTextCacheFile;
  }

  if(not -d $CACHE_DIR_EBOOK_TEXT){
    run "mkdir", "-p", $CACHE_DIR_EBOOK_TEXT;
  }
  if(not -d $CACHE_DIR_EBOOK_TEXT){
    die "ERROR: $CACHE_DIR_EBOOK_TEXT does not exist\n";
  }
  my $cleanFileName = getCleanFileName($ebookFile);
  $ebookTextCacheFile = "$CACHE_DIR_EBOOK_TEXT/$cleanFileName-$md5.txt";


  run "pandoc", "-t", "plain", $ebookFile, "-o", $ebookTextCacheFile;
  run "xz", $ebookTextCacheFile;
  $ebookTextCacheFile = "$ebookTextCacheFile.xz";
  if(not -f $ebookTextCacheFile){
    die "ERROR: cache file $ebookTextCacheFile does not exist\n";
  }

  return $ebookTextCacheFile;
}

sub ensureVoskWordsCacheFile($$){
  my ($audioFile, $fileInfoCache) = @_;
  die "ERROR: $audioFile not found\n" if not -f $audioFile;
  my $fileInfo = ensureFileInfoCache($audioFile, $fileInfoCache);
  my $md5 = $$fileInfo{md5};
  my $voskWordsCacheFile = globFirst "$CACHE_DIR_VOSK_WORDS/*-$md5.json*";
  if(defined $voskWordsCacheFile){
    return $voskWordsCacheFile;
  }

  if(not -d $CACHE_DIR_VOSK_WORDS){
    run "mkdir", "-p", $CACHE_DIR_VOSK_WORDS;
  }
  if(not -d $CACHE_DIR_VOSK_WORDS){
    die "ERROR: $CACHE_DIR_VOSK_WORDS does not exist\n";
  }
  my $cleanFileName = getCleanFileName($audioFile);
  $voskWordsCacheFile = "$CACHE_DIR_VOSK_WORDS/$cleanFileName-$md5.json";

  my $tmpWaveFile = undef;

  my $fileType = `file "$audioFile"`;
  if($fileType !~ /WAVE.*\bmono\b/){
    my $nowMillis = nowMillis();
    my $uuid = getUUID();
    $tmpWaveFile = "/tmp/vosk-wav-file-$nowMillis-$uuid.wav";
    system "ffmpeg", "-i", $audioFile, "-ac", "1", $tmpWaveFile;
    if(not -f $tmpWaveFile){
      die "ERROR: failed to create mono WAVE for $audioFile\n";
    }
    $audioFile = $tmpWaveFile;
    $fileType = `file "$audioFile"`;
  }

  if($fileType !~ /WAVE.*\bmono\b/){
    die "ERROR: $audioFile is not a mono WAVE\n";
  }

  run "vosk-words-json", $audioFile, "--output=$voskWordsCacheFile";
  run "xz", $voskWordsCacheFile;
  $voskWordsCacheFile = "$voskWordsCacheFile.xz";
  if(not -f $voskWordsCacheFile){
    die "ERROR: cache file $voskWordsCacheFile does not exist\n";
  }

  if(defined $tmpWaveFile){
    run "rm", $tmpWaveFile;
  }

  return $voskWordsCacheFile
}

sub getEbookWordFileTimestamps($$@){
  my ($ebookWordFile, $audiobookWordFile, @wordInfo) = @_;

  my $fmt = "";
  my @diffLines = `diff -y $ebookWordFile $audiobookWordFile`;
  my $audiobookWordIndex=0;
  for my $diffLine(@diffLines){
    $audiobookWordIndex = $#wordInfo if $audiobookWordIndex > $#wordInfo;
    my $wordInfo = $wordInfo[$audiobookWordIndex];
    my $start = $$wordInfo{start};
    my $file = $$wordInfo{file};
    if($diffLine =~ /^(\S+)\s+(\1)$/){
      #exact match
      $fmt .= "$start,$1,$file\n";
      $audiobookWordIndex++;
    }elsif($diffLine =~ /^(\S+)\s+\|\s+(\S+)$/){
      #fuzzy match
      $fmt .= "$start,$1,$file\n";
      $audiobookWordIndex++;
    }elsif($diffLine =~ /^(\S+)\s+<$/){
      #word in ebook not in audiobook
      $fmt .= "$start,$1,$file\n";
    }elsif($diffLine =~ /^\s+>\s+(\S+)$/){
      #word in audiobook not in ebook
      $audiobookWordIndex++;
    }else{
      die "ERROR: could not parse diff line:\n$diffLine";
    }
  }

  return $fmt;
}

sub getCleanFileName($){
  my ($file) = @_;
  my $cleanFileName = lc basename $file;
  $cleanFileName =~ s/\.\w+$//;
  $cleanFileName =~ s/\W+/_/g;
  $cleanFileName =~ s/__+/_/g;
  $cleanFileName =~ s/^_+//g;
  $cleanFileName =~ s/_+$//g;
  return $cleanFileName;
}

sub globFirst($){
  my ($ptrn) = @_;
  my @files = glob $ptrn;
  @files = grep {-e $_} @files;
  if(@files > 0){
    return $files[0];
  }else{
    return undef;
  }
}

sub ensureFileInfoCache($$){
  my ($file, $fileInfoCache) = @_;
  my $absFile = abs_path $file;
  my $relFile = getRelFile($absFile);

  my @stat = stat $absFile;
  my $size = $stat[7];
  my $mtime = $stat[9];

  if(defined $$fileInfoCache{$relFile}){
    my $fileInfo = $$fileInfoCache{$relFile};
    my $oldSize = $$fileInfo{size};
    my $oldMtime = $$fileInfo{mtime};
    if($mtime == $oldMtime and $size == $oldSize){
      return $fileInfo;
    }
  }

  my $md5 = md5sum $absFile;

  my $fileInfo = {
    size => $size,
    mtime => $mtime,
    md5 => $md5,
  };
  $$fileInfoCache{$relFile} = $fileInfo;

  appendFileInfoCache $relFile, $fileInfo;

  return $fileInfo;
}

sub readFileInfoCache(){
  my $fileInfoCache = {};
  if(not -f $FILE_INFO_CACHE){
    return $fileInfoCache;
  }

  my @lines = readFile $FILE_INFO_CACHE;
  for my $line(@lines){
    next if $line =~ /^\s*$/;
    if($line =~ /^(\d+),(\d+),([0-9a-f]{32}),(.+)$/){
      my ($size, $mtime, $md5, $relFile) = ($1, $2, $3, $4);
      $$fileInfoCache{$relFile} = {
        size => $size,
        mtime => $mtime,
        md5 => $md5,
      };
    }else{
      die "ERROR: malformed line in $FILE_INFO_CACHE\n$line";
    }
  }

  return $fileInfoCache;
}
sub appendFileInfoCache($$){
  my ($relFile, $fileInfo) = @_;
  my $line = "$$fileInfo{size},$$fileInfo{mtime},$$fileInfo{md5},$relFile\n";
  open FH, ">> $FILE_INFO_CACHE" or die "ERROR: could not append $FILE_INFO_CACHE\n$!\n";
  print  FH $line;
  close FH;
}

sub getRelFile($){
  my ($absFile) = @_;
  my $relFile = $absFile;
  my $mountpoint = getMountpointOfFile($absFile);
  $relFile =~ s/^$mountpoint\///;
  return $relFile;
}

sub getMountpointOfFile($){
  my ($file) = @_;
  my $mountpoint = `stat -c %m \"$file\"`;
  chomp $mountpoint;
  if($mountpoint !~ /^\//){
    die "ERROR: invalid mountpoint \"$mountpoint\" for file \"$file\"\n";
  }
  return $mountpoint;
}

sub md5sum($){
  open CMD, "-|", "md5sum", $_[0];
  my $md5sum = <CMD>;
  close CMD;
  chomp $md5sum;
  if($md5sum =~ /^([0-9a-f]{32})(\s.*|$)$/){
    return $1;
  }else{
    return undef;
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my @lines = <FH>;
  close FH;
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}
sub readFileXZ($){
  return `xz --decompress --keep --stdout "$_[0]"`;
}

sub writeFile($$){
  my ($file, $contents) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $contents;
  close FH;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub getUUID(){
  return Data::UUID->new->create_str();
}

sub run(@){
  print "@_\n";
  system @_;
  if($? != 0){
    die "ERROR: command failed\n@_\n";
  }
}

&main(@ARGV);
