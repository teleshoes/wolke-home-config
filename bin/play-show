#!/usr/bin/perl
use strict;
use warnings;

my $SHOW_BASE_DIR = "$ENV{HOME}/Music/sheet_music/shows/music";
my $PLAY_DIR = "$ENV{HOME}/play";
my $SHOW_FILE = "$ENV{HOME}/show";

my @EXTS = qw(
  flac ogg opus wav mp3 m4a wma
  mkv avi m2ts mts mov mpeg mpg mp4 webm
);
my $OK_EXTS = join "|", @EXTS;

my @DEFAULT_MPV_OPTS = qw(--no-video);

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [SHOW_NAME] SONG_NUM
  $0 [SHOW_NAME] SONG_NUM POS
  $0 [SHOW_NAME] SONG_NUM LOOP_POS_START LOOP_POS_END
    find the first song <FILE> matching <SONG_NUM> in one of:
      $SHOW_BASE_DIR/<SHOW_NAME>
      \$PWD/
      $PLAY_DIR/
      $SHOW_BASE_DIR/`cat $SHOW_FILE`
    play song <FILE> with mpv
    `mpv OPTS <FILE>` or `mpv OPTS <FILE> -ss <POS>`

    POS
      -any string, will be passed to mpv like `-ss <POS>`

    LOOP_POS_START
      any string, will be passed to mpv like `--ab-loop-a=<LOOP_POS_START>`
      also, will be passed to mpv like `-ss <LOOP_POS_START>`

    LOOP_POS_END
      any string, will be passed to mpv like `--ab-loop-b=<LOOP_POS_END>`

    FILE
      -must start with any number of zeros,
        followed by <SONG_NUM> (case-insensitive),
        followed by an underscore
      -must end with a dot followed by one of these exts (case insensitive):
        @EXTS

    SONG_NUM
      -any number of digits, optionally followed by a single letter
      -leading zeros are removed
      -trailing underscores are removed

    OPTS
      default options to mpv: @DEFAULT_MPV_OPTS

   $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my ($showNameArg);
  if(@_ >= 1 and $_[0] =~ /^[a-zA-Z]\w*$/){
    my %okShowDirs = map {$_ => 1} getShowDirs();
    if(defined $okShowDirs{$_[0]}){
      $showNameArg = shift @_;
    }
  }

  my ($songNum, $pos, $loopStart, $loopEnd);
  if(@_ == 1){
    ($songNum, $pos) = ($_[0], undef);
  }elsif(@_ == 2){
    ($songNum, $pos) = ($_[0], $_[1]);
  }elsif(@_ == 3 and $_[1] =~ /^(-ss)$/){
    ($songNum, $pos) = ($_[0], $_[2]);
  }elsif(@_ == 3){
    ($songNum, $loopStart, $loopEnd) = ($_[0], $_[1], $_[2]);
  }else{
    die $usage;
  }

  if($songNum !~ /^(\d+[a-z]?)$/){
    die "invalid song number: $songNum\n";
  }
  $songNum =~ s/^0+//;
  $songNum =~ s/_+$//;

  my $showNameArgDir = defined $showNameArg ? "$SHOW_BASE_DIR/$showNameArg" : undef;

  my $showFileDir;
  my $show = `cat $SHOW_FILE 2>/dev/null`;
  chomp $show;

  if($show =~ /^([a-zA-Z0-9_\-]+)$/){
    $showFileDir = "$SHOW_BASE_DIR/$1";
  }elsif($show ne ""){
    die "invalid $SHOW_FILE (must be letters/numbers/dashes/underscore): $show\n";
  }else{
    $showFileDir = undef;
  }

  my @dirs;
  if(defined $showNameArgDir){
    @dirs = ($showNameArgDir);
  }else{
    @dirs = (".", $PLAY_DIR, $showFileDir);
  }
  @dirs = grep {defined $_ and -d $_} @dirs;

  my @files;
  for my $dir(@dirs){
    @files = (@files, glob("$dir/*.*"));
  }

  my $songFile;
  for my $file(@files){
    if($file =~ /(^|\/)0*${songNum}_.*\.(?:$OK_EXTS)$/i){
      $songFile = $file;
      last;
    }
  }

  my $dirFmt = join ", ", map {"\"$_\""} @dirs;
  if(not defined $songFile){
    die "no song with SONG_NUM=\"$songNum\" found in $dirFmt\n";
  }

  my @cmd = ("mpv", @DEFAULT_MPV_OPTS, $songFile);
  @cmd = (@cmd, "-ss", $pos) if defined $pos;
  @cmd = (@cmd, "--ab-loop-a", $loopStart) if defined $loopStart;
  @cmd = (@cmd, "-ss", $loopStart) if defined $loopStart;
  @cmd = (@cmd, "--ab-loop-b", $loopEnd) if defined $loopEnd;

  print "@cmd\n";
  exec @cmd;
}

sub getShowDirs(){
  my @dirs = `cd $SHOW_BASE_DIR/ && ls`;
  chomp foreach @dirs;
  @dirs = grep {-d "$SHOW_BASE_DIR/$_/"} @dirs;
  return @dirs;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  while(@words > 0 and $words[0] =~ /^-/){
    shift @words;
  }

  my @showNames = getShowDirs();

  if(@words == 0){
    return ("-h", "--help", "--bash-complete", @showNames);
  }

  return ();
}

&main(@ARGV);
