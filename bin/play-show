#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub getShowDirs();
sub bashComplete($$);

my @MUSIC_BASE_DIRS = (
  "$ENV{HOME}/Music/sheet_music/shows/music",
  "$ENV{HOME}/Music/sheet_music/trumpet",
);
my $PLAY_DIR = "$ENV{HOME}/play";
my $SHOW_FILE = "$ENV{HOME}/show";

my @EXTS = qw(
  flac ogg opus wav mp3 m4a wma
  mkv avi m2ts mts mov mpeg mpg mp4 webm
);
my $OK_EXTS = join "|", @EXTS;

my @DEFAULT_MPV_ARGS = qw(--no-video --af=@rb:rubberband);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC --bash-complete COMP_LINE COMP_POINT
    print a list of words for bash completion, one per line
    COMP_LINE  - the full cmdline as a string
    COMP_POINT - the cursor position in the cmdline

  $EXEC [OPTS]
    -collect a list of SONG_DIRS to check:
      -if --show=SHOW_NAME given, or SHOW_NAME defined in $SHOW_FILE:
        " . join("\n        ", map {"-include: $_/<SHOW_NAME>"} @MUSIC_BASE_DIRS) . "
      -include: $PLAY_DIR/
      -include: \$PWD/
    -for each SONG_DIR in SONG_DIRS:
      -collect SONG_FILES in SONG_DIR/FILENAME such that:
        -FILENAME ends with '.' followed by one of the allowed EXTS
        -FILENAME starts with any number of leading 0s followed by SONG_NUM followed by '_'
          -NOTE: --song SONG_NUM is required
      -i.e.: <SONG_DIR>/00000<SONG_NUM>_*.EXTS
    -play song `mpv <MPV_ARGS> <SONG_FILES>`

  $EXEC [OPTS] [SHOW_NAME] [SONG_NUM [START_POS [END_POS]]]
    same as: $EXEC OPTS --show=SHOW_NAME --song=SONG_NAME --start=START_POS --end=END_POS

  EXTS
    one of: @EXTS

  MPV_ARGS
    default options to mpv:
      -default: '@DEFAULT_MPV_ARGS'
      -plus: '--start=START_POS' if START_POS given
      -plus: '---ab-loop-a=START_POS --ab-loop-b=END_POS' if START_POS + END_POS given

  POSITION_ARG
    one of:
      -a '+' sign followed by a <POSITION_ARG>
      -a '-' sign followed by a <POSITION_ARG>
      -<POSITION_HOUR_ARG>
      -<POSITION_MINUTE_ARG>
      -<POSITION_SECOND_ARG>
      -<POSITION_PERCENT_ARG>
    POSITION_HOUR_ARG
      -integer number of hours, followed by ':', followed by <POSITION_MINUTE_ARG>
    POSITION_MINUTE_ARG
      -integer number of minutes, followed by ':', followed by <POSITION_SECOND_ARG>
    POSITION_SECOND_ARG
      -fractional number of seconds
    POSITION_PERCENT_ARG
      -fractional percent, followed by a '%' sign

  OPTS
    --show=SHOW_NAME | --show SHOW_NAME
      -override the value in $SHOW_FILE, look in sub dir SHOW_NAME of music dirs
      -SHOW_NAME must start with a letter, followed by any letters/numbers/underscores

    --song=SONG_NUM | --song SONG_NUM
    --num=SONG_NUM | --num SONG_NUM
      -include only SONG_FILES that start with SONG_NUM
        -SONG_NUM is any number of digits, optionally followed by a single letter
        -leading zeros are ignored, in both SONG_NUM and SONG_FILES
      NOTE: SONG_NUM is required

    --start=START_POS | --start START_POS | -ss START_POS
      -run mpv starting at START_POS
        -must be a valid POSITION_ARG
        -if given:
          -append to MPV_ARGS '--start=START_POS'

    --end=END_POS | --end END_POS | -endpos END_POS
      -run mpv with ab-loop from START_POS to END_POS
        -must be a valid POSITION_ARG
        -if START_POS and END_POS are both given:
          -append to MPV_ARGS '--ab-loop-a=START_POS'
          -append to MPV_ARGS '--ab-loop-b=END_POS'
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my $showNameRegex = '[a-zA-Z]\w*';
  my $songNumRegex = '\d+[a-z]?';
  my $fracRegex = "(?:\\d+|\\d*\\.\\d+)";
  my $timeRegex = "(\\d+:)?(\\d+:)?$fracRegex";
  my $posArgRegex = '(?:'
    . "(?:[+-]?$timeRegex)"
    . "|"
    . "(?:$fracRegex\%)"
    . ")"
  ;

  my $showName = undef;
  my $songNum = undef;
  my $startPos = undef;
  my $endPos = undef;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(?:--show)=($showNameRegex)$/){
      $showName = $1;
    }elsif($arg =~ /^(?:--show)$/ and @_ > 0 and $_[0] =~ /^($showNameRegex)$/){
      $showName = shift @_;
    }elsif($arg =~ /^(?:--song|--num)=($songNumRegex)$/){
      $songNum = $1;
    }elsif($arg =~ /^(?:--song|--num)$/ and @_ > 0 and $_[0] =~ /^($songNumRegex)$/){
      $songNum = shift @_;
    }elsif($arg =~ /^(?:--start)=($posArgRegex)$/){
      $startPos = $1;
    }elsif($arg =~ /^(?:--start|-ss)$/ and @_ > 0 and $_[0] =~ /^($posArgRegex)$/){
      $startPos = shift @_;
    }elsif($arg =~ /^(?:--end)=($posArgRegex)$/){
      $endPos = $1;
    }elsif($arg =~ /^(?:--end|-endpos)$/ and @_ > 0 and $_[0] =~ /^($posArgRegex)$/){
      $endPos = shift @_;
    }elsif($arg =~ /^($showNameRegex)$/ and not defined $showName){
      $showName = $arg;
    }elsif($arg =~ /^($songNumRegex)$/ and not defined $songNum){
      $songNum = $arg;
    }elsif($arg =~ /^($posArgRegex)$/ and not defined $startPos){
      $startPos = $arg;
    }elsif($arg =~ /^($posArgRegex)$/ and not defined $endPos){
      $endPos = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(not defined $songNum){
    die "$USAGE\nERROR: missing SONG_NUM\n";
  }
  $songNum =~ s/^0+//;

  if(not defined $showName and -e $SHOW_FILE){
    $showName = `cat $SHOW_FILE 2>/dev/null`;
    chomp $showName;
    $showName =~ s/^\s*//;
    $showName =~ s/\s*$//;
    if($showName !~ /^($showNameRegex)$/){
      die "$USAGE\nERROR: invalid SHOW_NAME in $SHOW_FILE: $showName\n";
    }
  }

  my @showNameDirs;
  if(defined $showName){
    for my $baseDir(@MUSIC_BASE_DIRS){
      @showNameDirs = (@showNameDirs, grep {-d $_} glob "$baseDir/$showName/");
    }
    if(@showNameDirs == 0){
      die "$USAGE\nERROR: unknown SHOW_NAME $showName\n";
    }
  }

  my @dirs = (@showNameDirs, $PLAY_DIR, ".");
  @dirs = grep {defined $_ and -d $_} @dirs;

  my @songFiles;
  for my $dir(@dirs){
    my @files = grep {-f $_} glob "$dir/*";
    @files = grep {$_ =~ /\.($OK_EXTS)$/i} @files;
    @files = grep {$_ =~ /^(.*\/)0*${songNum}_[^\/]*$/} @files;
    @songFiles = (@songFiles, @files);
  }

  my $dirFmt = join ", ", map {"\"$_\""} @dirs;
  if(@songFiles == 0){
    die "no song with SONG_NUM=\"$songNum\" found in $dirFmt\n";
  }

  my @mpvArgs = @DEFAULT_MPV_ARGS;
  if(defined $startPos){
    push @mpvArgs, "--start=$startPos";
  }
  if(defined $startPos and defined $endPos){
    push @mpvArgs, "--ab-loop-a=$startPos";
    push @mpvArgs, "--ab-loop-b=$endPos";
  }

  my @cmd = ("mpv", @mpvArgs, @songFiles);
  print "@cmd\n";
  exec @cmd;
}

sub getShowDirs(){
  my @showDirs;
  for my $baseDir(@MUSIC_BASE_DIRS){
    my @dirs = `cd $baseDir/ && ls`;
    chomp foreach @dirs;
    @dirs = grep {-d "$baseDir/$_/"} @dirs;
    @showDirs = (@showDirs, @dirs);
  }
  return @showDirs;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  my @showNames = getShowDirs();

  my %okShowNames = map {$_ => 1} @showNames;

  my $showFound = 0;
  for my $word(@words){
    if(defined $okShowNames{$word}){
      $showFound = 1;
      last;
    }
  }

  my @suggestions = (
    "-h", "--help",
    "--bash-complete",
    "--show",
    "--song", "--num",
    "--start", "-ss",
    "--end", "-endpos",
  );

  @suggestions = (@suggestions, @showNames) if not $showFound;

  return @suggestions;
}

&main(@ARGV);
