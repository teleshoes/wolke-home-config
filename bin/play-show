#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub getShowDirs();
sub bashComplete($$);

my @MUSIC_BASE_DIRS = (
  "$ENV{HOME}/Music/sheet_music/shows/music",
  "$ENV{HOME}/Music/sheet_music/trumpet",
);
my $PLAY_DIR = "$ENV{HOME}/play";
my $SHOW_FILE = "$ENV{HOME}/show";

my @EXTS = qw(
  flac ogg opus wav mp3 m4a wma
  mkv avi m2ts mts mov mpeg mpg mp4 webm
);
my $OK_EXTS = join "|", @EXTS;

my @DEFAULT_MPV_ARGS = qw(--no-video --af=@rb:rubberband);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [SHOW_NAME] SONG_NUM
  $EXEC [SHOW_NAME] SONG_NUM POS
  $EXEC [SHOW_NAME] SONG_NUM LOOP_POS_START LOOP_POS_END
    find the first song <FILE> matching <SONG_NUM> in one of:
      " . join("\n      ", map {"$_/<SHOW_NAME>"} @MUSIC_BASE_DIRS) . "
      \$PWD/
      $PLAY_DIR/
      " . join("\n      ", map {"$_/`cat $SHOW_FILE`"} @MUSIC_BASE_DIRS) . "
    play song <FILE> with mpv
    `mpv MPV_ARGS <FILE>` or `mpv MPV_ARGS <FILE> --start=<POS>`

    POS
      -any string, will be passed to mpv like `--start=<POS>`

    LOOP_POS_START
      any string, will be passed to mpv like `--ab-loop-a=<LOOP_POS_START>`
      also, will be passed to mpv like `--start=<LOOP_POS_START>`

    LOOP_POS_END
      any string, will be passed to mpv like `--ab-loop-b=<LOOP_POS_END>`

    FILE
      -must start with any number of zeros,
        followed by <SONG_NUM> (case-insensitive),
        followed by an underscore
      -must end with a dot followed by one of these exts (case insensitive):
        @EXTS

    SONG_NUM
      -any number of digits, optionally followed by a single letter
      -leading zeros are removed
      -trailing underscores are removed

    MPV_ARGS
      default options to mpv: @DEFAULT_MPV_ARGS

   $EXEC --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $USAGE;
    exit 0;
  }elsif(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my ($showNameArg);
  if(@_ >= 1 and $_[0] =~ /^[a-zA-Z]\w*$/){
    my %okShowDirs = map {$_ => 1} getShowDirs();
    if(defined $okShowDirs{$_[0]}){
      $showNameArg = shift @_;
    }
  }

  my ($songNum, $startPos, $endPos);
  if(@_ == 1){
    ($songNum, $startPos) = ($_[0], undef);
  }elsif(@_ == 2){
    ($songNum, $startPos) = ($_[0], $_[1]);
  }elsif(@_ == 3 and $_[1] =~ /^(-ss)$/){
    ($songNum, $startPos) = ($_[0], $_[2]);
  }elsif(@_ == 3){
    ($songNum, $startPos, $endPos) = ($_[0], $_[1], $_[2]);
  }else{
    die $USAGE;
  }

  if($songNum !~ /^(\d+[a-z]?)$/){
    die "invalid song number: $songNum\n";
  }
  $songNum =~ s/^0+//;
  $songNum =~ s/_+$//;

  my $showFileContents = `cat $SHOW_FILE 2>/dev/null`;
  if($showFileContents =~ /^\s*$/){
    $showFileContents = undef;
  }elsif($showFileContents =~ /^([a-zA-Z0-9_\-]+)$/){
    $showFileContents = $1;
  }else{
    die "invalid $SHOW_FILE (must be letters/numbers/dashes/underscore): $showFileContents\n";
  }


  my @dirs;

  if(defined $showNameArg){
    @dirs = (@dirs, map {"$_/$showNameArg"} @MUSIC_BASE_DIRS);
  }

  @dirs = (@dirs, ".");

  @dirs = (@dirs, $PLAY_DIR);

  if(defined $showFileContents){
    @dirs = (@dirs, map {"$_/$showFileContents"} @MUSIC_BASE_DIRS);
  }


  @dirs = grep {defined $_ and -d $_} @dirs;

  my @files;
  for my $dir(@dirs){
    @files = (@files, glob("$dir/*.*"));
  }

  my @songFiles;
  for my $file(@files){
    if($file =~ /(^|\/)0*${songNum}_.*\.(?:$OK_EXTS)$/i){
      push @songFiles, $file;
    }
  }

  my $dirFmt = join ", ", map {"\"$_\""} @dirs;
  if(@songFiles == 0){
    die "no song with SONG_NUM=\"$songNum\" found in $dirFmt\n";
  }

  my @cmd = ("mpv", @DEFAULT_MPV_ARGS, @songFiles);
  if(defined $startPos){
    @cmd = (@cmd, "--start=$startPos");
  }
  if(defined $startPos and defined $endPos){
    @cmd = (@cmd, "--ab-loop-a=$startPos");
    @cmd = (@cmd, "--ab-loop-b=$endPos");
  }

  print "@cmd\n";
  exec @cmd;
}

sub getShowDirs(){
  my @showDirs;
  for my $baseDir(@MUSIC_BASE_DIRS){
    my @dirs = `cd $baseDir/ && ls`;
    chomp foreach @dirs;
    @dirs = grep {-d "$baseDir/$_/"} @dirs;
    @showDirs = (@showDirs, @dirs);
  }
  return @showDirs;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  while(@words > 0 and $words[0] =~ /^-/){
    shift @words;
  }

  my @showNames = getShowDirs();

  if(@words == 0){
    return ("-h", "--help", "--bash-complete", @showNames);
  }

  return ();
}

&main(@ARGV);
