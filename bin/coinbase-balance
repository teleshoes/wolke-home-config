#!/usr/bin/perl
use strict;
use warnings;
use Digest::SHA qw(hmac_sha256_hex);
use File::Basename qw(basename);
use JSON qw(from_json);
use POSIX qw(ceil);

my $EXEC = basename $0;
my $API_KEY_NAME = "coinbase_readonly";
my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my $API_HOST = "api.coinbase.com";
my $API_VERSION = "2017-12-12";
my $CACHE_BASE_DIR = "$ENV{HOME}/.cache/coinbase";
my $CACHE_ACCOUNTS_JSON_DIR = "$CACHE_BASE_DIR/json-accounts";
my $CACHE_TRANSACTIONS_JSON_DIR_PREFIX = "$CACHE_BASE_DIR/json-transactions-";
my $URL_EXCHANGE_RATE = "https://$API_HOST/v2/exchange-rates?currency=BTC";

sub fetchBTCToUSDExchangeRate();
sub fetchAccountInfo($$);
sub fetchWalletID($$$);
sub callCoinbaseAPI($$$);
sub createJWT($$$);
sub readBalanceCache($);
sub readTransactionsCache($);
sub writeTransactionsCache($$);
sub readLatestCacheValue($);
sub writeCacheValue($$);
sub readBTCBalanceCache();
sub readCoinbaseKeyIDAndSecret();
sub readSecrets();
sub decrypt($);
sub getCurrentTimeYMDHMSMillis();

my $usage = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] -b | --balance
    -fetch BTC=>USD conversion rate with public API
    -print balance in USD and BTC

  $EXEC [OPTS] -t | --transactions
    -format and print all cached BTC transactions, one per line

  $EXEC [OPTS] -f | --fetch
    -fetch and cache account info (BTC balance/etc) with API using key+secret
    -fetch BTC transactions with API using key+secret
    -fetch USDC transactions with API using key+secret

  OPTS
    --btc | --no-usd
      -skip fetching exchange rate
      -print only the BTC balance, as a number without units or symbols
";

my $COMMAND_BALANCE = "balance";
my $COMMAND_TRANSACTIONS = "transactions";
my $COMMAND_FETCH = "fetch";

sub main(@){
  my $command = $COMMAND_BALANCE;
  my $opts = {
    btcOnly => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-b|--balance)$/){
      $command = $COMMAND_BALANCE;
    }elsif($arg =~ /^(-t|--transactions)$/){
      $command = $COMMAND_TRANSACTIONS;
    }elsif($arg =~ /^(-f|--fetch)$/){
      $command = $COMMAND_FETCH;
    }elsif($arg =~ /^(--btc|--no-usd)$/){
      $$opts{btcOnly} = 1;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if($command eq $COMMAND_BALANCE){
    my $btcBalance = readBalanceCache("BTC");
    die "ERROR: failed to read BTC balance cache\n" if not defined $btcBalance;

    if($$opts{btcOnly}){
      printf "%.8f\n", $btcBalance;
    }else{
      my $exRate = fetchBTCToUSDExchangeRate();
      my $usdBalance = $btcBalance*$exRate;

      printf ""
        . "%.2fUSD  (%.8fBTC)\n"
        . "  (1 BTC = %.2f USD)\n",
        $usdBalance,
        $btcBalance,
        $exRate,
      ;
    }
  }elsif($command eq $COMMAND_TRANSACTIONS){
    my $transactionsJSON = readTransactionsCache("BTC");
    die "ERROR: failed to read BTC transactions JSON cache\n" if not defined $transactionsJSON;

    my @transactions = parseTransactionsJSON($transactionsJSON);
    for my $t(sort {$$b{date} <=> $$a{date}} @transactions){
      my $dateFmt = `date --date=\@$$t{date} +'%Y-%m-%d %H:%M:%S'`;
      chomp $dateFmt;
      my $desc = $$t{desc};
      $desc = "" if not defined $desc;
      printf "%s | %4s | %s | %s | @%-6d | %s | %s\n",
        $dateFmt,
        $$t{type},
        btcFmt(15, $$t{btc}),
        usdFmt(9, $$t{usd}),
        $$t{usd_per_btc},
        usdFmt(6, $$t{fee}),
        $desc,
      ;
    }
  }elsif($command eq $COMMAND_FETCH){
    my ($keyID, $keySecret) = readCoinbaseKeyIDAndSecret();
    my $json;

    print "caching account info (BTC balance/etc)\n";
    $json = fetchAccountInfo($keyID, $keySecret);
    if(defined $json and $json =~ /"currency":"BTC"/){
      writeCacheValue($CACHE_ACCOUNTS_JSON_DIR, $json);
    }else{
      die "ERROR: cache failed, missing/malformed BTC balance\n$json\n";
    }

    print "caching BTC transactions JSON\n";
    $json = fetchTransactions("BTC", $keyID, $keySecret);
    if(defined $json and $json =~ /"data"/){
      writeTransactionsCache("BTC", $json);
    }else{
      die "ERROR: missing/malformed BTC transactions JSON\n$json\n";
    }

    print "caching USDC transactions JSON\n";
    $json = fetchTransactions("USDC", $keyID, $keySecret);
    if(defined $json and $json =~ /"data"/){
      writeTransactionsCache("USDC", $json);
    }else{
      die "ERROR: missing/malformed USDC transactions JSON\n$json\n";
    }
  }else{
    die "ERROR: unknown command $command\n";
  }
}

sub fetchBTCToUSDExchangeRate(){
  my $out = `curl --silent $URL_EXCHANGE_RATE`;
  if($out =~ /"currency":"BTC","rates":\{[^}]*"USD":"(\d*\.\d*)"/){
    return $1;
  }else{
    die "ERROR: could not get exchange rate from $URL_EXCHANGE_RATE\n";
  }
}

sub fetchAccountInfo($$){
  my ($keyID, $keySecret) = @_;

  my $out = callCoinbaseAPI($keyID, $keySecret, "/v2/accounts");
  return $out;
}

sub fetchWalletID($$$){
  my ($currency, $keyID, $keySecret) = @_;
  my $out = callCoinbaseAPI($keyID, $keySecret, "/v2/accounts");
  my $uuidRegex = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}";
  if($out =~ /"id":"($uuidRegex)","name":"$currency Wallet"/){
    return $1;
  }else{
    die "ERROR: could not parse $currency wallet ID from coinbase output:\n$out\n";
  }
}

sub fetchTransactions($$$){
  my ($currency, $keyID, $keySecret) = @_;
  my $walletId = fetchWalletID($currency, $keyID, $keySecret);
  my $out = callCoinbaseAPI($keyID, $keySecret, "/v2/accounts/$walletId/transactions");
  return $out;
}

sub callCoinbaseAPI($$$){
  my ($keyID, $keySecret, $path) = @_;
  my $jwt = createJWT($keyID, $keySecret, $path);

  my @cmd = ("curl",
    "https://$API_HOST$path",
    "--silent",
    "--header", "Authorization: Bearer $jwt",
  );
  open CMD, "-|", @cmd or die "error running curl\n";
  my $out = join '', <CMD>;
  close CMD;

  return $out;
}

sub createJWT($$$){
  my ($keyID, $keySecret, $path) = @_;
  my $uri = "GET $API_HOST$path";
  open my $cmdH, "-|", "jwt-gen", $keyID, $keySecret, $uri
    or die "ERROR: cmd `jwt-gen` failed\n$!\n";
  my $jwt = join '', <$cmdH>;
  close $cmdH;
  chomp $jwt;

  if($jwt =~ /^[a-zA-Z0-9\-_\.]+$/){
    return $jwt;
  }else{
    die "ERROR: could not obtain jwt with `jwt-gen`\n";
  }
}

sub parseTransactionsJSON($){
  my ($json) = @_;
  my $obj = from_json $json;
  my @jsonTransactions = @{$$obj{data}};
  my @transactions;
  for my $j(@jsonTransactions){
    my $date = `date --date="$$j{created_at}" +%s`;
    chomp $date;

    die "ERROR: currency is not BTC\n$json" if $$j{amount}{currency} ne "BTC";
    die "ERROR: native currency is not USD\n$json" if $$j{native_amount}{currency} ne "USD";
    die "ERROR: could not parse date\n$json" if $date !~ /^\d+$/;

    my ($typeObj, $networkObj, $totalObj, $subtotalObj);
    $typeObj = $$j{$$j{type}};
    $networkObj = $$j{network};
    $totalObj = $$typeObj{total} if defined $typeObj and defined $$typeObj{total};
    $subtotalObj = $$typeObj{subtotal} if defined $typeObj and defined $$typeObj{subtotal};

    my ($usdNativeAmt, $usdTotal, $usdSubtotal);
    $usdNativeAmt = $$j{native_amount}{amount} if defined $$j{native_amount};
    $usdTotal = $$totalObj{amount} if defined $totalObj;
    $usdSubtotal = $$subtotalObj{amount} if defined $subtotalObj;

    my $btc = $$j{amount}{amount};

    my $t = {
      type => $$j{type},
      btc  => $btc,
      usd  => $usdNativeAmt,
      date => $date,
      desc => $$j{description},

      usd_per_btc => abs($usdNativeAmt / $btc),
      fee         => undef,
    };

    #special buy/sell types
    if($$t{type} =~ /^(trade|advanced_trade_fill)$/){
      if($$t{btc} < 0){
        $$t{type} = "sell";
      }else{
        $$t{type} = "buy";
      }
      $$t{desc} = join " ", grep {defined $_ and $_ ne ""} ($$j{type}, $$t{desc});
    }

    my $feeObj;
    if(defined $typeObj and defined $$typeObj{fee}){
      $feeObj = $$typeObj{fee};
    }elsif(defined $networkObj and defined $$networkObj{transaction_fee}){
      $feeObj = $$networkObj{transaction_fee};
    }

    if(defined $usdSubtotal and defined $usdTotal){
      $$t{fee} = abs($usdTotal - $usdSubtotal);
    }elsif(defined $feeObj){
      if($$feeObj{currency} eq "USD"){
        $$t{fee} = abs($$feeObj{amount});
      }elsif($$feeObj{currency} eq "BTC"){
        $$t{fee} = abs($$t{usd_per_btc} * $$feeObj{amount});
      }
    }elsif(defined $typeObj and defined $$typeObj{commission}){
      #advanced_trade_fill
      $$t{fee} = abs($$typeObj{commission});
    }

    push @transactions, $t;
  }
  return @transactions;
}

sub usdFmt($$){
  my ($len, $usd) = @_;
  my $signPrefix = $usd >= 0 ? "" : "-";
  $usd = $usd*-1 if $usd < 0;
  my $fmt = sprintf "%.2f", int($usd * 100.0 + 0.5) / 100.0;
  $fmt = "$signPrefix\$$fmt";
  return sprintf "%${len}s", $fmt;
}
sub btcFmt($$){
  my ($len, $btc) = @_;
  my $sign = $btc >= 0 ? "" : "-";
  $btc = $btc*-1 if $btc < 0;
  my $fmt = sprintf "%.8f BTC", $btc;
  $fmt = "$sign$fmt";
  $fmt = sprintf "%${len}s", $fmt;
  return $fmt;
}

sub readBalanceCache($){
  my ($currency) = @_;
  my $acctJSON = readLatestCacheValue($CACHE_ACCOUNTS_JSON_DIR);
  my $balance;
  if($acctJSON =~ /"balance":\{"amount":"(\d*\.\d*)","currency":"$currency"}/){
    $balance = $1;
  }else{
    die "ERROR: could not parse $currency balance from account info:\n$acctJSON\n";
  }
  return $balance;
}

sub readTransactionsCache($){
  my ($currency) = @_;
  my $cacheDir = $CACHE_TRANSACTIONS_JSON_DIR_PREFIX . lc($currency);
  return readLatestCacheValue($cacheDir);
}

sub writeTransactionsCache($$){
  my ($currency, $json) = @_;
  my $cacheDir = $CACHE_TRANSACTIONS_JSON_DIR_PREFIX . lc($currency);
  writeCacheValue($cacheDir, $json);
}

sub readLatestCacheValue($){
  my ($cacheDir) = @_;
  my @files = sort grep {-f $_} glob "$cacheDir/*";
  if(@files == 0){
    return undef;
  }
  my $cacheFile = $files[-1];
  open my $fh, "< $cacheFile" or die "ERROR: could not read $cacheFile\n$!\n";
  my $value = join '', <$fh>;
  close $fh;

  $value =~ s/[\r\n]+$//;

  return $value;
}
sub writeCacheValue($$){
  my ($cacheDir, $value) = @_;

  my $prevCacheValue = readLatestCacheValue($cacheDir);
  if(defined $prevCacheValue and $prevCacheValue eq $value){
    print "  skipping unchanged cache\n";
    return;
  }

  system "mkdir", "-p", $cacheDir if not -d $cacheDir;
  die "ERROR: failed to create $cacheDir\n" if not -d $cacheDir;

  my $dtm = getCurrentTimeYMDHMSMillis();
  my $cacheFile = "$cacheDir/$dtm";
  die "ERROR: duplicate cache entry $cacheFile\n" if -e $cacheFile;

  open my $fh, "> $cacheFile" or die "ERROR: could not write $cacheFile\n$!\n";
  print $fh "$value\n";
  close $fh;

  if($value ne readLatestCacheValue($cacheDir)){
    die "ERROR: failed to write cache $cacheDir\n";
  }else{
    print "  success\n";
  }
}

sub readCoinbaseKeyIDAndSecret(){
  my $conf = readSecrets();
  my ($keyID, $keySecret);
  $keyID = $$conf{"$API_KEY_NAME.key_id"};
  $keySecret = $$conf{"$API_KEY_NAME.key_secret"};

  if(not defined $keyID){
    die "could not find 'coinbase.api.$API_KEY_NAME.key_id\n";
  }
  if(not defined $keySecret){
    die "could not find 'coinbase.api.$API_KEY_NAME.key_secret\n";
  }

  return ($keyID, $keySecret);
}

sub readSecrets(){
  my @lines = `cat $SECRETS_FILE 2>/dev/null`;
  my $cfg = {};
  for my $line(@lines){
    if($line =~ /^coinbase\.api\.(.+\.(?:key_id|key_secret))=(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort keys %$cfg){
    $$cfg{$key} = decrypt $$cfg{$key};
  }
  return $cfg;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

sub getCurrentTimeYMDHMSMillis(){
  my $dtm = `date '+%Y-%m-%d_%H%M%S_%s%3N'`;
  chomp $dtm;
  if($dtm !~ /^\d\d\d\d-\d\d-\d\d_\d\d\d\d\d\d_\d+$/){
    die "ERROR: malformed date/time $dtm\n";
  }
  return $dtm;
}

&main(@ARGV);
