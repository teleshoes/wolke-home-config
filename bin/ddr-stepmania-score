#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub getScoreDataByXmlFile($);
sub formatScoreData($$);
sub getSongAbsDir($);
sub getSMFileFromSongDir($);
sub parseXmlFile($);
sub parseSMFile($);
sub parseNoteSetStats($);
sub gameDiffKey($$);
sub getFCValue($);
sub getScoreDDRA($$);
sub getOldestXmlFileAfterMtime($);
sub assertMtimesCloseEnough($$$$);

sub getSongNameWithZeniusTool($);

sub readFile($);
sub listDirFiles($);
sub mtime($);
sub allFilesExist(@);
sub chunkArr($@);

my $XML_FILE_PATTERN = "$ENV{HOME}/.stepmania-*/Save/Upload/*.xml";
my $SONGS_PARENT_DIR = "$ENV{HOME}/.stepmania-5.0";

my $ZENIUS_TOOL = "zenius-ddrsonglist";

my $DDRNAME_TOOL = "ddrname";
my @DDRNAME_OPTS = qw(--no-check-orientation --no-banner-flash);
my $DDRNAME_MACHINE = "sm53pdp";
my $DDRNAME_STAGE = "0none";
my $DDRNAME_BAR = "bar";

my $XML_MTIME_DIFF_WARNING_SECONDS = 90; #warn if image file and XML file mtimes diff is greater
my $XML_MTIME_DIFF_ERROR_SECONDS = 600; #FAIL if image file and XML file mtimes diff is greater

#song-name-id overrides to use instead of zenius
my $SONG_NAME_IDS_BY_SONG_DIR_SUFFIX = {
  #zenius-generated songs with song-dirs that dont match DDR
  "DDR_16_A/Cirno's Perfect Math Class"                    => "cirno-no-perfect-sansuu-kyoushitsu",
  "DDR_16_A/Night of knights"                              => "night-of-nights",
  "DDR_10_Supernova2/SUNKiSS DROP~Alison Side~"            => "sunkiss-drop",

  #custom/stepmania songs with too-long/unclear/duplicate auto-generated song-name-ids
  "ani/Zetsubou Billy [Death Note 2nd Ending] [neothe0ne]" => "zetsubou-billy-death-note",
  "ani/The WORLD - Death Note 1st OP [Asahina-san]"        => "the-world-death-note",
  "otakus_dream_pad_mix_02/(Huzure) Hacking to the Gate (Steins Gate)",
      => "hacking-to-the-gate-huzure",
  "vid/Super Mario Bros"                                   => "super-mario-bros-behemoth",
};
my $FMT_HARDCODED_SONG_NAME_IDS = join "\n        ", map {join " ", @$_}
  chunkArr(3, sort values %$SONG_NAME_IDS_BY_SONG_DIR_SUFFIX);

my $SM_DDRA_DIFF_ARR = [
  ["Beginner"  => "beginner"],
  ["Easy"      => "basic"],
  ["Medium"    => "difficult"],
  ["Hard"      => "expert"],
  ["Expert"    => "challenge"],
  ["Challenge" => "challenge"],
];
my $DDRA_DIFFICULTIES_BY_STEPMANIA_DIFFICULTY = {map {$$_[0] => $$_[1]} @$SM_DDRA_DIFF_ARR};
my @STEPMANIA_DIFFICULTIES = map {$$_[0]} @$SM_DDRA_DIFF_ARR;

my $SM_DDRA_GAMES_ARR = [
  ["dance-single" => "singles"],
  ["dance-double" => "doubles"],
  ["dance-solo"   => undef],
  ["dance-couple" => undef],
  ["pump-single"  => undef],
  ["pump-double"  => undef],
];
my $DDRA_GAMES_BY_STEPMANIA_GAME = {map {$$_[0] => $$_[1]} @$SM_DDRA_GAMES_ARR};
my @STEPMANIA_GAMES = map {$$_[0]} @$SM_DDRA_GAMES_ARR;

my $SEP = "="x50;

my $COMMAND_PRINT = "print";
my $COMMAND_DDRNAME = "ddrname";

my $SCORE_FILE_MODE_BY_FILE_EXT = "by-file-ext";
my $SCORE_FILE_MODE_DIRECT_XML = "direct-xml";
my $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME = "closest-by-mtime";

my $FILENAME_PRINT_MODE_MULTIPLE_ONLY = "multiple-only";
my $FILENAME_PRINT_MODE_ALWAYS = "always";
my $FILENAME_PRINT_MODE_NEVER = "never";

my $DEFAULT_FORMAT_SPEC = ""
  . "%SEP\n"
  . "XML_FILE:        %XML_FILE\n"
  . "SONG_DIR:        %SONG_DIR\n"
  . "SONG_NAME:       %SONG_NAME\n"
  . "PASS_FAIL:       %PASS_FAIL\n"
  . "DDRA_SCORE:      %DDRA_SCORE\n"
  . "PERCENT_SCORE:   %PERCENT_SCORE\n"
  . "FC:              %FC\n"
  . "DDRA_GAME:       %DDRA_GAME\n"
  . "DDRA_DIFFICULTY: %DDRA_DIFFICULTY\n"
  . "MODS:            %MODS\n"
  . "SM_FEET:         %SM_FEET\n"
  . "SM_RADAR:        %SM_RADAR\n"
  . "%SEP\n"
  ;

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] [COMMAND] FILE [FILE ..]
    for each FILE:
      (A) print FILE, if more than one FILE is given (or --filenames is given)
      (B) obtain XML_SCORE_FILE
        (i) if FILE ends in .xml (or --xml is gven)
            -use FILE as XML_SCORE_FILE
            -obtain SCORE_DATA from XML_SCORE_FILE
        (ii) if FILE ends in .jpg or .png (or --img is given):
             -use FILE as IMG_FILE
             -take all XML score file matching $XML_FILE_PATTERN
             -ignore any XML files with mtime after IMG_FILE mtime
             -of the remaining, select the oldest file as XML_SCORE_FILE
      (C) obtain SCORE_DATA from XML_SCORE_FILE (see SCORE_DATA)
      (D) perform COMMAND
        (i) if COMMAND is --print (this is the default):
            -print SEPARATOR line
            -print each SCORE_DATA item, one per line
              -formatted: 'ITEM_NAME:   ITEM_VALUE'
              -align ITEM_VALUE whitespace
            -print SEPARATOR line
        (ii) if COMMAND is --ddrname:
             -make system call:
                 $DDRNAME_TOOL \\
                   IMG_SCORE_FILE \\
                   @DDRNAME_OPTS \\
                   $DDRNAME_MACHINE \\
                   $DDRNAME_STAGE \\
                   SONG_NAME \\
                   PASS_FAIL \\
                   DDRA_SCORE \\
                   FC \\
                   DDRA_GAME \\
                   DDRA_DIFFICULTY \\
                 ;

  SCORE_DATA
    (1) parse stepmania XML_SCORE_FILE, and obtain: SONG_DIR TIMING_DATA PASS_FAIL SM_GAME SM_DIFF
        -SONG_DIR is relative to the dir the stepmania exec is in, and always starts with Songs/
        -TIMING_DATA includes values like: FLAWLESS PERFECT GREAT GOOD OK
        -PASS_FAIL is 'failed' if grade is failed, and 'passed' otherwise
        -SM_GAME is 'StepsType' att of <Steps> in the XML and contains a value like 'dance-single'
        -SM_DIFF is 'Difficulty' att of <Steps> in the XML and contains a value like 'Hard'
        -PERCENT_SCORE is 'PercentDP' (which is a ratio) times 100%
        -MODS is the modifiers-string (stored as a comma-separated list of mods in the xml)
    (2) parse SONG_NAME out of SONG_DIR, using $ZENIUS_TOOL
        -extract BASENAME_SONG_DIR (the last element of the SONG_DIR path, not including group name)
        -run `$ZENIUS_TOOL --extract-name-id BASENAME_SONG_DIR`
        -override this value for certain hardcoded SONG_DIR values
        -the following SONG_NAME values have hardcoded SONG_DIR values:
          $FMT_HARDCODED_SONG_NAME_IDS
    (3) parse SM_GAME/SM_DIFF into DDRA_GAME / DDRA_DIFFICULTY using hardcoded transforms
    (4) locate the stepmania SIMFILE (*.sm or *.ssc) in $SONGS_PARENT_DIR/<SONG_DIR>/*.*
    (5) parse the SIMFILE:
        -parse all games/difficulties, but ignore all except SM_GAME/SM_DIFF
        -for SM_GAME/SM_DIFF, parse:
          -DDR_HOLD_ROW_COUNTS is DDRA-style count of number of rows with holds (single/multi arrow)
            -stepmania counts multi-arrow holds as multiple holds, DDR as single holds
          -DDR_TAP_ROW_COUNTS is DDRA-style count of number of rows with taps (single/multi arrow)
            -same as TIMING_DATA; both DDR and stepmania count multi-arrow taps as single taps
          -SM_FEET is the hard-coded numeric complexity level of the SM_GAME/SM_DIFF
          -SM_RADAR is the hard-coded set of numbers representing things like stream/voltage/air/etc
    (6) calculate DDRA_SCORE score using TIMING_DATA and DDR_TAP_ROW_COUNTS/DDR_HOLD_ROW_COUNTS
        -calculate the ratio of successful holds:
          -get OK/LETGO/MISSED holds from TIMING_DATA
          -calculate the SM_HOLD_SUCCESS_RATIO: OK-holds divided by (LETGO-holds + MISSED-holds)
        -estimate the number of successful holds there would have been in DDR:
          -multiply SM_HOLD_SUCCESS_RATIO by DDR_HOLD_ROW_COUNTS to obtain ADJUSTED_OK_HOLD_COUNT
        -calculate the DDRA_SCORE as follows:
          -STEP = 1000000 / (DDR_TAP_ROW_COUNTS + DDR_HOLD_ROW_COUNTS)
          -DDRA_UNROUNDED_SCORE = 0
              + ADJUSTED_OK_HOLD_COUNT * STEP
              + FLAWLESS               * (STEP)
              + PERFECT                * (STEP-10)
              + GREAT                  * (STEP*0.6 - 10)
              + GOOD                   * (STEP*0.2 - 10)
          -DDRA_SCORE = floor(DDRA_UNROUNDED_SCORE/10)*10
    (7) calculate FC value from TIMING_DATA/PASS_FAIL:
        -'nofc' if PASS_FAIL is 'failed', or any hit mines, or any LETGO/MISSED holds
        -'nofc' if any BAD/MISS taps
        -'gfc'  if any GOOD taps       (only FLAWLESS/PERFECT/GREAT/GOOD taps, no BAD/MISS)
        -'fc'   if any GREAT taps      (only FLAWLESS/PERFECT/GREAT taps, no BAD/MISS/GOOD)
        -'pfc'  if any PERFECT taps    (only FLAWLESS/PERFECT taps, no BAD/MISS/GOOD/GREAT)
        -'mfc'  if any FLAWLESS taps   (only FLAWLESS taps, no BAD/MISS/GOOD/GREAT/PERFECT)
    (8) include the following SCORE_DATA_ITEM items in SCORE_DATA:
        -XML_FILE
        -SONG_DIR
        -SONG_NAME
        -PASS_FAIL
        -DDRA_SCORE
        -PERCENT_SCORE
        -FC
        -DDRA_GAME
        -DDRA_DIFFICULTY
        -MODS
        -SM_FEET
        -SM_RADAR

  COMMAND
    --print
      format and print SCORE_DATA for each FILE passed in
      (this is the default if no command is given)
    --ddrname
      call `$DDRNAME_TOOL` with SCORE_DATA info on each FILE passed in

  SEPARATOR
    the string: $SEP

  OPTS
    --xml
      treat all FILE args as XML_SCORE_FILE files, regardless of filename
      FILE is parsed directly as XML_SCORE_FILE, without reading mtimes
    --img | --image | --closest-by-mtime
      treat all FILE args as IMG_FILE
      mtime of IMG_FILE is used to obtain the XML_SCORE_FILE

    --filename | --filenames
      always print FILE before parsing scoredata
      (default is to print only if more than one FILE given)
    --no-filename | --nofilename | --no-filenames | --nofilenames
      never print FILE before parsing scoredata
      (default is to print only if more than one FILE given)

    --format=FORMAT_SPEC
      instead of printing one item per line in SCORE_DATA surrounded by the SEP,
      print given format
      FORMAT_SPEC can be any string, with the following replacements:
        %%               = a literal % character
        %n               = a newline character (\\n)
        %SEP             = the SEPARATOR
        %SCORE_DATA_ITEM = replaced with the value from SCORE_DATA (e.g.: %PASS_FAIL)
";

sub main(@){
  my $cmd = $COMMAND_PRINT;
  my @files;
  my $scoreFileMode = $SCORE_FILE_MODE_BY_FILE_EXT;
  my $filenamePrintMode = $FILENAME_PRINT_MODE_MULTIPLE_ONLY;
  my $formatSpec = $DEFAULT_FORMAT_SPEC;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--print)$/i){
      $cmd = $COMMAND_PRINT;
    }elsif($arg =~ /^(--ddrname)$/i){
      $cmd = $COMMAND_DDRNAME;
    }elsif($arg =~ /^(--xml)$/i){
      $scoreFileMode = $SCORE_FILE_MODE_DIRECT_XML;
    }elsif($arg =~ /^(--img|--image|--closest-by-mtime)$/i){
      $scoreFileMode = $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME;
    }elsif($arg =~ /^(--filenames?)$/i){
      $filenamePrintMode = $FILENAME_PRINT_MODE_ALWAYS;
    }elsif($arg =~ /^(--no-filenames?|--nofilenames?)$/i){
      $filenamePrintMode = $FILENAME_PRINT_MODE_NEVER;
    }elsif($arg =~ /^--format=(.+)$/i){
      $formatSpec = $1;
    }elsif(-f $arg){
      push @files, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  for my $file(@files){
    my $mode;
    if($scoreFileMode eq $SCORE_FILE_MODE_BY_FILE_EXT){
      if($file =~ /\.xml$/i){
        $mode = $SCORE_FILE_MODE_DIRECT_XML;
      }elsif($file =~ /\.(png|jpg|jpeg)$/i){
        $mode = $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME;
      }else{
        die "ERROR: unknown file type $file\n";
      }
    }else{
      $mode = $scoreFileMode;
    }

    my $xmlFile;
    if($mode eq $SCORE_FILE_MODE_DIRECT_XML){
      $xmlFile = $file;
    }elsif($mode eq $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME){
      $xmlFile = getOldestXmlFileAfterMtime mtime($file);
      assertMtimesCloseEnough($file, $xmlFile,
        $XML_MTIME_DIFF_WARNING_SECONDS, $XML_MTIME_DIFF_ERROR_SECONDS);
    }else{
      die "ERROR: unknown SCORE_FILE_MODE: $mode\n";
    }

    my $sd = getScoreDataByXmlFile($xmlFile);

    if($cmd eq $COMMAND_PRINT){
      my $printFilename;
      if($filenamePrintMode eq $FILENAME_PRINT_MODE_ALWAYS){
        $printFilename = 1;
      }elsif($filenamePrintMode eq $FILENAME_PRINT_MODE_NEVER){
        $printFilename = 0;
      }elsif($filenamePrintMode eq $FILENAME_PRINT_MODE_MULTIPLE_ONLY){
        $printFilename = @files > 1;
      }else{
        die "ERROR: unknown FILENAME_PRINT_MODE: $filenamePrintMode\n";
      }

      if($printFilename){
        print "$file\n";
      }
      print formatScoreData($formatSpec, $sd);
    }elsif($cmd eq $COMMAND_DDRNAME){
      my @cmd = ($DDRNAME_TOOL,
        $file,
        @DDRNAME_OPTS,
        $DDRNAME_MACHINE,
        $DDRNAME_STAGE,
        $DDRNAME_BAR,
        $$sd{songName},
        $$sd{passFail},
        $$sd{ddraScore},
        $$sd{fc},
        $$sd{ddraGame},
        $$sd{ddraDifficulty},
      );
      print "$SEP\n";
      print "@cmd\n";
      system @cmd;
      my $exitCode = $?;
      print "$SEP\n";
      if($exitCode != 0){
        die "ERROR: $DDRNAME_TOOL failed for $file\n";
      }
    }else{
      die "$usage\nERROR: unknown command $cmd\n";
    }
  }
}

sub getScoreDataByXmlFile($){
  my ($xmlFile) = @_;

  my $xmlInfo = parseXmlFile $xmlFile;
  my $songDir = getSongAbsDir $$xmlInfo{songDir};
  my $gameDiffKey = gameDiffKey($$xmlInfo{game}, $$xmlInfo{difficulty});
  my $smFile = getSMFileFromSongDir $songDir;
  my $songInfo = parseSMFile $smFile;
  my $songStats = $$songInfo{$gameDiffKey}{stats};
  die "ERROR: $gameDiffKey is not defined in $songDir/$smFile\n" if not defined $songStats;

  my $songName = getSongNameWithZeniusTool $songDir;
  my $ddraScore = getScoreDDRA($xmlInfo, $songStats);
  my $fc = getFCValue($xmlInfo);

  return {
    xmlFile        => $xmlFile,
    songDir        => $songDir,
    songName       => $songName,
    passFail       => $$xmlInfo{passFail},
    ddraScore      => $ddraScore,
    percentScore   => $$xmlInfo{percentScore},
    fc             => $fc,
    ddraGame       => $$DDRA_GAMES_BY_STEPMANIA_GAME{$$xmlInfo{game}},
    ddraDifficulty => $$DDRA_DIFFICULTIES_BY_STEPMANIA_DIFFICULTY{$$xmlInfo{difficulty}},
    mods           => $$xmlInfo{mods},
    smFeet         => $$songInfo{$gameDiffKey}{feet},
    smRadar        => $$songInfo{$gameDiffKey}{radar},
  };
}

sub formatScoreData($$){
  my ($formatSpec, $sd) = @_;

  my $s = $formatSpec;
  $s =~ s/&/&amp;/g;
  $s =~ s/%%/&boing;/g;

  $s =~ s/%n/\n/g;
  $s =~ s/%SEP/$SEP/g;

  $s =~ s/%XML_FILE/$$sd{xmlFile}/g;
  $s =~ s/%SONG_DIR/$$sd{songDir}/g;
  $s =~ s/%SONG_NAME/$$sd{songName}/g;
  $s =~ s/%PASS_FAIL/$$sd{passFail}/g;
  $s =~ s/%DDRA_SCORE/$$sd{ddraScore}/g;
  $s =~ s/%PERCENT_SCORE/$$sd{percentScore}/g;
  $s =~ s/%FC/$$sd{fc}/g;
  $s =~ s/%DDRA_GAME/$$sd{ddraGame}/g;
  $s =~ s/%DDRA_DIFFICULTY/$$sd{ddraDifficulty}/g;
  $s =~ s/%MODS/$$sd{mods}/g;
  $s =~ s/%SM_FEET/$$sd{smFeet}/g;
  $s =~ s/%SM_RADAR/$$sd{smRadar}/g;

  $s =~ s/&boing;/%/g;
  $s =~ s/&amp;/&/g;

  return $s;
}

sub getSongAbsDir($){
  my ($songRelDir) = @_;
  my $songDir = "$SONGS_PARENT_DIR/$songRelDir";
  $songDir =~ s/\/$//;
  if(not -d $songDir){
    die "ERROR: \"$songDir\" is not a dir\n";
  }
  return $songDir;
}

sub getSMFileFromSongDir($){
  my ($songDir) = @_;
  my @smFiles = grep {$_ =~ /\.(ssc|sm)$/} listDirFiles $songDir;
  die "ERROR: could not find SSC or SM file in $songDir\n" if @smFiles == 0;
  return $smFiles[0];
}

sub parseXmlFile($){
  my ($xmlFile) = @_;
  my $xml = readFile $xmlFile;

  my $num = '(?:\d+|\d*\.\d+)';
  my $int = '\d+';

  my $info = {};
  $$info{songDir} = $1        if $xml =~ /<Song Dir=['"]([^'"]+)['"]\/>/;
  $$info{difficulty} = $1     if $xml =~ /<Steps.* Difficulty=['"]([^'"]+).*\/>/;
  $$info{game} = $1           if $xml =~ /<Steps.* StepsType=['"]([^'"]+).*\/>/;
  $$info{mods} = $1           if $xml =~ /<Modifiers>(.*)<\/Modifiers>/;

  $$info{grade} = $1          if $xml =~ /<Grade>(.*)<\/Grade>/;
  $$info{percentDP} = $1      if $xml =~ /<PercentDP>($num)<\/PercentDP>/;
  $$info{surviveSeconds} = $1 if $xml =~ /<SurviveSeconds>($num)<\/SurviveSeconds>/;
  $$info{maxCombo} = $1       if $xml =~ /<MaxCombo>($int)<\/MaxCombo>/;

  $$info{mineOk} = $1         if $xml =~ /<AvoidMine>($int)<\/AvoidMine>/;
  $$info{mineHit} = $1        if $xml =~ /<HitMine>($int)<\/HitMine>/;

  $$info{holdOk} = $1         if $xml =~ /<Held>($int)<\/Held>/;
  $$info{holdLetGo} = $1      if $xml =~ /<LetGo>($int)<\/LetGo>/;
  $$info{holdMissed} = $1     if $xml =~ /<MissedHold>($int)<\/MissedHold>/;

  $$info{flawless} = $1       if $xml =~ /<W1>($int)<\/W1>/;
  $$info{perfect} = $1        if $xml =~ /<W2>($int)<\/W2>/;
  $$info{great} = $1          if $xml =~ /<W3>($int)<\/W3>/;
  $$info{good} = $1           if $xml =~ /<W4>($int)<\/W4>/;
  $$info{bad} = $1            if $xml =~ /<W5>($int)<\/W5>/;
  $$info{miss} = $1           if $xml =~ /<Miss>($int)<\/Miss>/;

  for my $key(sort keys %$info){
    my ($val) = $$info{$key};
    $val =~ s/&lt;/</g;
    $val =~ s/&apos;/'/g;
    $val =~ s/&amp;/&/g;
    $$info{$key} = $val;
  }

  my @requiredAtts = qw(
    songDir difficulty game grade percentDP
    holdOk holdLetGo holdMissed
    flawless perfect great good bad miss
  );

  for my $att(@requiredAtts){
    die "ERROR: could not parse '$att' in $xmlFile\n" if not defined $$info{$att};
  }

  if(defined $$info{percentDP}){
    #percentDP is a ratio in the XML...
    $$info{percentScore} = sprintf("%.2f", ($$info{percentDP} * 100.0)) . "%";
  }

  $$info{passFail} = $$info{grade} =~ /failed/i ? "failed" : "passed";

  return $info;
}

sub parseSMFile($){
  my ($smFile) = @_;
  my $sm = readFile $smFile;
  my $noteSets = {};

  my $reGames = join "|", @STEPMANIA_GAMES;
  my $reDiffs = join "|", @STEPMANIA_DIFFICULTIES;

  #SM files
  while($sm =~ /
    \#NOTES                  \s*:\s*
    (?<game>$reGames)        \s*:\s*
    [^:]*?                   \s*:\s*
    (?<difficulty>$reDiffs)  \s*:\s*
    (?<feet>\d+)             \s*:\s*
    (?<radar>[^;]*?)         \s*:\s*
    (?<notes>[^;]+?)         ;
  /gsxi){
    my $gameDiffKey = gameDiffKey($+{game}, $+{difficulty});
    $$noteSets{$gameDiffKey} = {%+};
  }

  #SSC files
  my @sscNoteSets = $sm =~ /\#NOTEDATA\s*:.*?#NOTES\s*:[^;]*;/gsi;
  for my $noteSet(@sscNoteSets){
    my $info = {};
    $$info{game} = $1       if $noteSet =~ /\#STEPSTYPE    \s*:\s*   ($reGames)   \s*;\s*/sxi;
    $$info{difficulty} = $1 if $noteSet =~ /\#DIFFICULTY   \s*:\s*   ($reDiffs)   \s*;\s*/sxi;
    $$info{feet} = $1       if $noteSet =~ /\#METER        \s*:\s*   (\d+)        \s*;\s*/sxi;
    $$info{radar} = $1      if $noteSet =~ /\#RADARVALUES  \s*:\s*   ([^;]+)      \s*;\s*/sxi;
    $$info{notes} = $1      if $noteSet =~ /\#NOTES        \s*:\s*   ([^;]+)      \s*;\s*/sxi;

    die "ERROR: missing STEPSTYPE from $smFile $noteSet\n" if not defined $$info{game};
    die "ERROR: missing DIFFICULTY from $smFile\n" if not defined $$info{difficulty};
    die "ERROR: missing NOTES from $smFile\n" if not defined $$info{notes};

    my $gameDiffKey = gameDiffKey($$info{game}, $$info{difficulty});
    $$noteSets{$gameDiffKey} = $info;
  }

  my $gameDiffKeyCount = keys %$noteSets;
  if($gameDiffKeyCount == 0){
    die "ERROR: could not parse any note sets in $smFile\n";
  }

  for my $game(@STEPMANIA_GAMES){
    for my $diff(@STEPMANIA_DIFFICULTIES){
      my $gameDiffKey = gameDiffKey($game, $diff);
      if(defined $$noteSets{$gameDiffKey}){
        my $stats = parseNoteSetStats $$noteSets{$gameDiffKey}{notes};
        $$noteSets{$gameDiffKey}{stats} = $stats;
      }
    }
  }

  return $noteSets;
}

sub parseNoteSetStats($){
  my ($noteSetText) = @_;
  my @lines = split /[\r\n]+/, $noteSetText;
  my @noteRows;
  for my $line(@lines){
    my $row = $line;

    $row =~ s/\/\/.*//;                   #remove comments
    $row =~ s/F/0/g;                      #remove fakes
    next if $row =~ /^0+$/;               #ignore empty rows
    next if $row !~ /^[01234MLFAKNH]+$/;  #ignore rows that do not contain only note-chars

    push @noteRows, $row;
  }

  my $stats = {
    totalNoteRows  => 0,
    holdRows       => 0,
    jumpRows       => 0,
    taps           => 0,
    holds          => 0,
    rolls          => 0,
    mines          => 0,
  };
  for my $row(@noteRows){
    if($row =~ /[124]/){
      $$stats{totalNoteRows}++;
    }
    if($row =~ /[2]/){
      $$stats{holdRows}++;
    }
    if($row =~ /[124].*[124]/){
      $$stats{jumpRows}++;
    }
    $$stats{taps}  += $row =~ /1/;
    $$stats{holds} += $row =~ /2/;
    $$stats{rolls} += $row =~ /4/;
    $$stats{mines} += $row =~ /M/;
  }
  return $stats;
}

sub gameDiffKey($$){
  my ($game, $diff) = @_;
  return lc "$game-$diff";
}

sub getFCValue($){
  my ($xmlInfo) = @_;

  my $fc;

  if($$xmlInfo{passFail} =~ /failed/i){
    $fc = undef;
  }if($$xmlInfo{holdLetGo} > 0 or $$xmlInfo{holdMissed} > 0){
    $fc = undef;
  }elsif($$xmlInfo{mineHit} > 0){
    $fc = undef;
  }elsif($$xmlInfo{miss} > 0 or $$xmlInfo{bad} > 0){
    $fc = undef;
  }elsif($$xmlInfo{good} > 0){
    $fc = "gfc";
  }elsif($$xmlInfo{great} > 0){
    $fc = "fc";
  }elsif($$xmlInfo{perfect} > 0){
    $fc = "pfc";
  }elsif($$xmlInfo{flawless} > 0){
    $fc = "mfc";
  }else{
    $fc = undef;
  }

  $fc = "nofc" if not defined $fc;

  return $fc;
}

sub getScoreDDRA($$){
  my ($xmlInfo, $songStats) = @_;
  my $step = 1000000 / ($$songStats{totalNoteRows}+$$songStats{holdRows});

  my $xmlHoldsOk = $$xmlInfo{holdOk};
  my $xmlHoldsTotal = ($$xmlInfo{holdOk} + $$xmlInfo{holdLetGo} + $$xmlInfo{holdMissed});
  my $xmlHoldsRatio = $xmlHoldsTotal == 0 ? 0 : $xmlHoldsOk / $xmlHoldsTotal;

  my $adjustedHolds = int($$songStats{holdRows} * $xmlHoldsRatio);

  my $score = 0;
  $score += $adjustedHolds      * $step;
  $score += $$xmlInfo{flawless} * $step;
  $score += $$xmlInfo{perfect}  * ($step-10);
  $score += $$xmlInfo{great}    * (($step*0.6)-10);
  $score += $$xmlInfo{good}     * (($step*0.2)-10);
  $score = int($score/10) * 10;
  return $score;
}

sub getOldestXmlFileAfterMtime($){
  my ($targetMtime) = @_;

  my @xmlFiles = glob $XML_FILE_PATTERN;
  my %mtimes = map {$_ => mtime $_} @xmlFiles;
  @xmlFiles = sort {$mtimes{$a} <=> $mtimes{$b}} @xmlFiles;

  my $closestXmlFile;
  for my $xmlFile(@xmlFiles){
    my $xmlMtime = $mtimes{$xmlFile};
    if($targetMtime < $xmlMtime){
      last;
    }
    $closestXmlFile = $xmlFile;
  }

  return $closestXmlFile;
}

sub assertMtimesCloseEnough($$$$){
  my ($file1, $file2, $warningMtimeDiffS, $errorMtimeDiffS) = @_;
  my $mtime1 = mtime $file1;
  my $mtime2 = mtime $file2;

  my $mtimeDiff = $mtime1 - $mtime2;
  $mtimeDiff = 0-$mtimeDiff if $mtimeDiff < 0;

  if($mtimeDiff > $errorMtimeDiffS){
    die sprintf "\n\nERROR: mtime is more than %ds (%ds) away\n  %s\n  vs\n  %s\n",
      $errorMtimeDiffS, $mtimeDiff, $file1, $file2;
  }elsif($mtimeDiff > $warningMtimeDiffS){
    printf "\n\nWARNING: mtime is more than %ds (%ds) away\n  %s\n  vs\n  %s\n",
      $warningMtimeDiffS, $mtimeDiff, $file1, $file2;
  }
}

sub getSongNameWithZeniusTool($){
  my ($songDir) = @_;
  for my $songDirSuffix(sort keys %$SONG_NAME_IDS_BY_SONG_DIR_SUFFIX){
    if($songDir =~ /(^|\/)\Q$songDirSuffix\E\/*$/){
      return $$SONG_NAME_IDS_BY_SONG_DIR_SUFFIX{$songDirSuffix};
    }
  }
  my $subDir = $songDir;
  $subDir =~ s/\/+$//g;
  $subDir =~ s/.*\///;
  open CMD, "-|", $ZENIUS_TOOL, "--extract-name-id", $subDir;
  my $songName = join '', <CMD>;
  close CMD;
  chomp $songName;
  if($songName =~ /^[a-z0-9\-]+$/){
    return $songName;
  }else{
    die "ERROR: could not extract song name from song dir: $songDir\n";
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n";
  my $contents = join '', <FH>;
  close FH;
  return $contents;
}

sub listDirFiles($){
  my ($dir) = @_;
  opendir(my $dh, $dir) or die "ERROR: could not read dir $dir\n$!\n";
  my @files = readdir($dh);
  closedir($dh);
  $dir =~ s/\/?$//;
  @files = map {"$dir/$_"} @files;
  @files = grep {-f $_} @files;
  return @files;
}

sub mtime($){
  my @stat = stat $_[0];
  return $stat[9];
}

sub allFilesExist(@){
  for my $file(@_){
    return 0 if not -f $file;
  }
  return 1;
}

sub chunkArr($@){
  my ($chunkSize, @arr) = @_;
  my @chunkArr;
  my $chunk = undef;
  for my $elem(@arr){
    if(defined $chunk and @$chunk >= $chunkSize){
      $chunk = undef;
    }
    if(not defined $chunk){
      $chunk = [];
      push @chunkArr, $chunk;
    }
    push @$chunk, $elem;
  }
  return @chunkArr;
}

&main(@ARGV);
