#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw(min max);

my $numLen = 3;

sub addFilesToLib($);
sub removeFilesFromLib($);
sub ensureLibFilesInPlaylist($);
sub syncKlomp($);
sub copyNum($$);
sub removeNum($$);
sub getAllNums($);
sub getLibNums($);
sub getPlaylistNums($);
sub getHistoryNums($);
sub getKlompInfoNums($$$);
sub getFiles($$);
sub getCurPlaylist($);
sub setPlaylist($$);
sub getRemoteCmd($);
sub elem($@);
sub run(@);

my $serials = [
  {
    ipmagic       => "sx",
    ipmagicUser   => "nemo",
    playlist      => "books",
    album         => "PodCastle",
    srcLib        => "books",
    destLib       => "b",
    srcRelPath    => "PodCastle",
    destRelPath   => "podcastle",
    minFutureSize => 20,
    maxLibInHist  => 10,
  },
  {
    ipmagic       => "sx",
    ipmagicUser   => "nemo",
    playlist      => "books",
    album         => "Escape Pod",
    srcLib        => "books",
    destLib       => "b",
    srcRelPath    => "Escape Pod",
    destRelPath   => "escapepod",
    minFutureSize => 20,
    maxLibInHist  => 10,
  },
];

sub main(@){
  for my $serial(@$serials){
    print "\n\n==============PROCESSING serial $$serial{album}\n";

    if(defined $$serial{ipmagic}){
      run "ipmagic", $$serial{ipmagic}, "-s", "hostname";
      if($? != 0){
        print STDERR "ipmagic to $$serial{ipmagic} failed\n";
        next;
      }
    }

    print "\nset playlist to $$serial{playlist}\n";
    my $origPlaylist = getCurPlaylist $serial;
    setPlaylist $serial, $$serial{playlist};

    print "\nadding files\n";
    my $filesAdded = addFilesToLib $serial;

    print "\nremoving files\n";
    my $filesRemoved = removeFilesFromLib $serial;

    print "\nklomp-sync\n";
    if($filesAdded or $filesRemoved){
      syncKlomp $serial;
    }else{
      print "  skip klomp-sync, no files added/removed\n";
    }

    print "\nadd to playlist\n";
    ensureLibFilesInPlaylist $serial;

    print "\nreset playlist to $origPlaylist\n";
    setPlaylist $serial, $origPlaylist;
  }
}

sub addFilesToLib($){
  my ($serial) = @_;

  my @allNums = getAllNums $serial;
  my @libNums = getLibNums $serial;
  my @historyNums = getHistoryNums $serial;
  my @playlistNums = getPlaylistNums $serial;

  my @libNumsNotInHistory = grep {not elem $_, @historyNums} @libNums;

  my $maxHistoryNum = max @historyNums;
  my $minPlaylistNum = min @playlistNums;

  my @numsAvailToAdd =
    grep {not elem($_, @historyNums) and not elem($_, @libNums)}
    grep {not defined $maxHistoryNum or $_ > $maxHistoryNum}
    grep {not defined $minPlaylistNum or $_ > $minPlaylistNum}
    @allNums;

  my @numsToAdd;
  while(@libNumsNotInHistory + @numsToAdd < $$serial{minFutureSize}){
    if(@numsAvailToAdd == 0){
      print STDERR "  WARNING: not enough files available to add to lib\n";
      last;
    }
    my $nextNum = shift @numsAvailToAdd;
    push @numsToAdd, $nextNum;
  }

  if(@historyNums == 0){
    print "  skipping add files (out of date, no files in history)\n";
    return 0;
  }

  if(@numsToAdd > 0){
    print "  ADDING " . @numsToAdd . " files to lib\n";
    for my $num(@numsToAdd){
      copyNum $serial, $num;
    }
    run "klomp-db", "-u", $$serial{destLib};
    return 1;
  }else{
    print "  skipping add files\n";
    return 0;
  }
}

sub removeFilesFromLib($){
  my ($serial) = @_;

  my @libNums = getLibNums $serial;
  my @historyNums = getHistoryNums $serial;

  my @libNumsInHistory = grep {elem $_, @historyNums} @libNums;

  my @numsAvailToRemove = @libNumsInHistory;

  my @numsToRemove;
  while(@libNumsInHistory - @numsToRemove > $$serial{maxLibInHist}){
    my $nextNum = shift @numsAvailToRemove;
    push @numsToRemove, $nextNum;
  }

  if(@numsToRemove > 0){
    print "  REMOVING " . @numsToRemove . " files from lib\n";
    for my $num(@numsToRemove){
      removeNum $serial, $num;
    }
    my $forceRemoveCount = @numsToRemove;
    run "klomp-db", "-m", "--force=$forceRemoveCount", $$serial{destLib};
    return 1;
  }else{
    print "  skipping remove files\n";
    return 0;
  }
}

sub ensureLibFilesInPlaylist($){
  my ($serial) = @_;

  my @libNums = getLibNums $serial;
  my @historyNums = getHistoryNums $serial;
  my @playlistNums = getPlaylistNums $serial;

  my @numsToAddToPlaylist =
    grep {not elem($_, @playlistNums) and not elem($_, @historyNums)} @libNums;

  if(@historyNums == 0){
    print "  skipping adding files to playlist (out of date, no files in history)\n";
    return 0;
  }

  if(@numsToAddToPlaylist > 0){
    print "  APPENDING " . @numsToAddToPlaylist . " files to playlist\n";
    my @remoteCmd = getRemoteCmd $serial;
    for my $num(@numsToAddToPlaylist){
      my $queryLib = "\@$$serial{destLib}";
      my $queryAlbum = "\@l^\"$$serial{album}\"\$";
      my $queryNumber = "\@n^\"$num\"\$";
      my $query = "$queryLib $queryAlbum $queryNumber";
      run @remoteCmd, "klomp", "--append", "'$query'";
    }
  }else{
    print "  skipping append playlist\n";
  }
}

sub syncKlomp($){
  my ($serial) = @_;

  my $host = `ipmagic $$serial{ipmagic}`;
  chomp $host;
  if(defined $$serial{ipmagicUser}){
    $host = "$$serial{ipmagicUser}\@$host";
  }
  run "klomp-sync", $host, $$serial{destLib};
}

sub copyNum($$){
  my ($serial, $num) = @_;
  my %srcFiles = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  my %destFiles = getFiles $$serial{destLib}, $$serial{destRelPath};
  if(not defined $srcFiles{$num}){
    die "Error: missing $num in $$serial{srcLib}/$$serial{srcRelPath}\n";
  }
  if(defined $destFiles{$num}){
    die "Error: dest file already exists: $destFiles{$num}\n";
  }

  my $destDir = `klomp-lib -l $$serial{destLib}`;
  chomp $destDir;
  $destDir = "$destDir/$$serial{destRelPath}";

  run "cp", "-a", "--reflink=always", $srcFiles{$num}, $destDir;
}

sub removeNum($$){
  my ($serial, $num) = @_;
  my %srcFiles = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  my %destFiles = getFiles $$serial{destLib}, $$serial{destRelPath};
  if(not defined $srcFiles{$num}){
    die "Error: missing $num in $$serial{srcLib}/$$serial{srcRelPath}\n";
  }
  if(not defined $destFiles{$num}){
    die "Error: missing $num in $$serial{destLib}/$$serial{destRelPath}\n";
  }

  my $srcName = $1 if $srcFiles{$num} =~ /(?:^|\/)($num [^\/]*)$/;
  my $destName = $1 if $destFiles{$num} =~ /(?:^|\/)($num [^\/]*)$/;
  if($srcName ne $destName){
    die "Error: mismatched src/dest {$srcFiles{$num} vs $destFiles{$num}}\n";
  }
  if($srcName !~ /^$num/){
    die "Error: file name does not start with $num: $srcName\n"
  }

  run "rm", $destFiles{$num};
}

sub getAllNums($){
  my ($serial) = @_;
  my %files = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  return sort keys %files;
}

sub getLibNums($){
  my ($serial) = @_;
  my %files = getFiles $$serial{destLib}, $$serial{destRelPath};
  return sort keys %files;
}

sub getFiles($$){
  my ($lib, $relPath) = @_;
  my $dir = `klomp-lib -l $lib`;
  chomp $dir;
  $dir = "$dir/$relPath";
  my %numFiles;
  my @files = `find '$dir' -maxdepth 1 -type f`;
  for my $file(@files){
    chomp $file;
    if($file =~ /^$dir\/(\d+)/){
      $numFiles{$1} = $file;
    }
  }
  return %numFiles;
}

sub getPlaylistNums($){
  my ($serial) = @_;
  return getKlompInfoNums $serial, "0", "10000";
}

sub getHistoryNums($){
  my ($serial) = @_;
  return getKlompInfoNums $serial, "-10000", "-1";
}

sub getKlompInfoNums($$$){
  my ($serial, $minIndex, $maxIndex) = @_;

  my @remoteCmd = getRemoteCmd $serial;

  my @nums;

  my @cmd = (@remoteCmd, "klomp-info", "-i", "album", "number", "$minIndex..$maxIndex");
  open FH, "-|", @cmd or die "could not run @cmd\n$!\n";
  my @historyLines = <FH>;
  close FH;

  for my $line(@historyLines){
    if($line =~ /^$$serial{album} (\d+)$/){
      push @nums, $1;
    }
  }
  @nums = map {('0'x($numLen - length $_)) . $_} @nums;

  return sort @nums;
}

sub getCurPlaylist($){
  my ($serial) = @_;

  my @remoteCmd = getRemoteCmd $serial;

  my $curPlaylist = `@remoteCmd klomp-playlist -g`;
  chomp $curPlaylist;

  return $curPlaylist;
}

sub setPlaylist($$){
  my ($serial, $playlist) = @_;
  my @remoteCmd = getRemoteCmd $serial;

  run "@remoteCmd klomp-playlist $playlist";
}

sub getRemoteCmd($){
  my ($serial) = @_;
  my @cmd;
  if(defined $$serial{ipmagic}){
    if(defined $$serial{ipmagicUser}){
      @cmd = ("-u", $$serial{ipmagicUser}, @cmd);
    }
    @cmd = ("ipmagic", $$serial{ipmagic}, @cmd);
  }
  return @cmd;
}

sub elem($@){
  my ($elem, @arr) = @_;
  for my $e(@arr){
    if($e eq $elem){
      return 1;
    }
  }
  return 0;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
