#!/usr/bin/perl
use strict;
use warnings;

sub parseMarketsConf($);
sub parseMarketJson($);

my $API_URL = "https://www.predictit.org/api/marketdata/markets";
my $MARKETS_CONF_FILE = "$ENV{HOME}/.config/predictit-markets.conf";

sub main(@){
  my $marketsConf = parseMarketsConf($MARKETS_CONF_FILE);
  for my $marketLabel(@{$$marketsConf{labelOrder}}){
    my $conf = $$marketsConf{marketByLabel}{$marketLabel};
    my $marketId = $$conf{id};
    my $targetContracts = $$conf{targetContracts};

    my $json = `wget -O - $API_URL/$marketId 2>/dev/null`;
    my $market = parseMarketJson $json;
    my $marketName = $$market{name};
    my $fmt = "$marketLabel:";
    for my $contractLabel(sort keys %$targetContracts){
      my $contractName = $$targetContracts{$contractLabel};
      my $lastTradePrice = $$market{contracts}{$contractName};
      if(not defined $lastTradePrice){
        die "ERROR: contract not found \"$marketName\" - \"$contractName\"\n";
      }
      $fmt .= sprintf " %s(%.2f)", $contractLabel, $lastTradePrice;
    }
    print "$fmt\n";
  }
}

sub parseMarketsConf($){
  my ($confFile) = @_;
  my $marketsConf = {
    labelOrder    => [],
    marketByLabel => {},
  };

  if(not -f $confFile){
    print STDERR "WARNING: $confFile not found\n";
    return $marketsConf;
  }

  open my $fh, "< $confFile" or die "ERROR: could not read $confFile\n$!\n";
  my @lines = <$fh>;
  close $fh;

  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^\s*(\w+)\s*\|\s*(\d+)\s*\|(.*?)$/){
      my ($label, $id, $contractCsv) = ($1, $2, $3);
      my $market = {
        id => $id,
        label => $label,
        targetContracts => {},
      };
      push @{$$marketsConf{labelOrder}}, $label;
      $$marketsConf{marketByLabel}{$label} = $market;

      my @contractPairs = split /,/, $contractCsv, -1;
      for my $contractPair(@contractPairs){
        next if $contractPair =~ /^\s*$/;
        if($contractPair =~ /^\s*(\w+)="([^"]+)"$/){
          $$market{targetContracts}{$1} = $2;
        }else{
          die "ERROR: malformed contract in $confFile\n$line";
        }
      }
    }else{
      die "ERROR: malformed market line in $confFile\n$line";
    }
  }

  return $marketsConf;
}

sub parseMarketJson($){
  my ($json) = @_;
  my $market = {};
  my $contractCount = 0;
  if($json =~ /^
    { [^{]* "name":      \s* "([^"]+)",
      [^{]* "contracts": \s* \[ ([^\[]*) \]
    /sxi
  ){
    my ($name, $contractsJson) = ($1, $2);
    $$market{name} = $name;
    $$market{contracts} = {};
    my @contracts = $contractsJson =~ /(\{[^{]*\})/gsxi;
    for my $contract(@contracts){
      if($contract =~ /^
        { [^{]* "name":           \s* "([^"]+)",
          [^{]* "lastTradePrice": \s* (\d+|\d*\.\d+),
        /sxi
      ){
        my ($contractName, $lastTradePrice) = ($1, $2);
        $$market{contracts}{$contractName} = $lastTradePrice;
        $contractCount++;
      }
    }
  }

  if(not defined $$market{name}){
    die "ERROR: could not parse market json:\n$json\n";
  }elsif($contractCount == 0){
    die "ERROR: could not parse contracts for $$market{name}\n";
  }

  return $market;
}

&main(@ARGV);
