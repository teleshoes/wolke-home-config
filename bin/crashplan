#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep time);
use Date::Parse qw(str2time);
use Date::Format qw(time2str);
use File::Tee qw(tee);
use IO::Select;

sub getCrashplanPid();
sub backupLogs();
sub startGui();
sub getGuiWindowId();
sub getCmdWindowId();
sub typePassword($);
sub openCmdWindow($);
sub typeCommand($$);
sub closeGui($$);
sub startGuiWithPassword();
sub runCommandInCommandsGui($);
sub runBackup($);
sub getFilteredBackupSets($$$$);
sub parseBackupSets($$$);
sub filterLog($$$);
sub parseLog($);
sub parseLatestSync();
sub isSyncComplete($);
sub formatSync($);
sub formatBackupSetList(@);
sub formatBackupSet($);
sub parseSizeMiB($);
sub parseSpeedMbps($);
sub padl($$);
sub padr($$);
sub formatTime($);
sub ymd($);
sub writeStatus($);
sub sleepMillis($;$);
sub readSecret($);
sub run(@);
sub runQuiet(@);
sub tryrun(@);
sub tryrunQuiet(@);
sub bashComplete($$);

my $dir = "/usr/local/crashplan";
my $guiExec = "$dir/bin/desktop.sh";
my $engineExec = "$dir/bin/service.sh";
my $crashplanJar = "lib/com.backup42.desktop.jar";
my $historyLogFile = "$dir/log/history.log";
my $serviceLogFile = "$dir/log/service.log";
my $logBackupDir = "/media/stuff/logs/crashplan";
my $backupLogFile = "/tmp/crashplan-backup-" . int(time*1000) . ".log";
my $curStatusFile = "/tmp/crashplan-backup-" . int(time*1000) . ".status";

my $delayBeforeGUIStartMillis = int(5 * 1000);
my $delayBeforeGUITypePasswordMillis = int(60 * 1000);
my $delayBeforeGUITypePasswordQuickMillis = int(5 * 1000);
my $delayBeforeGUIOpenCmdWindowMillis = int(10 * 1000);
my $delayBeforeGUIKeyboardCmdMillis = int(10 * 1000);
my $delayBeforeGUICloseMillis = int(5 * 1000);

my $recentLogMillis = int(18 * 60 * 60 * 1000); #18hr
my $backupLimitMillis = int(2.5 * 60 * 60 * 1000); #2.5hr
my $checkCompleteIntervalMillis = int(30 * 1000);
my $assertCompleteMillis = int(60 * 1000);

my $dateDisplayFormat = "%Y-%m-%d %H:%M";

my @serviceCmds = qw(scan pause resume);
my $okServiceCmds = join "|", @serviceCmds;

my @engineCmds = qw(start stop restart status force-reload);
my $okEngineCmds = join "|", @engineCmds;

my @backupNames = qw(
  backgrounds cameravideos dcim documents email firefox
  games logs music n9 pictures pidgin projects records s5 sx stepmania thunderbird
);
my $okBackupNames = join "|", @backupNames;

my $regexToIgnoreWarnings = ''
  . '^\s*$'
  . '\|\(MaxListenersExceededWarning\)'
  . '\|\(Gtk-WARNING.*Theme parsing error:.*is deprecated\)'
  . '\|\(Accessing non-existent property.*padLevels\)'
  . '\|\(Use.*--trace-warnings\)'
  . '\|\(Passthrough is not supported\)'
  ;

my $defaultCmd = "gui";
my $usage = "Usage:
  $0
  $0 -g|--gui|gui
    -start GUI, skipping some warnings with grep
    -sleep ${delayBeforeGUITypePasswordQuickMillis}ms
    -enter password

  $0 --gui-only
    -start GUI, skipping some warnings with grep

  $0 -p
    -enter password

  $0 -l|--log|log [--date=DATE] [--logfile=LOGFILE] [BACKUP_NAME]
    format recent info from $historyLogFile
      (or $historyLogFile.0)
      DATE
        YYYY-MM-DD   show only info from that date
        all          do not filter log info
        recent       show all info from the last ${recentLogMillis}ms
                     this is the default if not --date arg is given

      BACKUP_NAME
        one of [$okBackupNames]
        if given, only show info for that backup.
        otherwise, show all

      LOGFILE
        alternative filename to use instead of $historyLogFile

  $0 $okServiceCmds
    open up the Commands GUI and type the command using xdotool/wmctrl/windowid

  $0 $okEngineCmds
    run 'sudo $engineExec <ARG>'

  $0 -b|--backup|backup [--force]
    1) stop crashplan => start crashplan => send 'scan' command to crashplan
    2) tail -F $historyLogFile
       (or $historyLogFile.0)
    3) check newly added log entries every ${checkCompleteIntervalMillis}ms
    4) if all backups look complete, wait an extra ${assertCompleteMillis}ms
    5) if they still do, or if ${backupLimitMillis}ms is reached, stop crashplan
    6) kill tail, show the newly added log entries

    if --force is set, do not fail on duplicate log entries

  $0 --bash-complete COMP_LINE COMP_POINT
    print a list of words for bash completion, one per line
    COMP_LINE  - the full cmdline as a string
    COMP_POINT - the cursor position in the cmdline
";

my $STATUS_SKIPPED = "skipped";
my $STATUS_COMPLETE = "complete";
my $STATUS_INCOMPLETE = "incomplete";
my $STATUS_RUNNING = "running";
my $STATUS_ERROR = "error";
my @ALL_STATUSES = ($STATUS_SKIPPED, $STATUS_COMPLETE, $STATUS_INCOMPLETE,
  $STATUS_RUNNING, $STATUS_ERROR);

my $ENDSTATE_OK = "msg-completed";
my $ENDSTATE_NOT_OK = "msg-stopped";
my $ENDSTATE_MSG_COMPLETED = "Completed";
my $ENDSTATE_MSG_STOPPED = "Stopped";

my $okLogArgs = join "|", qw(--date --logfile);

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }
  my $cmd = shift if @_ > 0;
  $cmd = $defaultCmd if not defined $cmd;

  if($cmd =~ /^(-g|--gui|gui)$/ and @_ == 0){
    startGuiWithPassword();
  }elsif($cmd =~ /^(--gui-only)$/ and @_ == 0){
    startGui();
  }elsif($cmd =~ /^(-p)$/ and @_ == 0){
    typePassword(getGuiWindowId());
  }elsif($cmd =~ /^(-l|--log|log)$/){
    my $date = "recent";
    my $logfile = $historyLogFile;
    while(@_ > 0 and $_[0] =~ /^($okLogArgs)(=.+)?$/){
      my $arg = shift;
      if($arg =~ /^--date=(\d\d\d\d-\d\d-\d\d|all|recent)$/){
        $date = $1;
      }elsif($arg =~ /^--logfile=(.+)$/){
        $logfile = $1;
      }else{
        die $usage;
      }
    }
    my $backupName = undef;
    if(@_ > 0 and $_[0] =~ /^($okBackupNames)$/){
      $backupName = $1;
      shift;
    }
    die $usage if @_ > 0;

    my $exactDate = $date if $date =~ /^\d\d\d\d-\d\d-\d\d$/;
    my $maxTimeAgoMillis = $recentLogMillis if $date =~ /^recent$/;

    my @backupSets = getFilteredBackupSets($logfile, $maxTimeAgoMillis, $exactDate, 1);
    @backupSets = grep {$$_{backupName} eq $backupName} @backupSets if defined $backupName;
    print formatBackupSetList @backupSets;
  }elsif($cmd =~ /^($okEngineCmds)$/ and @_ == 0){
    exec "sudo", $engineExec, $cmd;
  }elsif($cmd =~ /^($okServiceCmds)$/ and @_ == 0){
    runCommandInCommandsGui $cmd;
  }elsif($cmd =~ /^(-b|--backup|backup)$/ and @_ <= 1){
    my $ignoreDuplicateFailures = 0;
    if(@_ == 1 and $_[0] =~ /^--force$/){
      $ignoreDuplicateFailures = 1;
    }elsif(@_ != 0){
      die $usage;
    }
    runBackup($ignoreDuplicateFailures);
  }else{
    die $usage;
  }
}

sub getCrashplanPid(){
  my @procs = `ps -eo pid,command`;
  my $cpServiceExec = "/usr/local/crashplan/bin/Code42Service";

  for my $proc(@procs){
    if($proc =~ /^\s*(\d+)\s+${cpServiceExec} .*$/){
      return $1;
    }
  }
  return undef;
}

sub backupLogs(){
  print "\n\n";
  if(not tryrun "rsync", "-avP", "$dir/log/", $logBackupDir){
    die "ERROR: Could not rsync logs\n";
  }
  tryrun "cp", $backupLogFile, $logBackupDir if -e $backupLogFile;
  if(not tryrun "cd $logBackupDir && git add -A && git ci -m 'automatic commit'"){
    print STDERR "\n\nWARNING: no logs backed up\n\n";
  }
  tryrun "cd $logBackupDir && git gc --auto";
  print "\n\n";
}

sub startGui(){
  if(!fork){
    exec "$guiExec 2>&1 | grep -v '$regexToIgnoreWarnings'";
  }
}

sub getGuiWindowId(){
  my $guiWindowId = `windowid --exact --class=code42.Code42 --name=Code42`;
  chomp $guiWindowId;
  die "could not get window id of gui\n" if $guiWindowId !~ /^0x/;
  return $guiWindowId;
}

sub getCmdWindowId(){
  my $cmdWindowId = `windowid --exact --class=code42.Code42 --name='Code42 Commands'`;
  chomp $cmdWindowId;
  die "could not get window id of Commands GUI\n" if $cmdWindowId !~ /^0x/;
  return $cmdWindowId;
}

sub typePassword($){
  my ($guiWindowId) = @_;
  my $password = readSecret("crashplan.password");

  run "wmctrl", "-i", "-a", $guiWindowId;
  print "xdotool type --window $guiWindowId <PASSWORD_REDACTED>\n";
  runQuiet "xdotool", "type", "--window", $guiWindowId, "$password\n";
}

sub openCmdWindow($){
  my ($guiWindowId) = @_;
  run "wmctrl", "-i", "-a", $guiWindowId;
  run "xdotool", "key", "--window", $guiWindowId, "Ctrl+Shift+C";
}

sub typeCommand($$){
  my ($cmdWindowId, $command) = @_;
  run "wmctrl", "-i", "-a", $cmdWindowId;
  run "xdotool", "type", "--window", $cmdWindowId, "$command\n";
}

sub closeGui($$){
  my ($guiWindowId, $cmdWindowId) = @_;
  run "wmctrl", "-i", "-c", $cmdWindowId;
  run "wmctrl", "-i", "-c", $guiWindowId;
}

sub startGuiWithPassword(){
  startGui();
  sleepMillis $delayBeforeGUITypePasswordQuickMillis, "before typing password";
  typePassword(getGuiWindowId());
}

sub runCommandInCommandsGui($){
  my ($command) = @_;

  STDOUT->autoflush(1);

  print "starting gui\n";
  startGui();

  sleepMillis $delayBeforeGUITypePasswordMillis, "before typing password";

  my $guiWindowId = getGuiWindowId();

  print "typing password\n";
  typePassword($guiWindowId);

  sleepMillis $delayBeforeGUIOpenCmdWindowMillis, "before opening cmd window";

  print "opening cmd window (Ctrl+Shift+C)\n";
  openCmdWindow($guiWindowId);

  sleepMillis $delayBeforeGUIKeyboardCmdMillis, "before typing keyboard command";

  my $cmdWindowId = getCmdWindowId();

  print "typing command in Commands GUI\n";
  typeCommand($cmdWindowId, $command);

  sleepMillis $delayBeforeGUICloseMillis, "before closing the GUI";
  closeGui($guiWindowId, $cmdWindowId);
}

sub runBackup($){
  my ($ignoreDuplicateFailures) = @_;

#  run "sudo crashplan-downgrade";

  my $startMillis = time*1000.0;
  my $finishedMillis;

  backupLogs();
  tee STDOUT, '>>', $backupLogFile;
  tee STDERR, '>>', $backupLogFile;

  writeStatus "STARTING BACKUP";

  my @initialBackupSets = getFilteredBackupSets($historyLogFile, $recentLogMillis, undef, $ignoreDuplicateFailures);
  my %excludeBackupIds = map {$$_{backupId} => 1} @initialBackupSets;

  writeStatus "STOPPING CRASHPLAN";
  run $0, "stop";
  if(defined getCrashplanPid()){
    die "crashplan is still running...\n";
  }

  writeStatus "STARTING CRASHPLAN";
  run $0, "start";

  writeStatus "WAITING TO START SCAN";
  sleepMillis $delayBeforeGUIStartMillis, "before starting GUI to perform scan";

  writeStatus "STARTING SCAN";
  run $0, "scan";

  my $crashplanPid = getCrashplanPid();
  if(not defined $crashplanPid){
    writeStatus "ERROR: crashplan did not start";
    print "crashplan apparently did not start\n";
    print "stopping again just in case...\n";
    run $0, "stop";
    die;
  }

  my $logPid = fork;
  if($logPid == 0){
    my $tailLogFile = $historyLogFile;
    $tailLogFile = "$tailLogFile.0" if not -f $tailLogFile and -f "$tailLogFile.0";
    exec "tail", "-F", $tailLogFile;
  }

  my $prevSync = parseLatestSync();
  if(defined $prevSync and not isSyncComplete($prevSync)){
    print "\n\nNOTE: last sync is not finished in log:\n";
    print "  " . formatSync($prevSync) . "\n\n\n";
  }

  my $errorMsg = undef;

  while(time*1000.0 < $startMillis + $backupLimitMillis){
    sleepMillis $checkCompleteIntervalMillis, undef;

    my $sync = parseLatestSync();
    if(defined $sync){
      if(not defined $prevSync or $$prevSync{dateMillis} != $$sync{dateMillis}){
        my $date = `date`;
        chomp $date;
        print "\n\n$date\nSYNC " . formatSync($sync) . "\n\n\n";
        $prevSync = $sync;
        next;
      }
    }
    $prevSync = $sync;

    my @newBackupSets = getFilteredBackupSets($historyLogFile, $recentLogMillis, undef, $ignoreDuplicateFailures);
    @newBackupSets = grep {not defined $excludeBackupIds{$$_{backupId}}} @newBackupSets;
    my %newStatusByName = map {$$_{backupName} => $$_{backupStatus}} @newBackupSets;
    my $allSkipped = 1;
    my $allSkippedOrCompleted = 1;
    for my $backupName(sort @backupNames){
      my $backupStatus = $newStatusByName{$backupName};
      if(not defined $backupStatus){
        $allSkipped = 0;
        $allSkippedOrCompleted = 0;
      }elsif($backupStatus !~ /^($STATUS_SKIPPED|$STATUS_COMPLETE)$/){
        $allSkipped = 0;
        $allSkippedOrCompleted = 0;
      }elsif($backupStatus !~ /^($STATUS_SKIPPED)$/){
        $allSkipped = 0;
      }
    }
    my $isDone = 0;
    if($allSkippedOrCompleted and not $allSkipped){
      $isDone = 1;
    }
    $finishedMillis = undef if not $isDone;

    my $newPid = getCrashplanPid();

    if($isDone and not defined $finishedMillis){
      $finishedMillis = time * 1000.0;
      print "\n\n";
      print formatBackupSetList @newBackupSets;
      my $elapsed = sprintf "%d", (time * 1000.0 - $startMillis) / 1000.0;
      print "\n\n";
      print "backup tentatively complete after ${elapsed}s\n";
      print "waiting ${assertCompleteMillis}ms to make sure it stays finished\n";
      writeStatus "TENTATIVELY COMPLETE\n" . formatBackupSetList @newBackupSets;
    }elsif($isDone and (time*1000.0 - $finishedMillis) > $assertCompleteMillis){
      my $elapsed = sprintf "%d", (time * 1000.0 - $startMillis) / 1000.0;
      print "\n\n";
      print "backup seems complete after ${elapsed}s\n";
      print "stopping crashplan\n";
      writeStatus "COMPLETE\n" . formatBackupSetList @newBackupSets;
      last;
    }elsif(not defined $newPid or $newPid != $crashplanPid){
      print "\n\n";
      $errorMsg = "ERROR: crashplan stopped running on its own\n";
      print $errorMsg;
      writeStatus "ERROR: crashplan died\n" . formatBackupSetList @newBackupSets;
      last;
    }elsif($newPid != $crashplanPid){
      print "\n\n";
      $errorMsg = "ERROR: crashplan restarted with a new pid ($crashplanPid => $newPid)\n";
      print $errorMsg;
      writeStatus "ERROR: crashplan restarted\n" . formatBackupSetList @newBackupSets;
      last;
    }else{
      writeStatus "WAITING FOR BACKUP TO END\n" . formatBackupSetList @newBackupSets;
    }
  }

  run "kill", "-9", $logPid;
  run $0, "stop";

  my @newBackupSets = getFilteredBackupSets($historyLogFile, $recentLogMillis, undef, $ignoreDuplicateFailures);
  @newBackupSets = grep {not defined $excludeBackupIds{$$_{backupId}}} @newBackupSets;

  print formatBackupSetList @newBackupSets;

  writeStatus "ENDED (backing up logs)\n" . formatBackupSetList @newBackupSets;

  backupLogs();

  print formatBackupSetList @newBackupSets;

  writeStatus "ENDED\n" . formatBackupSetList @newBackupSets;

  my $lastSync = parseLatestSync();
  if(defined $lastSync and not isSyncComplete($lastSync)){
    my $syncDateSex = int($$lastSync{dateMillis} / 1000.0);
    my $dateFmt = `date --date=\@$syncDateSex`;
    chomp $dateFmt;
    print "NOTE: last sync is not finished in log ($dateFmt):\n";
    print "  " . formatSync($lastSync) . "\n";
  }

  print "###\n";
  my $tailLogFile = $historyLogFile;
  $tailLogFile = "$tailLogFile.0" if not -f $tailLogFile and -f "$tailLogFile.0";
  run "tail -10 $tailLogFile";
  print "###\n";

  if(defined $errorMsg){
    print "\n\n$errorMsg\n";
  }

  system "date";
}

sub getFilteredBackupSets($$$$){
  my ($logfile, $maxTimeAgoMillis, $exactDate, $ignoreDuplicateFailures) = @_;

  $logfile = "$logfile.0" if not -f $logfile and -f "$logfile.0";

  my $log = parseLog($logfile);
  filterLog($log, $maxTimeAgoMillis, $exactDate);
  my @backupSets;
  for my $name(sort keys %$log){
    @backupSets = (@backupSets, parseBackupSets($log, $name, $ignoreDuplicateFailures));
  }
  return @backupSets;
}

sub parseBackupSets($$$){
  my ($log, $backupName, $ignoreDuplicateFailures) = @_;

  my @allEntries = @{$$log{$backupName}};

  my @entrySets;
  my @entrySet;
  for my $entry(@allEntries){
    if($$entry{type} eq "scan-start" and @entrySet > 0){
      push @entrySets, [@entrySet];
      @entrySet = ();
    }
    push @entrySet, $entry;
    if($$entry{type} eq "backup-end" and $$entry{endstate} eq "complete"){
      push @entrySets, [@entrySet];
      @entrySet = ();
    }
  }
  push @entrySets, [@entrySet] if @entrySet > 0;

  my @backupSets;
  for my $entrySet(@entrySets){
    my ($scanStart, $scanEnd, $backupStart, $backupIncomplete, $backupComplete);
    for my $entry(@$entrySet){
      if($$entry{type} eq "scan-start"){
        if(defined $scanStart){
          my $msg = "duplicate scan-start:\n$$scanStart{line}$$entry{line}";
          die $msg unless $ignoreDuplicateFailures;
          print STDERR $msg;
        }
        $scanStart = $entry;
      }elsif($$entry{type} eq "scan-end"){
        if(defined $scanEnd){
          my $msg = "duplicate scan-end:\n$$scanEnd{line}$$entry{line}";
          die $msg unless $ignoreDuplicateFailures;
          print STDERR $msg;
        }
        $scanEnd = $entry;
      }elsif($$entry{type} eq "backup-start"){
        if(not defined $backupStart or $$entry{filecount} > $$backupStart{filecount}){
          $backupStart = $entry;
        }
      }elsif($$entry{type} eq "backup-end" and $$entry{endstate} eq $ENDSTATE_NOT_OK){
        $backupIncomplete = $entry;
      }elsif($$entry{type} eq "backup-end" and $$entry{endstate} eq $ENDSTATE_OK){
        if(defined $backupComplete){
          my $msg = "duplicate backup-complete:\n$$backupComplete{line}$$entry{line}";
          die $msg unless $ignoreDuplicateFailures;
          print STDERR $msg;
        }
        $backupComplete = $entry;
      }
    }
    my $backupEnd;
    $backupEnd = $backupComplete if not defined $backupEnd and defined $backupComplete;
    $backupEnd = $backupIncomplete if not defined $backupEnd and defined $backupIncomplete;

    my @times;
    push @times, $$scanStart{time} if defined $scanStart;
    push @times, $$scanEnd{time} if defined $scanEnd;
    push @times, $$backupStart{time} if defined $backupStart;
    push @times, $$backupEnd{time} if defined $backupEnd;
    my $minTime = undef;
    for my $time(@times){
      $minTime = $time if not defined $minTime or $time < $minTime;
    }

    my $backupStatus;
    $backupStatus = $STATUS_RUNNING if defined $backupStart and not defined $backupEnd;
    $backupStatus = $STATUS_SKIPPED if not defined $backupStart;
    $backupStatus = $STATUS_INCOMPLETE if defined $backupEnd and $$backupEnd{endstate} eq $ENDSTATE_NOT_OK;
    $backupStatus = $STATUS_COMPLETE if defined $backupEnd and $$backupEnd{endstate} eq $ENDSTATE_OK;
    $backupStatus = $STATUS_ERROR if
      not defined $scanStart
      or not defined $scanEnd
      or (defined $backupEnd and not defined $backupStart);

    push @backupSets, {
      backupId => "$backupName-$backupStatus-$minTime",
      backupName => $backupName,
      backupStatus => $backupStatus,
      time => $minTime,
      scanStart => $scanStart,
      scanEnd => $scanEnd,
      backupStart => $backupStart,
      backupEnd => $backupEnd,
    };
  }
  return @backupSets;
}

sub filterLog($$$){
  my ($log, $maxTimeAgoMillis, $exactDate) = @_;
  my $minTimeMillis;
  if(defined $maxTimeAgoMillis){
    $minTimeMillis = time*1000.0 - $maxTimeAgoMillis;
  }

  for my $name(sort keys %$log){
    my @entries = @{$$log{$name}};
    if(defined $minTimeMillis){
      @entries = grep {$$_{time} >= $minTimeMillis/1000.0} @entries;
    }
    if(defined $exactDate){
      @entries = grep {ymd($$_{time}) eq $exactDate} @entries;
    }
    $$log{$name} = [@entries];
  }
  return $log;
}

sub parseLog($){
  my ($logfile) = @_;
  my @lines = `cat $logfile`;
  my $log = {};

  for my $line(@lines){
    my ($time, $backupName, $message);
    if($line =~ /^I (\d\d)\/(\d\d)\/(\d\d) (\d\d):(\d\d)(AM|PM) \[(\w+)\] (.+)$/){
      my ($mon, $day, $year, $hour, $min, $ampm, $name, $msg) = ($1, $2, $3, $4, $5, $6, $7, $8);

      $time = str2time "$mon/$day/$year $hour:$min$ampm";
      $backupName = $name;
      $message = $msg;
    }else{
      next;
    }

    my $dur = '(?:\d+h:\d+m:\d+s|(?:< )?\d+(?:\.\d+)? (?:minute|hour|day)s?)';
    my $n = '[0-9,]+';
    my $fs = '[0-9\.]+\s*[KMGT]?B';
    my $speed = '.*[0-9\.]+\s*[KMGT]?bps';

    my $entry;
    if($message =~ /^Scanning for files to back up(.*)$/){
      my ($details) = ($1);
      if($details !~ /^\s*$/){
        die "invalid scan-start line: $line";
      }
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "scan-start",
      }
    }elsif($message =~ /^Scanning for files completed(.*)$/){
      my ($details) = ($1);
      if($details !~ /^\s*in ($dur): ($n) files? \(($fs)\) found$/){
        die "invalid scan-end line: $line";
      }
      my ($duration, $fileCount, $size) = ($1, $2, $3);
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "scan-end",
        duration => $duration,
        filecount => $fileCount,
        size => $size,
      };
    }elsif($message =~ /^Starting backup to CrashPlan Central(.*)$/){
      my ($details) = ($1);
      if($details !~ /^\s*:\s*($n) files? \(($fs)\) to back up$/){
        die "invalid backup-start line: $line";
      }
      my ($fileCount, $size) = ($1, $2);
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "backup-start",
        filecount => $fileCount,
        size => $size,
      };
    }elsif($message =~ /^($ENDSTATE_MSG_STOPPED|$ENDSTATE_MSG_COMPLETED) backup to CrashPlan Central(.*)$/){
      my ($endstate, $details) = ($1, $2);
      if($details =~ /^:\s*No new data to backup at this time$/){
        next;
      }
      if($details !~ /in ($dur): ($n) files? \(($fs)\) backed up, ($fs) encrypted and sent(?: @ ($speed))?(?: \(Effective rate: ($speed)\))?$/){
        die "invalid backup-end line: $line";
      }
      my ($duration, $fileCount, $size, $encsize, $speed, $effectiveSpeed) = ($1, $2, $3, $4, $5, $6);
      if(not defined $speed){
        if(defined $effectiveSpeed){
          my $sizeMib = parseSizeMiB $size;
          my $encsizeMib = parseSizeMiB $encsize;
          my $effectiveSpeedMbps = parseSpeedMbps $effectiveSpeed;
          my $encRatio = $sizeMib > 0 ? $encsizeMib/$sizeMib : 0;
          my $speedMbps = $encRatio * $effectiveSpeedMbps;

          $speed = sprintf "%.2fMbps", $speedMbps;
        }else{
          $speed = "0Mbps";
        }
      }
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "backup-end",
        endstate => $endstate eq $ENDSTATE_MSG_COMPLETED ? $ENDSTATE_OK : $ENDSTATE_NOT_OK,
        duration => $duration,
        filecount => $fileCount,
        size => $size,
        encsize => $encsize,
        speed => $speed,
      };
    }elsif($message =~ /^Scanning for files stopped/){
      next;
    }elsif($message =~ /^Configured to backup/){
      next;
    }elsif($message =~ /Backup to CrashPlan Central will take priority until complete/){
      next;
    }else{
      die "error parsing line: $line\n";
    }

    if(defined $$entry{filecount}){
      my $count = $$entry{filecount};
      $count =~ s/,//g;
      die "Malformed count: $count\n" if $count !~ /^\d+$/;
      $$entry{filecount} = $count;
    }

    $$log{$$entry{name}} = [] if not defined $$log{$$entry{name}};
    push @{$$log{$$entry{name}}}, $entry;
  }
  return $log;
}

sub parseLatestSync(){
  my $logFile = $serviceLogFile;
  $logFile = "$logFile.0" if not -f $logFile and -f "$logFile.0";

  my @lines = `cat $logFile`;
  my $manifestValid = 0;
  for my $line(reverse @lines){
    if($line =~ /SYNC::.*MARKING MANIFEST AS VALIDATED/){
      $manifestValid = 1;
    }elsif($line =~ /SYNC::.*manifest is valid/){
      $manifestValid = 1;
    }elsif($line =~ /^
      \[
        (\d\d)\.(\d\d)\.(\d\d)
        \s*
        (\d\d):(\d\d):(\d\d).(\d\d\d)
        [^\]]*
      \]
      .*
      SyncProgressStats\[
        ([^\]]+)
      \]
      .*
    $/x){
      my ($mon, $day, $year, $hr, $min, $sec, $ms, $sync) = (
        $1, $2, $3, $4, $5, $6, $7, $8);
      my $files = $1 if $sync =~ /files=(true|false)/;
      my $current = $1 if $sync =~ /current=(\d+)/;
      my $total = $1 if $sync =~ /total=(\d+)/;
      if(defined $files and defined $current and defined $total){
        my $dateMillis = (1000 * str2time("$mon/$day/$year $hr:$min:$sec")) + $ms;
        return {
          dateMillis => $dateMillis,
          files => $files,
          current => $current,
          total => $total,
          manifestValid => $manifestValid,
        };
      }
    }
  }
  return undef;
}

sub isSyncComplete($){
  my ($sync) = @_;

  my $pct = 100.0 * $$sync{current} / $$sync{total};
  if($pct > 99.0 and $$sync{manifestValid}){
    return 1;
  }else{
    return 0;
  }
}

sub formatSync($){
  my $sync = shift;

  my $type = sprintf "%5s", "?" x 5;
  if($$sync{files} =~ /^(true)$/i){
    $type = sprintf "%5s", "FILES";
  }elsif($$sync{files} =~ /^(false)$/i){
    $type = sprintf "%5s", "BLOCK";
  }

  my $pct = sprintf "%7s", "???.??%";
  if($$sync{current} > 0 and $$sync{total} > 0){
    $pct = sprintf "%6.2f%%", (100*$$sync{current}/$$sync{total});
  }

  my $valid = "";
  if($$sync{manifestValid}){
    $valid = " (MARKED VALID)";
  }

  return "$type $pct   ms=$$sync{dateMillis}  $$sync{current}/$$sync{total}$valid";
}

sub formatBackupSetList(@){
  my @backupSets = @_;
  my $msg = "";
  my %counts;
  for my $backupStatus(@ALL_STATUSES){
    $counts{$backupStatus} = 0;
    $msg .= "===$backupStatus===\n";
    for my $backupSet(@backupSets){
      if($$backupSet{backupStatus} eq $backupStatus){
        $counts{$backupStatus}++;
        $msg .= formatBackupSet($backupSet);
      }
    }
  }
  $msg .= "======\n";
  if($counts{$STATUS_COMPLETE} == 0){
    $msg .= "\n======\nWARNING: NO BACKUPS COMPLETED!!!!!!!\n======\n";
  }
  return $msg;
}

sub formatBackupSet($){
  my ($set) = @_;

  my $maxLen = 0;
  for my $name(@backupNames){
    $maxLen = length $name if length $name > $maxLen;
  }

  my @allLines;
  push @allLines, $$set{scanStart}{line} if defined $$set{scanStart};
  push @allLines, $$set{scanEnd}{line} if defined $$set{scanEnd};
  push @allLines, $$set{backupStart}{line} if defined $$set{backupStart};
  push @allLines, $$set{backupEnd}{line} if defined $$set{backupEnd};

  if($$set{backupStatus} eq $STATUS_ERROR){
    my $reason = "";
    $reason = "missing scan-start" if not defined $$set{scanStart};
    $reason = "missing scan-end" if not defined $$set{scanEnd};
    $reason = "missing backup-start" if not defined $$set{backupStart};
    return "\n!!!$reason\n@allLines\n";
  }

  my $startFmt = formatTime($$set{scanStart}{time});
  my $elapsedFmt;
  if(defined $$set{scanStart} and defined $$set{backupEnd}){
    my $startSex = $$set{scanStart}{time};
    my $endSex = $$set{backupEnd}{time};
    my $elapsedSex = $endSex - $startSex;
    my $h = int($elapsedSex/60/60);
    my $m = int($elapsedSex/60) % 60;
    my $s = int($elapsedSex) % 60;
    $elapsedFmt = sprintf "%02dh", $h if not defined $elapsedFmt and $h > 0;
    $elapsedFmt = sprintf "%02dm", $m if not defined $elapsedFmt and $m > 0;
    $elapsedFmt = sprintf "%02ds", $s if not defined $elapsedFmt;
  }

  my $name = padr $$set{backupName}, $maxLen;
  my $status = "";
  $status = "RUN!" if $$set{backupStatus} eq $STATUS_RUNNING;
  $status = "INC!" if $$set{backupStatus} eq $STATUS_INCOMPLETE;
  $status = "skip" if $$set{backupStatus} eq $STATUS_SKIPPED;
  $status = "done" if $$set{backupStatus} eq $STATUS_COMPLETE;
  $status = padl $status, 4;

  my $size;
  $size = $$set{backupEnd}{size} if not defined $size and defined $$set{backupEnd};
  $size = $$set{scanEnd}{size} if not defined $size and defined $$set{scanEnd};
  $size = parseSizeMiB $size;
  $size = sprintf "%.3f", $size;
  $size = padl $size, 10; # <1TiB

  my $encsize;
  if(defined $$set{backupEnd}){
    $encsize = $$set{backupEnd}{encsize};
    $encsize = parseSizeMiB $encsize;
    $encsize = sprintf "%.3f", $encsize;
    $encsize = padl $encsize, 10; # <1TiB
  }

  my $filecount;
  $filecount = $$set{backupEnd}{filecount} if not defined $filecount and defined $$set{backupEnd};
  $filecount = $$set{scanEnd}{filecount} if not defined $filecount and defined $$set{scanEnd};
  $filecount = padl $filecount, 6; # <1,000,000 files

  my $speed;
  if(defined $$set{backupEnd}){
    $speed = parseSpeedMbps $$set{backupEnd}{speed};
    $speed = sprintf "%.1f", $speed;
    $speed = padl $speed, 5; # <1Gbps
  }

  my @format = ($name, $startFmt, $status, "${filecount}f", "${size}MiB");
  push @format, "${encsize}MiB" if defined $encsize;
  push @format, "${speed}mbps" if defined $speed;
  push @format, $elapsedFmt if defined $elapsedFmt;
  return "@format\n";
}

sub parseSizeMiB($){
  my ($size) = @_;
  if($size !~ /^(\d+(?:\.\d+)?)\s*(B|KB|MB|GB|TB)$/){
    die "malformed size: $size\n";
  }
  my ($num, $unit) = ($1, $2);
  my $scale = 1024; #just guessing, they could actually mean mega instead of mibi

  my $bytes;
  $bytes = $num * $scale * $scale * $scale * $scale if $unit eq "TB";
  $bytes = $num * $scale * $scale * $scale if $unit eq "GB";
  $bytes = $num * $scale * $scale if $unit eq "MB";
  $bytes = $num * $scale if $unit eq "KB";
  $bytes = $num if $unit eq "B";

  return ($bytes / 1024.0 / 1024.0);
}
sub parseSpeedMbps($){
  my ($speed) = @_;
  if($speed !~ /^(\d+(?:\.\d+)?)\s*(bps|Kbps|Mbps|Gbps|Tbps)$/){
    die "malformed speed: $speed\n";
  }
  my ($num, $unit) = ($1, $2);
  my $scale = 1000;

  my $bytes;
  $bytes = $num * $scale * $scale * $scale * $scale if $unit eq "Tbps";
  $bytes = $num * $scale * $scale * $scale if $unit eq "Gbps";
  $bytes = $num * $scale * $scale if $unit eq "Mbps";
  $bytes = $num * $scale if $unit eq "Kbps";
  $bytes = $num if $unit eq "bps";

  return ($bytes / 1024.0 / 1024.0);
}
sub padl($$){
  my ($s, $len) = @_;
  return $s if length $s >= $len;
  return ' 'x($len - length $s) . $s;
}
sub padr($$){
  my ($s, $len) = @_;
  return $s if length $s >= $len;
  return $s . ' 'x($len - length $s);
}
sub formatTime($){
  my ($t) = @_;
  return time2str $dateDisplayFormat, $t;
}
sub ymd($){
  my ($t) = @_;
  return time2str "%Y-%m-%d", $t;
}

sub writeStatus($){
  my $msg = shift;
  my $date = `date`;
  chomp $date;
  chomp $msg;
  $msg = "$date\n$msg\n";
  open FH, "> $curStatusFile" or die "could not write $curStatusFile\n$!\n";
  print FH $msg;
  close FH;
}

sub sleepMillis($;$){
  my ($millis, $actionMsg) = @_;
  if(defined $actionMsg){
    if($millis >= 1000){
      printf "sleeping %.1fs %s ('s' to skip)\n", $millis/1000.0, $actionMsg;
    }else{
      printf "sleeping %.3fs %s ('s' to skip)\n", $millis/1000.0, $actionMsg;
    }
  }

  my $remMillis = $millis;
  while($remMillis > 0){
    my $targetMillis = 500;
    if($targetMillis > $remMillis){
      $targetMillis = $remMillis;
    }

    $remMillis -= $targetMillis;
    Time::HiRes::sleep($targetMillis/1000.0);

    my @lines = tryReadSTDIN();
    if(@lines > 0){
      chomp foreach @lines;
      my $input = join " ", @lines;
      if($input =~ /\bs\b/){
        print "skipping\n";
        $remMillis = 0;
      }
    }
  }
}

sub tryReadSTDIN(){
  my $select = IO::Select->new( \*STDIN );
  my @lines;
  while(my @fhs = $select->can_read(0)){
    for my $fh(@fhs) {
      push @lines, $fh->getline();
    }
  }
  return @lines;
}

sub readSecret($){
  my ($key) = @_;
  my @lines = `cat $ENV{HOME}/.secrets 2>/dev/null`;
  for my $line(@lines){
    if($line =~ /^\s*$key\s*=\s*(.+)$/){
      my $val = $1;
      if($val =~ /^!h!.*!f!$/){
        $val = `gpg-sym '$val'`;
        chomp $val;
      }
      return $val;
    }
  }
  die "could not read secret $key\n";
}

sub run(@){
  my $success = tryrun @_;
  die "Error running '@_'\n" if not $success;
}
sub runQuiet(@){
  my $success = tryrunQuiet @_;
  die "Error running '@_'\n" if not $success;
}
sub tryrun(@){
  print "@_\n";
  tryrunQuiet(@_);
}
sub tryrunQuiet(@){
  system @_;
  return $? == 0 ? 1 : 0;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  my $cur = pop @words if not $isNewWord;

  if(@words == 0){
    return (
      "-g", "--gui",
      "-l", "--log", "log",
      @serviceCmds,
      @engineCmds,
      "-b", "--backup", "backup");
  }

  if(@words > 0 and $words[0] =~ /^(-l|--log|log)/){
    if(@words == 1){
      return ("--date=", @backupNames);
    }elsif(@words == 2 and $words[1] =~ /^--date/){
      return @backupNames;
    }
  }

  return ();
}

&main(@ARGV);
