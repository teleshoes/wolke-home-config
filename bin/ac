#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub getACByName($);
sub readAC($);
sub writeAC($$);
sub readMideaCube($);
sub writeMideaCube($$);
sub readGEAC($);
sub writeGEAC($$);
sub readMideaRuby($);
sub writeMideaIR($$);
sub readTasmota($);
sub writeTasmota($$);
sub run(@);

my $ACS = [
  {
    names    => [qw(1 ac1 liv liv1 midea)],
    readDev  => "ac",
    writeDev => "ac",
    readSub  => \&readMideaCube,
    writeSub => \&writeMideaCube,
  },
  {
    names    => [qw(2 ac2 bed bed1 ge)],
    readDev  => "bed1",
    writeDev => "bed1",
    readSub  => \&readGEAC,
    writeSub => \&writeGEAC,
  },
  {
    names    => [qw(midea_ir_ruby)],
    readDev  => 1,
    readSub  => \&readMideaRuby,
    writeDev => "/dev/ttyUSB0",
    writeSub => \&writeMideaIR,
  },
  {
    names    => [qw(fan1)],
    readDev  => "fan1",
    readSub  => \&readTasmota,
    writeDev => "fan1",
    writeSub => \&writeTasmota,
  },
];
my @ALL_AC_NAMES = (map {@{$$_{names}}} @$ACS);
my %OK_AC_NAMES = map {$_ => 1} @ALL_AC_NAMES;
my $DEFAULT_AC_NAME = "liv1";

my $IPMAGIC_NAME = "raspi";

my $MODE_AUTO = "mode-auto";
my $MODE_COOL = "mode-cool";
my $MODE_DRY = "mode-dry";
my $MODE_FAN = "mode-fan";

my $FAN_AUTO = "fan-auto";
my $FAN_HIGH = "fan-high";
my $FAN_MED = "fan-med";
my $FAN_LOW = "fan-low";

my $CMD_TOGGLE = "toggle";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [AC_NAME]
    -get power info for AC
    -if AC is off:
      set power=on, mode=cool, temp=72, fan=low
    -if AC is on:
      set power=off

  AC_NAME
    one of: @ALL_AC_NAMES
    default is: $DEFAULT_AC_NAME
";

sub main(@){
  my $cmd = undef;
  my $acName = $DEFAULT_AC_NAME;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif(defined $OK_AC_NAMES{$arg}){
      $acName = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  $cmd = $CMD_TOGGLE if not defined $cmd;

  my $ac = getACByName($acName);
  if(not defined $ac){
    die "ERROR: could not find ac $acName\n";
  }

  if($cmd eq $CMD_TOGGLE){
    my $curInfo = readAC($ac);
    if(defined $curInfo and $$curInfo{power}){
      writeAC($ac, {
        power => 0,
      });
    }else{
      writeAC($ac, {
        power => 1,
        mode  => $MODE_COOL,
        temp  => 72,
        fan   => $FAN_LOW,
      });
    }
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub getACByName($){
  my ($targetName) = @_;
  for my $ac(@$ACS){
    for my $name(sort @{$$ac{names}}){
      if($name eq $targetName){
        return $ac;
      }
    }
  }
  return undef;
}

sub readAC($){
  my ($ac) = @_;
  return &{$$ac{readSub}}($$ac{readDev});
}

sub writeAC($$){
  my ($ac, $info) = @_;
  &{$$ac{writeSub}}($$ac{writeDev}, $info);
}

sub readMideaCube($){
  my ($dev) = @_;

  my $modes = {
    AUTO => $MODE_AUTO,
    COOL => $MODE_COOL,
    DRY => $MODE_DRY,
    FAN => $MODE_FAN,
  };
  my $okModes = join "|", sort keys %$modes;

  my $fans = {
    102 => $FAN_AUTO,
    100 => $FAN_HIGH,
    60  => $FAN_MED,
    40  => $FAN_LOW,
  };

  my $numRe = '\d+|\d*\.\d+';

  my $out = `midea-cube --dev='$dev' --get`;
  if($out =~ /
    ^
    \w+:
    \s* (on|off) \s+
    \s* => \s*
    \s* ($numRe)F\s*
    \(
      \s* ($numRe)F \s*
      \/
      \s* ($numRe)F \s*
    \)
    \s* mode=($okModes) \s*
    \s* fan=(\d+) \s*
    \s* eco=(True|False) \s*
  $/x){
    my ($powerStr, $temp, $insideTemp, $outsideTemp, $modeStr, $fanNum, $isEco) = (
      $1, $2, $3, $4, $5, $6, $7);
    my $fanName = "?";
    for my $namedFanSpeed(sort {$a <=> $b} keys %$fans){
      if($namedFanSpeed >= $fanNum){
        $fanName = $$fans{$namedFanSpeed};
        last;
      }
    }

    return {
      power       => ($powerStr =~ /on/i ? 1 : 0),
      mode        => $$modes{$modeStr},
      temp        => int($temp + 0.5),
      fan         => $fanName,
      eco         => ($isEco =~ /True/i ? 1 : 0),
      insideTemp  => int($insideTemp + 0.5),
      outsideTemp => int($outsideTemp + 0.5),
    };
  }else{
    return undef;
  }
}

sub writeMideaCube($$){
  my ($dev, $info) = @_;
  my @cmd = ("midea-cube");

  @cmd = (@cmd, "--dev=$dev") if defined $dev;

  if(defined $$info{power}){
    if($$info{power}){
      @cmd = (@cmd, "--on");
    }else{
      @cmd = (@cmd, "--off");
    }
  }

  if(defined $$info{mode}){
    if($$info{mode} eq $MODE_AUTO){
      @cmd = (@cmd, "--mode-auto");
    }elsif($$info{mode} eq $MODE_COOL){
      @cmd = (@cmd, "--mode-cool");
    }elsif($$info{mode} eq $MODE_DRY){
      @cmd = (@cmd, "--mode-dry");
    }elsif($$info{mode} eq $MODE_FAN){
      @cmd = (@cmd, "--mode-fan");
    }else{
      die "ERROR: unknown mode $$info{mode}\n";
    }
  }

  if(defined $$info{temp}){
    @cmd = (@cmd, "--temp", $$info{temp});
  }

  if(defined $$info{fan}){
    if($$info{fan} eq $FAN_AUTO){
      @cmd = (@cmd, "--fan-auto");
    }elsif($$info{fan} eq $FAN_HIGH){
      @cmd = (@cmd, "--fan-high");
    }elsif($$info{fan} eq $FAN_MED){
      @cmd = (@cmd, "--fan-med");
    }elsif($$info{fan} eq $FAN_LOW){
      @cmd = (@cmd, "--fan-low");
    }else{
      die "ERROR: unknown fan $$info{fan}\n";
    }
  }

  if(defined $$info{eco} and $$info{eco}){
    @cmd = (@cmd, "--set", "--eco-mode", "on");
  }else{
    @cmd = (@cmd, "--set", "--eco-mode", "off");
  }

  system @cmd;
}

sub readGEAC($){
  my ($dev) = @_;
  my $modes = {
    AUTO         => $MODE_AUTO,
    COOL         => $MODE_COOL,
    DRY          => $MODE_DRY,
    FAN_ONLY     => $MODE_FAN,
    ENERGY_SAVER => $MODE_AUTO, #ENERGY_SAVER => mode=auto + eco=True
  };
  my $okModes = join "|", sort keys %$modes;
  my $fans = {
    AUTO => $FAN_AUTO,
    HIGH => $FAN_HIGH,
    MED  => $FAN_MED,
    LOW  => $FAN_LOW,
  };
  my $okFans = join "|", sort keys %$fans;

  my $out = `ge-ac --dev '$dev' --get`;
  if($out =~ /^(OFF\s*-\s*)?(\d+)°F\s*\(cur=(\d+)°F\)\s+($okModes)\s+($okFans)$/){
    my ($powerStr, $temp, $curTemp, $modeStr, $fanStr) = ($1, $2, $3, $4, $5);
    $powerStr = "" if not defined $powerStr;

    return {
      power       => ($powerStr =~ /OFF/i ? 0 : 1),
      mode        => $$modes{$modeStr},
      temp        => $temp,
      fan         => $$fans{$fanStr},
      eco         => ($modeStr =~ /ENERGY_SAVER/ ? 1 : 0),
      insideTemp  => $curTemp,
      outsideTemp => undef,
    };
  }else{
    return undef;
  }
}

sub writeGEAC($$){
  my ($dev, $info) = @_;
  my @cmd = ("ge-ac");

  @cmd = (@cmd, "--device", $dev) if defined $dev;

  if(defined $$info{power}){
    if($$info{power}){
      @cmd = (@cmd, "--power", "on");
    }else{
      @cmd = (@cmd, "--power", "off");
    }
  }

  if(defined $$info{eco} and $$info{eco} and not defined $$info{mode}){
    $$info{mode} = $MODE_AUTO;
  }

  if(defined $$info{mode}){
    if($$info{mode} eq $MODE_AUTO){
      if(defined $$info{eco} and $$info{eco}){
        @cmd = (@cmd, "--mode", "eco");
      }else{
        @cmd = (@cmd, "--mode", "auto");
      }
    }elsif($$info{mode} eq $MODE_COOL){
      @cmd = (@cmd, "--mode", "cool");
    }elsif($$info{mode} eq $MODE_DRY){
      @cmd = (@cmd, "--mode", "dry");
    }elsif($$info{mode} eq $MODE_FAN){
      @cmd = (@cmd, "--mode", "fan");
    }else{
      die "ERROR: unknown mode $$info{mode}\n";
    }
  }

  if(defined $$info{temp}){
    @cmd = (@cmd, "--temp", $$info{temp});
  }

  if(defined $$info{fan}){
    if($$info{fan} eq $FAN_AUTO){
      @cmd = (@cmd, "--fan", "auto");
    }elsif($$info{fan} eq $FAN_HIGH){
      @cmd = (@cmd, "--fan", "high");
    }elsif($$info{fan} eq $FAN_MED){
      @cmd = (@cmd, "--fan", "med");
    }elsif($$info{fan} eq $FAN_LOW){
      @cmd = (@cmd, "--fan", "low");
    }else{
      die "ERROR: unknown fan $$info{fan}\n";
    }
  }

  system @cmd;
}

sub readMideaRuby($){
  my ($dev) = @_; #dev == acNum

  my $modes = {
    auto => $MODE_AUTO,
    cool => $MODE_COOL,
    dry => $MODE_DRY,
    fan => $MODE_FAN,
  };
  my $okModes = join "|", sort keys %$modes;

  my $fans = {
    102 => $FAN_AUTO,
    100 => $FAN_HIGH,
    60  => $FAN_MED,
    40  => $FAN_LOW,
  };

  my $out = `midea-ruby --ac=$dev --read`;
  if($out =~ /
    ^
    \s* (on|off) \s*
    \s* ($okModes) \s*
    \s* (\d+)% \s*
    \s* (\d+)F \s*
    \(
      \s* (\d+)F \s*
      \/
      \s* (\d+)F \s*
    \)
    .*
  $/x){
    my ($powerStr, $modeStr, $fanNum, $temp, $insideTemp, $outsideTemp) = (
      $1, $2, $3, $4, $5, $6);
    my $fanName = "?";
    for my $namedFanSpeed(sort keys %$fans){
      if($namedFanSpeed >= $fanNum){
        $fanName = $$fans{$namedFanSpeed};
        last;
      }
    }

    return {
      power       => $powerStr =~ /on/i ? 1 : 0,
      mode        => $$modes{$modeStr},
      temp        => $temp,
      fan         => $fanName,
      eco         => 0,
      insideTemp  => $insideTemp,
      outsideTemp => $outsideTemp,
    };
  }else{
    return undef;
  }
}

sub writeMideaIR($$){
  my ($dev, $info) = @_; #dev == /dev/ttyUSB0

  my @cmd = ("ipmagic", $IPMAGIC_NAME, "--sshc", "midea-ir-cmd");

  if(defined $$info{power}){
    if(not $$info{power}){
      @cmd = (@cmd, "off");
    }
  }

  if(defined $$info{mode}){
    if($$info{mode} eq $MODE_AUTO){
      @cmd = (@cmd, "mode-auto");
    }elsif($$info{mode} eq $MODE_COOL){
      @cmd = (@cmd, "cool");
    }elsif($$info{mode} eq $MODE_DRY){
      @cmd = (@cmd, "dry");
    }elsif($$info{mode} eq $MODE_FAN){
      @cmd = (@cmd, "fan-only");
    }else{
      die "ERROR: unknown mode $$info{mode}\n";
    }
  }

  if(defined $$info{temp}){
    @cmd = (@cmd, $$info{temp});
  }

  if(defined $$info{fan}){
    if($$info{fan} eq $FAN_AUTO){
      @cmd = (@cmd, "fan-auto");
    }elsif($$info{fan} eq $FAN_HIGH){
      @cmd = (@cmd, "high");
    }elsif($$info{fan} eq $FAN_MED){
      @cmd = (@cmd, "med");
    }elsif($$info{fan} eq $FAN_LOW){
      @cmd = (@cmd, "low");
    }else{
      die "ERROR: unknown fan $$info{fan}\n";
    }
  }

  if(defined $$info{eco} and $$info{eco}){
    print STDERR "WARNING: not setting eco with midea-ir-cmd, can only toggle with IR\n";
  }

  system @cmd;
}

sub readTasmota($){
  my ($dev) = @_;
  my $info = `tasmota --info $dev`;
  if($info =~ /^\w+:\s*(on|off)\s*/){
    my ($powerStr) = ($1);
    return {
      power       => ($powerStr =~ /on/ ? 1 : 0),
      mode        => undef,
      temp        => undef,
      fan         => undef,
      eco         => undef,
      insideTemp  => undef,
      outsideTemp => undef,
    };
  }else{
    return undef;
  }
}
sub writeTasmota($$){
  my ($dev, $info) = @_;

  my @cmd = ("tasmota", $dev);
  if(defined $$info{power} and $$info{power}){
    @cmd = (@cmd, "on");
  }else{
    @cmd = (@cmd, "off");
  }

  system @cmd;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
