#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

sub fileNameFuzzyMatch($$);
sub mtimeFuzzyMatch($$);
sub testMtimeFuzzyMatch();
sub getFileInfo($);
sub findFiles($);

my @TESTS_FUZZY_MTIME = (
  # MTIME1 => MTIME2 => IS_MATCH => DISPLAY_NAME
  ['1985-12-01 09:22:55' => '1985-12-01 09:22:55' => 1 => 'MATCH    +00h +00s'],
  ['1985-12-01 09:22:55' => '1985-12-01 13:22:55' => 1 => 'MATCH    +04h +00s'],
  ['1985-12-01 09:22:55' => '1985-12-01 13:22:58' => 1 => 'MATCH    +04h +03s'],
  ['1985-12-01 09:22:55' => '1985-12-01 09:23:55' => 0 => 'NO match +00h +60s (>3s)'],

  ['1985-12-31 23:59:59' => '1986-01-01 00:00:02' => 1 => 'MATCH    +00h +03s'],
  ['1985-12-31 23:59:59' => '1986-01-01 23:59:59' => 1 => 'MATCH    +24h +00s'],
  ['1985-12-31 23:59:59' => '1986-01-01 23:59:56' => 1 => 'MATCH    +24h -03s'],
  ['1985-12-31 23:59:59' => '1986-01-02 23:59:59' => 0 => 'NO match +48h +00s (>24h)'],

  ['1985-03-14 16:22:58' => '1985-03-15 16:22:55' => 1 => 'MATCH    +24h -03s'],
  ['1985-03-14 16:22:58' => '1985-03-15 16:22:58' => 1 => 'MATCH    +24h +00s'],
  ['1985-03-14 16:22:58' => '1985-03-15 15:23:01' => 1 => 'MATCH    +23h +03s'],
  ['1985-03-14 16:22:58' => '1985-03-15 16:23:01' => 0 => 'NO match +24h +03s (>24h)'],
);

my $fmtTestsFuzzyMtime = join "\n          ",
  map {/NO match/ ? "$_\n" : "$_"}  #extra newline after no-matches
  map {"$$_[0] ~ $$_[1] => $$_[3]"} #MTIME1 ~ MTIME2 => DISPLAY_NAME
  @TESTS_FUZZY_MTIME;

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] SRC DEST
    copy files (recursively) from <SRC> to a backup-dir <DEST>,
      skipping files with the same filesize, similar mtimes, and similar filenames

    -recursively find all files in <SRC>
    -compare filesize exactly
    -compare mtimes fuzzily (within 24h, and within 3s of a whole number of hours)
    -ignore case and certain prefixes/suffixes for filename
    -copy files to <DEST>/backup_<YYYYMMDD>_<HHMMSS>_<MILLIS>/<FILENAME>

   OPTS:
     -s | -n | --simulate | --no-act
       print a message instead of copying files

     --fuzzy-mtime (default)
      consider two mtimes to 'match':
        -if they are within 24 hours of each other
           |mtimeSeconds1 - mtimeSeconds2| <= 86400
        -if they are within 3s of being a whole number of hours apart
           |mtimeSeconds1 - mtimeSeconds2| mod 3600 <= 3

        e.g.: (smaller date is on the left for convenience)
          $fmtTestsFuzzyMtime

     --exact-mtime
       use exact mtime (in integer seconds) instead of fuzzy (+/-24h, +/-3s)
";

sub main(@){
  testMtimeFuzzyMatch();

  my $simulate = 0;
  my $fuzzyMtime = 1;
  my ($src, $dest);
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-s|-n|--simulate|--no-act)$/){
      $simulate = 1;
    }elsif($arg =~ /^(--fuzzy-mtime)$/){
      $fuzzyMtime = 1;
    }elsif($arg =~ /^(--exact-mtime)$/){
      $fuzzyMtime = 0;
    }elsif(-d $arg){
      if(not defined $src){
        $src = $arg;
      }elsif(not defined $dest){
        $dest = $arg;
      }else{
        die "$usage\nERROR: too many directories specified\n";
      }
    }else{
      die "$usage\nERROR: unknown cmdline arg \"$arg\"\n";
    }
  }

  die "$usage\nERROR: missing src dir\n" if not defined $src;
  die "$usage\nERROR: missing dest dir\n" if not defined $dest;

  my $datetimeFmt = `date +'%Y%m%d_%H%M%S'`;
  chomp $datetimeFmt;
  my $nowMillis = nowMillis();
  my $backupDir = "$dest/backup_${datetimeFmt}_$nowMillis";


  ### get files to backup
  my @filesToBackup;
  my $countTotal = 0;
  my $countSkipped = 0;
  my $countToCopy = 0;

  my @srcFiles = map {getFileInfo $_} findFiles $src;
  my @destFiles = map {getFileInfo $_} findFiles $dest;

  #to speed up exact filesize match
  my $destFilesBySize = {};
  for my $destFile(@destFiles){
    my $size = $$destFile{size};
    if(not defined $$destFilesBySize{$size}){
      $$destFilesBySize{$size} = [];
    }
    push @{$$destFilesBySize{$size}}, $destFile;
  }

  for my $srcFile(@srcFiles){
    my @matches;

    #exact size match
    if(defined $$destFilesBySize{$$srcFile{size}}){
      @matches = @{$$destFilesBySize{$$srcFile{size}}};
    }else{
      @matches = ();
    }

    if($fuzzyMtime){
      #fuzzy mtime match
      @matches = grep {mtimeFuzzyMatch($$_{mtime}, $$srcFile{mtime})} @matches;
    }else{
      #exact mtime match
      @matches = grep {$$_{mtime} == $$srcFile{mtime}} @matches;
    }

    #fuzzy filename match
    @matches = grep {fileNameFuzzyMatch($$_{file}, $$srcFile{file})} @matches;

    $countTotal++;
    if(@matches > 0){
      $countSkipped++;
    }else{
      $countToCopy++;
      push @filesToBackup, $$srcFile{file};
    }
  }

  ### summary
  my $summary = ""
    . "============\n"
    . "TOTAL:   $countTotal\n"
    . "SKIPPED: $countSkipped\n"
    . "TO COPY: $countToCopy\n"
    . "============\n"
    ;
  print "$summary";

  ### backup files
  for my $file(@filesToBackup){
    my @rsyncCmd = ("rsync", "-avP", $file, "$backupDir/");
    if($simulate){
      print "[simulate]: @rsyncCmd\n";
    }else{
      print "@rsyncCmd\n";
      system @rsyncCmd;
    }
  }

  if($countToCopy > 0){
    print "\n\n";
    print $summary;
  }
}

sub fileNameFuzzyMatch($$){
  my ($file1, $file2) = @_;
  $file1 =~ s/^.*\///;
  $file2 =~ s/^.*\///;
  $file1 = lc $file1;
  $file2 = lc $file2;

  my $ext1 = $1 if $file1 =~ s/\.(\w+)$//;
  my $ext2 = $1 if $file2 =~ s/\.(\w+)$//;
  $ext1 = "" if not defined $ext1;
  $ext2 = "" if not defined $ext2;
  if($ext1 ne $ext2){
    return 0;
  }

  $file1 =~ s/[^a-zA-Z0-9_\- ]/_/g;
  $file2 =~ s/[^a-zA-Z0-9_\- ]/_/g;

  $file1 =~ s/^_+//;
  $file2 =~ s/^_+//;

  $file1 =~ s/_+$//;
  $file2 =~ s/_+$//;

  if(length $file1 == 0 or length $file2 == 0){
    return 0;
  }

  if($file1 =~ /^(vid_|img_)?(\d{8}_)?(\d{6}_)?${file2}(_\w+)?$/){
    return 1;
  }elsif($file2 =~ /^(vid_|img_)?(\d{8}_)?(\d{6}_)?${file1}(_\w+)?$/){
    return 1;
  }else{
    return 0;
  }
}

#mtimes are within 24h, AND within 3s of a whole number of hours of each other
sub mtimeFuzzyMatch($$){
  my ($mtime1, $mtime2) = @_;
  my $diffS = $mtime1 - $mtime2;
  $diffS = 0 - $diffS if $diffS < 0;

  #difference in seconds between 'MM:SS' of each mtime
  my $subhourDriftS = ($mtime1 % 3600) - ($mtime2 % 3600);
  $subhourDriftS = 0 - $subhourDriftS if $subhourDriftS < 0;

  my $maxSubhourDriftS = 3;    #3s  MM:SS
  my $maxDiffS = 86400; #24h total

  if($diffS > $maxDiffS){
    #mtimes are more than a day apart
    return 0;
  }elsif($maxSubhourDriftS < $subhourDriftS and $subhourDriftS < (3600-$maxSubhourDriftS)){
    #mtimes MM:SS is more than 3s apart
    return 0;
  }else{
    #mtimes are within 24h, and MM:SS are within 3s
    return 1;
  }
}

sub testMtimeFuzzyMatch(){
  for my $test(@TESTS_FUZZY_MTIME){
    my ($mtimeFmt1, $mtimeFmt2, $isMatch, $displayName) = @$test;
    my $mtime1 = `date --date="$mtimeFmt1" +%s`;
    chomp $mtime1;
    my $mtime2 = `date --date="$mtimeFmt2" +%s`;
    chomp $mtime2;

    my $expected = $isMatch ? 1 : 0;
    my $actual = mtimeFuzzyMatch($mtime1, $mtime2) ? 1 : 0;

    if($expected != $actual){
      die "ERROR: fuzzy-mtime test failed: $mtimeFmt1 ~ $mtimeFmt2 => $displayName\n";
    }
  }
}

sub getFileInfo($){
  my ($file) = @_;
  my @stat = stat $file;
  my ($size, $mtime) = ($stat[7], $stat[9]);
  return {
    file => $file,
    size => $size,
    mtime => $mtime,
  };
}

sub findFiles($){
  my ($dir) = @_;
  open CMD, "-|", "find", $dir, "-type", "f"
    or die "find failed on $dir\n";
  my @files = <CMD>;
  close CMD;
  chomp foreach @files;
  @files = sort @files;
  return @files;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
