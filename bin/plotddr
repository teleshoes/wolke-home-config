#!/usr/bin/perl
use strict;
use warnings;

sub run(@);

my $gnuplotDir = "$ENV{HOME}/.cache/gnuplot-ddr";
my $bestDir = "$ENV{HOME}/.cache/best-ddr";
my $scoreFilesDir = "$ENV{HOME}/DCIM/xddr";
my $scoreFilesPixmirrorDir = "$ENV{HOME}/.cache/xddr-pixmirror";

my $pixmirrorSize = "405x720";

my @curSongs = qw(
  possession
  idola astrogazer life-is-beautiful im-so-happy
  mei love-you-more
  max-300 paranoia-survivor
);
my $curSongsRegex = "^(" . join("|", @curSongs) . ")\$";

my $ipmagicVariantDir = "fhd";
my $ipmagicName = "sx";
my $ipmagicUser = "nemo";
my $ipmagicPlotDir = "/media/sdcard/phone/xgnuplotddr";
my $ipmagicBestScoresDir = "/media/sdcard/phone/xbestddr";

my @MACH = ("--sm");
my @RCNT = ("--recent");
my @SNGL = ("--singles");
my @DBST = ("--dailybest");
my @MONO = ("--monotonic");
my @____ = ();
my @FT15 = ("--minfeet", "15");
my @FT16 = ("--minfeet", "16");
my @S800 = ("--score", "800000");
my @S965 = ("--score", "965000");

my @CUR_SONGS = ("--song", $curSongsRegex);

my @plotArr = (
  'cursongs' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @MONO, @FT15, @S800, @CUR_SONGS],
    formatOpts => ["--notes", "highscore"],
    plotOpts => [],
  },
  'cursongs_smooth' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @____, @FT15, @S800, @CUR_SONGS],
    formatOpts => ["--notes", "highscore"],
    plotOpts => ["--smooth"],
  },
  'cursongs_bumpy' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @____, @FT15, @S800, @CUR_SONGS],
    formatOpts => ["--notes", "highscore"],
    plotOpts => [],
  },
  'hard' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @MONO, @FT16, @S800],
    formatOpts => ["--notes", "highscore"],
    plotOpts => [],
  },
  'hard_smooth' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @____, @FT16, @S800],
    formatOpts => ["--notes", "highscore"],
    plotOpts => ["--smooth"],
  },
  'high' => {
    filters => [@MACH, @RCNT, @DBST, @SNGL, @____, @____, @S965],
    formatOpts => ["--notes", "highscore,fc"],
    plotOpts => [],
  },
  'doubles' => {
    filters => [@MACH, @RCNT, @DBST, @____, @MONO, @____, @S800, "--doubles"],
    formatOpts => ["--notes", "highscore"],
    plotOpts => [],
  },
);
my $plots = {@plotArr};
my @plotOrder = map {$plotArr[$_]} grep {$_%2 == 0} (0 .. $#plotArr);

my $subdirVariants = {
  'fhd' => {
    extraFilters => [],
    extraPlotOpts => ["--size", "1920x1080"],
    extraFormatOpts => [],
    reverse => 0,
  },
};

my $usage = "Usage: $0 [--nofeh|--noipmagic]\n";

sub main(@){
  my $noFeh = 0;
  my $noIpmagic = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--nofeh/){
      $noFeh = 1;
    }elsif($arg =~ /^--noIpmagic/){
      $noIpmagic = 1;
    }else{
      die $usage;
    }
  }
  die $usage if @_ > 0;

  system "rm", "-rf", $gnuplotDir;
  for my $subdir(sort keys %$subdirVariants){
    system "mkdir", "-p", "$gnuplotDir/$subdir";
    my $variant = $$subdirVariants{$subdir};
    my $num = 0;
    my @order = @plotOrder;

    my $isReverse = $$variant{reverse};
    $isReverse = 0 if not defined $isReverse;
    @order = reverse @order if $$variant{reverse};

    for my $name(@order){
      $num++;
      my $plot = $$plots{$name};
      my @filters = (@{$$plot{filters}}, @{$$variant{extraFilters}});
      my @formatOpts = (@{$$plot{formatOpts}}, @{$$variant{extraFormatOpts}});
      my @plotOpts = (@{$$plot{plotOpts}}, @{$$variant{extraPlotOpts}});

      my $file = "$gnuplotDir/$subdir/$num-gnuplot-$name.png";
      @plotOpts = ("--file", $file, @plotOpts);
      my @cmd = ("ddrname", "--gnuplot", @plotOpts, @formatOpts, @filters);

      run @cmd;
      die "error running plot $name\n" if $? != 0;
    }
  }

  system "mkdir", "-p", $scoreFilesPixmirrorDir;
  system "pixmirror",
    "--size=$pixmirrorSize",
    "--orient",
    $scoreFilesDir,
    $scoreFilesPixmirrorDir,
    ;

  system "rm", "-rf", $bestDir;
  my @bestNotHard;
  my @bestHard;
  my @bestDoubles;

  @bestHard = (@bestHard, `ddrname --bestfiles --hard --singles`);
  @bestHard = (@bestHard, `ddrname --bestfiles --nonstop`);

  @bestNotHard = (@bestNotHard, `ddrname --bestfiles --nothard --singles`);

  @bestDoubles = (@bestDoubles, `ddrname --bestfiles --doubles`);
  @bestDoubles = (@bestDoubles, `ddrname --bestfiles --nonstopdoubles`);

  chomp foreach @bestHard;
  chomp foreach @bestNotHard;
  chomp foreach @bestDoubles;

  @bestHard = map { "$scoreFilesPixmirrorDir/$_" } @bestHard;
  @bestNotHard = map { "$scoreFilesPixmirrorDir/$_" } @bestNotHard;
  @bestDoubles = map { "$scoreFilesPixmirrorDir/$_" } @bestDoubles;

  system "mkdir", "-p", "$bestDir/hard", "$bestDir/nothard", "$bestDir/doubles";
  system "cp", "-ar", @bestHard, "$bestDir/hard";
  system "cp", "-ar", @bestNotHard, "$bestDir/nothard";
  system "cp", "-ar", @bestDoubles, "$bestDir/doubles";

  my $bestQualityCount = 20;
  my @qualityRows = `ddrname --bestfiles --format '%{quality} %{file}' @MACH`;
  my %qualityByFile;
  for my $row(@qualityRows){
    if($row =~ /^([0-9\.]+)\s+(.+)$/){
      my ($quality, $file) = ($1, $2);
      $qualityByFile{$file} = $quality
    }
  }
  my @bestQuality = sort {
    $qualityByFile{$b} <=> $qualityByFile{$a}
    or
    $a cmp $b
  } keys %qualityByFile;
  @bestQuality = @bestQuality[0 .. $bestQualityCount-1];

  system "mkdir", "-p", "$bestDir/quality";
  my $rank = 1;
  for my $file(@bestQuality){
    my $newFileName = sprintf "%02d_%s", $rank, $file;
    system "cp", "-ar", "$scoreFilesPixmirrorDir/$file", "$bestDir/quality/$newFileName";
    $rank++;
  }
  for my $dir(glob "$bestDir/*"){
    for my $file(glob "$dir/*.jpg"){
      my $newFile = $file;
      #rename <DATE>_<PIC#>_<INFO>.jpg => <INFO>_<DATE>_<PIC#>.jpg
      $newFile =~ s/\/(\d{8})_(\d+)_([^\/]+)\.jpg$/\/$3_$2_$1.jpg/;
      if(not -e $newFile){
        system "mv", $file, $newFile;
      }
    }
  }

  if(not $noFeh){
    run "feh -ZF '$gnuplotDir/fhd' >/dev/null 2>/dev/null &";
  }
  if(not $noIpmagic){
    my $ipmagicHost = `ipmagic $ipmagicName`;
    chomp $ipmagicHost;

    run "rsync", "-avP", "--del", "$gnuplotDir/$ipmagicVariantDir/", "$ipmagicUser\@$ipmagicHost:$ipmagicPlotDir";
    run "rsync", "-avP", "--del", "$bestDir/", "$ipmagicUser\@$ipmagicHost:$ipmagicBestScoresDir";
    run "ipmagic", $ipmagicName, "--user", $ipmagicUser,
      "touch $ipmagicPlotDir/.nomedia $ipmagicBestScoresDir/.nomedia";
  }
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
