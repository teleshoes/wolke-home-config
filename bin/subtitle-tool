#!/usr/bin/perl
use strict;
use warnings;
use JSON qw(from_json);
use Time::HiRes qw(time);

my $OK_VIDEO_EXTS_REGEX = join "|", qw(
  avi m2ts mts mov mkv mpeg mpg mp4
);

my $OK_SUB_EXTS_REGEX = join "|", qw(
  srt
);

my $BACKUP_DIR = "$ENV{HOME}/.cache/subtitle-tool";

sub getSRTFile($);
sub editSRT($$);
sub ensureSRT($$);
sub removeSRT($);
sub selectSubTrackID($$);
sub getTracks($);
sub readFile($);
sub writeFile($$);
sub nowMillis();
sub run(@);

my $USAGE = "Usage:
  $0 [OPTS] --extract VIDEO_OR_SRT_FILE [VIDEO_OR_SRT_FILE ..]
    -obtain SRT_FILE from VIDEO_OR_SRT_FILE
      -if VIDEO_OR_SRT_FILE ext is $OK_VIDEO_EXTS_REGEX
        replace ext with 'srt' and use as SRT_FILE
      -if VIDEO_OR_SRT_FILE ext is $OK_SUB_EXTS_REGEX
        use as SRT_FILE
    -if SRT_FILE exists, do nothing
    -if VIDEO_OR_SRT_FILE is an MKV file:
      -extract SRT track using `mkvextract`, and write to SRT_FILE
    -otherwise:
      -fail with an error

  $0 [OPTS] --edit VIDEO_OR_SRT_FILE [VIDEO_OR_SRT_FILE ..]
    -obtain SRT_FILE from VIDEO_OR_SRT_FILE
      -if VIDEO_OR_SRT_FILE ext is $OK_VIDEO_EXTS_REGEX
        replace ext with 'srt' and use as SRT_FILE
      -if VIDEO_OR_SRT_FILE ext is $OK_SUB_EXTS_REGEX
        use as SRT_FILE
    -if SRT_FILE does not exist, fail
    -edit the existing SRT_FILE:
      -ensure each subtitle index is sequential (unless --no-renumber)
      -replace all newlines with a single space char (unless --no-single-line)
    -if the SRT_FILE is changed, move original SRT_FILE to BACKUP_SRT_FILE

  $0 [OPTS] VIDEO_OR_SRT_FILE [VIDEO_OR_SRT_FILE ..]
    same as: $0 --extract VIDEO_OR_SRT_FILE && $0 --edit VIDEO_OR_SRT_FILE

  BACKUP_SRT_FILE
    backup file for SRT_FILE: $BACKUP_DIR/subtitle-fix-<SRT_FILE_BOING>-<MILLIS>
      SRT_FILE_BOING
        SRT_FILE, with all chars except alphanumeric and underscore with '%'
      MILLIS
        time since epoch, in millis

  OPTS
    --replace
      when extracting subtitles, first move the existing SRT_FILE to BACKUP_SRT_FILE
      (only affects .mkv files)

    --eng
      choose the first english lang subtitle track
      (this is the default)
      same as: --priority=ENG1,1

    --alt
      choose the second english lang subtitle track
      same as: --priority=ENG2,ENG1,1

    --priority=SUB_CSV
      choose the first subtitle track that matches the first SUB

    --renumber
      when editing subtitles, ensure sequential subtitle index starting with 1
      (this is the default)
    --no-renumber
      preserve the index for subtitles

    --single-line
      when editing subtitles, replace all newlines with a single whitespace
      (this is the default)
    --no-single-line
      do not remove newlines

    SUB_CSV
      comma-separated list of <SUB>s
      e.g.:   'ENG1,ENG2,1'   'SPA2'
    SUB
      a specifier to match subtitle tracks
      <LANG><LANG_IDX>
        a language, and the index, starting with 1, of only subtitle tracks with <LANG>
      <LANG>
        same as: <LANG>1
      <IDX>
        the index, starting with 1, of all subtitle tracks
";

my $CMD_EXTRACT_AND_EDIT = "extract-and-edit";
my $CMD_EXTRACT = "extract";
my $CMD_EDIT = "edit";

sub main(@){
  my $cmd = $CMD_EXTRACT_AND_EDIT;
  my @videoOrSubFiles;
  my $subArgCSV = "ENG1,1";
  my $replace = 0;
  my $editOpts = {
    renumber       => 1,
    singleLine     => 1,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-e|--extract)$/){
      $cmd = $CMD_EXTRACT;
    }elsif($arg =~ /^(--edit)$/){
      $cmd = $CMD_EDIT;
    }elsif($arg =~ /^(-r|--replace)$/){
      $replace = 1;
    }elsif($arg =~ /^--eng$/){
      $subArgCSV = "ENG1,1";
    }elsif($arg =~ /^--alt$/){
      $subArgCSV = "ENG2,ENG1,1";
    }elsif($arg =~ /^--priority=(.+)$/){
      $subArgCSV = $1;
    }elsif($arg =~ /^(--renumber)$/){
      $$editOpts{renumber} = 1;
    }elsif($arg =~ /^(--no-renumber)$/){
      $$editOpts{renumber} = 0;
    }elsif($arg =~ /^(--single-line)$/){
      $$editOpts{singleLine} = 1;
    }elsif($arg =~ /^(--no-single-line)$/){
      $$editOpts{singleLine} = 0;
    }elsif(-f $arg and $arg =~ /\.($OK_VIDEO_EXTS_REGEX)$/i){
      push @videoOrSubFiles, $arg;
    }elsif(-f $arg and $arg =~ /\.($OK_SUB_EXTS_REGEX)$/i){
      push @videoOrSubFiles, $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: no VIDEO_OR_SUB_FILE give\n" if @videoOrSubFiles == 0;

  for my $videoOrSubFile(@videoOrSubFiles){
    if($cmd =~ /^($CMD_EXTRACT|$CMD_EXTRACT_AND_EDIT)$/){
      if($replace and $videoOrSubFile =~ /\.mkv$/){
        removeSRT($videoOrSubFile);
      }
      ensureSRT($videoOrSubFile, $subArgCSV);
    }
    if($cmd =~ /^($CMD_EDIT|$CMD_EXTRACT_AND_EDIT)$/){
      editSRT($videoOrSubFile, $editOpts);
    }
  }
}

sub getSRTFile($){
  my ($videoOrSubFile) = @_;
  my $srtFile = $videoOrSubFile;

  $srtFile =~ s/\.($OK_VIDEO_EXTS_REGEX)$/.srt/i;

  if($srtFile =~ /\.($OK_SUB_EXTS_REGEX)$/i){
    return $srtFile;
  }else{
    die "ERROR: malformed VIDEO_OR_SUB_FILE $videoOrSubFile\n"
      . "<EXT> must be one of: $OK_VIDEO_EXTS_REGEX or $OK_SUB_EXTS_REGEX\n";
  }
  return $srtFile;
}

sub editSRT($$){
  my ($videoOrSubFile, $editOpts) = @_;
  my $srtFile = getSRTFile($videoOrSubFile);
  die "ERROR: SRT_FILE does not exist\n" if not -f $srtFile;

  my $contents = readFile($srtFile);
  my @lines = split /(?<=\n)/, $contents;

  my @prefixLines;
  my @subs;
  my $curSub = undef;
  for(my $i=0; $i<@lines; $i++){
    my $line = $lines[$i];
    my $nextLine = $i+1<@lines ? $lines[$i+1] : "";
    if($line =~ /^[[:^print:]]*\d+[\r\n]*$/ and $nextLine =~ /^\d+:\d+:\d+,\d+ --> \d+:\d+:\d+,\d+[\r\n]*$/){
      $curSub = {
        numLine => $line,
        timestampLine => $nextLine,
        textLines => [],
      };
      $i++;
      push @subs, $curSub;
    }elsif(defined $curSub){
      push @{$$curSub{textLines}}, $line;
    }else{
      push @prefixLines, $line;
    }
  }

  my $newContents = join '', @prefixLines;
  for(my $idx=0; $idx<@subs; $idx++){
    my $sub = $subs[$idx];

    my $numLine = $$sub{numLine};
    if($$editOpts{renumber}){
      $numLine = ($idx+1) . "\n";
    }

    my $timestampLine = $$sub{timestampLine};
    my @textLines = @{$$sub{textLines}};

    my $text = join "", @textLines;
    if($$editOpts{singleLine}){
      $text = "";
      my @textLines = @{$$sub{textLines}};
      for(my $i=0; $i<@textLines; $i++){
        my $line = $textLines[$i];
        #remove newlines from all except last sub line and the empty line
        if($i < @textLines - 2){
          $line =~ s/[\r\n]+/ /g;
        }
        $text .= $line;
      }
    }

    $newContents .= $numLine;
    $newContents .= $timestampLine;
    $newContents .= $text;
  }

  if($contents ne $newContents){
    removeSRT($videoOrSubFile);
    writeFile($srtFile, $newContents);
  }
}

sub ensureSRT($$){
  my ($videoOrSubFile, $subArgCSV) = @_;
  my $srtFile = getSRTFile($videoOrSubFile);
  if(-e $srtFile){
    return;
  }
  my $mkvFile = $videoOrSubFile;
  if($mkvFile !~ /\.mkv/i){
    die "ERROR: malformed MKV_FILE $mkvFile, must end in .mkv\n";
  }

  my $trackID = selectSubTrackID($mkvFile, $subArgCSV);
  die "ERROR: could not find subtitle tracks in $mkvFile\n" if not defined $trackID;

  my @cmd = ("mkvextract", $mkvFile, "tracks", "$trackID:$srtFile");
  run @cmd;
}

sub removeSRT($){
  my ($videoOrSubFile) = @_;
  my $srtFile = getSRTFile($videoOrSubFile);
  if(-f $srtFile){
    my $boingSrtFile = $srtFile;
    $boingSrtFile =~ s/[^a-zA-Z0-9_]/%/g;
    if(not -d $BACKUP_DIR){
      run "mkdir", "-p", $BACKUP_DIR;
    }
    my $tmpFile = "$BACKUP_DIR/subtitle-fix-$boingSrtFile-" . nowMillis();
    my @cmd = ("mv", $srtFile, $tmpFile);
    run @cmd;
  }
}


sub selectSubTrackID($$){
  my ($mkvFile, $subArgCSV) = @_;
  my @tracks = getTracks($mkvFile);
  for my $subArg(split(/,/, $subArgCSV)){
    my ($lang, $langIdx, $idx);
    if($subArg =~ /^\s*([a-z]+)(\d+)\s*$/i){
      ($lang, $langIdx, $idx) = ($1, $2, undef);
    }elsif($subArg =~ /^\s*([a-z]+)\s*$/i){
      ($lang, $langIdx, $idx) = ($1, 1, undef);
    }elsif($subArg =~ /^\s*(\d+)\s*$/){
      ($lang, $langIdx, $idx) = (undef, undef, $1);
    }else{
      die "ERROR: malformed SUB_CSV $subArgCSV\n";
    }

    my $curLangIdx = 0;
    my $curSubIdx = 0;
    for my $track(@tracks){
      next if $$track{type} ne "subtitles";
      next if $$track{codec} !~ /SRT/i;

      my $subLang = $$track{properties}{language};
      $subLang = "" if not defined $subLang;
      if(defined $lang and lc $lang eq lc $subLang){
        $curLangIdx++;
        if($curLangIdx == $langIdx){
          return $$track{id};
        }
      }
      $curSubIdx++;
      if(defined $idx and $curSubIdx == $idx){
        return $$track{id};
      }
    }
  }

  return undef;
}

sub getTracks($){
  my ($mkvFile) = @_;
  my @cmd = ("mkvmerge", "-J", $mkvFile);
  open CMD, "-|", @cmd or die "ERROR: could not run @cmd\n";
  my $json = join '', <CMD>;
  close CMD;

  my $obj = from_json($json);
  my @tracks = @{$$obj{tracks}};
  die "ERROR: could not fetch tracks with @cmd\n" if @tracks == 0;
  return @tracks;
}

sub readFile($){
  open FH, "< $_[0]" or die "ERROR: could not read $_[0]\n$!\n";
  my $out = join '', <FH>;
  close FH;
  return $out;
}

sub writeFile($$){
  open FH, "> $_[0]" or die "ERROR: could not write $_[0]\n$!\n";
  print FH $_[1];
  close FH;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
