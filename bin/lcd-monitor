#!/usr/bin/perl
use strict;
use warnings;

sub pyeconet($);
sub pyeconetMarkup($);
sub date();
sub mtime($);

my $PYECONET_LOG_DIR = "$ENV{HOME}/.cache/logs/pyeconet";

my $DEVS = {
  lcd1 => [
    \&pyeconet,
  ],
};

sub main(@){
  my $count = `cat /tmp/lcd-monitor-count 2>/dev/null`;
  $count = 0 if $count !~ /^\d+$/;
  $count++;
  system "echo $count > /tmp/lcd-monitor-count";
  my $tick = $count % 2 == 0 ? 1 : 0;


  my @btnStrs = split /,/, `pico-lcd-msg --buttons`;
  my %btnCounts;
  for my $btnStr(@btnStrs){
    $btnCounts{$1} = $2 if $btnStr =~ /^\s*(\w+)\s*=\s*(\d+)\s*$/;
  }

  my $modeCount = 0;
  $modeCount = $btnCounts{B1} if defined $btnCounts{B1};
  $modeCount = $btnCounts{Y} if defined $btnCounts{Y};

  my @modes = @{$$DEVS{lcd1}};
  my $modeIndex = $modeCount % @modes;
  my $cmd = $modes[$modeIndex];
  &{$cmd}($tick);
}

sub pyeconet($){
  my ($tick) = @_;
  my $markup = pyeconetMarkup($tick);
  system "pico-lcd-msg", $markup;
}

sub pyeconetMarkup($){
  my ($tick) = @_;

  my @logFiles = sort {$b cmp $a} grep {-f $_} glob "$PYECONET_LOG_DIR/*.log";
  if(@logFiles == 0){
    return "!size=4!!color=red!ERROR:!n!!size=2!ECONET!n!NO LOGS";
  }
  my $logFile = $logFiles[0];

  my $mtime = mtime $logFile;
  my $elapsedS = time - $mtime;
  if($elapsedS < 0 or $elapsedS > 60){
    return "!size=4!!color=red!ERROR:!n!!size=2!ECONET!n!OUT OF!n!DATE";
  }

  my $info = `cat '$logFile'`;
  my $avail = $1 if $info =~ /^tank_hot_water_availability: (\d+)$/m;
  my $targetTemp = $1 if $info =~ /^set_point: (\d+)$/m;
  my $running = $1 if $info =~ /^running: (\w+)$/m;

  my $date = `date '+%a %b %d'`;
  chomp $date;
  my $time = `date '+%I:%M:%S %p'`;
  chomp $time;

  $time =~ s/^0/ /; #'03:05' => ' 3:05'


  my $availFmt = "";
  $availFmt .= "!size=10!";
  $availFmt .= $avail == 100 ? "!color=white!" : "!color=red!";
  $availFmt .= sprintf "%3s", $avail;
  $availFmt .= "%";

  my $tempFmt = "";
  $tempFmt .= "!size=7!";
  $tempFmt .= "!color=white!";
  $tempFmt .= sprintf "%3s", $targetTemp;
  $tempFmt .= "F";

  $tempFmt .= '!size=5!!color=green! *' if $running =~ /true/i;

  my $tickFmt;
  if($tick){
    $tickFmt = " !size=2!!color=blue!~!size=prev!";
  }else{
    $tickFmt = " !size=2!!color=white!~!size=prev!";
  }

  my $dateFmt = "!color=white!!size=1!!hr!!n!!size=4!!hspace=0.5!$date!n!$time";

  my $markup = "$availFmt!n!$tempFmt$tickFmt!n!$dateFmt";
  return $markup;
}

sub mtime($){
  my ($file) = @_;
  my @stat = stat $file;
  return $stat[9];
}

&main(@ARGV);
