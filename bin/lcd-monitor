#!/usr/bin/perl
use strict;
use warnings;

sub anim($$$$$);
sub pyeconet($$$$$);

sub calculateFramebuf($$$$);
sub parseDevInfo($);
sub mtime($);

my $PYECONET_LOG_DIR = "$ENV{HOME}/.cache/logs/pyeconet";

my $DISPLAYS = [
  {devName=>"lcd1", markupArgsSub=>\&anim,     widthPercent=>50},
  {devName=>"lcd1", markupArgsSub=>\&pyeconet, widthPercent=>50},
];

sub main(@){
  my $runCount = `cat /tmp/lcd-monitor-count 2>/dev/null`;
  $runCount = 0 if $runCount !~ /^\d+$/;
  $runCount++;
  system "echo $runCount > /tmp/lcd-monitor-count";

  my $devices = {};
  for my $displayInfo(@$DISPLAYS){
    my $devName = $$displayInfo{devName};
    if(not defined $$devices{$devName}){
      my $devInfoStr = `pico-lcd-msg --quiet --max-time 3 --dev=$devName info`;
      $$devices{$devName} = parseDevInfo $devInfoStr;
      $$devices{$devName}{curWidthPercent} = 0;
    }
  }

  for my $displayInfo(@$DISPLAYS){
    my $devName = $$displayInfo{devName};
    my $devInfo = $$devices{$devName};
    my %btnCounts = %{$$devInfo{btnCounts}};

    my $modeBtnCount = 0;
    $modeBtnCount = $btnCounts{B1} if defined $btnCounts{B1};
    $modeBtnCount = $btnCounts{Y} if defined $btnCounts{Y};
    my $isLandscape = $$devInfo{degrees} % 180 == 0;

    my $framebuf = calculateFramebuf(
      $$displayInfo{widthPercent}, $$devInfo{curWidthPercent}, $$devInfo{lcd}, $isLandscape);

    #move the next display over
    $$devInfo{curWidthPercent} += $$displayInfo{widthPercent};


    my ($w, $h) = ($1, $2) if $framebuf =~ /^(\d+)x(\d+)/;
    ($w, $h) = ($h, $w) if not $isLandscape;

    my @markupArgs = &{$$displayInfo{markupArgsSub}}(
      $w, $h, $isLandscape, $modeBtnCount, $runCount);

    system "pico-lcd-msg",
      @markupArgs,
      "--dev=$devName",
      "--framebuf=$framebuf",
      "--quiet",
      "--max-time", 3,
    ;
  }
}

sub anim($$$$$){
  my ($w, $h, $isLandscape, $modeBtnCount, $runCount) = @_;
  my @anim;
  if($modeBtnCount % 2 == 0){
    @anim = qw(1 2 3 4 5 4 3 2 3 4 5 4 3 2 3 4 5 4 3 2 1);
  }else{
    @anim = qw(6 7 8 7 8 6);
  }

  my $idx = $runCount % @anim;
  my $frame = $anim[$idx];
  my $file;
  if($isLandscape){
    $file = "$ENV{HOME}/Pictures/ascii/anim/landscape/$frame";
  }else{
    $file = "$ENV{HOME}/Pictures/ascii/anim/portrait/$frame";
  }

  return ($file, "--hspace=0", "--vspace=2");
}

sub pyeconet($$$$$){
  my ($w, $h, $isLandscape, $modeBtnCount, $runCount) = @_;
  my $tick = $runCount % 2 == 0 ? 1 : 0;

  my @logFiles = sort {$b cmp $a} grep {-f $_} glob "$PYECONET_LOG_DIR/*.log";
  if(@logFiles == 0){
    return "!size=4!!color=red!ERROR:!n!!size=2!ECONET!n!NO LOGS";
  }
  my $logFile = $logFiles[0];

  my $mtime = mtime $logFile;
  my $elapsedS = time - $mtime;
  if($elapsedS < 0 or $elapsedS > 60){
    return "!size=4!!color=red!ERROR:!n!!size=2!ECONET!n!OUT OF!n!DATE";
  }

  my $info = `cat '$logFile'`;
  my $avail = $1 if $info =~ /^tank_hot_water_availability: (\d+)$/m;
  my $targetTemp = $1 if $info =~ /^set_point: (\d+)$/m;
  my $running = $1 if $info =~ /^running: (\w+)$/m;

  my $dateOut = `date '+%Y-%m-%d %I:%M:%S %p %a %b'`;
  if($dateOut !~ /^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d) (AM|PM) (\w+) (\w+)$/){
    die "ERROR: could not parse date $dateOut\n";
  }
  my ($y, $m, $d, $hr, $min, $sec, $ampm, $day, $mon) = ($1, $2, $3, $4, $5, $6, $7, $8, $9);
  my $availFmt = "";
  $availFmt .= "!size=7!";
  $availFmt .= $avail == 100 ? "!color=white!OK" : "!color=red!" . sprintf "%2s%%", $avail;

  my $tempFmt = "";
  $tempFmt .= "!size=5!";
  $tempFmt .= "!color=white!";
  $tempFmt .= sprintf "%3s", $targetTemp;
  $tempFmt .= "F";

  $tempFmt .= '!size=5!!color=green! *' if $running =~ /true/i;

  my $dateFmt = "!size=1!!n!!color=green!!size=10!$hr!n!$min!vspace=0!!n!!size=2!!color=white!$day $mon $d!n!$hr:$min:$sec";

  my $tickColor = $tick ? "blue" : "white";
  my $tickFmt = "!y=53!!x=0!!size=2!!color=$tickColor!~";

  my $markup = "$availFmt!n!$tempFmt!n!$dateFmt$tickFmt";
  return $markup;
}

sub calculateFramebuf($$$$){
  my ($widthPct, $curWidthPct, $lcdGeometry, $isLandscape) = @_;

  my ($w, $h) = ($1, $2) if $lcdGeometry =~ /^(\d+)x(\d+)$/;
  my $fbW = int($w * $widthPct / 100.0);
  my $fbH = $h;

  my $fbX = int($w * $curWidthPct / 100.0);
  my $fbY = 0;

  if(not $isLandscape){
    ($fbW, $fbH) = ($fbH, $fbW);
    ($fbX, $fbY) = ($fbY, $fbX);
  }

  return "${fbW}x${fbH}+${fbX}+${fbY}";
}

sub parseDevInfo($){
  my ($devInfoStr) = @_;
  my $devInfo = {};
  if($devInfoStr =~ /^buttons: (.+)$/m){
    my @btnStrs = split /,/, $1;
    $$devInfo{btnCounts} = {};
    for my $btnStr(@btnStrs){
      $$devInfo{btnCounts}{$1} = $2 if $btnStr =~ /^\s*(\w+)\s*=\s*(\d+)\s*$/;
    }
  }
  if($devInfoStr =~ /lcd: (\d+x\d+)/){
    $$devInfo{lcd} = $1;
  }
  if($devInfoStr =~ /^orientation: (\d+) degrees$/m){
    $$devInfo{degrees} = $1;
  }

  return $devInfo;
}

sub mtime($){
  my ($file) = @_;
  my @stat = stat $file;
  return $stat[9];
}

&main(@ARGV);
