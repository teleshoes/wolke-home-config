#!/usr/bin/perl
use strict;
use warnings;

sub getLevelIds();
sub parseOptimalHexScores();
sub getOptimalHexScore();
sub run(@);

my $saveFile = "$ENV{HOME}/.hex-a-hop/save1.dat";
my $repoDir = "$ENV{HOME}/.hex-a-hop/repo";
my $repoFile = "hex-a-hop-save";

my $usage = "Usage:
  $0 [OPTS]
    parse and format hex-a-hop scores using `hex-a-hop --scoredump $saveFile`

  $0 -h|--help
    show this message

  OPTS:
    --file=FILE
      use 'FILE' instead of $saveFile

    --all | --no-hide-opt
      print all levels, including ones where CUR = OPT

    --hide-opt
      do not print levels where CUR = OPT (this is the default)

    --repo
      do not print scores
      update the git repo located at $repoDir
      also forcibly sets --no-hide-opt
";

sub main(@){
  my $hideOpt = 1;
  my $repo = 0;
  while(@_ > 0){
    my $arg = shift;
    if(@_ == 0 and $arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--file=(.+)$/){
      $saveFile = $1;
      die "ERROR: not a file '$saveFile'\n" if not -f $saveFile;
    }elsif($arg =~ /^(--all|--no-hide-opt)$/){
      $hideOpt = 0;
    }elsif($arg =~ /^(--hide-opt)$/){
      $hideOpt = 1;
    }elsif($arg =~ /^(--repo)$/){
      $repo = 1;
    }else{
      die "$usage\ninvalid args: " . join(" ", ($arg, @_)) . "\n";
    }
  }
  die $usage if @_ != 0;

  my $levelIds = getLevelIds();
  my %levelIdToName = map {("Levels\\$$_[1]" => $$_[0])} @$levelIds;

  my $levels = parseOptimalHexScores();

  my @scoreDump = `hex-a-hop --scoredump $saveFile`;
  for my $line(@scoreDump){
    next if $line =~ /^\s*0\s*(_\d+)$/;
    next if $line =~ /^\s*0\s*Levels\\map_maybe\\map\.lev$/;
    if($line =~ /^\s*(\d+)\s*(.+)$/){
      my ($score, $levelId) = ($1, $2);
      my $name = $levelIdToName{$levelId};
      if(not defined $name){
        die "unknown level ID in scoredump: $levelId\n"
      }
      if(not defined $$levels{$name}){
        die "level not found in optimal scores: $name ($levelId)\n"
      }
      $$levels{$name}{cur} = $score;
    }else{
      die "malformed hex-a-hop-scoredump line: $line";
    }
  }

  $hideOpt = 0 if $repo;

  my @entries;
  for my $name(sort keys %$levels){
    my $s = $$levels{$name};
    next if $hideOpt and $$s{cur} == $$s{opt};
    my $entry = sprintf "%02dx%02d %-30s (%3d)   %3d  %3d | %+4d (%+4d)\n",
      $$s{col}, $$s{row}, $name, $$s{par}, $$s{opt}, $$s{cur},
      ($$s{cur}-$$s{opt}), ($$s{cur}-$$s{par});
    push @entries, $entry;
  }

  my $fmt = "";
  $fmt .= sprintf "%-2sx%2s %-30s (%-3s)   %-3s  %-3s | %-4s (%-4s)\n", qw(C R NAME PAR OPT CUR DOPT DPAR);
  $fmt .= "="x67 . "\n";
  $fmt .= $_ foreach sort @entries;

  print $fmt unless $repo;

  if($repo){
    die "$repoDir not a dir\n" if not -d $repoDir;
    chdir $repoDir;
    $ENV{PWD} = $repoDir;

    my $file = "$repoDir/$repoFile";
    open FH, "> $file" or die "Couldnt write $file: $!\n";
    print FH $fmt;
    close FH;

    run "git add $repoFile";
    system "git diff-index --quiet HEAD --";
    if($? == 0){
      run "git status";
      print "\n\nno changes, no commit\n";
    }else{
      run "git diff --cached";
      run "git commit -m 'automatic commit'"
    }
  }
}

sub parseOptimalHexScores(){
  my $levels;
  my %colRows;
  for my $line(split /\n/, getOptimalHexScore()){
    next if $line =~ /^\s*$/;
    $line =~ s/\*//g;
    if($line =~ /^(\d+)\t+([^\t]+)\t+(\d+)\t+(\d+)$/){
      my ($col, $name, $opt, $par) = ($1, $2, $3, $4);
      $colRows{$col} = 1 if not defined $colRows{$col};
      $$levels{$name} = {
        col => $col,
        row => $colRows{$col},
        opt => $opt,
        par => $par,
      };
      $colRows{$col} = $colRows{$col} + 1;
    }else{
      die "could not parse optimal hex score line: $line";
    }
  }
  return $levels;
}

sub getOptimalHexScore(){
  #copy paste straight from http://www.freesfonline.de/hexahop/optimal.htm
  return "
01	Mini Island	34	34
01	Green Walls	52	52
01	Trampolines	26	26
01	Orbital	49	49
02	Weathervane	22	22
02	Explorer	37	37
02	Hive	24	24
02	Triangular	33	33
03	Toughened Tiles	124	124
03	Archipelago	30	33
04	Island	361	361
05	Stripes	110	140
05	One Two One Two	101	101
05	Deathtrap	187	295
05	Bridges	29	31
06	Not a Knot	63	63
06	Winding Order	65	65
06	Laser Tiles	68	68
06	Sniper	51	56
06	Snowflake	20	20
06	Trigger Happy	216	218
06	Deadly Snowflake	93	94
07	A Mountain	69	69
07	More Stripes	165****	175
07	Gun Platform	144	162
07	Nucleus	119	119
07	Eagerness	107	110
08	Wand	81	82
08	There and Back	32	32
08	Turtle	57	57
08	Fetch Quest	80***	121
08	A Strange Place	57****	90
09	Rolling Hexagons	79	79
09	Transport Hub	35	38
10	Spinner Tiles	29	29
10	Icy Tiles	34	34
10	Small Cog	19	19
10	All About Preparation	68	78
10	A Slippery Situation	45	45
10	Bouncing Required	30	32
10	Ferrying	33	33
11	Floating	20	22
11	Three Ways To Go	32	32
11	Lure	16	16
11	Refraction	76	76
11	Please Skate Safely	50	50
12	All Wound Up	98	98
12	Maze	291	291
12	Three More Ways	41	41
12	Revolver Cannon	167*	209
12	Telephone	59	59
12	Green Honey	103	103
13	Switch	51	61
13	Island Variation	41	41
13	Motion Sickness	65	124
13	Tri Mesh	116*	128
14	Deslippify	85	107
14	A Little Light Lifting	39	39
14	Leftovers	79**	80
14	Two Fish	103	104
14	Demolition	80	83
15	Crooked	27	27
15	Route Finder	324	324
15	Lifts	92	92
15	Clearance	75	76
15	Wheel	45	46
15	More Lifting	37	37
16	Spinners	80	80
16	Carefully Does It	61	69
17	Breakthrough	68*	136
17	Opportunist	38	43
17	Upper	51	51
17	Radioactive Ice	82	103
17	Pro Skater	62	62
17	No Swimming Allowed	38**	42
18	Laser Safety	92	96
18	Sprocket	33	37
18	Overbuild	36**	45
18	Somewhat Constructive	37	38
18	Finishing Strike	73	125
18	Big Jumps	105	105
18	Icy Road	18	18
19	Only One Way Up	119	120
19	Commute	65	75
19	House	20	23
19	Burn Your Bridges	43	46
19	Spinners II	68	134
19	Wave Cannon	100	241
19	Forced Fire	51*	120
20	Roundabouts	37	37
20	Rental Boat	26	33
20	Trampoline Retrieval	84	85
20	Hunting	52	52
20	Reversing Space	135	135
20	Branching Pathway	261	263
20	Beware Feedback Loops	50	50
20	Laser Surgery	37	38
21	Another Mountain	70	70
21	Inversion	23	25
21	Outposts	11	23
  ";
}

sub getLevelIds(){
  return [
    ["Map"                     => "map_maybe\\map.lev"],
    ["Orbital"                 => "0_green\\asymmetrix.lev"],
    ["Hive"                    => "0_green\\hive.lev"],
    ["There and Back"          => "0_green\\there and back.lev"],
    ["Triangular"              => "0_green\\triangular.lev"],
    ["Mini Island"             => "1_trampoline\\01.lev"],
    ["Island Variation"        => "1_trampoline\\01_b.lev"],
    ["Archipelago"             => "1_trampoline\\archipeligo.lev"],
    ["Weathervane"             => "1_trampoline\\arrow.lev"],
    ["Bridges"                 => "1_trampoline\\Bridges.lev"],
    ["Explorer"                => "1_trampoline\\explorer.lev"],
    ["Trampolines"             => "1_trampoline\\test_trampoline.lev"],
    ["Not a Knot"              => "2_greendoor\\Loopy.lev"],
    ["Another Mountain"        => "2_greendoor\\more mountain.lev"],
    ["A Mountain"              => "2_greendoor\\Mountain.lev"],
    ["Green Walls"             => "2_greendoor\\test_green_gate.lev"],
    ["Winding Order"           => "2_greendoor\\winding order.lev"],
    ["Rental Boat"             => "2005_11_15\\boating.lev"],
    ["Ferrying"                => "2005_11_15\\ferry.lev"],
    ["Transport Hub"           => "2005_11_15\\HUB.LEV"],
    ["Lifts"                   => "2005_11_15\\learn lift.lev"],
    ["Leftovers"               => "2005_11_15\\leftovers.lev"],
    ["Trampoline Retrieval"    => "2005_11_15\\lumpy.lev"],
    ["Rolling Hexagons"        => "2005_11_15\\rolling hexagons.lev"],
    ["Telephone"               => "2005_11_15\\telephone.lev"],
    ["Breakthrough"            => "2005_11_16\\breakthrough.lev"],
    ["Laser Safety"            => "2005_11_19\\aa.lev"],
    ["Branching Pathway"       => "2005_11_19\\branches.lev"],
    ["Only One Way Up"         => "2005_11_19\\one way up.lev"],
    ["Outposts"                => "2005_11_19\\outposts.lev"],
    ["Roundabouts"             => "2005_11_19\\turntables.lev"],
    ["Two Fish"                => "2005_11_19\\two fish.lev"],
    ["All Wound Up"            => "3_2hitfloor\\all wound up.lev"],
    ["Toughened Tiles"         => "3_2hitfloor\\collapse2.lev"],
    ["Island"                  => "3_2hitfloor\\Island.lev"],
    ["More Stripes"            => "3_2hitfloor\\more stripes.lev"],
    ["Stripes"                 => "3_2hitfloor\\Stripey.lev"],
    ["One Two One Two"         => "3_2hitfloor\\test_2hit_floor.lev"],
    ["Turtle"                  => "3_2hitfloor\\Turtle.lev"],
    ["Wand"                    => "3_2hitfloor\\Wand.lev"],
    ["Deathtrap"               => "4_gun\\deathtrap.lev"],
    ["Eagerness"               => "4_gun\\eagerness.lev"],
    ["Gun Platform"            => "4_gun\\gun platform.lev"],
    ["Nucleus"                 => "4_gun\\Nucleus.lev"],
    ["Sniper"                  => "4_gun\\Sniper.lev"],
    ["Deadly Snowflake"        => "4_gun\\snowflake 2.lev"],
    ["Snowflake"               => "4_gun\\snowflake.lev"],
    ["Laser Tiles"             => "4_gun\\Test_gun.lev"],
    ["Trigger Happy"           => "4_gun\\trigger happy.lev"],
    ["Lure"                    => "5_spinner\\lure.lev"],
    ["Maze"                    => "5_spinner\\Maxe.lev"],
    ["Motion Sickness"         => "5_spinner\\Motion.lev"],
    ["All About Preparation"   => "5_spinner\\preperation mk 3.lev"],
    ["Revolver Cannon"         => "5_spinner\\revolver cannon.lev"],
    ["Small Cog"               => "5_spinner\\small cog.lev"],
    ["Sprocket"                => "5_spinner\\Sprocket.lev"],
    ["Switch"                  => "5_spinner\\switch.lev"],
    ["Spinner Tiles"           => "5_spinner\\test_spinner.lev"],
    ["Three More Ways"         => "5_spinner\\three more ways.lev"],
    ["Three Ways To Go"        => "5_spinner\\three ways mk 2.lev"],
    ["Please Skate Safely"     => "6_ice\\oo.lev"],
    ["Refraction"              => "6_ice\\refraction.lev"],
    ["Route Finder"            => "6_ice\\route finder.lev"],
    ["A Slippery Situation"    => "6_ice\\slippy.lev"],
    ["Crooked"                 => "7_item\\crooked.lev"],
    ["Green Honey"             => "7_item\\green honey.lev"],
    ["Carefully Does It"       => "7_item\\kx.lev"],
    ["Radioactive Ice"         => "7_item\\radioactive ice.lev"],
    ["Pro Skater"              => "7_item\\slider.lev"],
    ["Spinners II"             => "7_item\\spinners mk2.lev"],
    ["Spinners"                => "7_item\\spinners.lev"],
    ["Deslippify"              => "7_item\\test_ice.lev"],
    ["Tri Mesh"                => "7_item\\tt.lev"],
    ["Wheel"                   => "7_item\\Wheel.lev"],
    ["Finishing Strike"        => "8_item2\\finishing strike.lev"],
    ["Big Jumps"               => "8_item2\\p2.lev"],
    ["Wave Cannon"             => "8_item2\\wave cannon.lev"],
    ["Clearance"               => "9_boat\\clearance.lev"],
    ["Floating"                => "9_boat\\floating.lev"],
    ["Forced Fire"             => "9_boat\\forced fire.lev"],
    ["No Swimming Allowed"     => "9_boat\\no swimming allowed.lev"],
    ["A Little Light Lifting"  => "a.lev"],
    ["House"                   => "A_Lift\\house.lev"],
    ["Hunting"                 => "A_Lift\\hunting.lev"],
    ["More Lifting"            => "A_Lift\\Lifting.lev"],
    ["Opportunist"             => "A_Lift\\opportunist_mini.lev"],
    ["Demolition"              => "A_Lift\\test_lift.lev"],
    ["Upper"                   => "A_Lift\\upper.lev"],
    ["Beware Feedback Loops"   => "b.lev"],
    ["Somewhat Constructive"   => "B_Builder\\airlock ending.lev"],
    ["Overbuild"               => "B_Builder\\overbuild.lev"],
    ["Reversing Space"         => "B_Builder\\reversing space.lev"],
    ["Burn Your Bridges"       => "B_Builder\\test_builder.lev"],
    ["A Strange Place"         => "c.lev"],
    ["Commute"                 => "commute.lev"],
    ["Bouncing Required"       => "d.lev"],
    ["Fetch Quest"             => "de-icing.lev"],
    ["Laser Surgery"           => "e.lev"],
    ["Icy Tiles"               => "ice intro.lev"],
    ["Icy Road"                => "icy road.lev"],
    ["Inversion"               => "invertor.lev"],
  ];
}

sub run(@){
  print "@_\n";
  system @_;
  die "error running \"@_\"\n" if $? != 0;
}

&main(@ARGV);
