#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub ceil($);
sub getBrightness();
sub setBrightness($$);
sub getBrightnessIntel();
sub setBrightnessIntel($);
sub getBrightnessXbacklight();
sub setBrightnessXbacklight($);
sub getBrightnessXrandr();
sub setBrightnessXrandr($);
sub ensureXrandrDevs();

my $lastFilePrefix = "/tmp/brightness";

my $MODE_INTEL = "intel";
my $MODE_XBACKLIGHT = "xbacklight";
my $MODE_XRANDR = "xrandr";
my $okModes = join "|", ($MODE_INTEL, $MODE_XBACKLIGHT, $MODE_XRANDR);

my $currentMode = undef;

my $xrandrDevs = undef;

my $display = ":0";

my @brackets = (0, 1, 10, 34, 67, 80, 100);

my $usage = "Usage:
    $0 [MODE]            prints brightness
    $0 [MODE] up|down    jump between: @brackets
    $0 [MODE] PERCENT    set brightness to PERCENT, record in $lastFilePrefix-MODE
    $0 [MODE] last       set brightness to value read from $lastFilePrefix-MODE
    $0 [MODE] system     remove $lastFilePrefix-*

  wraps several brightness get/set methods
  stores previous settings in $lastFilePrefix-MODE


  MODE: --$MODE_INTEL | --$MODE_XBACKLIGHT | --$MODE_XRANDR
    --$MODE_INTEL
      use `sudo intel-brightness`

    --$MODE_XBACKLIGHT
      use `xbacklight`

      NOTE: when brightness percentage is not an integer,
        xbacklight -set `xbacklight -get`
      lowers the brightness one notch

      however, brightnesses printed by $0 are rounded up, so:
        $0 `$0`
      should NOT change the brightness

    --$MODE_XRANDR
      use `xrandr`

    if MODE isnt specified, a MODE is detected during getting brightness
    (which also happens before setting the brightness)
    the following are tried in order, until one returns a percentage:
      $MODE_INTEL
      =>
      $MODE_XBACKLIGHT
      =>
      $MODE_XRANDR
";

sub main(@){
  if(@_ > 0 and $_[0] =~ /^--($okModes)$/){
    shift;
    $currentMode = $1;
  }

  my $arg = shift;
  die $usage if @_ != 0;

  if(not defined $arg){
    print getBrightness() . "\n";
  }elsif($arg =~ /^(up|down)$/){
    my $cur = getBrightness;

    @brackets = sort {$a <=> $b} @brackets;

    my $nearestBracketIndex;
    my $smallestDiff;
    for(my $i=0; $i<@brackets; $i++){
      my $diff = $brackets[$i] - $cur;
      $diff = 0 - $diff if $diff < 0;
      if(not defined $smallestDiff or $diff < $smallestDiff){
        $smallestDiff = $diff;
        $nearestBracketIndex = $i;
      }
    }

    my $val = $brackets[$nearestBracketIndex];
    my $valIsCloseToCur = $smallestDiff < 3;

    my $targetBracketIndex;
    if($arg eq "up" and ($valIsCloseToCur or $val < $cur)){
      $targetBracketIndex = $nearestBracketIndex + 1;
    }elsif($arg eq "down" and ($valIsCloseToCur or $val > $cur)){
      $targetBracketIndex = $nearestBracketIndex - 1;
    }else{
      $targetBracketIndex = $nearestBracketIndex;
    }

    $targetBracketIndex = 0 if $targetBracketIndex < 0;
    $targetBracketIndex = @brackets - 1 if $targetBracketIndex > @brackets - 1;

    setBrightness $brackets[$targetBracketIndex], 0;
  }elsif($arg =~ /^(last)$/){
    my $brightness = getBrightness();
    if(-e "$lastFilePrefix-$currentMode"){
      my $last = `cat $lastFilePrefix-$currentMode`;
      chomp $last;
      if($last =~ /^\d+$/){
        my $diff = $brightness - $last;
        $diff *= -1 if $diff < 0;
        my $buffer = $currentMode ne $MODE_XBACKLIGHT ? 2 : 0;
        if($diff > $buffer){
          setBrightness $last, 1;
        }
      }
    }
  }elsif($arg =~ /^(system)$/){
    system "rm -f $lastFilePrefix-*";
  }elsif($arg =~ /^(\d+(?:\.\d+)?)$/){
    setBrightness $arg, 0;
  }else{
    die $usage;
  }
}

sub ceil($){
  chomp $_[0];
  my $i = int($_[0]);
  my $d = $_[0] - $i;
  return $i + ($d > 0 ? 1 : 0);
}

sub getBrightness(){
  if(not defined $currentMode){
    my $b;
    $b = getBrightnessIntel();
    if(defined $b and $b =~ /^\d+$/){
      $currentMode = $MODE_INTEL;
      return $b;
    }

    $b = getBrightnessXbacklight();
    if(defined $b and $b =~ /^\d+$/){
      $currentMode = $MODE_XBACKLIGHT;
      return $b;
    }

    $b = getBrightnessXrandr();
    if(defined $b and $b =~ /^\d+$/){
      $currentMode = $MODE_XRANDR;
      return $b;
    }
    die "could not detect a valid brightness mode\n";
  }elsif($currentMode eq $MODE_INTEL){
    return getBrightnessIntel();
  }elsif($currentMode eq $MODE_XBACKLIGHT){
    return getBrightnessXbacklight();
  }elsif($currentMode eq $MODE_XRANDR){
    return getBrightnessXrandr();
  }
}

sub setBrightness($$){
  my ($target, $softUpdate) = @_;
  $target = ceil $target;

  print getBrightness() . " => $target\n";
  if(not defined $currentMode){
    die "mode not defined\n";
  }elsif($currentMode eq $MODE_INTEL){
    setBrightnessIntel $target;
  }elsif($currentMode eq $MODE_XBACKLIGHT){
    setBrightnessXbacklight $target;
  }elsif($currentMode eq $MODE_XRANDR){
    setBrightnessXrandr $target;
  }
  system "echo $target > $lastFilePrefix-$currentMode" if not $softUpdate;
}

sub getBrightnessIntel(){
  my $b = `sudo intel-brightness --get 2>/dev/null`;
  chomp $b;
  if($b =~ /^(\d+(?:\.\d+)?)$/){
    return ceil $1;
  }else{
    return undef;
  }
}
sub setBrightnessIntel($){
  my ($target) = @_;
  system "sudo", "intel-brightness", "--set", $target;
}

sub getBrightnessXbacklight(){
  my $b = `DISPLAY=$display xbacklight -get 2>&1`;
  chomp $b;
  if($b =~ /^(\d+(\.\d+)?)$/){
    return ceil $1;
  }else{
    return "ERROR";
  }
}
sub setBrightnessXbacklight($){
  my ($target) = @_;
  $target = ceil $target;
  system "DISPLAY=$display xbacklight -time 0 -set $target";
}

sub getBrightnessXrandr(){
  ensureXrandrDevs();
  my @devs = sort keys %$xrandrDevs;
  if(@devs < 1){
    die "Could not read brightness from any xrandr dev\n";
  }elsif(@devs > 1){
    die "Too many xrandr devices: @devs\n";
  }

  my $b = $$xrandrDevs{$devs[0]};
  return ceil($b*100)
}
sub setBrightnessXrandr($){
  my ($target) = @_;
  $target = ceil $target;
  ensureXrandrDevs();

  my @devs = sort keys %$xrandrDevs;
  if(@devs < 1){
    die "Could not set brightness on any xrandr dev\n";
  }elsif(@devs > 1){
    die "Too many xrandr devices: @devs\n";
  }

  $target /= 100;

  system "DISPLAY=$display xrandr --output $devs[0] --brightness $target";
}
sub ensureXrandrDevs(){
  return if defined $xrandrDevs;
  $xrandrDevs = {};

  my $curDev = undef;
  for my $line(`DISPLAY=$display xrandr --verbose`){
    if($line =~ /^([a-zA-Z0-9\-]+) (connected|disconnected)/){
      if($2 eq "connected"){
        $curDev = $1;
      }else{
        $curDev = undef;
      }
    }elsif($line =~ /^\s*Brightness: ([0-9\.]+)$/ and defined $curDev){
      $$xrandrDevs{$curDev} = $1;
    }
  }
}

&main(@ARGV);
