#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;

my $IPMAGIC_NAME = "pi";
my $MIDEA_RUBY_EXEC = "midea-ruby";
my $MIDEA_IR_CMD_EXEC = "midea-ir-cmd";
my $LAST_STATE_FILE = "$ENV{HOME}/.cache/ac-midea-last-state";

my $IR_CMD_REGEX = "
        on | off | cold |
        cool | fan |
        low | med | high |
        led | eco | swingOn | swingOff |
        16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 |
        24 | 25 | 26 | 27 | 28 | 29 | 30 |
        60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 |
        68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 |
        76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
        84 | 85 | 86
";

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
  $EXEC -t | --toggle
    -check $MIDEA_RUBY_EXEC --read
    -if POWER=on:
      -run: $EXEC --set off
    -if POWER=off:
      -run: $EXEC --set on

  $EXEC --cycle ARG_LIST [ARG_LIST ARG_LIST ..]
    -read last state from $LAST_STATE_FILE
    -if last state matches any <ARG_LIST>, get the next <ARG_LIST>
    -if no <ARG_LIST> matches, or the last matches, use the first <ARG_LIST>
    -parse the selected <ARG_LIST> as a space-separated list of <ARG>s
    -apply as in: $EXEC --set <ARG> <ARG> ..

       e.g.: $EXEC --cycle on '73 med cool' off
                 => $EXEC --set on
             $EXEC --cycle on '73 med cool' off
                 => $EXEC --set 73 med cool
             $EXEC --cycle on '73 med cool' off
                 => $EXEC --set off
             $EXEC --cycle on '73 med cool' off
                 => $EXEC --set on

  $EXEC -g|--get|-f|--fetch
    -run $MIDEA_RUBY_EXEC --fetch-and-read

  $EXEC -r|--read
    -run $MIDEA_RUBY_EXEC --read

  $EXEC -s|--set [ARG ARG ..]
    -run $MIDEA_IR_CMD_EXEC ARG ARG ..
    -write 'ARG ARG ..' to $LAST_STATE_FILE
    -run $MIDEA_RUBY_EXEC --fetch

  $EXEC IR_CMD_ARG [IR_CMD_ARG IR_CMD_ARG ..]
    -same as: $EXEC --set IR_CMD_ARG IR_CMD_ARG IR_CMD_ARG
      i.e.: '--set' is optional when all <ARG>s are <IR_CMD_ARG>s
      IR_CMD_ARG" . $IR_CMD_REGEX . "
";

my $COMMAND_TOGGLE = "toggle";
my $COMMAND_CYCLE = "cycle";
my $COMMAND_FETCH = "fetch";
my $COMMAND_READ = "read";
my $COMMAND_SET = "set";

sub setACState(@);
sub isACOn();
sub readLastState();
sub writeLastState($);

sub main(@){
  my $cmd = undef;
  my @cliArgs;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-t|--toggle)$/){
      $cmd = $COMMAND_TOGGLE;
    }elsif($arg =~ /^(-c|--cycle)$/){
      $cmd = $COMMAND_CYCLE;
    }elsif($arg =~ /^(-g|--get|-f|--fetch)$/){
      $cmd = $COMMAND_FETCH;
    }elsif($arg =~ /^(-r|--read)$/){
      $cmd = $COMMAND_READ;
    }elsif($arg =~ /^(-s|--set)$/){
      $cmd = $COMMAND_SET;
    }else{
      push @cliArgs, $arg;
    }
  }

  my (@irCmdArgs, @cycleArgLists);
  if(not defined $cmd){
    for my $arg(@cliArgs){
      if($arg =~ /^($IR_CMD_REGEX)$/x){
        push @irCmdArgs, $arg;
      }else{
        die "$USAGE\nERROR: unknown arg \"$arg\"\n";
      }
    }

    if(@irCmdArgs > 0){
      $cmd = $COMMAND_SET
    }else{
      $cmd = $COMMAND_TOGGLE;
    }
  }elsif($cmd eq $COMMAND_SET){
    @irCmdArgs = @cliArgs;
  }elsif($cmd eq $COMMAND_CYCLE){
    @cycleArgLists = @cliArgs;
  }


  if($cmd eq $COMMAND_TOGGLE){
    my $toggleArg = isACOn() ? "off" : "on";
    setACState($toggleArg);
  }elsif($cmd eq $COMMAND_CYCLE){
    die "ERROR: no cycle arg lists given\n" if @cycleArgLists == 0;

    my $state = readLastState();
    my $targetIdx = 0;
    for(my $i=0; $i<@cycleArgLists; $i++){
      if($state eq $cycleArgLists[$i]){
        $targetIdx = $i + 1;
        last;
      }
    }
    $targetIdx = 0 if $targetIdx > $#cycleArgLists;
    my @args = split /\s+/, $cycleArgLists[$targetIdx];
    print " \"$state\" => \"@args\"\n";
    setACState(@args);
  }elsif($cmd eq $COMMAND_FETCH){
    system $MIDEA_RUBY_EXEC, "--fetch-and-read";
  }elsif($cmd eq $COMMAND_READ){
    system $MIDEA_RUBY_EXEC, "--read";
  }elsif($cmd eq $COMMAND_SET){
    setACState(@irCmdArgs);
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub setACState(@){
  my (@irCmdArgs) = @_;
  system $MIDEA_IR_CMD_EXEC, @irCmdArgs;
  writeLastState("@irCmdArgs");
  system $MIDEA_RUBY_EXEC, "--fetch";
}

sub isACOn(){
  my $status = `$MIDEA_RUBY_EXEC --read`;
  if($status =~ /^on/){
    return 1;
  }elsif($status =~ /^off/){
    return 0;
  }else{
    die "ERROR: could not parse $MIDEA_RUBY_EXEC output: $status\n";
  }
}

sub readLastState(){
  return "" if not -e $LAST_STATE_FILE;
  my $state = `cat $LAST_STATE_FILE`;
  chomp $state;
  return $state;
}
sub writeLastState($){
  my ($contents) = @_;
  open FH, "> $LAST_STATE_FILE"
    or die "ERROR: could not write $LAST_STATE_FILE\n";
  print FH "$contents\n";
  close FH;
}

&main(@ARGV);
