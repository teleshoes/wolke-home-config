#!/usr/bin/perl
use strict;
use warnings;

my $usage ="Usage:
  $0 -h|--help
    show this message

  $0 [OPTS] APK_FILE [APK_FILE APK_FILE ..]
    show apk info with aapt

  OPTS
    --short
      (this is the default)
      format each APK_FILE as:
        <PACKAGE_NAME>  <VERSION>  sdk<SDK_VERSION> (act=<LAUNCHABLE_ACTIVITY)
    --long
      print all parsed values one per line, as <KEY>=<VAL>

    --prefix
      add 'APK_FILE ' before each line
    --no-prefix
      (this is the default)
      do not add 'APK_FILE ' before each line
";

sub parseApk($);

my $FORMAT_SHORT = "short";
my $FORMAT_LONG = "long";

sub main(@){
  my @apkFiles;
  my $format = $FORMAT_SHORT;
  my $prefix = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif(-f $arg){
      push @apkFiles, $arg;
    }elsif($arg =~ /^(--short)$/){
      $format = $FORMAT_SHORT;
    }elsif($arg =~ /^(--long)$/){
      $format = $FORMAT_LONG;
    }elsif($arg =~ /^(--prefix)$/){
      $prefix = 1;
    }elsif($arg =~ /^(--no-prefix)$/){
      $prefix = 0;
    }else{
      die "ERROR: unknown arg $arg\n";
    }
  }

  die "ERROR: at least one APK_FILE is required\n" if @apkFiles == 0;

  for my $apkFile(@apkFiles){
    my $info = parseApk($apkFile);
    my $linePrefix = $prefix ? "$apkFile " : "";
    if($format eq $FORMAT_SHORT){
      my $fmt = ""
        . "$linePrefix$$info{packageName}"
        . "  $$info{version}"
        . "  sdk=$$info{sdkVersion}"
        . "  (act=$$info{activity})"
        . "\n";
    }elsif($format eq $FORMAT_LONG){
      for my $key(sort keys %$info){
        print "$linePrefix$key = $$info{$key}\n";
      }
    }else{
      die "ERROR: unknown format $format\n";
    }
  }
}

sub parseApk($){
  my ($apkFile) = @_;
  my $out = `aapt dump badging '$apkFile'`;
  my $info = {};

  my %requiredVarSynonyms = (
    "package.name"             => "packageName",
    "package.versionName"      => "version",
    "package.versionCode"      => "versionCode",
    "application-label"        => "label",
    "sdkVersion"               => "sdk",
  );
  my %optionalVarSynonyms = (
    "launchable-activity.name" => "activity",
  );

  my @packageVars = qw(
    name versionName versionCode
    compileSdkVersion compileSdkVersionCodeName platformBuildVersionName
  );
  my @launchableActivityVars = qw(
    name label
  );
  my @lineVars = qw(application-label sdkVersion targetSdkVersion native-code);

  for my $var(@packageVars){
    $$info{"package.$var"} = $1 if $out =~ /^package: .*? \s+ $var='([^']+)'/msxi;
  }
  for my $var(@packageVars){
    $$info{"launchable-activity.$var"} = $1
      if $out =~ /^launchable-activity: .*? \s+ $var='([^']+)'/msxi;
  }
  for my $var(@lineVars){
    $$info{$var} = $1 if $out =~ /^$var\s*:\s*'([^']+)'$/msxi;
  }
  $$info{perms} = join(',', $out =~ /^uses-permission: \s* name='([^']+)'$/gmsxi);

  for my $var(sort keys %requiredVarSynonyms){
    my $syn = $requiredVarSynonyms{$var};
    if(not defined $$info{$var}){
      die "ERROR: could not find $var in $apkFile\n$out\n";
    }
    $$info{$syn} = $$info{$var};
  }

  for my $var(sort keys %optionalVarSynonyms){
    my $syn = $optionalVarSynonyms{$var};
    $$info{$syn} = defined $$info{$var} ? $$info{$var} : "";
  }

  return $info;
}

&main(@ARGV);
