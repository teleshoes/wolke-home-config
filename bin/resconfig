#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub applyResconfig();
sub setResolution($$);
sub updateResconfigScreenRes($$);
sub readResconfigScreen();
sub handleAllConfigs($);
sub handleConfig($);
sub allDigits(@);
sub scale($$$);
sub scaleInt($$$);
sub readProcLines(@);
sub readFileLines($);
sub writeFileLines($@);
sub run(@);

my $EXEC_RESCONFIG = basename $0;
my $EXEC_RES = "res";
my $CMD_POST_RES_SET = join "; ", (
  "sh ~/.xconfig",
  "taffybar-restart -d -q",
);

my $RESCONFIG_SCREEN_FILE = "$ENV{HOME}/resconfig-screen";
my @RESCONFIG_KEYS_REQUIRED = qw(name width_px height_px width_mm height_mm distance_mm);
my @RESCONFIG_KEYS_OPTIONAL = qw(res_alt1 res_alt2 res_alt3 res_alt4);
my @RESCONFIG_KEYS = (@RESCONFIG_KEYS_REQUIRED, @RESCONFIG_KEYS_OPTIONAL);

my $SCALE_PX_LOW = 1920;
my $SCALE_PX_HIGH = 2560;
my $SCALE_SIZE_LOW = 310;
my $SCALE_SIZE_HIGH = 1118;
my $SCALE_DIST_LOW = 500;
my $SCALE_DIST_HIGH = 1700;

sub configs($){
  my ($resconfigScreen) = @_;
  my $scalePx = scale($$resconfigScreen{width_px}, $SCALE_PX_LOW, $SCALE_PX_HIGH);
  my $scaleSize = scale($$resconfigScreen{width_mm}, $SCALE_SIZE_LOW, $SCALE_SIZE_HIGH);
  my $scaleDist = scale($$resconfigScreen{distance_mm}, $SCALE_DIST_LOW, $SCALE_DIST_HIGH);

  return (
    { name => "xresources-urxvt",
      destFile => "$ENV{HOME}/.xresources-urxvt",
      template => "$ENV{HOME}/.xresources-urxvt.resconfig",
      vars => {
        fontSize => 20
                    + scaleInt($scalePx, 0, 6)
                    + scaleInt($scaleSize, 0, 2)
                    + scaleInt($scaleDist, 0, 2)
                    ,
      },
    },

    { name => "gtk2rc",
      destFile => "$ENV{HOME}/.gtkrc-2.0",
      template => "$ENV{HOME}/.gtkrc-2.0.resconfig",
      vars => {
        fontSize => 12
                    + scaleInt($scalePx, 0, 6)
                    + scaleInt($scaleSize, 0, 3)
                    + scaleInt($scaleDist, 0, 3)
                    ,
      },
    },

    { name => "gtk3-css",
      destFile => "$ENV{HOME}/.config/gtk-3.0/gtk.css",
      template => "$ENV{HOME}/.config/gtk-3.0/gtk.css.resconfig",
      vars => {
        sliderWidth => scaleInt($scalePx, 15, 25),
        verticalSliderWidth => scaleInt($scalePx, 10, 20),
        horizontalSliderHeight => scaleInt($scalePx, 10, 20),
      },
    },

    { name => "gtk3-settings",
      destFile => "$ENV{HOME}/.config/gtk-3.0/settings.ini",
      template => "$ENV{HOME}/.config/gtk-3.0/settings.ini.resconfig",
      vars => {
        fontSize => scaleInt($scalePx, 12, 16),
      },
    },
  );
}

my $usage ="Usage:
    $EXEC_RESCONFIG
    $EXEC_RESCONFIG --apply
      -read resconfig-data
        WIDTH_PX, HEIGHT_PX, WIDTH_MM, HEIGHT_MM, and DISTANCE_MM
        from $RESCONFIG_SCREEN_FILE
      -calculate config-variables from resconfig-data
      -update config files using config-variables
      -replace variables in templates
        format for variables is:
          #{VAR_NAME}
          '#' literals can be written #{hash}
        e.g.: (assume var1=6 and var2=99)
          abc-#{var1}-def-#{var2}              =>  abc-6-def-99
          abc-#{hash}{var1}-def-#{var2}        =>  abc-#{var1}-def-99
          abc-#{hash}{hash}{var1}-def-#{var2}  =>  abc-#{hash}{var1}-def-99
          emptyVarName#{}                      =>  emptyVarName#{}
          ###{var1}                            =>  ##50
          ###{hash}{var1}                      =>  ###{var1}
          #{hash}#{hash}#{hash}{var1}          =>  ###{var1}
      -replace config files with variable-substituted templates

      NAME
        screen name, must be letters/numbers/dashes/underscores
      WIDTH_PX
        horizontal screen resolution in pixels
      HEIGHT_PX
        vertical screen resolution in pixels
      WIDTH_MM
        horizontal screen size, in millimeters
      HEIGHT_MM
        vertical screen size, in millimeters
      DISTANCE_MM
        expected viewing distance in millimeters

    $EXEC_RESCONFIG NAME WIDTH_PX HEIGHT_PX WIDTH_MM HEIGHT_MM DISTANCE_MM
      update config-files using indicated vars,
        instead of reading $RESCONFIG_SCREEN_FILE

    $EXEC_RESCONFIG WIDTH_PX HEIGHT_PX
    $EXEC_RESCONFIG <WIDTH_PX>x<HEIGHT_PX>
      read values from $RESCONFIG_SCREEN_FILE,
        BUT replace WIDTH_PX and HEIGHT_PX with indicated values

    $EXEC_RESCONFIG --set-res <WIDTH_PX> <HEIGHT_PX>
    $EXEC_RESCONFIG --set-res <WIDTH_PX>x<HEIGHT_PX>
      -update WIDTH_PX and HEIGHT_PX in $RESCONFIG_SCREEN_FILE
      -run: `$EXEC_RES --set RES_ALT<NUM>`
      -apply resconfig (`$EXEC_RESCONFIG --apply`)
      -run: `$CMD_POST_RES_SET`

    $EXEC_RESCONFIG --set-res ALT_NUM
      same as: $EXEC_RESCONFIG --set-res `$EXEC_RESCONFIG --res-alt<ALT_NUM>

    $EXEC_RESCONFIG --reset-res
      -update WIDTH_PX and HEIGHT_PX in $RESCONFIG_SCREEN_FILE using RES_ALT1

    $EXEC_RESCONFIG --name | NAME | name
      print \"name\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --width-px | WIDTH_PX | width_px
      print \"width_px\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --height-px | HEIGHT_PX | height_px
      print \"height_px\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --width-mm | WIDTH_MM | width_mm
      print \"width_mm\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --height-mm | HEIGHT_MM | height_mm
      print \"height_mm\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --distance-mm | DISTANCE_MM | distance_mm
      print \"distance_mm\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --res-alt1 | RES_ALT1 | res_alt1
      print \"res_alt1\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --res-alt2 | RES_ALT2 | res_alt2
      print \"res_alt2\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --res-alt3 | RES_ALT3 | res_alt3
      print \"res_alt3\" from $RESCONFIG_SCREEN_FILE
    $EXEC_RESCONFIG --res-alt4 | RES_ALT4 | res_alt4
      print \"res_alt4\" from $RESCONFIG_SCREEN_FILE
";

sub main(@){
  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--apply)$/)){
    applyResconfig();
  }elsif(@_ == 6 and $_[0] =~ /^([a-z0-9_\-]+)$/i and allDigits(@_[1,5])){
    my $resconfigScreen = {
      name          => $_[0],
      width_px      => $_[1],
      height_px     => $_[2],
      width_mm      => $_[3],
      height_mm     => $_[4],
      distance_mm   => $_[5],
    };

    handleAllConfigs $resconfigScreen;
  }elsif(@_ == 1 and $_[0] =~ /^(\d+)x(\d+)$/){
    my ($width_px, $height_px) = ($1, $2);
    my $resconfigScreen = readResconfigScreen();
    $$resconfigScreen{width_px} = $width_px;
    $$resconfigScreen{height_px} = $height_px;

    handleAllConfigs $resconfigScreen;
  }elsif(@_ == 2 and allDigits(@_[0,1])){
    my ($width_px, $height_px) = @_;
    my $resconfigScreen = readResconfigScreen();
    $$resconfigScreen{width_px} = $width_px;
    $$resconfigScreen{height_px} = $height_px;

    handleAllConfigs $resconfigScreen;
  }elsif(@_ == 3 and $_[0] =~ /^(--set-res)$/i and allDigits(@_[1,2])){
    my ($width_px, $height_px) = ($_[1], $_[2]);
    setResolution($width_px, $height_px);
  }elsif(@_ == 2 and $_[0] =~ /^(--set-res)$/i and $_[1] =~ /^(\d+)x(\d+)$/){
    my ($width_px, $height_px) = ($1, $2);
    setResolution($width_px, $height_px);
  }elsif(@_ == 2 and $_[0] =~ /^(--set-res)$/i and $_[1] =~ /^(1|2|3|4)$/){
    my $altNum = $_[1];
    my $resconfigScreen = readResconfigScreen();
    my $altRes = $$resconfigScreen{"res_alt$altNum"};
    if(defined $altRes and $altRes =~ /^(\d+)x(\d+)$/){
      my ($width_px, $height_px) = ($1, $2);
      setResolution($width_px, $height_px);
    }
  }elsif(@_ == 1 and $_[0] =~ /^(--reset-res)$/i){
    my $resconfigScreen = readResconfigScreen();
    my $altRes = $$resconfigScreen{"res_alt1"};
    if(defined $altRes and $altRes =~ /^(\d+)x(\d+)$/){
      my ($width_px, $height_px) = ($1, $2);
      if($width_px == $$resconfigScreen{width_px} and $height_px == $$resconfigScreen{height_px}){
        print "alredy ${width_px}x${height_px}\n"
      }else{
        updateResconfigScreenRes($width_px, $height_px);
      }
    }else{
      die "ERROR: res_alt1 not in $RESCONFIG_SCREEN_FILE\n";
    }
  }elsif(@_ == 1 and $_[0] =~ /^(--name|name)$/i){
    print ${readResconfigScreen()}{name} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--width-px|width_px)$/i){
    print ${readResconfigScreen()}{width_px} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--height-px|height_px)$/i){
    print ${readResconfigScreen()}{height_px} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--width-mm|width_mm)$/i){
    print ${readResconfigScreen()}{width_mm} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--height-mm|height_mm)$/i){
    print ${readResconfigScreen()}{height_mm} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--distance-mm|distance_mm)$/i){
    print ${readResconfigScreen()}{distance_mm} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--res-alt1|res_alt1)$/i){
    print ${readResconfigScreen()}{res_alt1} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--res-alt2|res_alt2)$/i){
    print ${readResconfigScreen()}{res_alt2} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--res-alt3|res_alt3)$/i){
    print ${readResconfigScreen()}{res_alt3} . "\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--res-alt4|res_alt4)$/i){
    print ${readResconfigScreen()}{res_alt4} . "\n";
  }else{
    die $usage;
  }
}

sub applyResconfig(){
  my $resconfigScreen = readResconfigScreen();
  handleAllConfigs $resconfigScreen;
}

sub setResolution($$){
  my ($width_px, $height_px) = @_;
  updateResconfigScreenRes($width_px, $height_px);

  run $EXEC_RES, "--set", "${width_px}x${height_px}";

  applyResconfig();

  sleep 1;

  run $CMD_POST_RES_SET;
}

sub updateResconfigScreenRes($$){
  my ($width_px, $height_px) = @_;

  open FH, "< $RESCONFIG_SCREEN_FILE"
    or die "could not read $RESCONFIG_SCREEN_FILE\n$!\n";
  my @lines = <FH>;
  close FH;

  my ($oldW, $oldH);
  open FH, "> $RESCONFIG_SCREEN_FILE"
    or die "could not write $RESCONFIG_SCREEN_FILE\n$!\n";
  for my $line(@lines){
    if($line =~ /(^\s*)(width_px|height_px)(\s*)=(\s*)(\d+)([\s\r\n]*$)/){
      my ($ws1, $key, $ws2, $ws3, $oldVal, $ws4) = ($1, $2, $3, $4, $5, $6);
      my $newVal;
      if($key eq "width_px"){
        ($oldW, $newVal) = ($oldVal, $width_px);
      }elsif($key eq "height_px"){
        ($oldH, $newVal) = ($oldVal, $height_px);
      }
      $line = "$ws1$key$ws2=$ws3$newVal$ws4";
    }
    print FH $line;
  }
  close FH;
  if(not defined $oldW or not defined $oldH){
    die "error updating $RESCONFIG_SCREEN_FILE\n";
  }

  print "UPDATED $RESCONFIG_SCREEN_FILE: ${oldW}x${oldH} => ${width_px}x${height_px}\n"
}

sub readResconfigScreen(){
  open FH, "< $RESCONFIG_SCREEN_FILE"
    or die "could not read $RESCONFIG_SCREEN_FILE\n$!\n";
  my @lines = <FH>;
  close FH;
  my $resconfigScreen = {};
  my $okKeys = join "|", @RESCONFIG_KEYS;
  for my $line(@lines){
    if($line =~ /^\s*($okKeys)\s*=\s*(.+)$/){
      my ($key, $val) = ($1, $2);
      $$resconfigScreen{$key} = $val;
    }
  }
  return $resconfigScreen;
}

sub handleAllConfigs($){
  my ($resconfigScreen) = @_;
  for my $key(@RESCONFIG_KEYS_REQUIRED){
    if(not defined $$resconfigScreen{$key}){
      die "missing resconfig value: $key\n";
    }
  }
  my @configs = configs $resconfigScreen;
  for my $config(@configs){
    handleConfig $config;
  }
}

sub handleConfig($){
  my ($config) = @_;
  if(not -f $$config{template}){
    die "could not find source file: $$config{template}\n";
  }
  my @templateLines = readFileLines $$config{template};

  my @allVarNames = sort keys %{$$config{vars}};

  my %usedVarNames;
  my @destLines;
  for my $line(@templateLines){
    for my $varName(@allVarNames){
      my $value = $$config{vars}{$varName};
      if(not defined $varName or length $varName == 0){
        die "var name is empty ($$config{name})\n";
      }elsif($varName eq "hash"){
        die "var name cannot be 'hash' ($$config{name})\n";
      }elsif($varName !~ /^\w+$/){
        die "var name must be alphanumeric w/ underscores ($varName)\n";
      }
      if($line =~ s/#\{$varName\}/$value/g){
        $usedVarNames{$varName} = 1;
      }
    }
    $line =~ s/#\{hash\}/#/g;
    push @destLines, $line;
  }

  for my $varName(@allVarNames){
    if(not defined $usedVarNames{$varName}){
      die "var '$varName' not used in $$config{template}\n";
    }
  }


  my $nowMillis = int(time * 1000.0);
  my $tmpFile = "/tmp/size-configs-tmp-$nowMillis";
  writeFileLines $tmpFile, @destLines;

  if(not -f $$config{destFile}){
    system "touch", $$config{destFile};
  }

  die "error writing $$config{destFile}\n" if not -f $$config{destFile};

  my @diffLines = readProcLines "diff", $$config{destFile}, $tmpFile;
  my $diffStatus = $? >> 8;
  if($diffStatus == 1 and @diffLines > 0){
    print "\n\n\n===$$config{destFile}===\n" . join '', @diffLines;
    system "rm", $$config{destFile};
    system "cp", "-ar", $tmpFile, $$config{destFile};
    die "error writing $$config{destFile}\n" if not -f $$config{destFile};
  }elsif($diffStatus == 0 and @diffLines == 0){
    print "skipping $$config{destFile}...\n";
  }else{
    die "error running diff: exit code == $diffStatus\n";
  }
}

sub readProcLines(@){
  open CMD, "-|", @_ or die "could not run '@_'\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return @lines;
}

sub readFileLines($){
  my ($file) = @_;
  open FH, "< $file" or die "could not read file $file\n$!\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}

sub writeFileLines($@){
  my ($file, @lines) = @_;
  open FH, "> $file" or die "could not write file $file\n$!\n";
  print FH @lines;
  close FH;
}

sub allDigits(@){
  for my $arg(@_){
    return 0 if not defined $arg or $arg !~ /^\d+$/;
  }
  return 1;
}

sub scale($$$){
  my ($val, $low, $high) = @_;
  return ($val-$low)/($high-$low);
}

sub scaleInt($$$){
  my ($scalingFactor, $lowVal, $highVal) = @_;
  return int($lowVal + $scalingFactor*($highVal-$lowVal) + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
