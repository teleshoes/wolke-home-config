#!/usr/bin/perl
use strict;
use warnings;
use Text::CSV;
use Time::HiRes qw(sleep time);
use utf8;

sub formatKlompInfoLine($);
sub getIpmagicCommand($@);
sub klompInfo(@);
sub offset($$$);
sub run(@);

my $extraCmdsByExec = {
  "xscreensaver-command" => ["xscreensaver-command", "-deactivate"],
};
my $extraCmdsFmt = join('',
  map {"\n      $_ => $$extraCmdsByExec{$_}"} sort keys %$extraCmdsByExec
);

my $defaultDelayMillis = 1000;

my $usage = "Usage:
  $0 [OPTS]
    -run bigtext with info from klomp-info
    -if any of the following execs exist, run each associated cmd:$extraCmdsFmt

    OPTS
       --ipmagic=CONFNAME
         runs bigtext with ipmagic (a la `ipmagic CONFNAME bigtext`)

       --ipmagic-user=USERNAME
         adds -u USERNAME to ipmagic (a la `ipmagic CONFNAME -u USERNAME bigtext`)

       --delay=MILLIS
         time to sleep in milliseconds after subsequent klomp displays
         default is $defaultDelayMillis

       --rhythmbox
         use rhythmbox-client instead of klomp-info

       --once
         run once and quit

       -w|--window
         include --fullScreen=false in bigtext opts

       --height=HEIGHT
         include --forceHeight=HEIGHT in bigtext opts

       --width=WIDTH
         include --forceWidth=WIDTH in bigtext opts

       --off
         run `pkill ^bigtext\$` and `bigtext -k` (local or with ipmagic)
         ignore options: --once --delay --height --width

       --toggle
         check if bigtext is running with:
           `pgrep ^bigtext\$` (local or with ipmagic)
         if bigtext is running:
           run `pkill ^bigtext\$` and `bigtext -k` (same as --off)
         otherwise:
           start bigtext normally (this option has no effect if not running)
";

my $MODE_ON = "on";
my $MODE_OFF = "off";
my $MODE_TOGGLE = "toggle";

sub main(@){
  my $mode = $MODE_ON;
  my $opts = {
    ipmagic      => undef,
    ipmagicUser  => undef,
    delay        => $defaultDelayMillis,
    useRhythmbox => 0,
    once         => 0,
    window       => 0,
    height       => undef,
    width        => undef,
  };

  while(@_ > 0){
    my $arg=shift;
    if($arg =~ /^--ipmagic=(.*)$/){
      $$opts{ipmagic} = $1;
    }elsif($arg =~ /^--ipmagic-user=(.*)$/){
      $$opts{ipmagicUser} = $1;
    }elsif($arg =~ /^--delay=(\d+)$/){
      $$opts{delay} = $1;
    }elsif($arg =~ /^(--rhythmbox)$/){
      $$opts{useRhythmbox} = 1;
    }elsif($arg =~ /^--once$/){
      $$opts{once} = 1;
    }elsif($arg =~ /^(-w|--window)$/){
      $$opts{window} = 1;
    }elsif($arg =~ /^--height=(\d+)$/){
      $$opts{height} = $1;
    }elsif($arg =~ /^--width=(\d+)$/){
      $$opts{width} = $1;
    }elsif($arg =~ /^--off$/){
      $mode = $MODE_OFF;
    }elsif($arg =~ /^--toggle$/){
      $mode = $MODE_TOGGLE;
    }else{
      die $usage;
    }
  }

  if($mode eq $MODE_TOGGLE){
    my @pgrepCmd = getIpmagicCommand($opts, 'pgrep', '-f', '\S*python\S* \S*qtbigtext.py');
    open FH, "-|", @pgrepCmd
      or die "could not run @pgrepCmd\n$!\n";
    my @procs = <FH>;
    close FH;
    if(@procs > 0 and $procs[0] =~ /^\d+$/){
      $mode = $MODE_OFF;
    }else{
      $mode = $MODE_ON;
    }
  }

  if($mode eq $MODE_OFF){
    system getIpmagicCommand($opts, 'pkill', '^bigtext$');
    system getIpmagicCommand($opts, 'bigtext', '-k');
    exit;
  }elsif($mode ne $MODE_ON){
    die "ERROR: unknown mode $mode\n";
  }

  my @bigtextOpts;
  push @bigtextOpts, "--fullScreen=false"           if $$opts{window};
  push @bigtextOpts, "--forceHeight=$$opts{height}" if defined $$opts{height};
  push @bigtextOpts, "--forceWidth=$$opts{width}"   if defined $$opts{width};

  my @bigtextCmd = getIpmagicCommand($opts,
    "bigtext",
      "--lineSeparator=true",
      @bigtextOpts,
      "--stdin");

  my @extraCmds;
  for my $exec(sort keys %$extraCmdsByExec){
    my @whichCmd = getIpmagicCommand($opts, "which $exec");
    my $res = `@whichCmd 2>/dev/null`;
    chomp $res;
    if($res =~ /\/$exec$/){
      push @extraCmds, $$extraCmdsByExec{$exec};
    }
  }

  print "@bigtextCmd\n";
  open FH, "|-", @bigtextCmd;

  while(1){
    my $now = time;

    for my $extraCmd(@extraCmds){
      run getIpmagicCommand($opts, @$extraCmd);
    }
    print FH formatKlompInfoLine($opts);
    last if $$opts{once};

    my $toWait = ($$opts{delay}/1000) - (time - $now);
    sleep $toWait if $toWait > 0;
    print "\n";
  }

  close FH;
}

sub formatKlompInfoLine($){
  my ($opts) = @_;
  my $info;
  if($$opts{useRhythmbox}){
    $info = rhythmboxInfo(qw(pos len title artist album number));
  }else{
    $info = klompInfo(qw(pos len title artist album number));
  }

  my $fmt = ''
    . "$$info{pos} / $$info{len}  #$$info{number}\n"
    . "$$info{artist}\n"
    . "$$info{album}\n"
    . "$$info{title}\n"
    ;
  $fmt =~ s/\\/\\\\/g;
  $fmt =~ s/\n/\\n/g;
  $fmt =~ s/\t/\\t/g;
  $fmt =~ s/\r//g;
  $fmt .= "\n";
  utf8::encode($fmt);
  print $fmt;
  return $fmt;
}

sub getIpmagicCommand($@){
  my ($opts, @cmd) = @_;
  my $ipmagic = $$opts{ipmagic};
  my $ipmagicUser = $$opts{ipmagicUser};
  if(defined $ipmagic){
    @cmd = map {$_ =~ s/'/'\\''/g; "'$_'"} @cmd;
    if(defined $ipmagicUser){
      @cmd = ("ipmagic", $ipmagic, "-u", $ipmagicUser, @cmd);
    }else{
      @cmd = ("ipmagic", $ipmagic, @cmd);
    }
  }
  return @cmd;
}

sub klompInfo(@){
  my @cols = @_;

  my $csv = Text::CSV->new ( { binary => 1 } );
  $csv->parse(`klomp-info -c @cols`);

  my @vals = $csv->fields();
  die "Error parsing klomp-info CSV\n" if @cols != @vals;

  my $info = {};
  for(my $i=0; $i<@cols; $i++){
    my $col = $cols[$i];
    my $val = $vals[$i];
    $$info{$col} = $val;
  }
  return $info;
}

sub rhythmboxInfo(@){
  my @cols = @_;

  #    %at    album title
  #    %aa    album artist
  #    %aA    album artist (lowercase)
  #    %as    album artist sortname
  #    %aS    album artist sortname (lowercase)
  #    %ay    album year
  #    %ag    album genre
  #    %aG    album genre (lowercase)
  #    %an    album disc number
  #    %aN    album disc number, zero padded
  #    %st    stream title
  #    %tn    track number (i.e 8)
  #    %tN    track number, zero padded (i.e 08)
  #    %tt    track title
  #    %ta    track artist
  #    %tA    track artist (lowercase)
  #    %ts    track artist sortname
  #    %tS    track artist sortname (lowercase)
  #    %td    track duration
  #    %te    track elapsed time

  my %klompToRboxCols = (
    pos    => '%te',
    len    => '%td',
    title  => '%tt',
    artist => '%ta',
    album  => '%tt',
    number => '%tn',
  );

  my $fmt = join "###", map {$klompToRboxCols{$_}} @cols;

  my $infoStr = `rhythmbox-client --print-playing-format '$fmt'`;
  chomp $infoStr;

  my @vals = split /###/, $infoStr;

  if(@cols != @vals){
    die "ERROR: could not parse rhythmbox-client output\n";
  }

  my $info = {};
  for(my $i=0; $i<@cols; $i++){
    my $col = $cols[$i];
    my $val = $vals[$i];
    $$info{$col} = $val;
  }
  return $info;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
