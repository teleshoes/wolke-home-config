#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub readSecrets();
sub decrypt($);
sub rotateLogs();
sub updateTokenConf($$$);
sub readFile($);
sub writeFile($$);
sub nowMillis();
sub run(@);

my $CONF_FILE = "$ENV{HOME}/.config/midea.conf";
my $EXEC_CLI = "midea-beautiful-air-cli";
my @EXEC_PATHS = ("$ENV{HOME}/.local/bin");
my $LOG_DIR = "$ENV{HOME}/.cache/logs/midea-cube-status";

my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my $SECRETS_PREFIX = "midea";
my $SECRETS_KEYS_REGEX = join "|", qw(app_key email password);
my %SECRETS_ENC_KEYS = map {$_ => 1} qw(password);

my $DEV_MODE_IP = "ip";
my $DEV_MODE_ID = "id";
my $AUTH_MODE_TOKEN = "token";
my $AUTH_MODE_LOGIN = "login";

my $MODE_STATUS = "status";
my $MODE_SET = "set";
my $MODE_FETCH_TOKEN = "fetch-token";
my $MODE_ROTATE_LOGS = "rotate-logs";

my $FORMAT_SUMMARY = "summary";
my $FORMAT_FULL = "full";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] -g | --get
    -run `$EXEC_CLI status --credentials --ip IP --token TOKEN --key KEY`
    -log the full status to $LOG_DIR/<YYYY-MM-DD_HHMMSS>_<MILLIS>_<DEV_NAME>.log
    -print a one-line summary of status

  $EXEC [OPTS] --status | status
    -run `$EXEC_CLI status --credentials --ip IP --token TOKEN --key KEY`
    -log the full status to $LOG_DIR/<YYYY-MM-DD_HHMMSS>_<MILLIS>_<DEV_NAME>.log
    -print the full status

  $EXEC [OPTS] --on | on
    -same as: $EXEC [OPTS] --set --running true
  $EXEC [OPTS] --off | off
    -same as: $EXEC [OPTS] --set --running false

  $EXEC [OPTS] --high | high
    -same as: $EXEC [OPTS] --set --fan-speed 80
  $EXEC [OPTS] --low | low
    -same as: $EXEC [OPTS] --set --fan-speed 40

  $EXEC [OPTS] --humidity=TARGET_HUMIDITY_PERCENT
  $EXEC [OPTS] --target-humidity=TARGET_HUMIDITY_PERCENT
    -same as: $EXEC [OPTS] --set --target-humidity=TARGET_HUMIDITY_PERCENT

  $EXEC [OPTS] --set|set [SET_ARG SET_ARG ..]
    -run `$EXEC_CLI set --ip IP --token TOKEN --key KEY SET_ARG SET_ARG`

  $EXEC [OPTS] -f | --fetch | --fetch-token | fetch
    -get status as in $EXEC --status --login
      -implies --login
    -store token in $CONF_FILE
      -if file contains a line starting with \"DEV_NAME.token = \", replace that line
      -otherwise, append to the end of the file
    -store key in $CONF_FILE
      -if file contains a line starting with \"DEV_NAME.key = \", replace that line
      -otherwise, append to the end of the file

  $EXEC --rotate-logs
    -find all log files named $LOG_DIR/<YYYY-MM-DD>_<MILLIS>_<DEV_NAME>.log
    -for each date <YYYY-MM-DD> and <DEV_NAME> in log files:
      -if date is yesterday, today, or a future date, skip that date
      -parse each log file with that date+device, and obtain humid%, ignoring unparseable logs
      -calculate the mean average AVG_HUMID_PCT, rounded to the nearest percent
      -create a LZMA-compressed tar file:
        $LOG_DIR/<YYYY-MM-DD>_<DEV_NAME>_<AVG_HUMD_PCT>rh.tar.xz

  OPTS
    --dev=DEVICE_NAME | --DEVICE_NAME | DEVICE_NAME
      use DEVICE_NAME from $CONF_FILE
      (default is first device in $CONF_FILE)

    --id
      use `--id` instead of `--ip`

    --ip
      use `--ip` instead of `--id`
      (this is the default)

    --login | --account | --email
      use `--account EMAIL --password PASSWORD`
      instead of `--token TOKEN --key KEY`

    --no-login | --token
      use `--token TOKEN --key KEY`
      instead of `--account EMAIL --password PASSWORD`
      (this is the default)

    --cloud
      pass '--cloud' to $EXEC_CLI

    --no-cloud
      do not pass '--cloud' to $EXEC_CLI
      (this is the default)
";

sub main(@){
  my $conf = readConf();
  my $mode = $MODE_STATUS;
  my $devMode = $DEV_MODE_IP;
  my $authMode = $AUTH_MODE_TOKEN;
  my $devName = undef;
  my $useCloud = 0;
  my $statusFmt = $FORMAT_SUMMARY;
  my @setArgs;

  my $devNameRegex = join "|", @{$$conf{deviceOrder}};

  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $mode = $MODE_STATUS;
      $statusFmt = $FORMAT_SUMMARY;
    }elsif($arg =~ /^(-s|--status|status)$/){
      $mode = $MODE_STATUS;
      $statusFmt = $FORMAT_FULL;
    }elsif($arg =~ /^(-f|--fetch|--fetch-token|fetch)$/){
      $mode = $MODE_FETCH_TOKEN;
      $authMode = $AUTH_MODE_LOGIN;
    }elsif($arg =~ /^(--set|set)$/){
      $mode = $MODE_SET;
      @setArgs = @_;
      @_ = ();
    }elsif($arg =~ /^(--on|on)$/){
      $mode = $MODE_SET;
      @setArgs = ("--running", "true");
    }elsif($arg =~ /^(--off|off)$/){
      $mode = $MODE_SET;
      @setArgs = ("--running", "false");
    }elsif($arg =~ /^(--high|high)$/){
      $mode = $MODE_SET;
      @setArgs = ("--fan-speed", "80");
    }elsif($arg =~ /^(--low|low)$/){
      $mode = $MODE_SET;
      @setArgs = ("--fan-speed", "40");
    }elsif($arg =~ /^(--humidity|--target-humidity)=(\d+)$/){
      $mode = $MODE_SET;
      @setArgs = ("--target-humidity", $2);
    }elsif($arg =~ /^--rotate-logs$/){
      $mode = $MODE_ROTATE_LOGS;
    }elsif($arg =~ /^--dev=($devNameRegex)$/){
      $devName = $1;
    }elsif($arg =~ /^(?:--)?($devNameRegex)$/){
      $devName = $1;
    }elsif($arg =~ /^(--id)$/){
      $devMode = $DEV_MODE_ID;
    }elsif($arg =~ /^(--ip)$/){
      $devMode = $DEV_MODE_IP;
    }elsif($arg =~ /^(--no-login|--token)$/){
      $authMode = $AUTH_MODE_TOKEN;
    }elsif($arg =~ /^(--login|--account|--email)$/){
      $authMode = $AUTH_MODE_LOGIN;
    }elsif($arg =~ /^(--cloud)$/){
      $useCloud = 1;
    }elsif($arg =~ /^(--no-cloud)$/){
      $useCloud = 0;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  my @deviceNames = @{$$conf{deviceOrder}};
  if(@deviceNames == 0){
    die "ERROR: no devices found in $CONF_FILE\n";
  }
  $devName = $deviceNames[0] if not defined $devName;
  my $device = $$conf{devices}{$devName};

  my @devArgs;
  if($devMode eq $DEV_MODE_IP){
    @devArgs = ("--ip", $$device{ip});
  }elsif($devMode eq $DEV_MODE_ID){
    @devArgs = ("--id", $$device{id});
  }

  my @authArgs;
  if($authMode eq $AUTH_MODE_TOKEN){
    @authArgs = (
      "--token", $$device{token},
      "--key", $$device{key},
    );
  }elsif($authMode eq $AUTH_MODE_LOGIN){
    my $secrets = readSecrets();
    @authArgs = (
      "--account", $$secrets{email},
      "--password", $$secrets{password},
    );
  }

  $ENV{PATH} = join(":", split(":", $ENV{PATH}), @EXEC_PATHS);

  if($mode eq $MODE_STATUS){
    my @cmd = ($EXEC_CLI, "status", "--credentials", @devArgs, @authArgs);
    push @cmd, "--cloud" if $useCloud;

    my $dtm = `date +%Y-%m-%d_%H%M%S`;
    chomp $dtm;
    my $nowMillis = nowMillis();

    my $logFile = "$LOG_DIR/${dtm}_${nowMillis}_${devName}.log";

    my $status = `@cmd`;
    if(not -d $LOG_DIR){
      system "mkdir", "-p", $LOG_DIR;
    }
    writeFile($logFile, $status);

    if($statusFmt eq $FORMAT_SUMMARY){
      my $running = $1 if $status =~ /^\s*running\s*=\s*(.+)$/m;
      my $fanSpeed = $1 if $status =~ /^\s*fan\s*=\s*(.+)$/m;

      my $humidity = $1 if $status =~ /^\s*humid%\s*=\s*(.+)$/m;
      my $targetHumidity = $1 if $status =~ /^\s*target%\s*=\s*(.+)$/m;
      my $tempC = $1 if $status =~ /^\s*temp\s*=\s*(.+)$/m;
      my $tempF = sprintf "%.1f", $tempC*9/5+32 if defined $tempC;

      my $pwr;
      $pwr = "on " if $running =~ /true/i;
      $pwr = "off" if $running =~ /false/i;
      $pwr = "???" if not defined $pwr;

      if($$device{type} =~ /(^dh$)|(de.*humidifier)/i){
        print "$devName: $pwr  ${tempF}F $humidity%   (=> $targetHumidity%)\n";
      }else{
        die "ERROR: unknown device type $$device{type}\n";
      }
    }elsif($statusFmt eq $FORMAT_FULL){
      print $status;
    }
  }elsif($mode eq $MODE_SET){
    my @cmd = ($EXEC_CLI, "set", @devArgs, @authArgs);
    push @cmd, "--cloud" if $useCloud;
    @cmd = (@cmd, @setArgs);

    system @cmd;
  }elsif($mode eq $MODE_FETCH_TOKEN){
    my @cmd = ($EXEC_CLI, "status", "--credentials", @devArgs, @authArgs);
    push @cmd, "--cloud" if $useCloud;

    my $status = `@cmd`;

    my $token;
    if($status =~ /^\s*token\s*=\s*([0-9a-fA-F]+)$/m){
      $token = $1;
    }
    my $key;
    if($status =~ /^\s*key\s*=\s*([0-9a-fA-F]+)$/m){
      $key = $1;
    }

    if(defined $token and defined $key){
      updateTokenConf($devName, $token, $key);
      print "updated $devName token+key:\ntoken=$token\nkey=$key\n";
    }else{
      die "ERROR: could not parse token/key in status:\n$status\n";
    }
  }elsif($mode eq $MODE_ROTATE_LOGS){
    rotateLogs();
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub readConf(){
  open FH, "< $CONF_FILE" or die "ERROR: could not read $CONF_FILE\n$!\n";
  my @lines = <FH>;
  close FH;

  my $conf = {
    devices => {},
    deviceOrder => [],
  };

  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+).(\w+)\s*=\s*(\S.*)$/){
      my ($dev, $key, $val) = ($1, $2, $3);
      if(not defined $$conf{devices}{$dev}){
        $$conf{devices}{$dev} = {};
        push @{$$conf{deviceOrder}}, $dev,
      }
      $$conf{devices}{$dev}{$key} = $val;
    }
  }

  return $conf;
}

sub readSecrets(){
  my @lines = `cat $SECRETS_FILE 2>/dev/null`;
  my $secrets = {};
  for my $line(@lines){
    if($line =~ /^$SECRETS_PREFIX\.($SECRETS_KEYS_REGEX)\s*=\s*(.+)$/){
      $$secrets{$1} = $2;
    }
  }
  for my $key(sort keys %$secrets){
    $$secrets{$key} = decrypt $$secrets{$key} if defined $SECRETS_ENC_KEYS{$key};
  }
  return $secrets;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

sub rotateLogs(){
  my @logFiles = grep {-f $_} glob "$LOG_DIR/*.log";
  s/^$LOG_DIR\/// foreach @logFiles;

  my %logs;
  my $yday = `date --date=yesterday +%Y-%m-%d`;
  chomp $yday;
  for my $log(@logFiles){
    if(not -f "$LOG_DIR/$log"){
      die "ERROR: could not find log file $log\n";
    }

    if($log =~ /^(\d\d\d\d-\d\d-\d\d)_(\d\d\d\d\d\d)_(\d+)_(\w+)\.log$/){
      my ($date, $time, $millis, $devName) = ($1, $2, $3, $4);
      if($date ge $yday){
        next;
      }
      $logs{$devName} = {} if not defined $logs{$devName};
      $logs{$devName}{$date} = [] if not defined $logs{$devName}{$date};
      push @{$logs{$devName}{$date}}, $log;
    }else{
      die "ERROR: malformed log file name $log\n";
    }
  }

  chdir $LOG_DIR;
  $ENV{PWD} = $LOG_DIR;

  for my $devName(sort keys %logs){
    for my $date(sort keys %{$logs{$devName}}){
      my @dateLogs = @{$logs{$devName}{$date}};
      my $totalHumid = 0;
      my $countHumid = 0;
      for my $log(@dateLogs){
        my $contents = readFile $log;
        if($contents =~ /^\s*humid%\s*=\s*(\d+|\d*\.\d+)\s*$/m){
          $totalHumid += $1;
          $countHumid += 1;
        }
      }
      my $avgHumid = $countHumid > 0 ? int($totalHumid/$countHumid + 0.5) : 0;
      my $tarFile = "$LOG_DIR/${date}_${devName}_${avgHumid}rh.tar.xz";
      if(-e $tarFile){
        die "ERROR: $tarFile already exists\n";
      }

      system "tar",
        "--xz",
        "-c",
        "-f", $tarFile,
        @dateLogs,
      ;

      my $fileCount = `tar --list -f \"$tarFile\" | wc -l`;
      chomp $fileCount;
      if($fileCount != @dateLogs){
        die "ERROR: mismatched logfile count\n";
      }
      print "created $tarFile with $fileCount logs\n";
      print "deleting $fileCount logs\n";
      system "rm", @dateLogs;
    }
  }
}

sub updateTokenConf($$$){
  my ($devName, $token, $key) = @_;
  my $conf = readFile $CONF_FILE;
  if($conf !~ s/^(\s*$devName\.token\s*=\s*).*/$1$token/m){
    $conf .= "$devName.token = $token\n";
  }
  if($conf !~ s/^(\s*$devName\.key\s*=\s*).*/$1$key/m){
    $conf .= "$devName.key = $key\n";
  }

  writeFile($CONF_FILE, $conf);
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;
  return $contents;
}

sub writeFile($$){
  my ($file, $contents) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $contents;
  close FH;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
