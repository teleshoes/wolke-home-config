#!/usr/bin/python3
import argparse
import asyncio
import glob
import logging
import os
import re
import subprocess
import sys
import time
from pathlib import Path
from datetime import datetime, timedelta

from pyeconet import EcoNetApiInterface
from pyeconet.equipment import EquipmentType
from pyeconet.equipment.water_heater import WaterHeaterOperationMode

async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--email", type=str,
                        help="econet account email")
    parser.add_argument("--password", type=str,
                        help="econet account password")
    parser.add_argument("-v", "--verbose", "--debug", action='store_true',
                        help="set log level to DEBUG")
    parser.add_argument("-s", "--set", dest="TEMP_SET_POINT", type=int,
                        help="temperature set point (probably Â°F, 110-140)")
    parser.add_argument("-g", "--get", action='store_true',
                        help="print one-line summary of device (this is the default)")
    parser.add_argument("-i", "--info", action='store_true',
                        help="print detailed information for device")
    parser.add_argument("-l", "--log", action='store_true',
                        help="log device info to a file in log dir")
    parser.add_argument("--rotate-logs", dest="ROTATE_LOGS", action='store_true',
                        help="before logging device info, rotate logs older than yesterday")
    parser.add_argument("-e", "--energy", action="store_true",
                        help="include energy usage (requires extra API call)")
    parser.add_argument("-d", "--device", dest="DEVICE_NUM", type=int, default=1,
                        help="for multiple devices: first=1, second=2, etc")

    args = parser.parse_args()

    email = args.email
    if email == None:
      email = os.environ.get("ECONET_EMAIL")
    if args.email == None:
      email = readProc(["gpg-conf-read", str(Path.home()) + "/.secrets", "--key=econet.email"])

    password = args.password
    if args.password == None:
      password = os.environ.get("ECONET_PASSWORD")
    if args.password == None:
      password = readProc(["gpg-conf-read", str(Path.home()) + "/.secrets", "--key=econet.password"])

    if email == None or password == None or email == "" or password == "":
      die(parser.format_help()
        + "\nERROR: missing email and/or password"
        + "\n  (can be given with --email/--password command line args,"
        + "\n   or ECONET_EMAIL/ECONET_PASSWORD environment variables)"
        + "\n")

    if args.verbose:
      logging.basicConfig()
      logging.getLogger().setLevel(logging.DEBUG)

    api = None
    all_equipment = None
    try:
      token = readToken(email)
      if token != None:
        api = EcoNetApiInterface(email=None, password=None,
          account_id=token["account_id"],
          user_token=token["user_token"],
        )
        all_equipment = await api.get_equipment_by_type(
          [EquipmentType.WATER_HEATER, EquipmentType.THERMOSTAT])
    except:
      api = None
      all_equipment = None

    if api == None:
      api = await EcoNetApiInterface.login(email, password)
      writeToken(email, api.account_id, api.user_token)
      all_equipment = await api.get_equipment_by_type(
        [EquipmentType.WATER_HEATER, EquipmentType.THERMOSTAT])

    dev = getDevice(all_equipment, args.DEVICE_NUM)

    if args.TEMP_SET_POINT != None:
      old_temp = dev.set_point
      api.subscribe()
      await asyncio.sleep(1)
      dev.set_set_point(args.TEMP_SET_POINT)
      await api.refresh_equipment()
      new_temp = dev.set_point
      api.unsubscribe()
      print(f"success: {old_temp} => {new_temp}")
    elif args.info:
      if args.energy:
        await dev.get_energy_usage()
      print(formatDetails(dev), end='')
    elif args.log:
      if args.ROTATE_LOGS:
        rotateLogs()
      logDir = str(Path.home()) + "/.cache/logs/pyeconet"
      if not os.path.isdir(logDir):
        os.mkdir(logDir)

      nowFmt = time.strftime("%Y-%m-%d_%H%M%S_%s")
      logFileName = nowFmt + ".log"
      logFile = logDir + "/" + logFileName
      if args.energy:
        await dev.get_energy_usage()
      print("\n\n" + logFile)
      print(formatDetails(dev), end='')
      with open(logFile, "w") as fh:
        fh.write(formatDetails(dev))
      os.system(f"cd {logDir} && rm -f latest && ln -s {logFileName} latest");
    else:
      print(formatSummary(dev), end='')

def getDevice(equipment, devNumber):
  devicesList = []
  for devList in equipment.values():
    devicesList.extend(devList)
  devicesList.sort(key=lambda dev: dev.serial_number)

  if devNumber <= 0:
    die(f"ERROR: invalid device number {devNumber} (first device is #1)")
  elif devNumber > len(devicesList):
    die(f"ERROR: could not find device#{devNumber} for econet account")
  else:
    return devicesList[devNumber - 1]

def formatSummary(dev):
  alertMsg = ""
  if dev.alert_count != 0:
    alertMsg += f"   WARNING:alert_count={dev.alert_count}"
  if not dev.shutoff_valve_open:
    alertmsg += f"   ERROR:shutoff_valve_open=False"

  return (""
    + ""    + f"temp:{dev.set_point}"
    + "   " + f"avail:{dev.tank_hot_water_availability}%"
    + "   " + f"heating:{dev.running}"
    + alertMsg
    + "\n")

def formatDetails(dev):
  return (""
    + f"device_id: {dev.device_id}\n"
    + f"device_name: {dev.device_name}\n"
    + f"serial_number: {dev.serial_number}\n"
    + f"type: {dev.type}\n"
    + f"generic_type: {dev.generic_type}\n"
    + f"active: {dev.active}\n"
    + f"connected: {dev.connected}\n"
    + f"set_point: {dev.set_point}\n"
    + f"set_point_limits: {dev.set_point_limits}\n"
    + f"away: {dev.away}\n"
    + f"supports_away: {dev.supports_away}\n"
    + f"vacation: {dev.vacation}\n"
    + f"alert_count: {dev.alert_count}\n"
    + f"wifi_signal: {dev.wifi_signal}\n"
    + ""
    + f"enabled: {dev.enabled}\n"
    + f"tank_hot_water_availability: {dev.tank_hot_water_availability}\n"
    + f"tank_health: {dev.tank_health}\n"
    + f"compressor_health: {dev.compressor_health}\n"
    + f"leak_installed: {dev.leak_installed}\n"
    + f"shutoff_valve_open: {dev.shutoff_valve_open}\n"
    + f"has_shutoff_valve: {dev.has_shutoff_valve}\n"
    + f"running: {dev.running}\n"
    + f"running_state: {dev.running_state}\n"
    + f"demand_response_over: {dev.demand_response_over}\n"
    + f"mode: {dev.mode}\n"
    + f"modes: {dev.modes}\n"
    + f"override_status: {dev.override_status}\n"
    + f"energy_usage: {dev.energy_usage}\n"
    + f"historical_energy_usage: {dev.historical_energy_usage}\n"
    + f"energy_type: {dev.energy_type}\n"
    + f"todays_energy_usage: {dev.todays_energy_usage}\n"
    + f"todays_water_usage: {dev.todays_water_usage}\n"
  )

def rotateLogs():
  logDir = str(Path.home()) + "/.cache/logs/pyeconet"
  logFiles = glob.glob(logDir + "/" + "*.log")

  logFileNamesByDate = {}
  for logFile in logFiles:
    m = re.match(f"^{logDir}/(\d\d\d\d-\d\d-\d\d)(_\d+_\d+.log)$", logFile)
    if m:
      date = m.group(1)
      fileName = m.group(1) + m.group(2)
      if date not in logFileNamesByDate:
        logFileNamesByDate[date] = []
      logFileNamesByDate[date].append(fileName)

  yday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

  for date in sorted(logFileNamesByDate.keys()):
    if date >= yday:
      #do not rotate today or yesterday
      continue
    mtimeMax = None
    tempMax = 0
    kwhMax = 0
    logFileNames = logFileNamesByDate[date]
    for logFileName in logFileNames:
      mtime = os.path.getmtime(logDir + "/" + logFileName)
      info = parseLogFile(logDir + "/" + logFileName)
      temp = maybeApply(int, info.get("set_point"))
      unit = maybeApply(str.upper, info.get("energy_type"))
      kwh = maybeApply(float, info.get("todays_energy_usage"))
      if mtimeMax == None or mtime > mtimeMax:
        mtimeMax = mtime
      if unit == "KWH" and kwh != None and kwh > kwhMax:
        kwhMax = kwh
      if temp != None and temp > tempMax:
        tempMax = temp
    whMax = int(1000 * kwhMax + 0.5)

    tarFileName = f"{date}_{tempMax}F_{whMax}Wh.tar.xz"
    tarFile = logDir + "/" + tarFileName

    print(f"compressing {len(logFileNames)} files in {tarFile}")
    subprocess.call(
       ["tar",
        "--xz",
        "-c",
        "--remove-files",
        "-f", tarFile,
       ] + logFileNames,
       cwd=logDir
    )
    subprocess.call(["touch", tarFile, f"--date=@{mtimeMax}"])

def maybeApply(fct, val):
  try:
    return fct(val)
  except:
    return None

def parseLogFile(logFile):
  atts = [ "device_id"
         , "device_name"
         , "serial_number"
         , "type"
         , "generic_type"
         , "active"
         , "connected"
         , "set_point"
         , "set_point_limits"
         , "away"
         , "supports_away"
         , "vacation"
         , "alert_count"
         , "wifi_signal"
         , "enabled"
         , "tank_hot_water_availability"
         , "tank_health"
         , "compressor_health"
         , "leak_installed"
         , "shutoff_valve_open"
         , "has_shutoff_valve"
         , "running"
         , "running_state"
         , "demand_response_over"
         , "mode"
         , "modes"
         , "override_status"
         , "energy_usage"
         , "historical_energy_usage"
         , "energy_type"
         , "todays_energy_usage"
         , "todays_water_usage"
         ]
  attRegex = "|".join(atts)
  lines = []
  with open(logFile, "r") as fh:
    lines = fh.readlines()

  info = {}
  for line in lines:
    m = re.match("^(" + attRegex + ")\s*:\s*(.*)$", line)
    if m:
      attName = m.group(1)
      attVal = m.group(2)
      info[attName] = attVal
  return info

def readToken(email):
  tokenFileDir = str(Path.home()) + "/.cache/pyeconet-tokens/"
  try:
    lines = []
    with open(tokenFileDir + "/" + email, "r") as fh:
      lines = fh.readlines()
    for line in lines:
      m = re.match('^\s*(account_id|user_token)\s*=\s*(\S.*)$', line)
      if m and m.group(1) == "account_id":
        account_id = m.group(2)
      elif m and m.group(1) == "user_token":
        user_token = m.group(2)
    if account_id == None or user_token == None:
      return None
    else:
      return {"account_id": account_id, "user_token": user_token}
  except:
    return None

def writeToken(email, account_id, user_token):
  tokenFileDir = str(Path.home()) + "/.cache/pyeconet-tokens/"
  if not os.path.isdir(tokenFileDir):
    os.mkdir(tokenFileDir)

  with open(tokenFileDir + "/" + email, "w") as fh:
    fh.write(f"account_id={account_id}\n")
    fh.write(f"user_token={user_token}\n")

def readProc(cmd):
  return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()

def die(msg):
  print(msg, file=sys.stderr)
  os._exit(1)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
