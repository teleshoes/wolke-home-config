#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $CACHE_DIR = "$ENV{HOME}/.cache/pushups";

my $DATEFILE_NEW_DAY_START_HOUR = 4; #new date starts at 4am localtime

my $TYPE_FILTER_REGEX_ALL = '^.*$';
my $TYPE_FILTER_REGEX_EMPTY = '^$';
my $TYPE_FILTER_REGEX_DEFAULT = $TYPE_FILTER_REGEX_EMPTY;

my $EXEC = basename $0;

my $MODE_PRINT = "print";
my $MODE_DATES = "dates";
my $MODE_PLOT = "plot";
my $MODE_APPEND = "append";

sub appendDateFile($$$);
sub getDataByDate($$$);
sub printDates($$$);
sub gnuplot($$$$);
sub getDate($);
sub getTime($);
sub getDateFile($$);

my $usage = "Usage:
  $EXEC -h|--help
    print this message

  $EXEC [OPTS] [--print|--get]
    cat all $CACHE_DIR/<DATEFILE> files

  $EXEC [OPTS] -d | --dates | --days | dates | days | d
    print max, number of sets, and total values for each DATEFILE

  $EXEC [OPTS] -g | -p | --gnuplot | --plot | gnuplot | plot
    use gnuplot to plot max and total of all values in each DATEFILE,
      with date from filename as x-axis and max and total on the y-axis

  $EXEC [OPTS] f
    same as $EXEC <OPTS> --feh --gnuplot

  $EXEC [OPTS] [--append] COUNT
    append \"<COUNT> | <EPOCH> | <DATE> <TIME> | <TYPE>\"
    to a file named $CACHE_DIR/<DATEFILE>

    COUNT
      a positive integer
    EPOCH
      seconds sincd 1970-01-01 00:00, as of now
    DATE
      <EPOCH> formatted as YYYY-mm-dd
    TIME
      <EPOCH> formatted as formatted HH:MM:SS
    DATEFILE
      <EPOCH>, minus $DATEFILE_NEW_DAY_START_HOUR hours, formatted as YYYY-MM-DD
      (new day starts at " . sprintf("%02d:00", $DATEFILE_NEW_DAY_START_HOUR) . ")

  OPTS
    TYPE | --type=TYPE
      must start with a letter, can be letters/numbers/underscores

    --min-date=MIN_DATE_FILTER_EXPR
      in --dates and --gnuplot, include only entries
        with date on or after MIN_DATE,
        where MIN_DATE is `date --date=\"<MIN_DATE_FILTER_EXPR>\" +%Y-%m-%d`
    --recent | --6mos
      same as --min-date='6 months ago'
    --3mos
      same as --min-date='3 months ago'

    --min-sets=MIN_SETS_FILTER_COUNT
      in --dates and --gnuplot, include only entries
        with at least MIN_SETS_FILTER_COUNT sets

    --type-filter=TYPE_FILTER_REGEX
      in --dates and --gnuplot, include only entries
        with type that matches TYPE_FILTER_REGEX
    --type-filter-all
      same as: --type-filter='^$TYPE_FILTER_REGEX_ALL'
    --type-filter-empty
      same as: --type-filter='$TYPE_FILTER_REGEX_EMPTY'
      (this is the default)

    --time=EPOCH | --epoch=EPOCH
      EPOCH must be a number, to be interpreted like `date --date=@<EPOCH>`

    --feh
      after making an image with gnuplot, run feh
    --no-feh
      do not after making an image with gnuplot, run feh (this is the default)
";

sub main(@){
  my ($count, $type, $epoch);
  my $mode = $MODE_PRINT;
  my $feh = 0;
  my $minDateFilterExpr = undef;
  my $minSetsFilterCount = undef;
  my $typeFilterRegex = $TYPE_FILTER_REGEX_DEFAULT;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(?:--print|--get)$/){
      $mode = $MODE_PRINT;
    }elsif($arg =~ /^(?:-d|--dates|--days|dates|days|d)$/){
      $mode = $MODE_DATES;
    }elsif($arg =~ /^(?:-g|-p|--gnuplot|--plot|gnuplot|plot)$/){
      $mode = $MODE_PLOT;
    }elsif($arg =~ /^(f)$/){
      $mode = $MODE_PLOT;
      $feh = 1;
    }elsif($arg =~ /^(?:--append)$/){
      $mode = $MODE_APPEND;
    }elsif($arg =~ /^((?:[a-zA-Z])\w*)$/){
      $type = $1;
    }elsif($arg =~ /^(?:--type)=((?:[a-zA-Z])\w*)$/){
      $type = $1;
    }elsif($arg =~ /^--min-date=(.+)$/){
      $minDateFilterExpr = $1;
    }elsif($arg =~ /^(--recent|--6mos)$/){
      $minDateFilterExpr = "6 months ago";
    }elsif($arg =~ /^(--3mos)$/){
      $minDateFilterExpr = "3 months ago";
    }elsif($arg =~ /^--min-sets=(\d+)$/){
      $minSetsFilterCount = $1;
    }elsif($arg =~ /^(?:--type-filter)=(.+)$/){
      $typeFilterRegex = $1;
    }elsif($arg =~ /^(--type-filter-all)$/){
      $typeFilterRegex = '^.*$';
    }elsif($arg =~ /^(--type-filter-empty)$/){
      $typeFilterRegex = '^$';
    }elsif($arg =~ /^(?:--epoch)=(\d+)$/){
      $epoch = $1;
    }elsif($arg =~ /^(--feh)$/){
      $feh = 1;
    }elsif($arg =~ /^(--no-feh)$/){
      $feh = 1;
    }elsif($arg =~ /^(\d+)$/){
      $count = $1;
      $mode = $MODE_APPEND;
    }else{
      die "ERROR: unknown arg \"$arg\n";
    }
  }

  my $isFiltered =
    defined $minDateFilterExpr
      or defined $minSetsFilterCount
      or $typeFilterRegex ne $TYPE_FILTER_REGEX_DEFAULT
  ;

  if($mode eq $MODE_PRINT){
    die "ERROR: cannot filter mode $mode\n" if $isFiltered;
    system "cat $CACHE_DIR/????-??-??";
  }elsif($mode eq $MODE_DATES){
    printDates($minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex);
  }elsif($mode eq $MODE_PLOT){
    gnuplot($feh, $minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex);
  }elsif($mode eq $MODE_APPEND){
    die "ERROR: missing COUNT\n" if not defined $count;
    die "ERROR: cannot filter mode $mode\n" if $isFiltered;
    appendDateFile($count, $type, $epoch);
  }else{
    die $usage;
  }
}

sub appendDateFile($$$){
  my ($count, $type, $epoch) = @_;

  $epoch = time if not defined $epoch;
  $type = "-" if not defined $type;

  my $date = getDate $epoch;
  my $time = getTime $epoch;
  my $dateFile = getDateFile $CACHE_DIR, $epoch;

  my $line = sprintf "%-3d | %d | %s %s | %s",
    $count, $epoch, $date, $time, $type;

  print "WRITING: $line\n => $dateFile\n";
  open FH, ">> $dateFile" or die "could not open file\n$!\n";
  print FH "$line\n";
  close FH;
}

sub getDataByDate($$$){
  my ($minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex) = @_;
  my $minDate = undef;
  if(defined $minDateFilterExpr){
    $minDate = `date --date="$minDateFilterExpr" +%Y%m%d`;
    chomp $minDate;
    if($minDate !~ /^\d\d\d\d\d\d\d\d$/){
      die "ERROR: could not parse \"$minDateFilterExpr\" with `date`\n";
    }
  }
  my $dataByDate = {};
  for my $dateFile(glob "$CACHE_DIR/????-??-??"){
    my $date;
    if($dateFile =~ /(\d\d\d\d)-(\d\d)-(\d\d)$/){
      $date = "$1$2$3";
    }
    next if defined $minDate and $date lt $minDate;
    die "ERROR: duplicate date file\n" if defined $$dataByDate{$date};
    $$dataByDate{$date} = {
      total => 0,
      max   => 0,
      sets  => 0,
    };
    my @lines = `cat $dateFile`;
    for my $line(@lines){
      if($line =~ /^(\d+)\s*\|\s*(\d+)\s*\|\s*(.*?)\s*\|\s*(-|[a-zA-Z]\w+)/){
        my ($count, $epoch, $dateFmt, $type) = ($1, $2, $3, $4);
        $type =~ s/\W+//g;
        next if $type !~ /$typeFilterRegex/;

        $$dataByDate{$date}{total} += $count;
        $$dataByDate{$date}{max} = $count if $count > $$dataByDate{$date}{max};
        $$dataByDate{$date}{sets} += 1;
      }
    }
    if($$dataByDate{$date}{total} == 0){
      delete $$dataByDate{$date};
    }elsif(defined $minSetsFilterCount and $$dataByDate{$date}{sets} < $minSetsFilterCount){
      delete $$dataByDate{$date};
    }
  }
  return $dataByDate;
}

sub printDates($$$){
  my ($minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex) = @_;
  my $dataByDate = getDataByDate($minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex);
  for my $date(sort keys %$dataByDate){
    my $total = $$dataByDate{$date}{total};
    my $max = $$dataByDate{$date}{max};
    my $sets = $$dataByDate{$date}{sets};
    printf "%s   %-3dmax | x%-1d | %-3d total\n", $date, $max, $sets, $total;
  }
}

sub gnuplot($$$$){
  my ($feh, $minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex) = @_;
  my $gnuplotDataFile = "/tmp/$EXEC-gnuplot-data";
  my $gnuplotScriptFile = "/tmp/$EXEC-gnuplot-script";
  my $gnuplotOutputFile = "/tmp/$EXEC-gnuplot-output.png";

  my $dataByDate = getDataByDate($minDateFilterExpr, $minSetsFilterCount, $typeFilterRegex);

  my $data = "";
  $data .= "\"daily max\"\n";
  for my $date(sort keys %$dataByDate){
    $data .= "$date,$$dataByDate{$date}{max}\n";
  }

  $data .= "\n\n";

  $data .= "\"daily total\"\n";
  for my $date(sort keys %$dataByDate){
    $data .= "$date,$$dataByDate{$date}{total}\n";
  }

  open FH, "> $gnuplotDataFile";
  print FH $data;
  close FH;

  my $pointCount = 0 + keys %$dataByDate;
  # first and last point
  my $every1 = sprintf "%6d", $pointCount - 1;
  # ten points, spread out evenly
  my $every2 = sprintf "%6d", int($pointCount / 10 + 0.5);
  $every1 = 1 if $every1 <= 0;
  $every2 = 1 if $every2 <= 0;

  my $script = ""
    . "set xdata time\n"
    . "set timefmt \"%Y%m%d\"\n"
    . "set datafile separator \",\"\n"
    . "set key autotitle columnheader horizontal\n"
    . "set grid noytics mxtics linewidth 4 , linewidth 2\n"
    . "set term pngcairo size 1920,1080\n"
    . "set output \"$gnuplotOutputFile\"\n"
    . "plot \\\n"
    . "  for [BUCKET=0:1] \"$gnuplotDataFile\" index BUCKET using 1:2   smooth bezier                     , \\\n"
    . "  for [BUCKET=0:1] \"$gnuplotDataFile\" index BUCKET using 1:2   dashtype 3 with linespoints       , \\\n"
    . "  for [BUCKET=0:1] \"$gnuplotDataFile\" index BUCKET using 1:2:2 every $every1 with labels notitle , \\\n"
    . "  for [BUCKET=0:1] \"$gnuplotDataFile\" index BUCKET using 1:2:2 every $every2 with labels notitle , \\\n"
    . "  1/0\n"
    ;

  open FH, "> $gnuplotScriptFile";
  print FH $script;
  close FH;

  system "rm", "-f", $gnuplotOutputFile;
  system "gnuplot", "-p", $gnuplotScriptFile;
  if(-f $gnuplotOutputFile){
    print "plotted $pointCount dates\n$gnuplotOutputFile\n";
    system "feh", $gnuplotOutputFile;
  }else{
    die "ERROR: gnuplot failed, $gnuplotOutputFile does not exist\n";
  }
}

sub getDate($){
  my ($time) = @_;
  my $dateFmt = `date +%Y-%m-%d --date=\@$time`;
  if($dateFmt =~ /^(\d\d\d\d-\d\d-\d\d)$/){
    return $1;
  }else{
    die "ERROR: malformed date $dateFmt\n";
  }
}
sub getTime($){
  my ($time) = @_;
  my $dateFmt = `date +%H:%M:%S --date=\@$time`;
  if($dateFmt =~ /^(\d\d:\d\d:\d\d)$/){
    return $1;
  }else{
    die "ERROR: malformed time $dateFmt\n";
  }
}
sub getDateFile($$){
  my ($dir, $time) = @_;
  my $dateFmt = getDate($time - $DATEFILE_NEW_DAY_START_HOUR*60*60);
  return "$dir/$dateFmt";
}

&main(@ARGV);
