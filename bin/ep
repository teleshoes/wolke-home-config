#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);

my $BITRATE_GUESS = 2.0 * 1000.0 * 1000.0; #2 Mbps
my $DURATION_MIN_GUESS = 60.0;

my $HIST_FILE = "$ENV{HOME}/.cache/ep/hist";

my @FILE_SUFFIXES = qw(
  mkv avi mp4 mpg
  3gp bup flv iso m4v mov mswmm smv vob webm wmv
  mp3 flac ogg m4a wma wav
);

my $usage = "Usage:
  $0 DIR [MPV_ARG MPV_ARG ..]
    play next file in DIR

  $0 -p|--playlist DIR [MPV_ARG MPV_ARG ..]
    make a playlist from DIR and start at the next file in it

  $0 FILE
    play FILE
";

sub playNextFileInDir($$$);
sub getFilesForDir($);
sub selectNextFileIndex($$);
sub formatFileSummary($$$$);
sub resumeFile($$);
sub mpvPosWithPlaylist($$$$$);
sub mpvPos($$$);
sub formatHistEntryPercent($);
sub formatHistEntryDateTime($);
sub histEntryDone($);
sub parseHistory();
sub readHistForFiles($);
sub readHistEntries();
sub appendHist($);
sub mtime($);
sub filesize($);
sub duration($);
sub durationGuess($);
sub durationOrGuess($);
sub nowMillis();
sub run(@);

sub main(@){
  if(@_ >= 1 and -d $_[0]){
    my ($dir, @mpvArgs) = @_;
    $dir = abs_path $dir;
    die "not a dir: $dir\n" if not -d $dir;
    playNextFileInDir 0, $dir, [@mpvArgs];
  }elsif(@_ >= 2 and $_[0] =~ /^(-p|--playlist)$/ and -d $_[1]){
    my ($cmdType, $dir, @mpvArgs) = @_;
    $dir = abs_path $dir;
    die "not a dir: $dir\n" if not -d $dir;
    playNextFileInDir 1, $dir, [@mpvArgs];
  }elsif(@_ >= 1 and -f $_[0]){
    my ($file, @mpvArgs) = @_;
    $file = abs_path $file;
    resumeFile $file, [@mpvArgs];
  }else{
    die $usage;
  }
}

sub playNextFileInDir($$$){
  my ($usePlaylist, $dir, $mpvArgs) = @_;

  my $files = getFilesForDir $dir;
  my $fileHist = readHistForFiles $files;

  my $nextFileIndex = selectNextFileIndex $files, $fileHist;

  if(not defined $nextFileIndex){
    die "could not find next file for $dir\n";
  }

  my $nextFile = $$files[$nextFileIndex];
  my $nextFilePos = defined $$fileHist{$nextFile} ? $$fileHist{$nextFile}{pos} : 0;

  my $fileSummaryFmt = formatFileSummary $dir, $files, $fileHist, $nextFileIndex;

  print "\n";
  print "====================\n";
  print $fileSummaryFmt;
  print "====================\n\n";

  my $initText = $fileSummaryFmt;
  $initText =~ s/\n/\\n/g;
  $initText = "\${playback-time} / \${duration}\\n$initText";

  if($usePlaylist){
    mpvPosWithPlaylist $files, $nextFileIndex, $nextFilePos, $initText, $mpvArgs;
  }else{
    mpvPos $nextFilePos, $initText, [$nextFile, @$mpvArgs];
  }
}

sub getFilesForDir($){
  my ($dir) = @_;
  my @findCmd = ("find", "-L", $dir, "-maxdepth", 2, "-type", "f");
  open FH, "-|", @findCmd or die "could not run @findCmd\n$!\n";
  my @files = <FH>;
  close FH;
  chomp foreach @files;

  my $fileSuffixRegex = join("|", @FILE_SUFFIXES);
  @files = grep {/\.$fileSuffixRegex$/i} @files;
  @files = sort {
    my $aIsHidden = $a =~ /(^|\/)\.[^\/]*/ ? 1 : 0;
    my $bIsHidden = $b =~ /(^|\/)\.[^\/]*/ ? 1 : 0;
    return
      $aIsHidden <=> $bIsHidden #dotfiles last
      ||
      $a cmp $b
    ;
  } @files;

  return [@files];
}

sub selectNextFileIndex($$){
  my ($files, $fileHist) = @_;

  my $nextFileIndex = undef;
  for(my $i=$#$files; $i>=0; $i--){
    my $file = $$files[$i];
    my $entry = $$fileHist{$file};
    if(histEntryDone $entry){
      last;
    }else{
      $nextFileIndex = $i;
    }
  }

  return $nextFileIndex;
}

sub formatFileSummary($$$$){
  my ($dir, $files, $fileHist, $nextFileIndex) = @_;

  my $fmt = "";
  for my $i($nextFileIndex-2 .. $nextFileIndex+10){
    if($i >= 0 and $i <= $#$files){
      my $file = $$files[$i];
      my $histEntry = $$fileHist{$file};

      my $relPath = $file;
      $relPath =~ s/^\Q$dir\E\/*//;

      $fmt .= sprintf "%s %3d%%  %-17s  %s\n",
                $i == $nextFileIndex ? " =>" : "   ",
                formatHistEntryPercent($histEntry),
                formatHistEntryDateTime($histEntry),
                $relPath,
                ;
    }
  }

  return $fmt;
}

sub resumeFile($$){
  my ($file, $mpvArgs) = @_;

  my $startPos = 0;

  my $hist = readHistEntries();
  for my $entry(@$hist){
    my $path = $$entry{path};
    if($file eq $path){
      $startPos = $$entry{pos};
    }
  }

  my $initText = $file;
  $initText =~ s/"/\\"/g;
  $initText = "\${playback-time} / \${duration}\\n$initText";

  mpvPos $startPos, $initText, [$file, @$mpvArgs];
}

sub mpvPosWithPlaylist($$$$$){
  my ($files, $nextFileIndex, $nextFilePos, $initText, $mpvArgs) = @_;

  my $playlistFile = "/tmp/ep-playlist-" . nowMillis();
  open FH, "> $playlistFile" or die "could not write $playlistFile\n$!\n";
  print FH "$_\n" foreach @$files;
  close FH;

  mpvPos $nextFilePos, $initText, [
    "--playlist=$playlistFile",
    "--playlist-start=$nextFileIndex",
    @$mpvArgs,
  ];

  system "rm", $playlistFile;
}

sub mpvPos($$$){
  my ($seekPos, $initText, $mpvArgs) = @_;

  $seekPos = $seekPos - ($seekPos * 0.02) - 2;
  $seekPos = 0 if $seekPos < 0;

  my $posFile = "/tmp/ep-pos-file-" . nowMillis();
  system "mpv-pos",
    "--seek=$seekPos",
    "--show-text=$initText",
    "--cmd=no-osd set osd-level 0",
    "--pos-file=$posFile",
    @$mpvArgs,
    ;
  my $posLine = `tail -1 $posFile`;
  system "rm", $posFile;
  if($posLine =~ /^(\d+|\d*\.\d+) - (.+)$/){
    my ($pos, $path) = ($1, $2);
    my $entry = {
      date  => nowMillis(),
      mtime => mtime($path),
      size  => filesize($path),
      pos   => $pos,
      dur   => durationOrGuess($path),
      path  => $path,
    };

    appendHist $entry;
  }
}

sub formatHistEntryPercent($){
  my ($histEntry) = @_;
  my $pos = defined $histEntry ? $$histEntry{pos} : undef;
  my $dur = defined $histEntry ? $$histEntry{dur} : undef;
  if(defined $pos and defined $dur and $dur >= 0){
    return 100.0 * $pos / $dur;
  }else{
    return 0.0;
  }
}

sub formatHistEntryDateTime($){
  my ($histEntry) = @_;
  my $dateMillis = defined $histEntry ? $$histEntry{date} : undef;
  if(not defined $dateMillis){
    return "never";
  }else{
    my $dateSex = int($dateMillis / 1000.0 + 0.5);
    my $fmt = `date --date=\@$dateSex +'%Y%m%d %H:%M:%S'`;
    chomp $fmt;
    return $fmt;
  }
}

sub histEntryDone($){
  my ($histEntry) = @_;
  return 0 if not defined $histEntry;
  my $pos = $$histEntry{pos};
  my $dur = $$histEntry{dur};
  if($dur > 0 and $pos/$dur > 0.93){
    return 1;
  }else{
    return 0;
  }
}

sub readHistForFiles($){
  my ($files) = @_;

  my $allHist = readHistEntries();
  my %okPaths = map {$_ => 1} @$files;

  my $fileHist = {};
  for my $entry(@$allHist){
    my $path = $$entry{path};
    if(defined $okPaths{$path}){
      $$fileHist{$path} = $entry;
    }
  }

  return $fileHist;
}

sub readHistEntries(){
  return [] if not -f $HIST_FILE;

  open FH, "< $HIST_FILE" or die "could not read $HIST_FILE\n";
  my @lines = <FH>;
  close FH;

  my $entries = [];

  for my $line(@lines){
    if($line =~ /^
      (\d+),
      (\d+)mod,
      (\d+)b,
      (\d+|\d*\.\d+)s \s* \/ \s* (\d+|\d*\.\d+)s,
      (.+)
    $/x){
      my $entry = {
        date   => $1,
        mtime  => $2,
        size   => $3,
        pos    => $4,
        dur    => $5,
        path   => $6,
      };
      if(-e $$entry{path}){
        $$entry{path} = abs_path($$entry{path});
      }
      push @$entries, $entry;
    }else{
      die "invalid history line in $HIST_FILE: $line";
    }
  }

  return $entries;
}

sub appendHist($){
  my $entry = shift;
  my $line = ""
    . "$$entry{date},"
    . "$$entry{mtime}mod,"
    . "$$entry{size}b,"
    . "$$entry{pos}s / $$entry{dur}s,"
    . "$$entry{path}\n"
    ;

  my $dir = $HIST_FILE;
  $dir =~ s/\/[^\/]+$//;
  run "mkdir", "-p", $dir if not -d $dir;

  open FH, ">> $HIST_FILE" or die "could not write $HIST_FILE\n";
  print FH $line;
  close FH;
}

sub mtime($){
  my @stat = stat $_[0];
  return $stat[9];
}
sub filesize($){
  my @stat = stat $_[0];
  return $stat[7];
}
sub duration($){
  my @durCmd = ("duration", "-s", "-n", $_[0]);
  open FH, "-|", @durCmd or die "could not run @durCmd\n$!\n";
  my $out = join '', <FH>;
  close FH;

  if($out =~ /^(\d+|\d*\.\d+)$/){
    return $1;
  }else{
    return undef;
  }
}

sub durationGuess($){
  my $filesize = filesize $_[0];
  my $bits = $filesize * 8;
  my $dur = $bits / $BITRATE_GUESS;
  if($dur < $DURATION_MIN_GUESS){
    return $DURATION_MIN_GUESS;
  }else{
    return sprintf "%.2f", $dur;
  }
}
sub durationOrGuess($){
  my $dur = duration $_[0];
  $dur = durationGuess $_[0] if not defined $dur;
  return $dur;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
