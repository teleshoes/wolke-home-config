#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep time);

sub getState($$$);
sub setState($$$$);
sub getCurl($$$);
sub setCurl($$$$);
sub readConf();
sub readSecrets();
sub decrypt($);
sub readFile($);
sub readProc(@);
sub nowMillis();

my $DELAY_MILLIS = 150;
my $MAX_DELAY_MILLIS = 3 * 1000;

my $CONF_FILE = "$ENV{HOME}/.config/ha.conf";

my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my $SECRETS_PREFIX = "homeassistant";
my $SECRETS_KEYS_REGEX = join "|", qw(token);
my %SECRETS_ENC_KEYS = map {$_ => 1} qw(token);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC              DEV_NAME_OR_SYN
  $EXEC -g|--get|get DEV_NAME_OR_SYN
    -fetch the current state for ENTITY_ID
      -URL = http://<HOST>:8123/api/states/<ENTITY_ID>
    -print 'on' or 'off'

  DEV_NAME_OR_SYN
    either DEV_NAME or DEV_SYN

  HOST
    read local homeassistant hostname from $CONF_FILE
    formatted:
      host = HOST

  DEV_NAME
    read the homeassistant ENTITY_ID from $CONF_FILE
    formatted:
      device.DEV_NAME.entityid = ENTITY_ID

  DEV_SYN
    read the DEV_NAME from $CONF_FILE
    formatted:
      device.DEV_NAME.synonyms = DEV_SYN,DEV_SYN,DEV_SYN

  TOKEN
    read the ENCRYPTED_TOKEN from $SECRETS_FILE
    formatted:
      homeassistant.token = ENCRYPTED_TOKEN
    decrypt to the homeassistant long-lived access TOKEN
";

my $MODE_GET = "get";

sub main(@){
  my $mode = $MODE_GET;
  my $devName = undef;

  my $conf = readConf();
  my $token = ${readSecrets()}{token};

  my $devSyns = {};
  for my $devName(sort keys %{$$conf{devices}}){
    my @syns = map {lc $_}
               grep {$_ =~ /^\w+$/}
               split(/,/, $$conf{devices}{$devName}{synonyms});
    $$devSyns{$_} = $devName foreach @syns;
  }

  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get|get)$/){
      $mode = $MODE_GET;
    }elsif(defined $$conf{devices}{lc $arg} and not defined $devName){
      $devName = $arg;
    }elsif(defined $$devSyns{lc $arg} and not defined $devName){
      $devName = $$devSyns{lc $arg};
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($mode eq $MODE_GET){
    die "$USAGE\nERROR: missing DEV_NAME\n" if not defined $devName;
    my $state = getState($$conf{host}, $token, $$conf{devices}{$devName}{entityid});
    print "$state\n";
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub getState($$$){
  my ($host, $token, $entityID) = @_;
  my $json = getCurl($host, $token, $entityID);
  if($json =~ /\"state\":\"(off|on)\"/i){
    return lc $1;
  }else{
    print STDERR "WARNING: could not parse state for $entityID:\n$json\n";
    return undef;
  }
}

sub setState($$$$){
  my ($host, $token, $entityID, $state) = @_;
  $state = lc $state;

  my $startMillis = nowMillis();

  my $curState = getState($host, $token, $entityID);
  my $oldState = $curState;

  if($curState ne $state){
    #skip set() if state already matches
    setCurl($host, $token, $entityID, $state);
    $curState = getState($host, $token, $entityID);
  }

  while($curState ne $state and (nowMillis() - $startMillis) < $MAX_DELAY_MILLIS){
    sleep $DELAY_MILLIS/1000.0;
    $curState = getState($host, $token, $entityID);
  }

  if($curState ne $state){
    die "ERROR: $entityID state=$curState, not $state\n";
  }

  my $newState = $curState;

  return ($oldState, $newState);
}

sub getCurl($$$){
  my ($host, $token, $entityID) = @_;
  my $out = readProc("curl",
    "--silent",
    "-X", "GET",
    "-H", "Authorization: Bearer $token",
    "-H", "Content-Type: application/json",
    "http://$host:8123/api/states/$entityID",
  );

  return $out;
}

sub setCurl($$$$){
  my ($host, $token, $entityID, $state) = @_;
  my $domain = "switch";
  my $service = $state =~ /on/ ? "turn_on" : "turn_off";
  my $out = readProc("curl",
    "--silent",
    "-X", "POST",
    "-H", "Authorization: Bearer $token",
    "-H", "Content-Type: application/json",
    "-d", "{\"entity_id\": \"$entityID\"}",
    "http://$host:8123/api/services/$domain/$service",
  );

  #ignore output, there is no guarantee it reflects the set()
}

sub readConf(){
  my @lines = readFile($CONF_FILE);
  my $config = {
    host => undef,
    devices => {},
  };
  for my $line(@lines){
    next if $line =~ /^\s*(#.*)?$/;
    if($line =~ /^\s*([a-zA-Z0-9_\.]+)\s*=\s*(\S(?:.*\S)?)\s*$/){
      my ($key, $val) = ($1, $2);
      if($key =~ /^host$/i){
        $$config{host} = $val;
      }elsif($key =~ /^device\.(\w+)\.(\w+)$/){
        my ($devName, $devField) = ($1, $2);
        $devName = lc $devName;
        $devField = lc $devField;
        if($devField =~ /^(entityid|synonyms)$/){
          $$config{devices}{$devName} = {} if not defined $$config{devices}{$devName};
          $$config{devices}{$devName}{$devField} = $val;
        }else{
          die "ERROR: unknown field $devField for device $devName\n";
        }
      }else{
        die "ERROR: unknown config key $key in line\n$line\n";
      }
    }else{
      die "ERROR: malformed conf line\n$line\n";
    }
  }
  return $config;
}

sub readSecrets(){
  my @lines = readFile($SECRETS_FILE);
  my $secrets = {};
  for my $line(@lines){
    if($line =~ /^$SECRETS_PREFIX\.($SECRETS_KEYS_REGEX)\s*=\s*(.+)$/){
      $$secrets{$1} = $2;
    }
  }
  for my $key(sort keys %$secrets){
    $$secrets{$key} = decrypt $$secrets{$key} if defined $SECRETS_ENC_KEYS{$key};
  }
  return $secrets;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

sub readFile($){
  my ($file) = @_;
  my @lines;
  if(-f $file){
    open my $fh, "<", $file
      or die "ERROR: could not read file $file\n$!\n";
    @lines = <$fh>;
    close $fh;
  }
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}

sub readProc(@){
  my @cmd = @_;
  open CMD, "-|", @cmd or die "ERROR: \"@cmd\" failed\n$!\n";
  my @lines = <CMD>;
  close CMD;
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}

sub nowMillis(){
  return int(time * 1000.0);
}

&main(@ARGV);
