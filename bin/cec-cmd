#!/usr/bin/perl
use strict;
use warnings;

my $dbusService = "org.teleshoes.cec";

my $commands = {
  on      => "on",
  off     => "standby",
  standby => "standby",
  volup   => "volup",
  voldown => "voldown",
  mute    => "mute",
};

my @restartCmds = (
  "pkill -9 -f python.*cec-dbus",
  "pkill -9 cec-dbus",
  "pkill -9 cec-client",
  "nohup cec-dbus >/dev/null 2>/dev/null &",
  "sleep 2",
  "$0 --tv --no-retry init",
  "$0 --av --no-retry init",
);
my $restartFmt = "\n      " . join "\n      ", @restartCmds;

my $usage = "Usage:
  $0 [OPTS] CMD
     call $dbusService / command ADDRESS CMD
     sends \"<CMD> <ADDRESS>\" using cec-client
  $0 [OPTS] getpowerstatus
     call $dbusService / getpowerstatus ADDRESS
     send \"pow <ADDRESS>\" using cec-client
     read power status from cec-client
  $0 [OPTS] toggle|togglestandby
     call $dbusService / togglestandby ADDRESS
     sends \"pow <ADDRESS>\", reads the status,
    and then calls \"on <ADDRESS>\" or \"standby <ADDRESS>\"
  $0 [OPTS] vol +N
     call $dbusService / volup ADDRESS N
     sends \"volup <ADDRESS>\" N times using cec-client
  $0 [OPTS] vol -N
     call $dbusService / voldown ADDRESS N
     sends \"voldown <ADDRESS>\" N times using cec-client
  $0 [OPTS] vol N
     call $dbusService / setvol ADDRESS N
     calculates the difference between 'getvol' and N, and runs vol +/- N
  $0 [OPTS] getvol
     call $dbusService / getvol ADDRESS
     send \"tx 4<ADDRESS>:71\" using cec-client
     read audio status from cec-client and calculate the volume
       {the volume is apparently the floor of S-S/5, where S is the status}
  $0 [OPTS] init
     call $dbusService / init ADDRESS
     sends \"name <ADDRESS>\" using cec-client
  $0 start|restart
     run:$restartFmt

  OPTS:
    --av  use ADDRESS 5 {default}
    --tv  use ADDRESS 0
    --no-retry
      do not retry dbus call after failure

  CMD:
    " . (join "\n    ", map {"$_  => $$commands{$_}"} sort keys %$commands) . "
";

sub restart();
sub cecDbus($@);
sub run(@);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(start|restart)$/){
    restart();
    exit 0;
  }
  my $retry = 1;
  my $addr = 5;
  while(@_ > 0 and $_[0] =~ /^(--tv|--av|--no-retry)$/){
    my $opt = shift;
    $addr = 0 if $opt =~ /^--tv$/;
    $addr = 5 if $opt =~ /^--av$/;
    $retry = 0 if $opt =~ /^--no-retry$/;
  }

  if(@_ == 1 and defined $$commands{$_[0]}){
    cecDbus $retry, "command", $addr, $$commands{$_[0]};
  }elsif(@_ == 1 and $_[0] =~ /^getpowerstatus$/){
    cecDbus $retry, "getpowerstatus", $addr;
  }elsif(@_ == 1 and $_[0] =~ /^(toggle|togglestandby)$/){
    cecDbus $retry, "togglestandby", $addr;
  }elsif(@_ == 1 and $_[0] =~ /^getvol$/){
    cecDbus $retry, "getvol", $addr;
  }elsif(@_ == 1 and $_[0] =~ /^init$/){
    cecDbus $retry, "init", $addr;
  }elsif(@_ == 2 and $_[0] =~ /^vol$/ and $_[1] =~ /^(\+|-)?(\d+)$/){
    my ($sign, $vol) = ($1, $2);
    my $cmd;
    if(not defined $sign){
      $cmd = "setvol";
    }else{
      $cmd = $sign eq "+" ? "volup" : "voldown";
    }
    cecDbus $retry, $cmd, $addr, $vol;
  }else{
    die $usage;
  }
}

sub restart(){
  for my $cmd(@restartCmds){
    run $cmd;
  }
}

sub cecDbus($@){
  my $retry = shift;
  my @cmd = ("qdbus", $dbusService, "/", @_);
  run @cmd;

  if($retry and $? != 0){
    print "FAILED '@cmd': restarting and trying again\n";
    restart();
    run @cmd;
  }
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
