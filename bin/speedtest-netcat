#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $NETCAT_EXEC = "nc.traditional";

my $DEFAULT_TIMEOUT_MILLIS = 15 * 1000;

my $usage = "Usage:
  $0 -h|--help
    print this message

  $0 [OPTS] [USER@]IP_ADDRESS
    perform a speedtest using netcat
      $NETCAT_EXEC -n IP_ADDRESS <random-port>
      ssh USER\@IP_ADDRESS $NETCAT_EXEC -l -p <random-port>

  $0 [OPTS] [USER@]IPMAGIC_NAME
    resolve IPMAGIC_NAME to an IP_ADDRESS with ipmagic
    similar to: $0 USER@`ipmagic IPMAGIC_NAME --ip`

  $0 [OPTS] [USER@]HOST_NAME
    resolve HOST_NAME to an IP_ADDRESS with dig
    similar to: $0 USER@`dig +short HOST_NAME`

  USER
    optional username, may contain only word characters [0-9a-zA-Z_]+

  OPTS
    --timeout=TIMEOUT_MILLIS
      positive integer, number of milliseconds to wait before ending speedtest
      default: $DEFAULT_TIMEOUT_MILLIS
";

my @sshOpts = map {("-o", $_)} (
  "StrictHostKeyChecking=no",
  "UserKnownHostsFile=/dev/null",
);

sub speedtest($$$);
sub resolveHostArgToIpAddress($);
sub isIp($);

sub main(@){
  my $timeoutMillis = $DEFAULT_TIMEOUT_MILLIS;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $opt = shift;
    if($opt =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($opt =~ /^--timeout=(\d+)$/){
      $timeoutMillis = $1;
    }else{
      die "$usage\nunknown option: $opt\n";
    }
  }
  die $usage if @_ != 1 or $_[0] =~ /^-/;

  my $arg = shift;
  my ($user, $host);
  if($arg =~ /^(\w+)\@(.*)/){
    ($user, $host) = ($1, $2);
  }else{
    ($user, $host) = (undef, $arg);
  }

  my $ipAddr = resolveHostArgToIpAddress $host;
  die "Could not parse '$arg'\n" if not defined $ipAddr;

  speedtest $ipAddr, $user, $timeoutMillis;
}

sub speedtest($$$){
  my ($ip, $user, $timeoutMillis) = @_;
  my $port = 5000 + int(rand(1000)); #5000-5999
  my @sendCmd = "$NETCAT_EXEC -v -v -n $ip $port";
  my @rcvCmd = "$NETCAT_EXEC -l -w 60 -p $port";

  my $sshHost = defined $user ? "$user\@$ip" : "$ip";

  print "listening on $ip:$port..\n";
  if(fork){
    my @cmd = ("ssh", @sshOpts, $sshHost, "@rcvCmd >/dev/null 2>/dev/null");
    print "@cmd\n";
    exec @cmd;
  }else{
    my $sshDelay = 3;
    print "waiting ${sshDelay}s for netcat to start\n";
    sleep $sshDelay;
  }

  if(fork){
    printf "waiting %3.1fs seconds and killing $NETCAT_EXEC\n", $timeoutMillis/1000.0;
    sleep $timeoutMillis/1000.0;
    my @cmd = ("ssh", @sshOpts, $sshHost, "killall $NETCAT_EXEC");
    print "@cmd\n";
    exec @cmd;
  }


  print "writing to $ip:$port\n";
  my $start = `date +%s.%N`;
  my $out = `yes | @sendCmd 2>&1`;
  my $stop = `date +%s.%N`;
  die "Error reading bytes sent\n" if $out !~ /sent (\d+), rcvd (\d+)/;
  chomp $start;
  chomp $stop;
  my $bytes = $1;
  my $elapsed = $stop - $start;
  printf("\n\n%d KiB/s  {%d bytes in %.5f seconds}\n\n",
     int($bytes / $elapsed / 1024),
     $bytes,
     $elapsed);
}

sub resolveHostArgToIpAddress($){
  my $host = shift;
  return $host if isIp $host;

  my $ipmagicIp = `ipmagic "$host" --ip 2>/dev/null`;
  chomp $ipmagicIp;
  return $ipmagicIp if isIp $ipmagicIp;

  my $digIp = `dig +short "$host"`;
  chomp $digIp;
  return $digIp if isIp $digIp;

  return undef;
}

sub isIp($){
  if($_[0] =~ /^\d+\.\d+\.\d+\.\d+$/){
    return 1;
  }
  my $h = "(?:[0-9a-f]+)";
  if($_[0] =~ /^(($h:$h:$h:$h:$h:$h:$h:$h)|(($h:)*::($h:)*$h?))$/){
    return 1;
  }
  return 0;
}

&main(@ARGV);
