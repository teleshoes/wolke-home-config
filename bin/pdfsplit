#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename dirname);

sub run(@);

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0 PDF_IN BASE_DIR
    simple wrapper around `pdftk burst`
      -extract PDF_BASENAME without '.pdf' ext from PDF_IN
      -run: `pdftk PDF_IN burst output <BASE_DIR>/<PDF_BASENAME>_pg_%03d.pdf`
      -run: `rm <BASE_DIR>/doc_data.txt`

  $0 PDF_IN
    -extract BASE_DIR from PDF_IN
    -same as: $0 PDF_IN BASE_DIR
";

sub main(@){
  my $inputFile;
  my $outputDir;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif(-f $arg and not defined $inputFile){
      $inputFile = $arg;
    }elsif(-d $arg and not defined $outputDir){
      $outputDir = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(not defined $inputFile){
    die "$USAGE\nERROR: missing PDF_IN\n";
  }

  my $inputDir = dirname $inputFile;
  my $inputFileBasename = basename $inputFile;
  $inputFileBasename =~ s/\.pdf$//i;

  if(not defined $outputDir){
    $outputDir = $inputDir;
  }

  my $outputPattern .= "${outputDir}/${inputFileBasename}_pg_%03d.pdf";

  my $docdata = "${outputDir}/doc_data.txt";
  if(-e $docdata){
    die "ERROR: $docdata already exists\n";
  }

  my @cmd = ("pdftk", $inputFile, "burst", "output", $outputPattern);
  print "@cmd\n";
  system @cmd;

  if(-f $docdata){
    run "rm", $docdata;
  }else{
    print "WARNING: could not find $docdata to delete\n";
  }
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
