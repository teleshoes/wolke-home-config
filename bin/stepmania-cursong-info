#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(dirname);

my $LIMIT = 10;

sub formatCurSongInfo($);
sub getCurSongInfo();
sub getSongInfo($$$);
sub findXmlFiles($$$);

my $CURSONG_FILE = "$ENV{HOME}/.cache/stepmania-selected-song";
my $XML_UPLOAD_DIR = "$ENV{HOME}/.stepmania/Save/Upload";

sub main(@){
  print formatCurSongInfo(getCurSongInfo());
}

sub formatCurSongInfo($){
  my ($info) = @_;
  return "";
}

sub getCurSongInfo(){
  my $out = `cat $CURSONG_FILE`;
  if($out =~ /^StepsType_(\w+)%%%Difficulty_(\w+)%%%(.+)$/){
    my ($stepsType, $difficulty, $simfile) = ($1, $2, $3);
    getSongInfo($stepsType, $difficulty, $simfile);
  }else{
    die "ERROR: could not parse $CURSONG_FILE\n";
  }
}

sub getSongInfo($$$){
  my ($stepsType, $difficulty, $simfile) = ($1, $2, $3);

  my $info = {};
  my $songDir = dirname $simfile;
  my $smGame = lc $stepsType;
  $smGame =~ s/_/-/g;

  my $smDiff = $difficulty;

  my @xmlFiles = findXmlFiles($songDir, $smGame, $smDiff);
  @xmlFiles = reverse @xmlFiles;
  if(@xmlFiles > $LIMIT){
    @xmlFiles = @xmlFiles[0..($LIMIT-1)];
  }

  $$info{xmlFiles} = [@xmlFiles];

  return $info;
}

sub findXmlFiles($$$){
  my ($songDir, $smGame, $smDiff) = @_;

  my $songDirRegex = $songDir;
  $songDirRegex =~ s/^\/*//;
  $songDirRegex =~ s/\/*$//;
  $songDirRegex =~ s/[^a-zA-Z0-9_\-\/]+/.*/g;
  $songDirRegex = "/*$songDirRegex/*";

  my $regex = ""
    . "<Song Dir='$songDirRegex'/>"
    . "[ \\t\\r\\n]*"
    . "<Steps Difficulty='$smDiff' StepsType='$smGame'"
    ;

  my @grepCmd = ("pcre2grep",
    "--multiline",
    "--ignore-case",
    "--files-with-matches",
    "--recursive",
    $regex,
    $XML_UPLOAD_DIR,
  );

  open CMD, "-|", @grepCmd or die "ERROR: could not run @grepCmd\n";
  my @files = <CMD>;
  close CMD;

  chomp foreach @files;
  @files = grep {$_ =~ /\.xml$/i} @files;
  return @files;
}

&main(@ARGV);
