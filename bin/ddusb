#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;

my @DD_OPTS = qw(bs=4M status=progress);

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC ISO_IMAGE USB_DRIVE_DEVICE
    runs dd if=ISO_IMAGE of=USB_DRIVE_DEVICE
      with options: @DD_OPTS

    checks for the physical device using parted and prompts to continue

    runs sync afterward

    e.g.: $EXEC ~/Downloads/debian-testing.iso /dev/sdc
";

sub readParted();
sub ensureRoot();

sub main(@){
  my $iso;
  my $devPath;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif(-f $arg and not defined $iso){
      $iso = $arg;
    }elsif(-b $arg and not defined $devPath){
      $devPath = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: missing ISO_IMAGE\n" if not defined $iso or not -f $iso;
  die "$USAGE\nERROR: missing USB_DRIVE_DEVICE\n" if not defined $devPath or not -b $devPath;

  ensureRoot();

  my $devsByPath = readParted();
  my $dev = $$devsByPath{$devPath};
  die "could not find $devPath in parted\n" if not defined $dev;

  print "path: $$dev{path}\n";
  print "model: $$dev{model}\n";
  print "size: $$dev{size}\n";
  print "partitions:\n$$dev{partitions}\n";

  my @cmd = ("dd", @DD_OPTS, "if=$iso", "of=$devPath");

  print "\n\n";
  print "DESTROY ALL PARTITIONS AND DATA OF THE ABOVE?\n";
  print "  will run this command: \"@cmd\"\n";
  print "Type 'yes' to proceed: ";
  my $val = <STDIN>;
  if($val =~ /^yes$/){
    print "\nok, running dd\n";

    print "@cmd\n";
    system @cmd;

    system "alarm", "-s", "success";

    @cmd = "sync";
    print "@cmd\n";
    system @cmd;

    system "alarm", "-s", "success";
  }else{
    print "aborted\n";
  }
}

sub readParted(){
  my $devList = `parted -s -l`;
  my @devs = split /\n\n\n/, $devList;

  my $devsByPath = {};
  for my $dev(@devs){
    my $device = {};
    my $sizeRe = '\d+(?:\.\d+)?[kmgtpKMGTP]?[bB]';
    if($dev =~ /
      ^
      Model:                     \s+ (.+)      \n
      Disk \s+ ([a-z0-9_\-\/]+): \s+ ($sizeRe) \n
      Sector\s+size.*:           \s+ .*        \n
      Partition\s+Table:         \s+ (\w+)     \n
      Disk\s+Flags:              \s+ .*        \n
      \n
      (
        Number \s+ Start \s+ End \s+ Size .*
        (?:
          \s+ \d+ \s+ $sizeRe \s+ $sizeRe \s+ $sizeRe .* \n
        )*
      )?
      $/sxi){
      my ($model, $path, $size, $table, $partitions) = ($1, $2, $3, $4, $5);
      $partitions = "UNKNOWN" if not defined $partitions;
      $$device{model} = $model;
      $$device{path} = $path;
      $$device{size} = $size;
      $$device{table} = $table;
      $$device{partitions} = $partitions;
    }else{
      die "could not parse output of \"parted\"\n";
    }
    $$devsByPath{$$device{path}} = $device;
  }
  return $devsByPath;
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    print STDERR "rerunning as root\n";
    exec "sudo", $0, @ARGV;
  }
}

&main(@ARGV);
