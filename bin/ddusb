#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub readParted();
sub getMimeType($);
sub cmdAvailable($);
sub ensureRoot();
sub run(@);

my $EXEC = basename $0;

my @DD_OPTS = qw(bs=64M status=progress);

my $DECOMPRESS_TYPE_AUTO = "auto";
my $DECOMPRESS_TYPE_NONE = "none";
my $DECOMPRESS_TYPE_XZ = "xz";
my $DECOMPRESS_TYPE_GZ = "gz";

my $REGEX_DECOMPRESS_TYPE = join "|", (
  $DECOMPRESS_TYPE_AUTO, $DECOMPRESS_TYPE_NONE, $DECOMPRESS_TYPE_XZ, $DECOMPRESS_TYPE_GZ
);

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] ISO_IMAGE USB_DRIVE_DEVICE
    show info about USB_DRIVE_DEVICE, prompt user to safely continue, run dd
      -re-run as root user if not root
      -print physical device info with parted
      -print dd command, and prompt to continue
      -run: dd @DD_OPTS if=ISO_IMAGE of=USB_DRIVE_DEVICE
      -run: sync

    e.g.: $EXEC ~/Downloads/debian-testing.iso /dev/sdc

  OPTS
    --decompress=DECOMPRESS_TYPE
      optionally treat ISO_IMAGE as a compressed image file
        DECOMPRESS_TYPE
          $DECOMPRESS_TYPE_AUTO
            get MIME_TYPE of ISO_IMAGE`file --brief --mime-type ISO_IMAGE`
            if MIME_TYPE = application/x-xz:
              same as: DECOMPRESS_TYPE=xz
            if MIME_TYPE = application/gzip:
              same as: DECOMPRESS_TYPE=gz
            otherwise:
              same as: DECOMPRESS_TYPE=none
          $DECOMPRESS_TYPE_NONE
            never not treat ISO_IMAGE as a compressed image file
            write ISO_IMAGE directly, with dd if=ISO_IMAGE, not writing to stdin
            (this is the default)
          $DECOMPRESS_TYPE_XZ
            run: xz -d -c -k ISO_IMAGE | dd @DD_OPTS of=USB_DRIVE_DEVICE
          $DECOMPRESS_TYPE_GZ
            run: gzip -d -c -k ISO_IMAGE | dd @DD_OPTS of=USB_DRIVE_DEVICE

   --no-decompress
     same as: --decompress=none
   --xz | --xzcat
     same as: --decompress=xz
       e.g.: $EXEC --xzcat ~/Downloads/debian-testing.iso.xz /dev/sdc
   --gz | --gzip | --gunzip | --zcat | --gzcat
     same as: --decompress=gz
";

sub main(@){
  my $iso;
  my $devPath;
  my $opts = {
    decompressType => $DECOMPRESS_TYPE_NONE,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^--decompress=($REGEX_DECOMPRESS_TYPE)$/i){
      $$opts{decompressType} = lc $1;
    }elsif($arg =~ /^(--no-decompress)$/){
      $$opts{decompressType} = $DECOMPRESS_TYPE_NONE;
    }elsif($arg =~ /^(--xz|--xzcat)$/){
      $$opts{decompressType} = $DECOMPRESS_TYPE_XZ;
    }elsif($arg =~ /^(--gz|--gzip|--gunzip|--zcat|--gzcat)$/){
      $$opts{decompressType} = $DECOMPRESS_TYPE_GZ;
    }elsif(-f $arg and not defined $iso){
      $iso = $arg;
    }elsif(-b $arg and not defined $devPath){
      $devPath = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: missing ISO_IMAGE\n" if not defined $iso or not -f $iso;
  die "$USAGE\nERROR: missing USB_DRIVE_DEVICE\n" if not defined $devPath or not -b $devPath;

  ensureRoot();

  my $devsByPath = readParted();
  my $dev = $$devsByPath{$devPath};
  die "could not find $devPath in parted\n" if not defined $dev;

  print "path: $$dev{path}\n";
  print "model: $$dev{model}\n";
  print "size: $$dev{size}\n";
  print "partitions:\n$$dev{partitions}\n";

  $iso =~ s/"/\\"/g;
  $devPath =~ s/"/\\"/g;

  if($$opts{decompressType} eq $DECOMPRESS_TYPE_AUTO){
    my $mimeType = getMimeType($iso);
    if($mimeType eq "application/gzip"){
      print "\n compression auto => gz ($iso)\n";
      $$opts{decompressType} = $DECOMPRESS_TYPE_GZ;
    }elsif($mimeType eq "application/x-xz"){
      print "\n compression auto => xz ($iso)\n";
      $$opts{decompressType} = $DECOMPRESS_TYPE_XZ;
    }else{
      print "\n compression auto => none ($iso)\n";
      $$opts{decompressType} = $DECOMPRESS_TYPE_NONE;
    }
  }

  my $cmd;
  if($$opts{decompressType} eq $DECOMPRESS_TYPE_NONE){
    $cmd = "dd @DD_OPTS if=\"$iso\" of=\"$devPath\"";
  }elsif($$opts{decompressType} eq $DECOMPRESS_TYPE_XZ){
    print "\n\nXZ:\n";
    if(cmdAvailable("xz")){
      run "xz", "-l", $iso;
      $cmd = "xz -d -c -k \"$iso\" | dd @DD_OPTS of=\"$devPath\"";
    }else{
      die "ERROR: xz command not on path\n";
    }
  }elsif($$opts{decompressType} eq $DECOMPRESS_TYPE_GZ){
    print "\n\nGZ:\n";
    if(cmdAvailable("gzip")){
      run "gzip", "-l", $iso;
      print "gzip -l is slow, skipping\n";
      $cmd = "gzip -d -c -k \"$iso\" | dd @DD_OPTS of=\"$devPath\"";
    }else{
      die "ERROR: gzip command not on path\n";
    }
  }else{
    die "ERROR: unknown DECOMPRESS_TYPE=$$opts{decompressType}\n";
  }

  print "\n\n";
  print "DESTROY ALL PARTITIONS AND DATA OF THE ABOVE?\n";
  print "  will run this command: $cmd\n";
  print "Type 'yes' to proceed: ";
  my $val = <STDIN>;
  if($val =~ /^yes$/){
    print "\nok, running dd\n";

    my $start = time;
    run "date";

    run $cmd;

    run "alarm", "-s", "success";
    run "sync";
    run "alarm", "-s", "success";

    my $end = time;
    run "date";
    print "dd+sync elapsed seconds: " . ($end-$start) . "\n";
  }else{
    print "aborted\n";
  }
}

sub readParted(){
  my $devList = `parted -s -l`;
  my @devs = split /\n\n\n/, $devList;

  my $devsByPath = {};
  for my $dev(@devs){
    my $device = {};
    my $sizeRe = '\d+(?:\.\d+)?[kmgtpKMGTP]?[bB]';
    if($dev =~ /
      ^
      Model:                     \s+ (.+)      \n
      Disk \s+ ([a-z0-9_\-\/]+): \s+ ($sizeRe) \n
      Sector\s+size.*:           \s+ .*        \n
      Partition\s+Table:         \s+ (\w+)     \n
      Disk\s+Flags:              \s+ .*        \n
      \n
      (
        Number \s+ Start \s+ End \s+ Size .*
        (?:
          \s+ \d+ \s+ $sizeRe \s+ $sizeRe \s+ $sizeRe .* \n
        )*
      )?
      $/sxi){
      my ($model, $path, $size, $table, $partitions) = ($1, $2, $3, $4, $5);
      $partitions = "UNKNOWN" if not defined $partitions;
      $$device{model} = $model;
      $$device{path} = $path;
      $$device{size} = $size;
      $$device{table} = $table;
      $$device{partitions} = $partitions;
    }else{
      die "could not parse output of \"parted\"\n";
    }
    $$devsByPath{$$device{path}} = $device;
  }
  return $devsByPath;
}

sub getMimeType($){
  my ($file) = @_;
  my @cmd = ("file", "--brief", "--mime-type", $file);
  open my $cmdH, "-|", @cmd or die "ERROR: command failed @cmd\n$!\n";
  my $out = join '', <$cmdH>;
  close $cmdH;
  chomp $out;
  return $out;
}

sub cmdAvailable($){
  my ($cmd) = @_;
  system "command -v '$cmd' >/dev/null 2>/dev/null";
  return $? == 0 ? 1 : 0;
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    print STDERR "rerunning as root\n";
    exec "sudo", $0, @ARGV;
  }
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
