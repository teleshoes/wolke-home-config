#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub nowMillis();

my $EXEC = basename $0;
my $INITIAL_DELAY_MILLIS = 1000;

my $usage = "Usage:
  $EXEC -h|--help
    print this message

  $EXEC [OPTS]
    -read lines from STDIN (or from `<COMMAND>` if given with --command/--file)
    -ignore all lines read for the first ${INITIAL_DELAY_MILLIS}ms
    -for each subsequent line:
      -if line matches SUCCESS_REGEX (default is ALL lines if not given)
        -run `alarm -s success`
      -if line matches FAILURE_REGEX (default is NO lines if not given)
        -run `alarm -s failure`

  OPTS:
    --command=COMMAND
      run <COMMAND> and read lines from it instead of STDIN

    --file=FILE
      same as --cmd=\"tail -F <FILE>\"

    --success-regex=SUCCESS_REGEX
      only lines that match <SUCCESS_REGEX> will run `alarm -s success`
      match can be partial-string match, not just full-string match
      (default is to match ALL lines)

    --failure-regex=FAILURE_REGEX
      only lines that match <FAILURE_REGEX> will run `alarm -s failure`
      match can be partial-string match, not just full-string match
      (default is to match NO lines)
";

sub main(@){
  my $command = undef;
  my $successRegex = undef;
  my $failureRegex = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--command=(.+)$/){
      $command = $1;
    }elsif($arg =~ /^--file=(.+)$/){
      my $file = $1;
      $file =~ s/'/'\\''/g;
      $command = "tail -F '$file'";
    }elsif($arg =~ /^--success-regex=(.+)$/){
      $successRegex = $1;
    }elsif($arg =~ /^--failure-regex=(.+)$/){
      $failureRegex = $1;
    }else{
      die "$usage\nERROR: unknown arg \"$arg\"\n";
    }
  }

  my $fh;
  if(defined $command){
    open $fh, "-|", $command;
  }else{
    $fh = \*STDIN;
  }

  my $startMillis = nowMillis();

  my $line;
  while($line = <$fh>){
    my $nowMillis = nowMillis();
    my $elapsedStart = $nowMillis - $startMillis;

    if($elapsedStart < $INITIAL_DELAY_MILLIS){
      next;
    }

    my $isSuccess = defined $successRegex ? $line =~ /$successRegex/ : 1;
    my $isFailure = defined $failureRegex ? $line =~ /$failureRegex/ : 0;

    if($isSuccess){
      system "alarm -s success";
    }
    if($isFailure){
      system "alarm -s failure";
    }
  }

  close $fh;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
