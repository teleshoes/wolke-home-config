#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub nowMillis();

my $EXEC = basename $0;
my $QUIET_PERIOD_MILLIS = 500;
my $INITIAL_DELAY_MILLIS = 1000;
my $DEFAULT_SUCCESS_CMD = "alarm -s success";
my $DEFAULT_FAILURE_CMD = "alarm -s failure";
my $FLASH_CMD = "sh -c '$DEFAULT_SUCCESS_CMD"
  . " ; brightness 100"
  . " ; xcalib -i -a"
  . " ; sleep 1"
  . " ; xcalib -i -a"
  . "'&";

my $usage = "Usage:
  $EXEC -h|--help
    print this message

  $EXEC [OPTS]
    -read lines from STDIN (or from `<COMMAND>` if given with --command/--file)
    -ignore all lines read for the first ${INITIAL_DELAY_MILLIS}ms
    -for each subsequent line:
      -if line matches SUCCESS_REGEX (default is ALL lines if not given)
        -run <SUCCESS_CMD> if it hasnt been run in the last ${QUIET_PERIOD_MILLIS}ms
      -if line matches FAILURE_REGEX (default is NO lines if not given)
        -run <FAILURE_CMD> if it hasnt been run in the last ${QUIET_PERIOD_MILLIS}ms

  $EXEC [OPTS] FILE
    same as: `$EXEC <OPTS> --file=FILE`

  $EXEC [OPTS] FILE SUCCESS_REGEX
    same as: `$EXEC <OPTS> --file=FILE --success-regex=SUCCESS_REGEX`

  OPTS:
    --command=COMMAND
      run <COMMAND> and read lines from it instead of STDIN

    --file=FILE
      same as --cmd=\"tail -F <FILE>\"

    --flash
      same as --success-cmd=\"$FLASH_CMD\"

    --success-cmd=SUCCESS_CMD
      default is `$DEFAULT_SUCCESS_CMD`

    --failure-cmd=SUCCESS_CMD
      default is `$DEFAULT_FAILURE_CMD`

    --echo | --no-echo
      print lines to STDOUT as they are read
      (default is --echo)

    --success-regex=SUCCESS_REGEX
      only lines that match <SUCCESS_REGEX> will run <SUCCESS_CMD>
      match can be partial-string match, not just full-string match
      (default is to match ALL lines)

    --failure-regex=FAILURE_REGEX
      only lines that match <FAILURE_REGEX> will run <FAILURE_CMD>
      match can be partial-string match, not just full-string match
      (default is to match NO lines)
";

sub main(@){
  my $command = undef;
  my $successCmd = $DEFAULT_SUCCESS_CMD;
  my $failureCmd = $DEFAULT_FAILURE_CMD;
  my $successRegex = undef;
  my $failureRegex = undef;
  my $echo = 1;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--command=(.+)$/){
      $command = $1;
    }elsif($arg =~ /^--file=(.+)$/){
      my $file = $1;
      $file =~ s/'/'\\''/g;
      $command = "tail -F '$file'";
    }elsif($arg =~ /^--success-cmd=(.+)$/){
      $successCmd = $1;
    }elsif($arg =~ /^--failure-cmd=(.+)$/){
      $failureCmd = $1;
    }elsif($arg =~ /^--flash$/){
      $successCmd = $FLASH_CMD;
    }elsif($arg =~ /^(--echo)$/){
      $echo = 1;
    }elsif($arg =~ /^(--no-echo)$/){
      $echo = 0;
    }elsif($arg =~ /^--success-regex=(.+)$/){
      $successRegex = $1;
    }elsif($arg =~ /^--failure-regex=(.+)$/){
      $failureRegex = $1;
    }elsif(-f $arg){
      my $file = $arg;
      $file =~ s/'/'\\''/g;
      $command = "tail -F '$file'";
    }elsif(not defined $successRegex){
      $successRegex = $arg;
    }else{
      die "$usage\nERROR: unknown arg \"$arg\"\n";
    }
  }

  my $fh;
  if(defined $command){
    open $fh, "-|", $command;
  }else{
    $fh = \*STDIN;
  }

  my $startMillis = nowMillis();
  my $lastSuccessMillis = 0;
  my $lastFailureMillis = 0;

  my $line;
  while($line = <$fh>){
    print $line if $echo;
    my $nowMillis = nowMillis();
    my $elapsedStart = $nowMillis - $startMillis;
    my $elapsedSuccess = $nowMillis - $lastSuccessMillis;
    my $elapsedFailure = $nowMillis - $lastFailureMillis;

    if($elapsedStart < $INITIAL_DELAY_MILLIS){
      next;
    }

    my $isSuccess = defined $successRegex ? $line =~ /$successRegex/ : 1;
    my $isFailure = defined $failureRegex ? $line =~ /$failureRegex/ : 0;

    if($isSuccess and $elapsedSuccess > $QUIET_PERIOD_MILLIS){
      $lastSuccessMillis = $nowMillis;
      system $successCmd;
    }
    if($isFailure and $elapsedFailure > $QUIET_PERIOD_MILLIS){
      $lastFailureMillis = $nowMillis;
      system $failureCmd;
    }
  }

  close $fh;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
