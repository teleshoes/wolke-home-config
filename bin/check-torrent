#!/usr/bin/python
import sys, os, hashlib, bencodepy

PYTHON2 = sys.version_info < (3, 0)
PYTHON3 = sys.version_info >= (3, 0)

if PYTHON2:
  from StringIO import StringIO
if PYTHON3:
  from io import StringIO

def main():
  torrentPath = sys.argv[1]
  info = readTorrentInfo(torrentPath)
  torrentPieceHashesItr = genTorrentPieceHashes(info)
  downloadPieceHashesItr = genDownloadPieceHashes(info)
  count = 0
  while True:
    expectedPieceHash = next(torrentPieceHashesItr, None)
    torrentPieceHashInfo = next(downloadPieceHashesItr, None)
    if torrentPieceHashInfo == None:
      actualPieceHash = None
      pathsInPiece = []
    else:
      actualPieceHash = torrentPieceHashInfo['pieceHash']
      pathsInPiece = torrentPieceHashInfo['paths']
    if expectedPieceHash == None and actualPieceHash == None:
      break
    elif expectedPieceHash == None:
      fail("TOO MANY PIECES (paths=" + toStr(pathsInPiece) + ")")
    elif actualPieceHash == None:
      fail("MISSING PIECES (paths=" + toStr(pathsInPiece) + ")")
    count += 1
    if actualPieceHash != expectedPieceHash:
      fail("PIECE HASH MISMATCH (paths=" + toStr(pathsInPiece) + ")")
  print(str(count) + " pieces\n")
  print("\nVERIFIED")

def genTorrentPieceHashes(info):
  strIO = StringIO(info['pieces'])
  p = strIO.read(20)
  while p:
    yield p
    p = strIO.read(20)

def readTorrentInfo(torrentPath):
  f = open(torrentPath, "rb")
  metaInfo = bencodepy.decode(f.read())
  f.close
  return metaInfo[b'info']

def getFileInfo(info):
  fileInfo = []
  if b'files' in info:
    for torrentFileInfo in info[b'files']:
      torrentName = info[b'name']
      pathSegs = [torrentName] + torrentFileInfo[b'path']

      path = os.sep.join(map(toStr, pathSegs))
      size = int(toStr(torrentFileInfo[b'length']))
      fileInfo.append({'path': path, 'size': size})
  else:
    path = info[b'name']
    size = info[b'length']
    fileInfo.append({'path': path, 'size': size})
  return fileInfo

def genFilePieceHashes(fileInfo, pieceLen):
  piece = bytes()

  for f in fileInfo:
    path = f['path']
    size = f['size']
    if not os.path.isfile(path):
      fail("file is missing: " + toStr(path))
    actualSize = os.path.getsize(path)
    if not size == actualSize:
      fail("filesize mismatch "
        + "(expected=" + str(size) + "b"
        + ", actual=" + str(actualSize) + "b"
        + "): " + path)

  pathsInPiece = []
  for f in fileInfo:
    path = f['path']
    print("\nhashing pieces for file:\n" + toStr(path))
    sys.stdout.flush()
    try:
      sfile = open(path, "rb")
    except:
      print("DOWNLOAD CORRUPTED: error opening file: " + path)
      raise
    pathsInPiece.append(path)
    while True:
      try:
        piece += sfile.read(pieceLen-len(piece))
      except:
        print("DOWNLOAD CORRUPTED: error reading file: " + path)
        raise
      if len(piece) != pieceLen:
        sfile.close()
        break
      yield {"pieceHash": hashPiece(piece), "paths": pathsInPiece}
      piece = bytes()
      pathsInPiece = [path]
  if piece != "":
    yield {"pieceHash": hashPiece(piece), "paths": pathsInPiece}

def genDownloadPieceHashes(info):
  pieceLen = int(toStr(info[b'piece length']))
  fileInfo = getFileInfo(info)
  return genFilePieceHashes(fileInfo, pieceLen)

def hashPiece(piece):
  return hashlib.sha1(piece).digest()

def fail(msg):
  print("DOWNLOAD CORRUPTED: " + msg)
  exit(1)

def toStr(string):
  if type(string) == str:
    return string
  else:
    try:
      return string.decode("utf-8")
    except:
      return str(string)

if __name__ == "__main__":
  main()
