#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use JSON qw(from_json to_json);
use Time::HiRes qw(time);

my $EXEC = basename $0;
my $WORKOUTS_JSON_CACHE_DIR = "$ENV{HOME}/.cache/workouts/viewfit-workouts-json";
my $WORKOUTS_EXTRA_INFO_FILE = "$ENV{HOME}/.cache/workouts/viewfit-workouts-extra-info";
my $WORKOUTS_COMBINE_FILE = "$ENV{HOME}/.cache/workouts/viewfit-workouts-combine";

my $VIEWFIT_EXERCISER_BASE_URL = 'https://www.viewfit.com/exerciser/exerciser';

my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my $SECRETS_PREFIX = "viewfit";
my $SECRETS_KEYS_REGEX = join "|", qw(exerciser);
my %SECRETS_ENC_KEYS = map {$_ => 1} qw();

my $MILES_PER_KM = 0.62137119;

my %NAMED_TARGETS = (
  "10.0km" => 1000 * 10,
  "5.0km"  => 1000 * 5,
  "1.5mi"  => 1000 * (1.5 / $MILES_PER_KM),
  "1.0mi"  => 1000 * (1.0 / $MILES_PER_KM),
  "0.5mi"  => 1000 * (0.5 / $MILES_PER_KM),
);
my @SORTED_TARGET_NAMES =
  sort {$NAMED_TARGETS{$b} <=> $NAMED_TARGETS{$a}}
  keys %NAMED_TARGETS;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] -g | --get
    parse workouts in $WORKOUTS_JSON_CACHE_DIR

  $EXEC [OPTS] -f | --fetch
    fetch workouts from:
      $VIEWFIT_EXERCISER_BASE_URL/<UUID>/workouts
    and store them in $WORKOUTS_JSON_CACHE_DIR

  OPTS
    --id=WORKOUT_ID
      show only workouts that match WORKOUT_ID

    --date=YYYY-MM-DD
      show only workouts that match YYYY-MM-DD

    --intervals
      when printing workouts, print interval information after, one per line
      (this is large)
";

sub readCachedWorkouts();
sub readExtraInfo();
sub insertExtraInfo($@);
sub calculateDistanceTargets(@);
sub readWorkoutsCombine();
sub applyAndFilterCombinedWorkouts($@);
sub getCombinedWorkout($$);
sub fetchViewfitWorkouts();
sub readFile($);
sub writeFile($$);
sub getExerciserUUID();
sub readSecrets();
sub decrypt($);
sub dateToEpoch($);
sub dateFmt($$);
sub nowMillis();
sub run(@);
sub runQuiet(@);

my $COMMAND_GET = "get";
my $COMMAND_FETCH = "fetch";

sub main(@){
  my $cmd = $COMMAND_GET;
  my $opts = {
    workoutIdFilter => undef,
    dateFilter => undef,
    printIntervals => undef,
  };
  my @cmdArgs;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $cmd = $COMMAND_GET;
    }elsif($arg =~ /^(-f|--fetch)$/){
      $cmd = $COMMAND_FETCH;
    }elsif($arg =~ /^--id=(.+)$/){
      $$opts{workoutIdFilter} = $1;
    }elsif($arg =~ /^--date=(\d\d\d\d-\d\d-\d\d)$/){
      $$opts{dateFilter} = $1;
    }elsif($arg =~ /^(--intervals)$/){
      $$opts{printIntervals} = $1;
    }else{
      push @cmdArgs, $arg;
    }
  }

  if($cmd eq $COMMAND_GET){
    my @workouts = readCachedWorkouts();
    my $extraInfo = readExtraInfo();
    my $workoutsCombineInfo = readWorkoutsCombine();

    @workouts = applyAndFilterCombinedWorkouts($workoutsCombineInfo, @workouts);
    insertExtraInfo($extraInfo, @workouts);

    calculateDistanceTargets(@workouts);

    if(defined $$opts{workoutIdFilter}){
      @workouts = grep {$$_{workout_id} =~ /$$opts{workoutIdFilter}/} @workouts;
    }
    if(defined $$opts{dateFilter}){
      @workouts = grep {$$_{workout_time} =~ /^$$opts{dateFilter}/} @workouts;
    }

    @workouts = sort {
      $$a{workout_time} cmp $$b{workout_time}
    } @workouts;

    for my $w(@workouts){
      my $timeUTC = $$w{workout_time};
      my $timeEpochFracS = dateToEpoch($timeUTC);

      my $timeFmt = dateFmt($timeEpochFracS, "%Y-%m-%d %H:%M:%S");
      my $maxHR = $$w{max_heart_rate};
      my $durS = $$w{duration};
      next if $durS < 10;
      my $durFmt = sprintf "%3d:%02d", int($durS/60), $durS%60;
      my $distanceMiles = sprintf "%.2f", $$w{distance}/1000.0*$MILES_PER_KM;
      my $targetFmt = sprintf "%12s", "";
      for my $targetName(@SORTED_TARGET_NAMES){
        if(defined $$w{targets}{$targetName}){
          my $durS = $$w{targets}{$targetName};
          $targetFmt = sprintf "%6s=%02d:%02d", $targetName, int($durS/60), $durS%60;
          last;
        }
      }
      print "$$w{workout_id}   $timeFmt  $distanceMiles  $durFmt  $maxHR  $targetFmt\n";
      if($$opts{printIntervals}){
        for my $i(@{$$w{intervals}}){
          print to_json($i) . "\n";
        }
      }
    }
  }elsif($cmd eq $COMMAND_FETCH){
    fetchViewfitWorkouts();
  }else{
    die $USAGE;
  }
}

sub readCachedWorkouts(){
  my @jsonFiles = (
    glob("$WORKOUTS_JSON_CACHE_DIR/workouts_*.json"),
    glob("$WORKOUTS_JSON_CACHE_DIR/workouts_*.json.gz"),
  );
  @jsonFiles = sort @jsonFiles;
  die "ERROR: could not find any workout json files in cache\n" if @jsonFiles == 0;
  my $latestJsonFile = $jsonFiles[-1];
  my $json = $latestJsonFile =~ /\.gz$/i ? readFileGZ($latestJsonFile) : readFile($latestJsonFile);
  my $jsonObj = from_json($json);
  return @{$$jsonObj{workouts}};
}

sub readExtraInfo(){
  my @lines = `cat $WORKOUTS_EXTRA_INFO_FILE 2>/dev/null`;
  my $extraInfo = {};
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+)\.(\w+)\s*=\s*(.*)$/){
      my ($id, $key, $val) = ($1, $2, $3);
      $$extraInfo{$id} = {} if not defined $$extraInfo{$id};
      $$extraInfo{$id}{$key} = $val;
    }else{
      die "ERROR: invalid line in $WORKOUTS_EXTRA_INFO_FILE\n$line\n";
    }
  }
  return $extraInfo;
}
sub insertExtraInfo($@){
  my ($extraInfo, @workouts) = @_;
  for my $workoutID(sort keys %$extraInfo){
    my $info = $$extraInfo{$workoutID};
    my $found = 0;
    for my $workout(@workouts){
      if($workoutID eq $$workout{workout_id}){
        for my $key(sort keys %$info){
          my $val = $$info{$key};
          if($key eq "intervals"){
            my $intervals = $$workout{intervals};

            my @extraIntervals = split /,/, $val;
            for my $extraInterval(@extraIntervals){
              if($extraInterval !~ /^(\d+|\d*\.\d+)s:(\d+|\d*\.\d+)m$/){
                die "ERROR: malformed $workoutID.$key=$val\n";
              }
              my ($duration, $distance) = ($1, $2);
              if($duration == 0){
                die "ERROR: duration cannot be 0 in $workoutID.$key=$val\n";
              }
              my $speed = ($distance/$duration)*60*60/1000;

              my $prevAvgDistance = 0;
              if(@$intervals > 0){
                $prevAvgDistance = ${$$intervals[-1]}{average_distance};
              }

              push @$intervals, {
                duration => $duration,
                distance => $distance,
                average_distance => $prevAvgDistance + $distance,
                speed => $speed,
                power => 0,
              };
            }
          }else{
            $$workout{$key} = $val;
          }
        }
        $found = 1;
        last;
      }
    }
    if(not $found){
      die "ERROR: could not insert extra info for workout $workoutID\n";
    }
  }
}

sub calculateDistanceTargets(@){
  my (@workouts) = @_;

  #the 'distance' value in interval does not correlate well to average_distance,
  #  and average_distance correlates much better with workout total distance,
  #  so: re-calculate distance from average_distance
  for my $workout(@workouts){
    my @intervals = @{$$workout{intervals}};
    my $curElapsedS = 0;
    my $prevAvgDistance = 0;
    for my $interval(@intervals){
      $$interval{calculatedDistance} = $$interval{average_distance} - $prevAvgDistance;
      $prevAvgDistance = $$interval{average_distance};
    }
  }

  #copy duration => calculated duration
  for my $workout(@workouts){
    my @intervals = @{$$workout{intervals}};
    for my $interval(@intervals){
      $$interval{calculatedDuration} = $$interval{duration};
    }
  }

  #scale interval duration+distance to match overall workout duration+distance
  for my $workout(@workouts){
    my @intervals = @{$$workout{intervals}};
    my $totalIntervalDuration = 0;
    my $totalIntervalDistance = 0;
    for my $interval(@intervals){
      $totalIntervalDuration += $$interval{calculatedDuration};
      $totalIntervalDistance += $$interval{calculatedDistance};
    }

    if($totalIntervalDuration > 0 and $totalIntervalDistance > 0){
      my $scalingDuration = $$workout{duration} / $totalIntervalDuration;
      my $scalingDistance = $$workout{distance} / $totalIntervalDistance;
      for my $interval(@intervals){
        $$interval{calculatedDuration} *= $scalingDuration;
        $$interval{calculatedDistance} *= $scalingDistance;
      }
    }
  }

  for my $workout(@workouts){
    $$workout{targets} = {};
    my @intervals = @{$$workout{intervals}};
    for my $targetName(@SORTED_TARGET_NAMES){
      my $targetDist = $NAMED_TARGETS{$targetName};
      my $startIdx = -1;
      my $endIdx = -1;
      my $curDist = 0;
      my $curDur = 0;
      my $bestDur = undef;
      while($startIdx <= $endIdx){
        #shift start to the right exactly one interval, and subtract the removed interval (if any)
        $startIdx++;
        if($startIdx-1 >= 0){
          $curDist -= ${$intervals[$startIdx-1]}{calculatedDistance};
          $curDur -= ${$intervals[$startIdx-1]}{calculatedDuration};
        }

        #shift end to the right until target min distance is reached, and add each added interval
        while($curDist < $targetDist and $endIdx+1 < @intervals){
          $endIdx++;
          $curDist += ${$intervals[$endIdx]}{calculatedDistance};
          $curDur += ${$intervals[$endIdx]}{calculatedDuration};
        }

        #if target distance is reached, check if it is the best duration set for target
        if($curDist >= $targetDist and (not defined $bestDur or $curDur < $bestDur)){
          $bestDur = $curDur;
          $$workout{targets}{$targetName} = $bestDur;
        }
      }
    }
  }
}

sub readWorkoutsCombine(){
  my @lines = `cat $WORKOUTS_COMBINE_FILE 2>/dev/null`;
  my $workoutsCombineInfo = {};
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+)\s*=\s*((?:\w+\s*,\s*)*\w+)\s*$/){
      my ($mainID, $combinedIDsCsv) = ($1, $2);
      my @combinedIDs = split /,/, $combinedIDsCsv;
      s/^\s*// foreach @combinedIDs;
      s/\s*$// foreach @combinedIDs;
      for my $id(@combinedIDs){
        if($id !~ /^\w+$/){
          die "ERROR: invalid ID in $WORKOUTS_COMBINE_FILE\n$line\n";
        }
      }
      $$workoutsCombineInfo{$mainID} = [@combinedIDs];
    }else{
      die "ERROR: invalid line in $WORKOUTS_COMBINE_FILE\n$line\n";
    }
  }
  return $workoutsCombineInfo;
}
sub applyAndFilterCombinedWorkouts($@){
  my ($workoutsCombineInfo, @workouts) = @_;
  my %workoutsByID = map {$$_{workout_id} => $_} @workouts;
  my %workoutIDsToExclude = map {$_ => 1} (map {@$_} values %$workoutsCombineInfo);

  my @combinedWorkouts;
  for my $workout(@workouts){
    my $workoutID = $$workout{workout_id};
    if(defined $$workoutsCombineInfo{$workoutID}){
      my @addtlWorkoutIDs = @{$$workoutsCombineInfo{$workoutID}};
      my @workoutsToCombine = ($workout, map {$workoutsByID{$_}} @addtlWorkoutIDs);
      @workoutsToCombine = sort {
        $$a{workout_time} cmp $$b{workout_time}
      } @workoutsToCombine;

      #foldl
      while(@workoutsToCombine > 1){
        my $w1 = shift @workoutsToCombine;
        my $w2 = shift @workoutsToCombine;
        @workoutsToCombine = (getCombinedWorkout($w1, $w2), @workoutsToCombine);
      }
      die "ERROR: combine workouts failed\n" if @workoutsToCombine != 1;
      push @combinedWorkouts, $workoutsToCombine[0];
    }elsif(not defined $workoutIDsToExclude{$workoutID}){
      push @combinedWorkouts, $workout;
    }else{
      #omit workout
    }
  }
  return @combinedWorkouts;
}

sub getCombinedWorkout($$){
  my ($w1, $w2) = @_;

  my $id1 = $$w1{workout_id};
  my $id2 = $$w2{workout_id};
  my $distance1 = $$w1{distance};
  my $distance2 = $$w2{distance};
  my $dur1 = $$w1{duration};
  my $dur2 = $$w2{duration};
  my $start1 = dateToEpoch($$w1{workout_time});
  my $start2 = dateToEpoch($$w2{workout_time});
  my $end1 = $start1 + $dur1;
  my $end2 = $start2 + $dur2;
  my $cal1 = $$w1{calories};
  my $cal2 = $$w1{calories};
  my $maxhr1 = $$w1{max_heart_rate};
  my $maxhr2 = $$w2{max_heart_rate};
  my $minhr1 = $$w1{min_heart_rate};
  my $minhr2 = $$w2{min_heart_rate};
  my $avghr1 = $$w1{average_heart_rate};
  my $avghr2 = $$w2{average_heart_rate};
  my @intervals1 = @{$$w1{intervals}};
  my @intervals2 = @{$$w2{intervals}};

  my $elapsedS = $start2 - $end1;

  #weighted by duration
  my $avghr = ($avghr1 * ($dur1/($dur1+$dur2))) + ($avghr2 * ($dur2/($dur1+$dur2)));

  if($id1 eq $id2){
    die "ERROR: duplicate combined workouts $id1 + $id2\n";
  }elsif($elapsedS > 180){
    die "ERROR: workouts to combine more than 3min apart (${elapsedS}s) $id1 + $id2\n";
  }

  my $lastIntervalW1 = $intervals1[-1];

  my $emptyInterval = {%$lastIntervalW1,
    duration => $elapsedS,
    distance => 0,
    speed => 0,
    power => 0,
  };

  #extend intervals in w2 by the last interval in w1
  for my $interval(@intervals2){
    $$interval{average_distance} += $$lastIntervalW1{average_distance};
  }

  $$w1{distance} = $distance1 + $distance2 + 0;
  $$w1{duration} = $dur1 + $dur2 + $elapsedS;
  $$w1{calories} = $cal1 + $cal2;
  $$w1{max_heart_rate} = $maxhr1 > $maxhr2 ? $maxhr1 : $maxhr2;
  $$w1{min_heart_rate} = $minhr1 < $minhr2 ? $minhr1 : $minhr2;
  $$w1{average_heart_rate} = int($avghr + 0.5);
  $$w1{intervals} = [@intervals1, $emptyInterval, @intervals2];

  return $w1;
}

sub fetchViewfitWorkouts(){
  my $exerciserUUID = getExerciserUUID();
  my $url = "$VIEWFIT_EXERCISER_BASE_URL/$exerciserUUID/workouts";

  my $nowMillis = nowMillis();
  my $nowEpoch = $nowMillis / 1000.0;
  my $nowFmt = dateFmt($nowEpoch, "%Y-%m-%d_%H%M%S");
  my $cacheFile = "$WORKOUTS_JSON_CACHE_DIR/workouts_${nowFmt}_$nowMillis.json";

  system "mkdir", "-p", $WORKOUTS_JSON_CACHE_DIR;

  my @cmd = ("curl",
    "--silent",
    $url,
    "--output", $cacheFile,
  );
  run @cmd;
  die "ERROR: curl failed\n$!\n" if $? != 0;
  run "gzip", $cacheFile;
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}
sub readFileGZ($){
  my ($file) = @_;
  open FH, "-|", "gzip -d --stdout $file"
    or die "ERROR: could not gunzip $file\n$!\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}

sub writeFile($$){
  my ($file, $content) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $content;
  close FH;
}

sub getExerciserUUID(){
  my $secrets = readSecrets();
  if(not defined $$secrets{exerciser}){
    die "ERROR: could not read $SECRETS_PREFIX.excerciser in secrets\n"
  }
  return $$secrets{exerciser};
}

sub readSecrets(){
  my @lines = `cat $SECRETS_FILE 2>/dev/null`;
  my $secrets = {};
  for my $line(@lines){
    if($line =~ /^$SECRETS_PREFIX\.($SECRETS_KEYS_REGEX)\s*=\s*(.+)$/){
      $$secrets{$1} = $2;
    }
  }
  for my $key(sort keys %$secrets){
    $$secrets{$key} = decrypt $$secrets{$key} if defined $SECRETS_ENC_KEYS{$key};
  }
  return $secrets;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

sub dateToEpoch($){
  my ($timeFmt) = @_;
  my $timeEpochFracS = `date --date='$timeFmt' +%s.%3N`;
  chomp $timeEpochFracS;
  return $timeEpochFracS;
}

sub dateFmt($$){
  my ($epoch, $fmt) = @_;
  my $dateFmt = `date --date=\@$epoch +'$fmt'`;
  chomp $dateFmt;
  return $dateFmt;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5)
}

sub run(@){
  print "@_\n";
  runQuiet(@_);
}

sub runQuiet(@){
  system @_;
}

&main(@ARGV);
