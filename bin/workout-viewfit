#!/usr/bin/perl
use strict;
use warnings;
use DateTime qw();
use Date::Format qw(time2str);
use Digest::MD5 qw();
use File::Basename qw(basename);
use Cpanel::JSON::XS qw(decode_json);
use Time::HiRes qw(time);
use Time::Local qw(timegm_posix timelocal_posix);

sub formatWorkoutDetails($$);
sub formatWorkoutsSummary($$@);
sub readCachedWorkouts();
sub readCachedWorkoutLatest();
sub readExtraInfo();
sub insertExtraInfo($@);
sub splitUpLargeIntervals($);
sub groupIntervalsIntoSpeedSegments($);
sub formatSpeedSegment($);
sub getHrmonHrByEpoch($);
sub getAmazfishHrByEpoch($);
sub readHrCache($$);
sub writeHrCache($$$);
sub isWorkoutNeedsExternalHeartrate($);
sub insertExternalHeartrates($$);
sub calculateScaledTimeAndDistance($);
sub calculateDistanceTargets($);
sub readWorkoutsCombine();
sub applyAndFilterCombinedWorkouts($@);
sub getCombinedWorkout($$);
sub fetchViewfitWorkouts();
sub mergeCachedJsonFiles();
sub groupWorkoutsIntoPeriods($$@);
sub readFile($);
sub readFileGZ($);
sub writeFile($$);
sub getExerciserUUID();
sub readSecrets();
sub decrypt($);
sub formatTimeMinSec($);
sub formatTimeHrMinSec($);
sub dtmStrToEpoch($);
sub getEpochFracS($$$$$$$$);
sub dateFmt($$);
sub getDateBoundary($$);
sub binarySearchIdx($$$);
sub nvl($$);
sub md5sumFile($);
sub mtime($);
sub nowMillis();
sub run(@);
sub runQuiet(@);

my $EXEC = basename $0;
my $WORKOUTS_JSON_CACHE_DIR = "$ENV{HOME}/.cache/workouts/viewfit-workouts-json";
my $WORKOUTS_MERGED_JSON_FILE = "$ENV{HOME}/.cache/workouts/viewfit-workouts-merged.json";
my $WORKOUTS_EXTRA_INFO_FILE = "$ENV{HOME}/.cache/workouts/viewfit-workouts-extra-info";
my $WORKOUTS_COMBINE_FILE = "$ENV{HOME}/.cache/workouts/viewfit-workouts-combine";

my $HRMON_LOG_DIR = "$ENV{HOME}/.cache/logs/hrmon";

my $HR_CACHE_DIR_HRMON = "$ENV{HOME}/.cache/workouts/hr-cache-hrmon";
my $HR_CACHE_DIR_AMAZFISH = "$ENV{HOME}/.cache/workouts/hr-cache-amazfish";

my $VIEWFIT_EXERCISER_BASE_URL = 'https://www.viewfit.com/exerciser/exerciser';

my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my $SECRETS_PREFIX = "viewfit";
my $SECRETS_KEYS_REGEX = join "|", qw(exerciser);
my %SECRETS_ENC_KEYS = map {$_ => 1} qw();

my $MILES_PER_KM = 0.62137119;

my %NAMED_TARGETS = (
  "10k"    => 1000 * 10,
  "5k"     => 1000 * 5,
  "1.5mi"  => 1000 * (1.5 / $MILES_PER_KM),
  "1.0mi"  => 1000 * (1.0 / $MILES_PER_KM),
  "0.5mi"  => 1000 * (0.5 / $MILES_PER_KM),
);
my @SORTED_TARGET_NAMES =
  sort {$NAMED_TARGETS{$b} <=> $NAMED_TARGETS{$a}}
  keys %NAMED_TARGETS;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] -g | --get
    -parse workouts in $WORKOUTS_MERGED_JSON_FILE

  $EXEC [OPTS] -f | --fetch
    -fetch workouts from:
      $VIEWFIT_EXERCISER_BASE_URL/<UUID>/workouts
    -check if identical JSON already cached by md5sum
    -if not, store in:
      $WORKOUTS_JSON_CACHE_DIR/workouts_YYYY-MM-DD_HHMMSS_MD5SUM_MILLIS.json
    -parse all workouts from all JSON fetches and merge into one JSON file:
      $WORKOUTS_MERGED_JSON_FILE
    -read workouts as in --get, and print info for latest workout

  $EXEC [OPTS] -l | --loop | --fetch-loop
    -fork and read from stdin
      -if any input received at any time, immediately exit
    -repeatedly fetch workouts, as in: $EXEC --fetch

  OPTS
    --id=WORKOUT_ID
      show only workouts that match WORKOUT_ID

    --date=YYYY-MM-DD
    YYYY-MM-DD
      show only workouts that match YYYY-MM-DD

    --details
      show details for each workout
      (this is the default)

    -w | --week | --weekly
      show a summary of each calendar week, Monday-Sunday, with a workout in it

    -m | --month | --monthly
      show a summary of each calendar month, Monday-Sunday, with a workout in it

    --start-time | --print-start-time
      format workout start datetime as 'YYYY-mm-dd HH:MM:SS'

    --no-start-time | --no-print-start-time
      format workout start datetime as 'YYYY-mm-dd', without time
      (this is the default)

    --ids | --print-ids
      show ids in format
    --no-ids | --no-print-ids
      do not show ids in format
      (this is the default)

    -s | --segments | --print-segments
      print speed segments

    --no-segments | --no-print-segments
      do not print speed segments when printing workouts
      (this is the default)

    --intervals | --print-intervals
      when printing workouts, print interval information after, one per line
      NOTE: this output is very large

    --no-intervals | --no-print-intervals
      do not print interval information
      (this is the default)
";

my $COMMAND_GET = "get";
my $COMMAND_FETCH = "fetch";
my $COMMAND_FETCH_LOOP = "fetch-loop";

my $FORMAT_DETAILS = "details";
my $FORMAT_WEEKLY = "weekly";
my $FORMAT_MONTHLY = "monthly";

my $DATE_BOUNDARY_WEEK_START = "week-start";
my $DATE_BOUNDARY_WEEK_END = "week-end";
my $DATE_BOUNDARY_MONTH_START = "month-start";
my $DATE_BOUNDARY_MONTH_END = "month-end";

sub main(@){
  my $cmd = $COMMAND_GET;
  my $opts = {
    workoutIdFilter => undef,
    dateFilter => undef,
    format => $FORMAT_DETAILS,
    printStartTime => 0,
    printIds => 0,
    printSpeedSegments => 0,
    printIntervals => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $cmd = $COMMAND_GET;
    }elsif($arg =~ /^(-f|--fetch)$/){
      $cmd = $COMMAND_FETCH;
    }elsif($arg =~ /^(-l|--loop|--fetch-loop)$/){
      $cmd = $COMMAND_FETCH_LOOP;
    }elsif($arg =~ /^--id=(.+)$/){
      $$opts{workoutIdFilter} = $1;
    }elsif($arg =~ /^(?:--date=)?(\d\d\d\d-\d\d-\d\d)$/){
      $$opts{dateFilter} = $1;
    }elsif($arg =~ /^(--details)$/){
      $$opts{format} = $FORMAT_DETAILS;
    }elsif($arg =~ /^(-w|--week|--weekly)$/){
      $$opts{format} = $FORMAT_WEEKLY;
    }elsif($arg =~ /^(-m|--month|--monthly)$/){
      $$opts{format} = $FORMAT_MONTHLY;
    }elsif($arg =~ /^(--start-time|--print-start-time)$/){
      $$opts{printStartTime} = 1;
    }elsif($arg =~ /^(--no-start-time|--no-print-start-time)$/){
      $$opts{printStartTime} = 0;
    }elsif($arg =~ /^(--ids|--print-ids)$/){
      $$opts{printIds} = 1;
    }elsif($arg =~ /^(--no-ids|--no-print-ids)$/){
      $$opts{printIds} = 0;
    }elsif($arg =~ /^(-s|--segments|--print-segments)$/){
      $$opts{printSpeedSegments} = 1;
    }elsif($arg =~ /^(--no-segments|--no-print-segments)$/){
      $$opts{printSpeedSegments} = 0;
    }elsif($arg =~ /^(--intervals|--print-intervals)$/){
      $$opts{printIntervals} = 1;
    }elsif($arg =~ /^(--no-intervals|--no-print-intervals)$/){
      $$opts{printIntervals} = 0;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $COMMAND_GET){
    my @workouts = readCachedWorkouts();
    my $extraInfo = readExtraInfo();
    my $workoutsCombineInfo = readWorkoutsCombine();

    @workouts = insertExtraInfo($extraInfo, @workouts);
    @workouts = applyAndFilterCombinedWorkouts($workoutsCombineInfo, @workouts);

    if(defined $$opts{workoutIdFilter}){
      @workouts = grep {$$_{workout_id} =~ /$$opts{workoutIdFilter}/} @workouts;
    }
    if(defined $$opts{dateFilter}){
      @workouts = grep {$$_{dtmYMD} =~ /^$$opts{dateFilter}/} @workouts;
    }

    @workouts = sort {
      $$a{dtmEpoch} <=> $$b{dtmEpoch}
    } @workouts;

    for my $w(@workouts){
      #if workout has no intervals, add one with the whole workout
      if(@{$$w{intervals}} == 0 and $$w{duration} > 0){
        $$w{intervals} = [{
          duration         => $$w{duration},
          distance         => $$w{distance},
          average_distance => $$w{distance},
          speed            => ($$w{distance}/1000.0) / ($$w{duration}/60.0/60.0),
          heart_rate       => 0,
        }];
      }

      #split the following intervals into multiple smaller intervals:
      #  long intervals added by extra info
      #  long intervals added in between combined workouts
      #  long intervals added for workouts without intervals
      #  any other intervals larger than 12s (should never be any)
      splitUpLargeIntervals($w);

      calculateScaledTimeAndDistance($w);
      calculateDistanceTargets($w);

      if(isWorkoutNeedsExternalHeartrate($w)){
        my $hrByEpoch = getHrmonHrByEpoch($$w{dtmYMD});
        insertExternalHeartrates($w, $hrByEpoch);
      }
      if(isWorkoutNeedsExternalHeartrate($w)){
        my $hrByEpoch = getAmazfishHrByEpoch($$w{dtmYMD});
        insertExternalHeartrates($w, $hrByEpoch);
      }
    }

    #skip short workouts
    @workouts = grep {$$_{duration} > 20} @workouts;

    if($$opts{format} eq $FORMAT_DETAILS){
      for my $w(@workouts){
        print formatWorkoutDetails($opts, $w);
      }
    }elsif($$opts{format} eq $FORMAT_WEEKLY){
      my @periods = groupWorkoutsIntoPeriods(
        $DATE_BOUNDARY_WEEK_START, $DATE_BOUNDARY_WEEK_END, @workouts);
      for my $period(@periods){
        print formatWorkoutsSummary($opts, $$period{start}, @{$$period{workouts}});
      }
    }elsif($$opts{format} eq $FORMAT_MONTHLY){
      my @periods = groupWorkoutsIntoPeriods(
        $DATE_BOUNDARY_MONTH_START, $DATE_BOUNDARY_MONTH_END, @workouts);
      for my $period(@periods){
        print formatWorkoutsSummary($opts, $$period{start}, @{$$period{workouts}});
      }
    }else{
      die "ERROR: unknown format $$opts{format}\n";
    }
  }elsif($cmd eq $COMMAND_FETCH){
    fetchViewfitWorkouts();

    my $w = readCachedWorkoutLatest();
    die "ERROR: no workouts found\n" if not defined $w;
    my $distanceMiles = sprintf "%.2f", $$w{distance}/1000.0*$MILES_PER_KM;
    my $durS = $$w{duration};
    my $durFmt = formatTimeMinSec($durS);
    print "\nlatest workout: $$w{dtmYMDHMS}   ${distanceMiles}mi  $durFmt\n";
  }elsif($cmd eq $COMMAND_FETCH_LOOP){
    my $pid = fork();
    if($pid == 0){
      while(1){
        print "\n\n=====\n";
        system "date";
        fetchViewfitWorkouts();
        my $w = readCachedWorkoutLatest();
        if(defined $w){
          my $distanceMiles = sprintf "%.2f", $$w{distance}/1000.0*$MILES_PER_KM;
          my $durS = $$w{duration};
          my $durFmt = formatTimeMinSec($durS);
          print "\nlatest workout: $$w{dtmYMDHMS}   ${distanceMiles}mi  $durFmt\n";
        }else{
          print "\nno workouts\n";
        }
      }
    }else{
      my $input = <STDIN>;
      print "\nEXITING\n";
      kill 1, $pid;
      waitpid $pid, 0;
    }
  }else{
    die $USAGE;
  }
}

sub formatWorkoutDetails($$){
  my ($opts, $w) = @_;
  my $fmt = "";

  my $maxHR = defined $$w{max_heart_rate} ? $$w{max_heart_rate} : 0;
  my $durS = $$w{duration};
  my $durFmt = formatTimeMinSec($durS);
  my $distanceMiles = $$w{distance}/1000.0*$MILES_PER_KM;
  my $targetFmt = sprintf "%12s", "";
  for my $targetName(@SORTED_TARGET_NAMES){
    if(defined $$w{targets}{$targetName}){
      my $targetDurS = $$w{targets}{$targetName};
      my $targetDurFmt = formatTimeMinSec($targetDurS);
      $targetFmt = sprintf "%6s=%5s", $targetName, $targetDurFmt;
      last;
    }
  }

  my $idPrefix = $$opts{printIds} ? sprintf("%-24s   ", $$w{workout_id}) : "";

  my $dtmFmt = $$opts{printStartTime} ? $$w{dtmYMDHMS} : $$w{dtmYMD};

  $fmt .= sprintf "%s%s | %5.2fkm %4.1fmi | %6s | %3d |%s|\n",
    $idPrefix,
    $dtmFmt,
    $$w{distance}/1000.0,
    $distanceMiles,
    $durFmt,
    $maxHR,
    $targetFmt,
  ;

  if($$opts{printSpeedSegments}){
    my @segments = groupIntervalsIntoSpeedSegments($w);
    for my $segment(@segments){
      $fmt .= formatSpeedSegment($segment);
    }
  }

  if($$opts{printIntervals}){
    for my $i(@{$$w{intervals}}){
      $fmt .= "{" . join(",", map {"\"$_\":$$i{$_}"} sort keys %$i) . "}\n";
    }
  }

  return $fmt;
}

sub formatWorkoutsSummary($$@){
  my ($opts, $name, @workouts) = @_;

  my %targets;
  my $totalDur = 0;
  my $totalDist = 0;
  my $sumMaxHR = 0;
  for my $w(@workouts){
    $totalDur += $$w{duration};
    $totalDist += $$w{distance};
    $sumMaxHR += defined $$w{max_heart_rate} ? $$w{max_heart_rate} : 0;

    for my $targetName(@SORTED_TARGET_NAMES){
      if(defined $$w{targets}{$targetName}){
        $targets{$targetName} = [] if not defined $targets{$targetName};
        my $targetDurS = $$w{targets}{$targetName};
        push @{$targets{$targetName}}, $targetDurS;
        last;
      }
    }
  }

  my $avgMaxHR = @workouts > 0 ? sprintf "%d", ($sumMaxHR / @workouts) : 0;

  my $distanceKM = $totalDist/1000.0;
  my $distanceMiles = $totalDist/1000.0*$MILES_PER_KM;

  my @targetFmts;
  for my $targetName(@SORTED_TARGET_NAMES){
    if(defined $targets{$targetName}){
      my @targetWorkoutDurs = @{$targets{$targetName}};
      my $count = @targetWorkoutDurs;
      my $sumTime = 0;
      my $minTime = undef;
      for my $durS(@targetWorkoutDurs){
        $sumTime += $durS;
        $minTime = $durS if not defined $minTime or $durS < $minTime;
      }
      my $avgTime = @targetWorkoutDurs > 0 ? $sumTime / @targetWorkoutDurs : 0;
      push @targetFmts, sprintf("%2dx%s=%s(%s)",
        $count,
        $targetName,
        formatTimeMinSec($minTime),
        formatTimeMinSec($avgTime),
      );
    }
  }

  return sprintf "%-10s | %3dkm %3dmi | %8s | %s\n",
    $name,
    $distanceKM,
    $distanceMiles,
    formatTimeHrMinSec($totalDur),
    join(" ", map {sprintf "%-14s", $_} @targetFmts),
  ;
}

sub readCachedWorkouts(){
  if(not -f $WORKOUTS_MERGED_JSON_FILE){
    print STDERR "\nmerging all fetched JSON files into $WORKOUTS_MERGED_JSON_FILE\n";
    mergeCachedJsonFiles();
  }
  if(not -f $WORKOUTS_MERGED_JSON_FILE){
    die "ERROR: missing $WORKOUTS_MERGED_JSON_FILE\n";
  }

  my $json = readFile($WORKOUTS_MERGED_JSON_FILE);
  my $jsonObj = decode_json($json);
  my @workouts = @{$$jsonObj{workouts}};

  for my $workout(@workouts){
    my $epoch = dtmStrToEpoch($$workout{workout_time});
    if(not defined $epoch or $epoch !~ /^-?\d+\.\d+$/){
      die "ERROR: invalid workout_time for $$workout{workout_id}\n";
    }
    $$workout{dtmEpoch} = $epoch; #fractional seconds since epoch
    $$workout{dtmYMD} = dateFmt("%Y-%m-%d", $epoch);
    $$workout{dtmYMDHMS} = dateFmt("%Y-%m-%d %H:%M:%S", $epoch);
  }

  return @workouts;
}

sub readCachedWorkoutLatest(){
  my @workouts = readCachedWorkouts();
  @workouts = sort {
    $$a{dtmEpoch} <=> $$b{dtmEpoch}
  } @workouts;
  if(@workouts == 0){
    return undef;
  }else{
    return $workouts[-1];
  }
}

sub readExtraInfo(){
  my @lines = `cat $WORKOUTS_EXTRA_INFO_FILE 2>/dev/null`;
  my $extraInfo = {};
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+)\.(\w+)\s*=\s*(.*)$/){
      my ($id, $key, $val) = ($1, $2, $3);
      $$extraInfo{$id} = {} if not defined $$extraInfo{$id};
      $$extraInfo{$id}{$key} = $val;
    }else{
      die "ERROR: invalid line in $WORKOUTS_EXTRA_INFO_FILE\n$line\n";
    }
  }
  return $extraInfo;
}
sub insertExtraInfo($@){
  my ($extraInfo, @workouts) = @_;
  for my $workoutID(sort keys %$extraInfo){
    my $info = $$extraInfo{$workoutID};

    my $workout = undef;
    for my $w(@workouts){
      if($workoutID eq $$w{workout_id}){
        $workout = $w;
        last;
      }
    }

    if(not defined $workout){
      my ($epoch, $duration, $distance) = ($$info{epoch}, $$info{duration}, $$info{distance});
      if(not defined $epoch or not defined $duration or not defined $distance){
        my $msg = ""
          . "ERROR: extra info for $workoutID could not be inserted\n"
          . "  (epoch+duration+distance are required for adding missing workouts)\n"
        ;
        die $msg;
      }elsif($epoch !~ /^-?\d+(\.\d+)?$/){
        die "ERROR: invalid epoch=$epoch for extra info $workoutID\n";
      }elsif($duration !~ /^\d+(\.\d+)?$/){
        die "ERROR: invalid duration=$duration for extra info $workoutID\n";
      }elsif($distance !~ /^\d+(\.\d+)?$/){
        die "ERROR: invalid distance=$distance for extra info $workoutID\n";
      }

      $workout = {
        workout_id     => $workoutID,
        duration       => $duration,
        distance       => $distance,
        dtmEpoch       => $epoch,
        dtmYMD         => dateFmt("%Y-%m-%d", $epoch),
        dtmYMDHMS      => dateFmt("%Y-%m-%d %H:%M:%S", $epoch),
        intervals      => [],
      };

      push @workouts, $workout;
    }

    for my $key(sort keys %$info){
      my $val = $$info{$key};
      if($key eq "intervals"){
        my $intervals = $$workout{intervals};

        my @extraIntervals = split /,/, $val;
        for my $extraInterval(@extraIntervals){
          if($extraInterval !~ /^(\d+|\d*\.\d+)s:(\d+|\d*\.\d+)m$/){
            die "ERROR: malformed $workoutID.$key=$val\n";
          }
          my ($duration, $distance) = ($1, $2);
          if($duration == 0){
            die "ERROR: duration cannot be 0 in $workoutID.$key=$val\n";
          }
          my $speed = ($distance/$duration)*60*60/1000;

          my $prevAvgDistance = 0;
          if(@$intervals > 0){
            $prevAvgDistance = ${$$intervals[-1]}{average_distance};
          }

          push @$intervals, {
            duration => $duration,
            distance => $distance,
            average_distance => $prevAvgDistance + $distance,
            speed => $speed,
            heart_rate => 0,
            power => 0,
          };
        }
      }else{
        $$workout{$key} = $val;
      }
    }
  }

  return @workouts;
}

# split large intervals into 10s intervals,
#    keeping at least 2s in the new smaller intervals
# i.e.:
#   -ensure that all intervals are <= 12s
#   -prefer creating 10s intervals where possible
#   -ensure that all newly created intervals are > 2s
#   -pre-existing intervals <= 2s are preserved
sub splitUpLargeIntervals($){
  my ($workout) = @_;
  my $newIntervals = [];
  for my $interval(@{$$workout{intervals}}){
    my $curAvgDistance = $$interval{average_distance} - $$interval{distance};
    $curAvgDistance = 0 if $curAvgDistance < 0;

    while($$interval{duration} > 12.0){
      #remove 10s from interval and prepend as new interval
      my $newDuration = 10.0;
      my $newDistance = $$interval{distance} * ($newDuration / $$interval{duration});
      $curAvgDistance += $newDistance;

      $$interval{duration} -= $newDuration;
      $$interval{distance} -= $newDistance;

      my $newInterval = {
        %$interval,
        duration         => $newDuration,
        distance         => $newDistance,
        average_distance => $curAvgDistance,
      };
      push @$newIntervals, $newInterval;
    }

    push @$newIntervals, $interval;
  }

  $$workout{intervals} = $newIntervals;
}

sub groupIntervalsIntoSpeedSegments($){
  my ($workout) = @_;
  my @intervals = @{$$workout{intervals}};
  my @segments;
  my $curSegment = undef;
  for(my $i=0; $i<@intervals; $i++){
    my $cur = $intervals[$i];
    my $prev = $i-1 > 0          ? $intervals[$i-1] : undef;
    my $next = $i+1 < @intervals ? $intervals[$i+1] : undef;
    my $curChanged = defined $prev && $$cur{speed} != $$prev{speed};
    my $nextChanged = defined $next && $$cur{speed} != $$next{speed};
    if($curChanged and not $nextChanged){
      #new segment if cur is new speed, AND the next segment is the same speed
      $curSegment = undef;
    }

    if(not defined $curSegment){
      $curSegment = [];
      push @segments, $curSegment;
    }
    push @$curSegment, $cur;
  }

  return @segments;
}

sub formatSpeedSegment($){
  my ($segment) = @_;
  my $segmentSpeedSeconds = 0;
  my $segmentHrSeconds = 0;
  my $segmentMaxHr = 0;
  my $segmentDur = 0;
  my $segmentDistance = 0;
  for my $interval(@$segment){
    $segmentSpeedSeconds += $$interval{speed} * $$interval{calculatedDuration};
    if(defined $$interval{heart_rate}){
      $segmentHrSeconds += $$interval{heart_rate} * $$interval{calculatedDuration};
      $segmentMaxHr = $$interval{heart_rate} if $$interval{heart_rate} > $segmentMaxHr;
    }
    $segmentDur += $$interval{calculatedDuration};
    $segmentDistance += $$interval{calculatedDistance};
  }
  my $avgSpeed = $segmentDur > 0 ? $segmentSpeedSeconds / $segmentDur : 0;
  my $avgHr = $segmentDur > 0 ? $segmentHrSeconds / $segmentDur : 0;
  my $maxHr = $segmentMaxHr;
  if($avgHr < 60){
    # exclude max and avg heart rate if average is nonsense (or bradycardia)
    #  (sometimes max will look sane because of a random single reading)
    $avgHr = 0;
    $maxHr = 0;
  }
  my $mph = $avgSpeed * $MILES_PER_KM;
  my $durFmt = formatTimeMinSec($segmentDur);
  my $kmFmt = $segmentDistance/1000.0;

  return sprintf "  %.1fmph %s   %3dhr    %.1fkm\n",
    $mph,
    $durFmt,
    $maxHr,
    $kmFmt,
  ;
}

sub getHrmonHrByEpoch($){
  my ($dateYMD) = @_;

  my $hrByEpoch = readHrCache($HR_CACHE_DIR_HRMON, $dateYMD);

  if(not defined $hrByEpoch){
    #hrmon log start time must be strictly after 00:00:00 on the date
    #also ignore hrmon logs more than two days later
    my $minEpochMillis = int(dtmStrToEpoch($dateYMD) * 1000.0 + 0.5);
    my $maxEpochMillis = $minEpochMillis + 2*24*60*60*1000.0; #two days later

    my @files = grep {-f $_} glob "$HRMON_LOG_DIR/hrmon*.log*";
    my @okFiles;
    for my $file(@files){
      if($file !~ /hrmon-(\d+)\D/){
        die "ERROR: hrmon log file missing start millis \"$file\"\n";
      }
      my $epochMillis = $1;
      if($minEpochMillis <= $epochMillis && $epochMillis <= $maxEpochMillis){
        push @okFiles, $file;
      }
    }
    for my $file(@okFiles){
      my $grepCmd = "grep";
      if($file =~ /\.bz2$/){
        $grepCmd = "bzgrep";
      }elsif($file =~ /\.gzip$/){
        $grepCmd = "zgrep";
      }
      my @lines = `$grepCmd '$dateYMD .* Heart rate: *[0-9]\\+' $file`;
      for my $line(@lines){
        if($line =~ /^-*(\d+-\d+-\d+ \d+:\d+:\d+,\d+)\s*Heart rate:\s*(\d+)$/){
          my ($dtm, $hr) = ($1, $2);
          my $epochFracS = dtmStrToEpoch($dtm);
          $$hrByEpoch{$epochFracS} = $hr;
        }
      }
    }
    writeHrCache($HR_CACHE_DIR_HRMON, $dateYMD, $hrByEpoch);
  }

  return $hrByEpoch;
}

sub getAmazfishHrByEpoch($){
  my ($dateYMD) = @_;

  my $hrByEpoch = readHrCache($HR_CACHE_DIR_AMAZFISH, $dateYMD);

  if(not defined $hrByEpoch){
    $hrByEpoch = {};
    my @amazfishHrLines = `workout-amazfish --date=$dateYMD --heartrates`;
    for my $line(@amazfishHrLines){
      if($line =~ /^\s*(\d+)\s*=\s*(\d+)\s*$/){
        my ($epoch, $hr) = ($1, $2);
        $$hrByEpoch{$epoch} = $hr;
      }else{
        die "ERROR: malformed line in workout-amazfish output\n$line\n";
      }
    }
    writeHrCache($HR_CACHE_DIR_AMAZFISH, $dateYMD, $hrByEpoch);
  }

  return $hrByEpoch;
}

sub readHrCache($$){
  my ($hrCacheDir, $dateYMD) = @_;
  my $cacheFile = "$hrCacheDir/$dateYMD";
  if(-f $cacheFile){
    my $hrByEpoch = {};
    my @lines = readFile $cacheFile;
    for my $line(@lines){
      if($line =~ /^\s*(\d+|\d*\.\d+)\s*=\s*(\d+)\s*$/){
        $$hrByEpoch{$1} = $2;
      }else{
        die "ERROR: malformed line in hr cache file $cacheFile\n$line\n";
      }
    }

    #ignore empty cache files if there are no newer non-empty cache files
    if(keys %$hrByEpoch == 0){
      my @nonEmptyCacheFiles = sort grep {-f $_ && not -z $_} glob "$hrCacheDir/*";
      my $latestCacheFile = @nonEmptyCacheFiles > 0 ? $nonEmptyCacheFiles[-1] : undef;
      my $latestCacheYMD = undef;
      if(defined $latestCacheFile){
        $latestCacheYMD = $1 if $latestCacheFile =~ /^(?:.*\/)?(\d+-\d+-\d+)$/;
      }
      if(not defined $latestCacheYMD or $dateYMD gt $latestCacheYMD){
        #skip cache - this empty cache file is later than the latest non-empty cache file
        return undef;
      }
    }

    return $hrByEpoch;
  }else{
    return undef;
  }
}
sub writeHrCache($$$){
  my ($hrCacheDir, $dateYMD, $hrByEpoch) = @_;
  my $cacheFile = "$hrCacheDir/$dateYMD";
  system "mkdir", "-p", $hrCacheDir;
  open my $fh, "> $cacheFile" or die "ERROR: could not write $cacheFile\n";
  my $maxEpoch = dtmStrToEpoch($dateYMD);
  for my $epoch(sort keys %$hrByEpoch){
    $maxEpoch = $epoch if $epoch > $maxEpoch;
    print $fh "$epoch=$$hrByEpoch{$epoch}\n";
  }
  close $fh;
  system "touch", $cacheFile, "--date=\@$maxEpoch";
}

sub isWorkoutNeedsExternalHeartrate($){
  my ($workout) = @_;

  my @intervals = @{$$workout{intervals}};
  my $totalHrSeconds = 0;
  my $totalDur = 0;
  for my $interval(@intervals){
    $totalHrSeconds += $$interval{heart_rate} * $$interval{calculatedDuration};
    $totalDur += $$interval{calculatedDuration};
  }

  if($totalDur <= 0){
    #dont add external hr to empty-interval workouts
    return 0;
  }

  my $avgHr = $totalHrSeconds/$totalDur;

  if($avgHr > 100){
    #dont add external hr if hr looks reasonable already
    return 0;
  }else{
    return 1;
  }
}

sub insertExternalHeartrates($$){
  my ($workout, $hrByEpoch) = @_;

  my @intervals = @{$$workout{intervals}};

  my @hrEpochs = sort keys %$hrByEpoch;

  for my $interval(@intervals){
    my $intervalEpoch = $$interval{calculatedEpoch};
    my $hrEpochIdx = binarySearchIdx sub{$_[0] <= $_[1]}, $intervalEpoch, \@hrEpochs;

    #NOTE:
    #  only fill in hr for intervals between
    #  two separate external measurements < 30s apart
    #    -viewfit intervals are ~10s apart
    #    -amazfish trackpoints are ~5s apart
    #    -hrmon intervals are ~1s apart
    next if $hrEpochIdx-1 < 0 or $hrEpochIdx > $#hrEpochs;
    my $startHrEpoch = $hrEpochs[$hrEpochIdx-1];
    my $endHrEpoch = $hrEpochs[$hrEpochIdx];
    my $intervalEpochBetweenHrEpochs =
      $startHrEpoch <= $intervalEpoch && $intervalEpoch <= $endHrEpoch;
    my $hrEpochsClose = ($endHrEpoch-$startHrEpoch) < 30;

    if($intervalEpochBetweenHrEpochs and $hrEpochsClose){
      my $startHr = $$hrByEpoch{$startHrEpoch};
      my $endHr = $$hrByEpoch{$endHrEpoch};

      #linear interpolation of interval
      my $elapsedRatio = ($intervalEpoch - $startHrEpoch) / ($endHrEpoch - $startHrEpoch);
      my $hr = $startHr + (($endHr - $startHr)*$elapsedRatio);

      $$interval{heart_rate} = $hr;
    }
  }
}

sub calculateScaledTimeAndDistance($){
  my ($workout) = @_;
  my @intervals = @{$$workout{intervals}};

  #the 'distance' value in interval does not correlate well to average_distance,
  #  and average_distance correlates much better with workout total distance,
  #  so: re-calculate distance from average_distance
  my $curElapsedS = 0;
  my $prevAvgDistance = 0;
  for my $interval(@intervals){
    $$interval{calculatedDistance} = $$interval{average_distance} - $prevAvgDistance;
    $prevAvgDistance = $$interval{average_distance};
  }

  #copy duration => calculated duration, in preparation for scaling
  for my $interval(@intervals){
    $$interval{calculatedDuration} = $$interval{duration};
  }

  #scale interval duration+distance to match overall workout duration+distance
  my $totalIntervalDuration = 0;
  my $totalIntervalDistance = 0;
  for my $interval(@intervals){
    $totalIntervalDuration += $$interval{calculatedDuration};
    $totalIntervalDistance += $$interval{calculatedDistance};
  }

  my $scalingDuration = $totalIntervalDuration > 0 ?
    $$workout{duration} / $totalIntervalDuration : 0;
  my $scalingDistance = $totalIntervalDistance > 0 ?
    $$workout{distance} / $totalIntervalDistance : 0;
  for my $interval(@intervals){
    $$interval{calculatedDuration} *= $scalingDuration;
    $$interval{calculatedDistance} *= $scalingDistance;
  }

  #calculate totals up-to-the-point for each interval
  my $elapsed = 0;
  my $totalDistance = 0;
  my $startEpoch = $$workout{dtmEpoch};
  for my $interval(@intervals){
    $elapsed += $$interval{calculatedDuration};
    $totalDistance += $$interval{calculatedDistance};

    $$interval{calculatedElapsed} = $elapsed;
    $$interval{calculatedEpoch} = $elapsed + $startEpoch;
    $$interval{calculatedTotalDistance} = $totalDistance;
  }
}

sub calculateDistanceTargets($){
  my ($workout) = @_;
  my @intervals = @{$$workout{intervals}};

  $$workout{targets} = {};

  for my $targetName(@SORTED_TARGET_NAMES){
    my $targetDist = $NAMED_TARGETS{$targetName};
    my $startIdx = -1;
    my $endIdx = -1;
    my $curDist = 0;
    my $curDur = 0;
    my $bestDur = undef;
    while($startIdx <= $endIdx){
      #shift start to the right exactly one interval, and subtract the removed interval (if any)
      $startIdx++;
      if($startIdx-1 >= 0){
        $curDist -= ${$intervals[$startIdx-1]}{calculatedDistance};
        $curDur -= ${$intervals[$startIdx-1]}{calculatedDuration};
      }

      #shift end to the right until target min distance is reached, and add each added interval
      while($curDist < $targetDist and $endIdx+1 < @intervals){
        $endIdx++;
        $curDist += ${$intervals[$endIdx]}{calculatedDistance};
        $curDur += ${$intervals[$endIdx]}{calculatedDuration};
      }

      #if target distance is reached, check if it is the best duration set for target
      if($curDist >= $targetDist and (not defined $bestDur or $curDur < $bestDur)){
        $bestDur = $curDur;
        $$workout{targets}{$targetName} = $bestDur;
      }
    }
  }
}

sub readWorkoutsCombine(){
  my @lines = `cat $WORKOUTS_COMBINE_FILE 2>/dev/null`;
  my $workoutsCombineInfo = {};
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+)\s*=\s*((?:\w+\s*,\s*)*\w+)\s*$/){
      my ($mainID, $combinedIDsCsv) = ($1, $2);
      my @combinedIDs = split /,/, $combinedIDsCsv;
      s/^\s*// foreach @combinedIDs;
      s/\s*$// foreach @combinedIDs;
      for my $id(@combinedIDs){
        if($id !~ /^\w+$/){
          die "ERROR: invalid ID in $WORKOUTS_COMBINE_FILE\n$line\n";
        }
      }
      $$workoutsCombineInfo{$mainID} = [@combinedIDs];
    }else{
      die "ERROR: invalid line in $WORKOUTS_COMBINE_FILE\n$line\n";
    }
  }
  return $workoutsCombineInfo;
}
sub applyAndFilterCombinedWorkouts($@){
  my ($workoutsCombineInfo, @workouts) = @_;
  my %workoutsByID = map {$$_{workout_id} => $_} @workouts;
  my %workoutIDsToExclude = map {$_ => 1} (map {@$_} values %$workoutsCombineInfo);

  my @combinedWorkouts;
  for my $workout(@workouts){
    my $workoutID = $$workout{workout_id};
    if(defined $$workoutsCombineInfo{$workoutID}){
      my @addtlWorkoutIDs = @{$$workoutsCombineInfo{$workoutID}};
      my @workoutsToCombine = ($workout, map {$workoutsByID{$_}} @addtlWorkoutIDs);
      @workoutsToCombine = sort {
        $$a{dtmEpoch} <=> $$b{dtmEpoch}
      } @workoutsToCombine;

      #foldl
      while(@workoutsToCombine > 1){
        my $w1 = shift @workoutsToCombine;
        my $w2 = shift @workoutsToCombine;
        @workoutsToCombine = (getCombinedWorkout($w1, $w2), @workoutsToCombine);
      }
      die "ERROR: combine workouts failed\n" if @workoutsToCombine != 1;
      push @combinedWorkouts, $workoutsToCombine[0];
    }elsif(not defined $workoutIDsToExclude{$workoutID}){
      push @combinedWorkouts, $workout;
    }else{
      #omit workout
    }
  }
  return @combinedWorkouts;
}

sub getCombinedWorkout($$){
  my ($w1, $w2) = @_;

  my $id1 = $$w1{workout_id};
  my $id2 = $$w2{workout_id};
  my $distance1 = $$w1{distance};
  my $distance2 = $$w2{distance};
  my $dur1 = $$w1{duration};
  my $dur2 = $$w2{duration};
  my $start1 = $$w1{dtmEpoch};
  my $start2 = $$w2{dtmEpoch};
  my $end1 = $start1 + $dur1;
  my $end2 = $start2 + $dur2;
  my $cal1 = nvl($$w1{calories}, 0);
  my $cal2 = nvl($$w2{calories}, 0);
  my $maxhr1 = nvl($$w1{max_heart_rate}, 0);
  my $maxhr2 = nvl($$w2{max_heart_rate}, 0);
  my $minhr1 = nvl($$w1{min_heart_rate}, 0);
  my $minhr2 = nvl($$w2{min_heart_rate}, 0);
  my $avghr1 = nvl($$w1{average_heart_rate}, 0);
  my $avghr2 = nvl($$w2{average_heart_rate}, 0);
  my @intervals1 = @{$$w1{intervals}};
  my @intervals2 = @{$$w2{intervals}};

  my $elapsedS = $start2 - $end1;

  #weighted by duration
  my $avghr = ($avghr1 * ($dur1/($dur1+$dur2))) + ($avghr2 * ($dur2/($dur1+$dur2)));

  if($id1 eq $id2){
    die "ERROR: duplicate combined workouts $id1 + $id2\n";
  }elsif($elapsedS > 180){
    die "ERROR: workouts to combine more than 3min apart (${elapsedS}s) $id1 + $id2\n";
  }

  my $lastIntervalW1 = $intervals1[-1];

  my $emptyInterval = {%$lastIntervalW1,
    duration => $elapsedS,
    distance => 0,
    speed => 0,
    power => 0,
  };

  #extend intervals in w2 by the last interval in w1
  for my $interval(@intervals2){
    $$interval{average_distance} += $$lastIntervalW1{average_distance};
  }

  $$w1{distance} = $distance1 + $distance2 + 0;
  $$w1{duration} = $dur1 + $dur2 + $elapsedS;
  $$w1{calories} = $cal1 + $cal2;
  $$w1{max_heart_rate} = $maxhr1 > $maxhr2 ? $maxhr1 : $maxhr2;
  $$w1{min_heart_rate} = $minhr1 < $minhr2 ? $minhr1 : $minhr2;
  $$w1{average_heart_rate} = int($avghr + 0.5);
  $$w1{intervals} = [@intervals1, $emptyInterval, @intervals2];

  return $w1;
}

sub fetchViewfitWorkouts(){
  my $exerciserUUID = getExerciserUUID();
  my $url = "$VIEWFIT_EXERCISER_BASE_URL/$exerciserUUID/workouts";

  my $nowMillis = nowMillis();
  my $nowEpoch = $nowMillis / 1000.0;
  my $nowFmt = dateFmt("%Y-%m-%d_%H%M%S", $nowEpoch);
  my $tmpFile = "/tmp/workout-viewfit-$nowMillis.json";

  my @cmd = ("curl",
    "--silent",
    $url,
    "--output", $tmpFile,
  );
  run @cmd;
  die "ERROR: curl failed\n$!\n" if $? != 0;

  my $md5 = md5sumFile($tmpFile);

  my $cacheFile = "$WORKOUTS_JSON_CACHE_DIR/workouts_${nowFmt}_${md5}_${nowMillis}.json";

  my @matchingFiles = grep {-f $_} glob "$WORKOUTS_JSON_CACHE_DIR/workouts_*_${md5}_*.json*";
  if(@matchingFiles > 0){
    print "\nskipping cache, JSON same as: $matchingFiles[0]\n";
    system "rm", $tmpFile;
  }else{
    print "\ncaching JSON in: $cacheFile\n";

    system "mkdir", "-p", $WORKOUTS_JSON_CACHE_DIR;
    system "mv", "--no-clobber", $tmpFile, $cacheFile;

    if(not -f $cacheFile){
      die "ERROR: failed to created $cacheFile\n";
    }

    run "gzip", $cacheFile;
  }

  my $maxJsonMtime = undef;
  for my $jsonFile(grep {-f $_} glob "$WORKOUTS_JSON_CACHE_DIR/workouts_*.json*"){
    my $mtime = mtime($jsonFile);
    $maxJsonMtime = $mtime if not defined $maxJsonMtime or $mtime > $maxJsonMtime;
  }

  if(-e $WORKOUTS_MERGED_JSON_FILE){
    my $mergedMtime = mtime($WORKOUTS_MERGED_JSON_FILE);
    if(not defined $maxJsonMtime or $mergedMtime < $maxJsonMtime){
      print "\nremoving out-of-date merged JSON\n";
      run "rm", $WORKOUTS_MERGED_JSON_FILE;
    }
  }

  if(not -f $WORKOUTS_MERGED_JSON_FILE){
    print "\nmerging all fetched JSON files into $WORKOUTS_MERGED_JSON_FILE\n";
    mergeCachedJsonFiles();
  }
}

sub mergeCachedJsonFiles(){
  my @downloadJsonFiles = (
    glob("$WORKOUTS_JSON_CACHE_DIR/workouts_*.json"),
    glob("$WORKOUTS_JSON_CACHE_DIR/workouts_*.json.gz"),
  );
  @downloadJsonFiles = sort @downloadJsonFiles;

  my $workoutsById = {};
  for my $file(@downloadJsonFiles){
    my $contents = $file =~ /\.gz$/i ? readFileGZ($file) : readFile($file);
    my @workoutStrs = $contents =~ /({"workout_id"(?:[^{}]*|{[^}]*})*})/g;
    for my $workoutStr(@workoutStrs){
      my $workoutID = $1 if $workoutStr =~ /"workout_id":"([^"]*)"/;
      die "ERROR: missing workout_id in $file\n" if not defined $workoutID;
      $$workoutsById{$workoutID} = $workoutStr;
    }
  }

  my @workoutStrs = sort values %$workoutsById;

  writeFile($WORKOUTS_MERGED_JSON_FILE,
    "{\"workouts\":[\n  " . join(",\n  ", @workoutStrs) . "\n]}");
}

sub groupWorkoutsIntoPeriods($$@){
  my ($dateBoundaryTypeStart, $dateBoundaryTypeEnd, @workouts) = @_;
  my @periods;
  my $curPeriod = undef;
  for my $workout(@workouts){
    my $date = $$workout{dtmYMD};
    if(not defined $curPeriod or $date lt $$curPeriod{start} or $date gt $$curPeriod{end}){
      $curPeriod = {
        start    => getDateBoundary($date, $dateBoundaryTypeStart),
        end      => getDateBoundary($date, $dateBoundaryTypeEnd),
        workouts => [],
      };
      push @periods, $curPeriod;
    }
    push @{$$curPeriod{workouts}}, $workout;
  }
  return @periods;
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my @lines = <FH>;
  close FH;
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;;
  }
}
sub readFileGZ($){
  my ($file) = @_;
  open FH, "-|", "gzip -d --stdout $file"
    or die "ERROR: could not gunzip $file\n$!\n";
  my @lines = <FH>;
  close FH;
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}

sub writeFile($$){
  my ($file, $content) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $content;
  close FH;
}

sub getExerciserUUID(){
  my $secrets = readSecrets();
  if(not defined $$secrets{exerciser}){
    die "ERROR: could not read $SECRETS_PREFIX.excerciser in secrets\n"
  }
  return $$secrets{exerciser};
}

sub readSecrets(){
  my @lines = `cat $SECRETS_FILE 2>/dev/null`;
  my $secrets = {};
  for my $line(@lines){
    if($line =~ /^$SECRETS_PREFIX\.($SECRETS_KEYS_REGEX)\s*=\s*(.+)$/){
      $$secrets{$1} = $2;
    }
  }
  for my $key(sort keys %$secrets){
    $$secrets{$key} = decrypt $$secrets{$key} if defined $SECRETS_ENC_KEYS{$key};
  }
  return $secrets;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

sub formatTimeMinSec($){
  my ($s) = @_;
  return sprintf "%02d:%02d", int($s/60), int($s) % 60;
}
sub formatTimeHrMinSec($){
  my ($s) = @_;
  return sprintf "%02d:%02d:%02d", int($s/60/60) % 60, int($s/60) % 60, int($s) % 60;
}

sub dtmStrToEpoch($){
  my ($dtm) = @_;

  my $epochFracS;
  #timegm_posix/timelocal_posix is much faster than str2time
  if($dtm =~ /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})\.(\d\d\d)Z$/){
    my ($y, $m, $d, $hour, $min, $sec, $millis) = ($1, $2, $3, $4, $5, $6, $7);
    my $isUTC = 1;
    $epochFracS = getEpochFracS($y, $m, $d, $hour, $min, $sec, $millis, $isUTC);
  }elsif($dtm =~ /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}),(\d\d\d)$/){
    my ($y, $m, $d, $hour, $min, $sec, $millis) = ($1, $2, $3, $4, $5, $6, $7);
    my $isUTC = 0;
    $epochFracS = getEpochFracS($y, $m, $d, $hour, $min, $sec, $millis, $isUTC);
  }elsif($dtm =~ /^(\d{4})-(\d{2})-(\d{2})$/){
    my ($y, $m, $d) = ($1, $2, $3);
    my $isUTC = 0;
    $epochFracS = getEpochFracS($y, $m, $d, 0, 0, 0, 0, $isUTC);
  }else{
    $epochFracS = `date --date='$dtm' +%s.%3N`;
    chomp $epochFracS;
  }

  if(not defined $epochFracS or $epochFracS !~ /^-?(\d+\.\d+)$/){
    die "ERROR: failed to convert $dtm to epoch\n";
  }

  return $epochFracS;
}

sub getEpochFracS($$$$$$$$){
  my ($y, $m, $d, $hour, $min, $sec, $millis, $isUTC) = @_;
  my $epochS;
  if($isUTC){
    $epochS = timegm_posix($sec, $min, $hour, $d, $m-1, $y-1900);
  }else{
    $epochS = timelocal_posix($sec, $min, $hour, $d, $m-1, $y-1900);
  }

  if($epochS > 0){
    #faster
    return "$epochS.$millis";
  }else{
    #e.g.:
    #  1970-01-01T00:00:00.001Z ==  0.001 == (0  + 001/1000)
    #  1969-12-31T23:59:59.999Z == -0.001 == (-1 + 999/1000)
    return sprintf "%.3f", ($epochS + ($millis/1000.0));
  }
}

sub dateFmt($$){
  my ($fmtSpec, $epoch) = @_;
  die "ERROR: missing epoch\n" if not defined $epoch;
  die "ERROR: invalid epoch $epoch\n" if $epoch !~ /^-?(\d+|\d*\.\d+)$/;
  return time2str($fmtSpec, $epoch);
}

sub getDateBoundary($$){
  my ($dateYMD, $dateBoundaryType) = @_;
  my ($y, $m, $d) = ($1, $2, $3) if $dateYMD =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;

  my $date = DateTime->new(year => $y, month => $m, day => $d);
  my $dayOfWeek = $date->day_of_week;
  my $daysToAdd;
  if($dateBoundaryType eq $DATE_BOUNDARY_WEEK_START){
    my $targetDOW = 1; #monday
    my $targetDaysAgo = (7 + ($dayOfWeek - $targetDOW)) % 7;
    $daysToAdd = 0 - ($targetDaysAgo);
  }elsif($dateBoundaryType eq $DATE_BOUNDARY_WEEK_END){
    my $targetDOW = 7; #sunday
    my $targetDaysUntil = (7 + ($targetDOW - $dayOfWeek)) % 7;
    $daysToAdd = $targetDaysUntil;
  }elsif($dateBoundaryType eq $DATE_BOUNDARY_MONTH_START){
    $daysToAdd = 0 - ($d - 1);
  }elsif($dateBoundaryType eq $DATE_BOUNDARY_MONTH_END){
    my $lastDayOfMonth = DateTime->last_day_of_month(year => $y, month => $m)->day_of_month;
    $daysToAdd = $lastDayOfMonth - $d;
  }else{
    die "ERROR: unknown date boundary type $dateBoundaryType\n";
  }

  $date->add(days => $daysToAdd);
  return $date->strftime("%Y-%m-%d");
}

#return the smallest index of the element
#  in the sorted list 'list' that is greater than or equal to 'targetItem',
#  or -1 if no element in 'list' is greater than or equal to 'targetItem'
#
#cmpLTESub is a comparator that returns true if the first arg
#  is less than or equal to the second, in the same sense as the list is sorted
#
#e.g.:
#  binarySearchIdx(sub{$_[0] <= $_[1]}, -1,  [0, 1, 2, 3, 4, 5]) == 0
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 0,   [0, 1, 2, 3, 4, 5]) == 0
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 0.9, [0, 1, 2, 3, 4, 5]) == 1
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 1,   [0, 1, 2, 3, 4, 5]) == 1
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 1.1, [0, 1, 2, 3, 4, 5]) == 2
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 2,   [0, 1, 2, 3, 4, 5]) == 2
#  binarySearchIdx(sub{$_[0] <= $_[1]}, 6,   [0, 1, 2, 3, 4, 5]) == -1
sub binarySearchIdx($$$){
  my ($cmpLTESub, $targetItem, $list) = @_;

  if(@$list == 0){
    return -1;
  }elsif($targetItem > $$list[-1]){
    return -1;
  }

  my $min = 0;
  my $max = $#$list;
  while(1){
    my $mid = int(($max+$min) / 2);
    if($mid < 0 or $mid > $#$list){
      last;
    }

    if(&$cmpLTESub($targetItem, $$list[$mid])){
      #if target <= list[mid]
      $max = $mid;
    }else{
      $min = $mid + 1;
    }

    if($min == $max){
      return $min;
    }
  }

  return -1;
}

sub nvl($$){
  return defined $_[0] ? $_[0] : $_[1];
}

sub md5sumFile($){
  my ($file) = @_;
  my $d = Digest::MD5->new();
  open my $fh, "<", $file or die "ERROR: could not read $file\n$!\n";
  $d->addfile($fh);
  my $digest = $d->hexdigest();
  close $fh;
  return $digest;
}

sub mtime($){
  my ($file) = @_;
  my @stat = stat $file;
  return $stat[9];
}

sub nowMillis(){
  return int(time*1000.0 + 0.5)
}

sub run(@){
  print "@_\n";
  runQuiet(@_);
}

sub runQuiet(@){
  system @_;
}

&main(@ARGV);
