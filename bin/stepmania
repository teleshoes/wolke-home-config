#!/usr/bin/perl
use strict;
use warnings;

my $execDir = "$ENV{HOME}/Games/stepmania/latest/";
my $exec = "$execDir/stepmania";
my $confDir = "$ENV{HOME}/.stepmania-5.3";

my $luaNoteFieldPrefs = "$execDir/Themes/_fallback/Scripts/03 notefield_prefs.lua";

my $saveDir = "$confDir/Save";
my $machineProfileDir = "$confDir/Save/MachineProfile";

my $defaultSpeedMod = "550";
my $defaultSpeedType = "maximum";  #maximum constant multiple
my $defaultScreen = 'ScreenSelectMusic';

my $prefs = {
  'Options' => {
    GlobalOffsetSeconds       => "-0.075183",
    AutoMapOnJoyChange        => 0,
    OnlyDedicatedMenuButtons  => 1,
    Center1Player             => 1,
    EventMode                 => 1,
    BGBrightness              => '0.800000',
    ShowSongOptions           => 'Ask',
    ShowCaution               => 0,
    ShowInstructions          => 0,
    ShowNativeLanguage        => 0,

    Windowed                  => 1,
    DisplayWidth              => 1290,
    DisplayHeight             => 720,
    DisplayAspectRatio        => 1.7777,
    RefreshRate               => 60,

    DisplayColorDepth         => 16,
    MaxTextureResolution      => 1024,

    LastSeenVideoDriver       => 'OpenGL',
    VideoRenderers            => 'opengl',
  },
  'Game-dance' => {
    Announcer                 => '', #MAX2
  },
};

my $noteFieldPrefs = {
  speed_mod => $defaultSpeedMod,
  speed_type => "\"$defaultSpeedType\"",
};

my $fullscreenUpCmd = "
  xrandr -s $$prefs{Options}{DisplayWidth}x$$prefs{Options}{DisplayHeight}
  xrandr --output LVDS1 --set 'scaling mode' 'Full'
";
my $fullscreenDownCmd = "
  xrandr -s 0
  xrandr --output LVDS1 --set 'scaling mode' 'Full Aspect'
";

my $themePrefs = {
  'StepMania 5 Default' => {
    'GameplayShowScore' => 'true',
  }
};

my $keyArgs = {
  joy1Name  => "omegaitgx",
  joy2Name  => "cf",
  joy1Index => 1,
  joy2Index => 2,
  kb1Name   => "kb1",
  kb2Name   => "kb2",
};

my $jsKeyGrid = {
            ##  LT DN UP RT  ML MD MU MR  BK ST
  omegaitgx => "03 02 01 04  00 00 00 00  00 00",
  cf        => "16 15 13 14  03 04 01 02  00 00",
  redoctane => "01 02 03 04  07 06 05 08  10 09",
  redbroke  => "01 02 03 04  00 00 00 00  10 09",
  ems       => "16 15 13 14  03 04 01 02  09 10",
  energy    => "03 02 01 04  07 06 05 08  09 10",
};
my $kbKeyGrid = {
            ##  LT DN UP RT  ML     MD     MU     MR     BK     ST
  kb1       => "d  f  j  k   left   down   up     right  escape enter",
  kb2       => "e  r  u  i   home   pgdn   pgup   end    .      /",
};
my $keyGrid = {%$jsKeyGrid, %$kbKeyGrid};
my @jsNames = sort keys %$jsKeyGrid;

my @okScreens = qw(
  ScreenTitleMenu
  ScreenSelectMusic
  ScreenMapControllers
  ScreenEditMenu
  ScreenTestInput
  ScreenHowToPlay
  ScreenDemonstration
  ScreenReloadSongs
);
my %okScreensHash = map {$_ => 1} @okScreens;

sub generateKeymap($$);
sub readLines($);
sub writeLines($@);
sub readConf($);
sub writeConf($);
sub modifyConf($$);
sub replaceConf($$);
sub editExistingLuaPrefs($$);

my $usage = "Usage:
  $0 -h|--help
    Print this message
  $0 [OPTS]
    Launch stepmania after setting up preferences
  $0 <JOYNAME> <JS#> [<OPTS>]
    shorthand for:
      --js1Name=<JSNAME> --js1=<JS#> <OPTS>
  $0 <JOYNAME> <JS#> <JOYNAME> <JS#> [<OPTS>]
    shorthand for:
      --js1Name=<JSNAME> --js1=<JS#> --js2Name=<JSNAME> --js2=<JS#> <OPTS>
  OPTS:
   --js1Name=JOYNAME p1 joystick name {default=$$keyArgs{joy1Name}}
   --js2Name=JOYNAME p2 joystick name {default=$$keyArgs{joy2Name}}
   --js1=JS#         p1 joystick index {default=$$keyArgs{joy1Index}}
   --js2=JS#         p2 joystick index {default=$$keyArgs{joy2Index}}
   -w                set Windowed to 1, overriding config
   -f                set Windowed to 0, overriding config
   --screen=SCREEN   jump to screen SCREEN {default=$defaultScreen}
   -i                synonynm for --screen=ScreenTestInput

  JOYNAME: user-defined joystick name, one of:
           [@jsNames]
  SCREEN:  screen class name, one of:
           [@okScreens]
  JS#:     integer for internal stepmania joystick index
";

my $prefsIni = "$saveDir/Preferences.ini";
my $themePrefsIni = "$saveDir/ThemePrefs.ini";
my $keymapsIni = "$saveDir/Keymaps.ini";

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  chdir $execDir;

  if(@_ >= 2 and defined $$jsKeyGrid{$_[0]} and $_[1] =~ /^\d+$/){
    $$keyArgs{joy1Name} = shift;
    $$keyArgs{joy1Index} = shift;
  }
  if(@_ >= 2 and defined $$jsKeyGrid{$_[0]} and $_[1] =~ /^\d+$/){
    $$keyArgs{joy2Name} = shift;
    $$keyArgs{joy2Index} = shift;
  }

  $$prefs{Options}{TestInitialScreen} = $defaultScreen;
  for(my $i=0; $i<@_; $i++){
    if($_[$i] =~ /--js1Name=(.+)/ and defined $$jsKeyGrid{$1}){
      $$keyArgs{joy1Name} = $1;
    }elsif($_[$i] =~ /--js2Name=(.+)/ and defined $$jsKeyGrid{$1}){
      $$keyArgs{joy2Name} = $1;
    }elsif($_[$i] =~ /--js1=(\d+)/){
      $$keyArgs{joy1Index} = $1;
    }elsif($_[$i] =~ /--js2=(\d+)/){
      $$keyArgs{joy2Index} = $1;
    }elsif($_[$i] eq '-w'){
      $$prefs{Options}{Windowed} = 1;
    }elsif($_[$i] eq '-f'){
      $$prefs{Options}{Windowed} = 0;
    }elsif($_[$i] =~ /--screen=(.+)/ and defined $okScreensHash{$1}){
      $$prefs{Options}{TestInitialScreen} = $1;
    }elsif($_[$i] eq '-i'){
      $$prefs{Options}{TestInitialScreen} = 'ScreenTestInput';
    }else{
      die $usage;
    }
  }

  system "mkdir", "-p", "$saveDir";
  replaceConf $prefsIni, $prefs;
  replaceConf $themePrefsIni, $themePrefs;
  replaceConf $keymapsIni, generateKeymap($keyGrid, $keyArgs);

  editExistingLuaPrefs $luaNoteFieldPrefs, $noteFieldPrefs;

  my $fullscreen = $$prefs{Options}{Windowed} == 0;
  system "bash", "-c", $fullscreenUpCmd if $fullscreen;
  open CMD, "-|", $exec;
  while(my $line = <CMD>){
    print $line;
    if(not $fullscreen and $line =~ /^Display:/){
      system "xdotool",
         "search", "--classname", '^StepMania 5$',
         "windowunmap",
         "windowmap",
         "windowsize", $$prefs{Options}{DisplayWidth}, $$prefs{Options}{DisplayHeight},
         "windowmove", 100, 100,
         ;
    }
  }
  close CMD;
  system "bash", "-c", $fullscreenDownCmd if $fullscreen;
}

sub generateKeymap($$){
  my ($keyGrid, $keyArgs) = @_;

  my @buttonOrder = qw(
   Left Down Up Right
   MenuLeft MenuDown MenuUp MenuRight
   Back Start
  );

  my $keys = {};
  for my $name(keys %$keyGrid){
    my @btns = split /\s+/, $$keyGrid{$name};
    die "error parsing keyGrid for $name\n" if @btns != @buttonOrder;
    $$keys{$name} = {};
    for(my $i=0; $i<@buttonOrder; $i++){
      $$keys{$name}{$buttonOrder[$i]} = $btns[$i];
    }
  }

  my %keymap;
  for my $player((1, 2)){
    my $joyName = $player == 1 ? $$keyArgs{joy1Name} : $$keyArgs{joy2Name};
    my $joyIndex = $player == 1 ? $$keyArgs{joy1Index} : $$keyArgs{joy2Index};
    my $kbName = $player == 1 ? $$keyArgs{kb1Name} : $$keyArgs{kb2Name};
    die "Unknown joy config: $joyName\n" if not defined $$keys{$joyName};
    die "Unknown kb config: $kbName\n" if not defined $$keys{$kbName};

    for my $btn(@buttonOrder){
      my $joyBtn = $$keys{$joyName}{$btn};
      die "Non-integer joy button\n" if $joyBtn !~ /^\d+$/;
      $joyBtn = int($joyBtn);
      $joyBtn = undef if $joyBtn == 0;

      my $kbBtn = $$keys{$kbName}{$btn};

      my $val = '';
      $val .= "Joy${joyIndex}_B$joyBtn" if defined $joyBtn;
      $val .= ":" if defined $joyBtn and $kbBtn;
      $val .= "Key_$kbBtn" if defined $kbBtn;
      $keymap{"${player}_$btn"} = $val if length($val) > 0;
    }
  }
  return {'dance' => \%keymap};
}

sub readLines($){
  my $file = shift;
  open FH, "< $file" or die "Could not read $file\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}

sub writeLines($@){
  my ($file, @lines) = @_;
  open FH, "> $file" or die "Could not write $file\n";
  print FH @lines;
  close FH;
}

sub readConf($){
  my $s = shift();
  my $conf = {};
  my $confSection;
  for my $line(split /[\n\r]+/, $s){
    if($line =~ /^\[(.*)\]$/){
      $confSection = {};
      ${$conf}{$1} = $confSection;
    }elsif($line =~ /^(.*)=(.*)$/){
      $$confSection{$1} = $2;
    }
  }
  return $conf;
}

sub writeConf($){
  my %conf = %{shift()};
  my $s = '';
  for my $section(sort keys %conf){
    $s .= "[$section]\n";
    my $sectionConf = $conf{$section};
    for my $key(sort keys %$sectionConf){
      $s .= "$key=${$sectionConf}{$key}\n";
    }
    $s .= "\n";
  }
  return $s;
}

sub modifyConf($$){
  my %orig = %{shift()};
  my %changes = %{shift()};
  for my $section(keys %changes){
    if(not defined $orig{$section}){
      $orig{$section} = $changes{$section};
    }else{
      my $origSectionConf = $orig{$section};
      my $changesSectionConf = $changes{$section};
      for my $key(keys %$changesSectionConf){
        ${$origSectionConf}{$key} = ${$changesSectionConf}{$key};
      }
    }
  }
  return \%orig;
}

sub replaceConf($$){
  my $file = shift;
  my $changes = shift;
  $file =~ s/"/\\"/g;
  my $conf = readConf `cat "$file"`;
  my $content = writeConf(modifyConf($conf, $changes));
  open FH, "> $file" or die "Couldnt open $file for writing.\n";
  print FH $content;
  close FH;
}

sub editExistingLuaPrefs($$){
  my ($file, $prefs) = @_;
  if(not -f $file){
    print "\n\nWARNING: missing $file\n";
    return;
  }
  my @lines = readLines $file;
  my $oldContents = join "", @lines;
  for my $key(sort keys %$prefs){
    my $val = $$prefs{$key};
    for my $line(@lines){
      if($line =~ s/(\s*)($key)(\s*)=(\s*)("[^"]*"|[^,]*)(,?)$/$1$key$3=$4$val$6/){
        last;
      }
    }
  }
  my $newContents = join "", @lines;
  if($oldContents ne $newContents){
    writeLines $file, @lines;
  }
}

main(@ARGV);
