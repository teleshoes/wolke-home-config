#!/usr/bin/perl
use strict;
use warnings;

my $dir = "$ENV{HOME}/ddwrt";
my $okRouters = join "|", qw(buffalo 68u);
my $defaultRouter = "68u";

my $macRe = ("[a-fA-F0-9]{2}:" x 5) . "[a-fA-F0-9]{2}";
my $baseFile = "/tmp/ddwrt";

my $defaultDev = 'ath0';
my @restartDevCmds = qw(wpa_supplicant upnp udhcpc);

my @sshOpts = map {("-o", $_)} (
  "StrictHostKeyChecking=no",
  "UserKnownHostsFile=/dev/null",
  "KexAlgorithms=+diffie-hellman-group1-sha1",
);

my %wifiAtts = map {$_ => 1} qw(
  ssid mode relayd_gw_auto relayd_gw_ipaddr
  net_mode channel channelbw nbw nctrlsb
  security_mode akm crypto wpa_psk
  closed turbo_qam itxbf txbf txbf_bfe_cap txbf_bfr_cap wmf_bss_enable
  regdomain
);
my %encWifiAtts = map {$_ => 1} qw( wpa_psk );

my $usage = "Usage:
  $0 [ROUTER] --ip
    print the ip address of the router

  $0 [ROUTER] [-i|--info]
    Print restore bootstrap instructions {default if no arg given}

  $0 [ROUTER] -h|--help
    Print this message

  $0 [ROUTER] -s [CMD ARG ARG ..]
    get IP from $dir/ROUTER and run 'ssh SSH_OPTS root\@IP CMD ARG ARG ..'

  $0 [ROUTER] -r|--reboot
    get IP from $dir/ROUTER and run 'ssh SSH_OPTS root\@IP reboot &'

  $0 [ROUTER] --restart-dev [DEV]
    runs 'ifconfig DEV down && ifconfig DEV up' on the router
    gets all processes starting with one of @restartDevCmds and containing DEV
    kills those processes on the router, and reruns them
    DEV defaults to $defaultDev

  $0 [ROUTER] -t|--test|--speedtest
    perform a speedtest with speedtest-netcat

  $0 [ROUTER] --dump
    run nvram backup, copy the file locally, and then run nvram_dump on it

  $0 [ROUTER] --config-dump
    print nvram settings from config in key=val format similar to $0 --dump

  $0 [ROUTER] --show
    run nvram show (use --dump instead)

  $0 [ROUTER] -e|--encrypt KEY
    pass in a wpa key or whatever for encrypting and putting into $dir/ROUTER

  $0 [ROUTER] --restore
    ssh in and setup nvram
    prints nvram info (TIME is like \"date +\%s\"):
      ${baseFile}_old_TIME
      ${baseFile}_new_TIME
      ${baseFile}_change_TIME.sh

  $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline

  ROUTER = router nickname, one of [$okRouters]
  SSH_OPTS = @sshOpts
";
my @args = qw(
  --ip -i --info -h --help -s -r --reboot --restart-dev
  -t --test --speedtest --dump --config-dump --show -e --encrypt --restore
);
my $okArgs = join '|', @args;

sub restartDev($$);
sub assertPresent($$;$);
sub ddwrtFetchBackupFile($);
sub ddwrtConfigDump($);
sub ddwrtShow($);
sub ddwrtRestore($);
sub getStarted($$);
sub parse($);
sub getClientIds($);
sub encrypt($);
sub decrypt($);
sub getNvram($);
sub getPublicKeyNvram($);
sub getWifiNvram($);
sub getStaticLeasesNvram($);
sub getExtraNvram($);
sub getPortForwardingNvram($);
sub bashComplete($$);

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my $router = $defaultRouter;
  if(@_ > 0 and $_[0] =~ /^($okRouters)$/){
    $router = shift;
  }

  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $arg = shift;
  $arg = '-i' if not defined $arg;

  my @sshCmd;
  if($arg =~ /^(-s)$/){
    @sshCmd = @_;
    @_ = ();
  }

  my $dev = $defaultDev;
  if(@_ == 1 and $arg =~ /^(--restart-dev)$/){
    $dev = shift;
  }

  if(@_ == 1 and $arg =~ /^(-e|--encrypt)$/){
    print encrypt $_[0];
    print "\n";
    exit 0;
  }

  die $usage if @_ > 0 or $arg !~ /^($okArgs)$/;

  my $c = parse "$dir/$router";
  assertPresent $c, 'config';
  assertPresent $c, 'config', 'ip_prefix';
  assertPresent $c, 'config', 'router_ip';
  assertPresent $c, 'clients';
  if($arg =~ /^(-s)$/){
    system "ssh", @sshOpts, "root\@$$c{config}{router_ip}", @sshCmd;
  }elsif($arg =~ /^(-r|--reboot)$/){
    system "ssh @sshOpts root\@$$c{config}{router_ip} reboot &";
  }elsif($arg =~ /^(--restart-dev)$/){
    restartDev $c, $dev;
  }elsif($arg =~ /^(--ip)$/){
    print "$$c{config}{router_ip}\n";
  }elsif($arg =~ /^(-i|--info)$/){
    print getStarted $c, $router;
  }elsif($arg =~ /^(-t|--test|--speedtest)$/){
    exec "speedtest-netcat", "root\@$$c{config}{router_ip}";
  }elsif($arg =~ /^(--dump)$/){
    my $backupFile = ddwrtFetchBackupFile $c;
    system "nvram_dump", $backupFile;
  }elsif($arg =~ /^(--config-dump)$/){
    my $nvram = getNvram $c;
    for my $key(sort keys %$nvram){
      my $val = $$nvram{$key};
      $val =~ s/\\/\\\\/g;
      $val =~ s/\n/\\n/g;
      print "$key=$val\n";
    }
  }elsif($arg =~ /^(--show)$/){
    ddwrtShow $c;
  }elsif($arg =~ /^(^--restore$)$/){
    ddwrtRestore $c;
  }
}

sub restartDev($$){
  my ($c, $dev) = @_;
  my $host = "root\@$$c{config}{router_ip}";
  my @ps = `ssh @sshOpts $host ps w`;
  my @cmds;
  push @cmds, "ifconfig $dev down";
  push @cmds, "ifconfig $dev up";
  for my $cmd(@restartDevCmds){
    for my $line(@ps){
      if($line =~ /(\d+)\s*root\s*(?:\d+)\s*\w+\s*($cmd.*$dev.*)/){
        my ($pid, $fullCmd) = ($1, $2);
        push @cmds, "kill $pid";
        push @cmds, "$fullCmd";
      }
    }
  }
  print "\n\n" . join("\n", @cmds) . "\n\n";

  system "ssh", @sshOpts, "$host", join('; ', @cmds);
}

sub assertPresent($$;$){
  my ($c, $section, $item) = @_;
  if(defined $item){
    die "Missing $section.$item\n" if not defined $$c{$section}{$item};
  }else{
    die "Missing section $section\n" if not defined $$c{$section};
  }
}

sub ddwrtFetchBackupFile($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};
  my $tmpFile = "nvram-backup-" . time;
  system "ssh @sshOpts root\@$ip nvram backup $tmpFile";
  system "scp -O @sshOpts root\@$ip:$tmpFile /tmp/$tmpFile";
  return "/tmp/$tmpFile";
}

sub ddwrtShow($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};
  system "ssh @sshOpts root\@$ip nvram show";
}

sub ddwrtRestore($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};

  #test ssh
  my $host = `ssh @sshOpts root\@$ip hostname`;
  chomp $host;
  die "Couldnt ssh, or wrong host\n" if $host !~ /^(DD-WRT|ddwrt)/;

  my $now = time;
  my $oldF = "${baseFile}_old_${now}";
  my $newF = "${baseFile}_new_${now}";
  my $script = "${baseFile}_script_${now}.sh";

  open FH, "> $script";
  my $nvram = getNvram($c);
  for my $key(sort keys %$nvram){
    my $val = $$nvram{$key};
    print FH "nvram set '$key=$val'\n";
  }
  print FH "nvram commit\n";
  close FH;
  system "scp", "-O", @sshOpts, $script, "root\@$ip:$script";

  my $old = `ssh @sshOpts root\@$ip nvram show | sort`;
  open FH, "> $oldF";
  print FH $old;
  close FH;

  system "ssh", @sshOpts, "root\@$ip", "sh $script";

  my $new = `ssh @sshOpts root\@$ip nvram show | sort`;
  open FH, "> $newF";
  print FH $new;
  close FH;

  print "DIFF:\n";
  system "diff $oldF $newF";

  print "rerun script and reboot router [y/N]?\n";
  if(<STDIN> eq "y\n"){
    system "ssh", @sshOpts, "root\@$ip",
      "sh $script; sleep 1; sh $script; reboot";
  }
}

sub getStarted($$){
  my ($c, $router) = @_;
  my $wpa = $$c{config}{default_wpa};
  $wpa = "" if not defined $wpa;
  $wpa =~ s/^\s+//g;
  $wpa =~ s/\s+$//g;
  if($wpa eq ""){
    $wpa = " NONE";
  }else{
    $wpa = " WPA $wpa";
  }

  my $ipMsg;
  if($$c{config}{default_router_ip} eq $$c{config}{router_ip}){
    $ipMsg = "{skip this, default IP is the same as dest IP}";
  }else{
    $ipMsg = "{$$c{config}{default_router_ip} => $$c{config}{router_ip}}";
  }

  return "
1) hold pin, or Administration => Factory Defaults => Restore => Ok
2) connect to default network

   wconnect $$c{config}{default_ssid}$wpa

   you may need to explicitly switch subnets:
     sudo ifconfig `ifdev wlan` up 192.168.1.50

3) set router IP $ipMsg
   browser $$c{config}{default_router_ip}
     admin/password
     for buffalo-branded: [cancel], skip[x], [cancel], wait, [done]

   Setup => Router IP => $$c{config}{router_ip}

   Apply Settings

4) reconnect to wifi, and redirect browser to $$c{config}{router_ip}

4) enable ssh
   browser $$c{config}{router_ip}

   Services => Secure Shell => SSHd Enable

   SAVE settings (apply later)

5) paste in your pubkey, or use router password

   cat ~/.ssh/*.pub | xsel -b

   SAVE settings (applied after reboot)

   reboot router or apply settings (buffalo requires reboot, apparently)

   wconnect $$c{config}{default_ssid}$wpa

   check ddwrt $router -s
     if not:
       Services => Secure Shell => SSHd Disable
       Apply Settings
       Services => Secure Shell => SSHd Enable

6) remove router from known_hosts

   ssh-keygen -f \"\$HOME/.ssh/known_hosts\" -R $$c{config}{router_ip}

7) run restore and wait for router to reboot {possibly twice...}
   loop -s ddwrt $router --restore
";
}

sub parse($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open $file for reading\n";
  my @lines = <FH>;
  close FH;

  my $c = {};
  my $sectionName = undef;
  for my $line(@lines){
    $line =~ s/\s*#.*//;
    if($line =~ /^ \s* \[ \s* (.+?) \s* \] \s* $/x){
      $sectionName = $1;
      if(defined $$c{$sectionName}){
        die "duplicate section $sectionName\n";
      }
      $$c{$sectionName} = {};
    }elsif($line =~ /^ \s* ([^=\ \n\t]+) \s* = \s* (.*)$/x){
      my ($key, $val) = ($1, $2);
      if(not defined $sectionName){
        die "Malformed config file line {missing header}: $line\n";
      }
      $$c{$sectionName}{$key} = $val;
    }elsif($line !~ /^\s*$/){
      die "Malformed config file line: $line\n";
    }
  }
  return $c;
}

sub getClientIds($){
  my $c = shift;
  my @ids = sort keys %{$$c{clients}};
  for my $id(@ids){
    die "ID '$id' needs to be two or three digits\n" if $id !~ /^\d\d\d?$/;
  }
  return @ids;
}

sub encrypt($){
  my $s = shift;
  $s = `gpg-sym $s`;
  die "Error gpg encrypting $s\n" if $? != 0;
  chomp $s;
  return $s;
}

sub decrypt($){
  my $s = shift;
  $s = `gpg-sym $s`;
  die "Error gpg decrypting $s\n" if $? != 0;
  chomp $s;
  return $s;
}

sub getNvram($){
  my $c = shift;
  return {
    %{getPublicKeyNvram($c)},
    %{getWifiNvram($c)},
    %{getStaticLeasesNvram($c)},
    %{getPortForwardingNvram($c)},
    %{getExtraNvram($c)},
  };
}

sub getPublicKeyNvram($){
  my $ssh = `cat ~/.ssh/*.pub`;
  return {"sshd_authorized_keys" => "$ssh"};
}

sub getWifiNvram($){
  my $c = shift;
  my $nvram = {};

  for my $section(keys %$c){
    if($section =~ /^(ath|wl)\d+$/){
      my $radio = $section;
      my $s = $$c{$radio};
      for my $att(sort keys %wifiAtts){
        if(defined $$s{$att}){
          my $val = $$s{$att};
          $val = decrypt $val if defined $encWifiAtts{$att};
          $$nvram{"${radio}_$att"} = "$val";
          if($radio eq "wl0" and $att =~ /^(channel|ssid)$/){
            $$nvram{"wl_$att"} = "$val";
          }
        }
      }
    }
  }
  return $nvram;
}

sub getStaticLeasesNvram($){
  my $c = shift;
  my $ipPrefix = $$c{config}{ip_prefix};

  my @entries;
  for my $id(getClientIds($c)){
    my $val = $$c{clients}{$id};
    if($val !~ /^($macRe)\s*(.*)$/){
      die "Malformed client line: $val\n";
    }
    my ($mac, $hostname) = ($1, $2);
    push @entries, "$mac=$hostname=$ipPrefix.$id=";
  }

  return {
    "static_leasenum" => (@entries + 0),
    "static_leases" => (join ' ', @entries),
  }
}

sub getPortForwardingNvram($){
  my $c = shift;
  my $ip_prefix = $$c{config}{ip_prefix};

  my @entries;
  if(defined $$c{forwards}){
    for my $name(keys %{$$c{forwards}}){
      my $val = $$c{forwards}{$name};
      if($val !~ /^(\d+) \s* (\d+) \s* (\d+) \s* (udp|tcp|both)$/x){
        die "Malformed forward line {id from to udp|tcp|both}: $val\n";
      }
      my ($id, $from, $to, $type) = ($1, $2, $3, $4);
      push @entries, "$name:on:$type:$from>$ip_prefix.$id:$to";
    }
  }

  my $trans_port_prefix = $$c{config}{trans_port_prefix};
  my $ssh_port_prefix = $$c{config}{ssh_port_prefix};
  my $trans_port_prefix_alt = $$c{config}{trans_port_prefix_alt};
  my $ssh_port_prefix_alt = $$c{config}{ssh_port_prefix_alt};

  if(defined $ssh_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "ssh-$id";
      my $port = "$ssh_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $ssh_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "ssh-alt-$id";
      $id += 20;
      my $port = "$ssh_port_prefix_alt$id";
      push @entries, "ssh-alt-$id:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $trans_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "trans-$id";
      my $port = "$trans_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }
  if(defined $trans_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "trans-alt-$id";
      $id += 20;
      my $port = "$trans_port_prefix_alt$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }

  return {
    "forwardspec_entries" => (@entries + 0),
    "forward_spec" => (join ' ', @entries),
  }
}

sub getExtraNvram($){
  my $c = shift;
  my $nvram = {};
  if(defined $$c{nvram}){
    for my $key(keys %{$$c{nvram}}){
      $$nvram{$key} = $$c{nvram}{$key};
    }
  }
  return $nvram;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  if(@words == 0){
    return (@args);
  }

  if(@words == 1 and $words[0] =~ /^(--restart-dev)$/){
    return ($defaultDev);
  }

  return ();
}

&main(@ARGV);
