#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep time);

my @fehArgs = qw(--scale-down);

sub run(@);

my $INFO = '%f\n%u/%l - %wx%h'; #FILENAME\nIMGNUM/TOTALNUM - WxH
my $DEFAULT_TERM_CMD = "mv %f %f";

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [TERM_CMD]
    -use `term` to open a terminal with the window title 'fehterm-<FEHTERM_ID>'
    -find the terminal's <WINDOW_ID> using `xwininfo`
    -open a small, square feh window
      using the '--info' commandline option
        to run xdotool with the terminal's <WINDOW_ID>,
        whenever the image info is (re-)rendered in feh
        (the '--info' command also outputs '$INFO', after running xdotool)
      feh geometry is square:
        width and height    => 90% of the display height (returned by `res -h`)
        offset left and top => 5% of the display height (returned by `res -h`)
        e.g: for 1920x1080 screens, use \"972x972+54+54\"
      include extra args to feh: \"@fehArgs\"
    -xdotool cuts the current line (Ctrl+K and Ctrl+U) and types \"<TERM_CMD>\"

  $0 -n
  $0 --no-term
    open a small feh window, without opening a term
    include extra args to feh: \"@fehArgs\"

  TERM_CMD
    characters to type in the terminal when rendering feh info
    the default is \"$DEFAULT_TERM_CMD\"

    ***DO NOT ADD NEWLINES '\\n', OR PART OF THE COMMAND WILL BE RUN ON RENDER***

    you can use feh 'FORMAT SPECIFIERS' like '%f' or '%h'
      e.g.:
        `$0 'file-rename s/.jpg/_%w-%h.jpg/ %f'`
        =>
        file-rename s/.jpg/_1920x1080.jpg/ 20150602_001.jpg

  FEHTERM_ID
    arbitrary number: milliseconds since epoch when $0 was run

  WINDOW_ID
    the X window ID of the terminal, as determined by:
      `xwininfo -name 'fehterm-<FEHTERM_ID>'`

  FILE_NAME
    just '%f', a feh 'FORMAT SPECIFIER'
";

sub main(@){
  die $usage if @_ > 0 and $_[0] =~ /^(-h|--help)$/;
  my $noTerm = 0;
  if(@_ == 1 and $_[0] =~ /^(-n|--no-term)$/){
    $noTerm = 1;
  }
  my $termCmd = shift;
  $termCmd = $DEFAULT_TERM_CMD if not defined $termCmd;
  die $usage if @_ != 0;

  my $displayHeight = `res -h`;
  chomp $displayHeight;
  die "could not read display height from `res -h`\n" if $displayHeight !~ /^\d+$/;
  die "screen too small (height=$displayHeight)\n" if $displayHeight < 100;
  my $size = int(0.90 * $displayHeight + 0.5);
  my $offset = int(0.05 * $displayHeight + 0.5);
  my $geometry = "${size}x${size}+${offset}+${offset}";

  if($noTerm){
    my @cmd = ("/usr/bin/feh", @fehArgs, "-g", $geometry, "--info", "echo '$INFO'");
    print "@cmd\n";
    exec @cmd;
  }

  my $windowTitle = "fehterm-" . int(time*1000);

  run ("term",
    "-t", $windowTitle,
    "export WINDOW_TITLE=$windowTitle; bash",
  );
  sleep 0.5;

  my $xwininfo = `xwininfo -name '$windowTitle'`;
  if($xwininfo !~ /Window id: (0x[0-9a-f]+) "$windowTitle"/){
    die "Could not find window id for name=$windowTitle\n";
  }
  my $windowId = $1;

  my $infoCmd = ""
    . "  xdotool keyup --clearmodifiers --delay 5 Meta_L Meta_R Alt_L Alt_R Super_L Super_R Shift_L Shift_R;"
    . "  xdotool key --clearmodifiers --delay 5 --window $windowId Control+K Control+U;"
    . "  xdotool type --clearmodifiers --delay 5 --window $windowId --delay 1 '$termCmd';"
    . "  echo '$INFO';"
    ;

  run "/usr/bin/feh", @fehArgs, "-g", $geometry, "--info", $infoCmd;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
