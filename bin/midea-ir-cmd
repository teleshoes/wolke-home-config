#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw(sum);

my $DEVICE_GLOB = "/dev/ttyUSB*";

my $ID1 = '1011';
my $ID2 = '0010';

my $EXT_ID1 = '1101';
my $EXT_ID2 = '0101';

my $TEMPS = {
  17   => '0000',
  18   => '0001',
  19   => '0011',
  20   => '0010',
  21   => '0110',
  22   => '0111',
  23   => '0101',
  24   => '0100',
  25   => '1100',
  26   => '1101',
  27   => '1001',
  28   => '1000',
  29   => '1010',
  30   => '1011',
  same => '1111',
  off  => '1110',
};

my $TEMP_EXT = {
  16 => {baseTempC=>17, plusTemp=>0, lowTemp=>1, unitF=>0},
 #16 => {baseTempC=>17, plusTemp=>1, lowTemp=>1, unitF=>0},
  60 => {baseTempC=>17, plusTemp=>0, lowTemp=>1, unitF=>1},
  61 => {baseTempC=>17, plusTemp=>1, lowTemp=>1, unitF=>1},

  62 => {baseTempC=>17, plusTemp=>0, lowTemp=>0, unitF=>1},
  63 => {baseTempC=>17, plusTemp=>1, lowTemp=>0, unitF=>1},
  64 => {baseTempC=>18, plusTemp=>0, lowTemp=>0, unitF=>1},
  65 => {baseTempC=>18, plusTemp=>1, lowTemp=>0, unitF=>1},
  66 => {baseTempC=>19, plusTemp=>0, lowTemp=>0, unitF=>1},
  67 => {baseTempC=>19, plusTemp=>1, lowTemp=>0, unitF=>1},
  68 => {baseTempC=>20, plusTemp=>0, lowTemp=>0, unitF=>1},
  69 => {baseTempC=>20, plusTemp=>1, lowTemp=>0, unitF=>1},
  70 => {baseTempC=>21, plusTemp=>0, lowTemp=>0, unitF=>1},
  71 => {baseTempC=>21, plusTemp=>1, lowTemp=>0, unitF=>1},
 #72 => {baseTempC=>22, plusTemp=>0, lowTemp=>0, unitF=>1},
  72 => {baseTempC=>22, plusTemp=>1, lowTemp=>0, unitF=>1},
  73 => {baseTempC=>23, plusTemp=>0, lowTemp=>0, unitF=>1},
  74 => {baseTempC=>23, plusTemp=>1, lowTemp=>0, unitF=>1},
  75 => {baseTempC=>24, plusTemp=>0, lowTemp=>0, unitF=>1},
  76 => {baseTempC=>24, plusTemp=>1, lowTemp=>0, unitF=>1},
  77 => {baseTempC=>25, plusTemp=>0, lowTemp=>0, unitF=>1},
  78 => {baseTempC=>25, plusTemp=>1, lowTemp=>0, unitF=>1},
  79 => {baseTempC=>26, plusTemp=>0, lowTemp=>0, unitF=>1},
  80 => {baseTempC=>26, plusTemp=>1, lowTemp=>0, unitF=>1},
 #81 => {baseTempC=>27, plusTemp=>0, lowTemp=>0, unitF=>1},
  81 => {baseTempC=>27, plusTemp=>1, lowTemp=>0, unitF=>1},
  82 => {baseTempC=>28, plusTemp=>0, lowTemp=>0, unitF=>1},
  83 => {baseTempC=>28, plusTemp=>1, lowTemp=>0, unitF=>1},
  84 => {baseTempC=>29, plusTemp=>0, lowTemp=>0, unitF=>1},
  85 => {baseTempC=>29, plusTemp=>1, lowTemp=>0, unitF=>1},
 #86 => {baseTempC=>30, plusTemp=>0, lowTemp=>0, unitF=>1},
  86 => {baseTempC=>30, plusTemp=>1, lowTemp=>0, unitF=>1},
};

my $TEMP_EXT_FMT = join '',
  map {"\n          $_ = {"
    . "baseTempC=>${$$TEMP_EXT{$_}}{baseTempC}"
    . ", plusTemp=>${$$TEMP_EXT{$_}}{plusTemp}"
    . ", lowTemp=>${$$TEMP_EXT{$_}}{lowTemp}"
    . ", unitF=>${$$TEMP_EXT{$_}}{unitF}"
    . "}"
  }
  sort keys %$TEMP_EXT;

my $FANS = {
  auto => '1011',
  low  => '1001',
  med  => '0101',
  high => '0011',
  off  => '0111',
};

my $DEFAULT_FAN_PCT = {
  auto => 102,
  low  => 40,
  med  => 60,
  high => 100,
  off  => 0,
};

my $STATES = {
  on   => '1111',
  off  => '1011',
};

my $MODES = {
  auto => '1000',
  cool => '0000',
  dry  => '0100',
  heat => '1100',
  fan  => '0100',
  off  => '0000',
};

my $STATIC_COMMANDS = {
  eco      => '# 1011 1001 0100 0110 1111 0101 0000 1010 0110 1001 1001 0110 *',
  led      => '# 1011 1001 0100 0110 1111 0101 0000 1010 0000 1001 1111 0110 *',
  swingOn  => '# 1011 1001 0100 0110 1111 0101 0000 1010 0000 0100 1111 1011 *',
  swingOff => '# 1011 1001 0100 0110 1111 0101 0000 1010 0000 0101 1111 1010 *',
};

my $STATIC_CMD_FMT = join '',
  map {"\n      $_ = $$STATIC_COMMANDS{$_}"}
  sort keys %$STATIC_COMMANDS;

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [SERIAL_DEVICE] --reset
    -run: stty -F SERIAL_DEVICE hupcl
    -run: head -1 SERIAL_DEVICE
    -run: stty -F SERIAL_DEVICE -hupcl

  $0 [SERIAL_DEVICE] [PRESET] [STATE] [MODE] [TEMP] [FAN] [EXT_CMD_ARGS]
    -generate a command string for midea-ir-arduino device
    -write command to SERIAL_DEVICE
    e.g.:
      $0 cool 21C high
      $0 off
      $0 88% 72

  $0 [SERIAL_DEVICE] " . join(" | ", sort keys %$STATIC_COMMANDS) . "
    write pre-generated static command string to SERIAL_DEVICE:$STATIC_CMD_FMT

  PRESET
    on | default | normal
      same as: cool low T22
    cold
      same as: cool high T21

  STATE
    off
      set MODE to off ($$MODES{off})
      set FAN to off ($$FANS{off})
      set TEMP to off ($$TEMPS{off})

  MODE
    auto-mode | mode-auto
      set mode to auto ($$MODES{auto})
      (this is the default)
    cool
      set mode to cool ($$MODES{cool})
    dry
      set mode to dry ($$MODES{dry})
    heat
      set mode to heat ($$MODES{heat})
    fan | fan-only
      set mode to fan ($$MODES{fan})

  FAN
    auto-fan | fan-auto
      set fan to auto ($$FANS{auto})
      (also set EXT_FAN_PCT=$$DEFAULT_FAN_PCT{auto} if EXT_CMD_ARGS are given)
      (this is the default)
    low
      set fan to low ($$FANS{low})
      (also set EXT_FAN_PCT=$$DEFAULT_FAN_PCT{low} if EXT_CMD_ARGS are given)
    med | medium
      set fan to med ($$FANS{med})
      (also set EXT_FAN_PCT=$$DEFAULT_FAN_PCT{med} if EXT_CMD_ARGS are given)
    high
      set fan to high ($$FANS{high})
      (also set EXT_FAN_PCT=$$DEFAULT_FAN_PCT{high} if EXT_CMD_ARGS are given)

  TEMP
    17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30
      set temperature in degrees celsius
    17C | 18C | 19C | 20C | 21C | 22C | 23C | 24C | 25C | 26C | 27C | 28C | 29C | 30C
      set temperature in degrees celsius
    T17 | T18 | T19 | T20 | T21 | T22 | T23 | T24 | T25 | T26 | T27 | T28 | T29 | T30
      set temperature in degrees celsius
    T17C | T18C | T19C | T20C | T21C | T22C | T23C | T24C | T25C | T26C | T27C | T28C | T29C | T30C
      set temperature in degrees celsius
    same
      set temperature to $$TEMPS{same}
      (this is the default)

  EXT_CMD_ARGS
    EXT_FAN_PCT
      0% - 100% | 102%
        send the extension command, setting fan percent

    EXT_LOWTEMP
      lowtemp
        send the extension command, setting the low-temp bit to 1
        (needed for 16C and 60F, and 61F with EXT_PLUSTEMP)

    EXT_PLUSTEMP
      plustemp
        send the extension command, setting the plus-temp bit to 1
        (needed for 63F 65F 67F 69F 71F 72F 74F 76F 78F 80F 81F 83F 85F 86F,
         and 61F with EXT_LOWTEMP)

    EXT_UNIT_F
      f | F | fahrenheit
        send the extension command, setting the fahrenheit bit to 1
      c | C | celsius
        send the extension command, setting the fahrenheit bit to 0

    EXT_SLEEP
      sleep
        send the extension command, setting the sleep bit to 1

    TEMP_EXT
      wrapper around TEMP, EXT_PLUSTEMP, EXT_LOWTEMP, and EXT_UNIT_F to
      set fahrenheit and extra-low temps (16C, 60F, and 61F)" . $TEMP_EXT_FMT . "

  SERIAL_DEVICE
    -g | --guess
      use the first device that matches glob: /dev/ttyUSB*
      (this is the default)
    --dev=FILE
      use FILE as SERIAL_DEVICE
    CHARACTER_SPECIAL_FILE
      any file that exists and is a character special file
";

sub guessDevice();
sub getExtensionCommand($$$$$$);
sub getSerialCmd($$$$$);
sub numToBits($);
sub bitsToNum($);
sub inv($);

my $ACTION_COMMAND = "command";
my $ACTION_RESET = "reset";

sub main(@){
  my $action = $ACTION_COMMAND;
  my $staticCmd = undef;
  my $extFanPct = undef;
  my $extPlusTemp = undef;
  my $extLowTemp = undef;
  my $extUnitF = undef;
  my $extSleep = undef;
  my $tempExt = undef;
  my $device = undef;
  my $fan = 'auto';
  my $state = 'off'; #this is ignored, apparently
  my $temp = 'same';
  my $mode = 'auto';
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--reset)$/){
      $action = $ACTION_RESET;
    }elsif($arg =~ /^(on|default|normal)$/){
      $mode = 'cool';
      $fan = 'low';
      $temp = '22';
    }elsif($arg =~ /^(cold)$/){
      $mode = 'cool';
      $fan = 'high';
      $temp = '21';
    }elsif($arg =~ /^(off)$/){
      $mode = 'off';
      $fan = 'off';
      $temp = 'off';
    }elsif($arg =~ /^(auto-mode|mode-auto)$/){
      $mode = 'auto';
    }elsif($arg =~ /^(cool)$/){
      $mode = 'cool';
    }elsif($arg =~ /^(dry)$/){
      $mode = 'dry';
    }elsif($arg =~ /^(heat)$/){
      $mode = 'heat';
    }elsif($arg =~ /^(fan|fan-only)$/){
      $mode = 'fan';
    }elsif($arg =~ /^(auto-fan|fan-auto)$/){
      $fan = 'auto';
    }elsif($arg =~ /^(low)$/){
      $fan = 'low';
    }elsif($arg =~ /^(med|medium)$/){
      $fan = 'med';
    }elsif($arg =~ /^(high)$/){
      $fan = 'high';
    }elsif($arg =~ /^T?(17|18|19|2\d|30)C?$/){
      $temp = $1;
    }elsif($arg =~ /^(0|[1-9]\d|100|102)%$/){
      $extFanPct = $1;
    }elsif($arg =~ /^(f|F|fahrenheit)$/){
      $extUnitF = 1;
    }elsif($arg =~ /^(c|C|celsius)$/){
      $extUnitF = 0;
    }elsif($arg =~ /^(plustemp)$/){
      $extPlusTemp = 1;
    }elsif($arg =~ /^(lowtemp)$/){
      $extLowTemp = 1;
    }elsif($arg =~ /^(sleep)$/){
      $extSleep = 1;
    }elsif(defined $$TEMP_EXT{$arg}){
      $tempExt = $arg;
    }elsif(defined $$STATIC_COMMANDS{$arg}){
      $staticCmd = $arg;
    }elsif($arg =~ /^(-g|--guess)$/){
      $device = guessDevice();
    }elsif($arg =~ /^--dev=(.+)$/){
      $device = $1;
    }elsif(-e $arg and -c $arg){
      $device = $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  $device = guessDevice() if not defined $device;

  if($action eq $ACTION_COMMAND){
    my $cmd;
    if(defined $staticCmd){
      $cmd = $$STATIC_COMMANDS{$staticCmd};
    }else{
      if(defined $tempExt){
        $temp = $$TEMP_EXT{$tempExt}{baseTempC};
        $extPlusTemp = $$TEMP_EXT{$tempExt}{plusTemp};
        $extLowTemp = $$TEMP_EXT{$tempExt}{lowTemp};
        $extUnitF = $$TEMP_EXT{$tempExt}{unitF};
      }

      my $defaultFanPct = defined $fan ? $$DEFAULT_FAN_PCT{$fan} : 0;

      my $extCommand = getExtensionCommand(
        $defaultFanPct, $extFanPct, $extUnitF, $extPlusTemp, $extLowTemp, $extSleep);

      $cmd = getSerialCmd(
        (defined $fan    ? $$FANS{$fan}            : undef),
        (defined $state  ? $$STATES{$state}        : undef),
        (defined $temp   ? $$TEMPS{$temp}          : undef),
        (defined $mode   ? $$MODES{$mode}          : undef),
        $extCommand,
      );
    }

    open FH, "> $device" or die "ERROR: could not write $device\n$!\n";
    print FH $cmd;
    close FH;
  }elsif($action eq $ACTION_RESET){
    system "stty -F $device hupcl";
    system "head -1 $device";
    system "stty -F $device -hupcl";
  }else{
    die "ERROR: unknown action $action\n";
  }
}

sub guessDevice(){
  my @devices = glob $DEVICE_GLOB;
  if(@devices == 0){
    die "ERROR: could not find a device matching $DEVICE_GLOB\n";
  }
  return $devices[0];
}

sub getExtensionCommand($$$$$$){
  my ($defaultFanPct, $extFanPct, $extUnitF, $extPlusTemp, $extLowTemp, $extSleep) = @_;

  return undef if 1
    and not defined $extFanPct
    and not defined $extUnitF
    and not defined $extPlusTemp
    and not defined $extLowTemp
    and not defined $extSleep;

  $extFanPct = $defaultFanPct if not defined $extFanPct;
  $extUnitF = 0 if not defined $extUnitF;
  $extPlusTemp = 0 if not defined $extPlusTemp;
  $extLowTemp = 0 if not defined $extLowTemp;
  $extSleep = 0 if not defined $extSleep;

  my $byte1 = $EXT_ID1 . $EXT_ID2;
  my $byte2 = numToBits($extFanPct);
  my $byte3 = $extSleep . '0' . $extPlusTemp . '0' . '0000';
  my $byte4 = '000' . $extLowTemp . '000' . $extUnitF;
  my $byte5 = '00000000';

  my $sum = sum(map {bitsToNum($_)} ($byte1, $byte2, $byte3, $byte4, $byte5));

  my $byte6 = numToBits($sum % 256);

  return "$byte1$byte2$byte3$byte4$byte5$byte6";
}

sub getSerialCmd($$$$$){
  my ($fan, $state, $temp, $mode, $extCmd) = @_;

  my $bits = "";
  $bits .= $ID1  . $ID2   . inv($ID1)  . inv($ID2);
  $bits .= $fan  . $state . inv($fan)  . inv($state);
  $bits .= $temp . $mode  . inv($temp) . inv($mode);

  $bits .= "\@$extCmd" if defined $extCmd;
  $bits =~ s/\s+//g;

  my $cmd = "#$bits*";

  return $cmd;
}

sub numToBits($){
  my ($dec) = @_;
  return sprintf "%08b", $dec;
}

sub bitsToNum($){
  my ($bitString) = @_;
  return oct("0b$bitString");
}

sub inv($){
  my ($bitString) = @_;
  $bitString =~ s/0/zero/g;
  $bitString =~ s/1/one/g;

  $bitString =~ s/zero/1/g;
  $bitString =~ s/one/0/g;
  return $bitString;
}

&main(@ARGV);
