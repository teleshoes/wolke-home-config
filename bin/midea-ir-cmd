#!/usr/bin/perl
use strict;
use warnings;

my $DEVICE_GLOB = "/dev/ttyUSB*";

my $ID1 = '1011';
my $ID2 = '0010';

my $TEMPS = {
  17   => '0000',
  18   => '0001',
  19   => '0011',
  20   => '0010',
  21   => '0110',
  22   => '0111',
  23   => '0101',
  24   => '0100',
  25   => '1100',
  26   => '1101',
  27   => '1001',
  28   => '1000',
  29   => '1010',
  30   => '1011',
  same => '1111',
  off  => '1110',
};

my $FANS = {
  auto => '1011',
  low  => '1001',
  med  => '0101',
  high => '0011',
  off  => '0111',
};

my $STATES = {
  on   => '1111',
  off  => '1011',
};

my $MODES = {
  auto => '1000',
  cool => '0000',
  heat => '1100',
  fan  => '0100',
  off  => '0000',
};

my $AUX_COMMANDS = {
  f_hi => '1101 0101 0110 0100 0010 0000 0000 0001 0000 0000 0101 1010',
  f_lo => '1101 0101 0010 1000 0000 0000 0000 0001 0000 0000 1111 1110',
  f_60 => '1101 0101 0110 0100 0000 0000 0001 0001 0000 0000 0100 1010',
  f_61 => '1101 0101 0110 0100 0010 0000 0001 0001 0000 0000 0110 1010',
  c_16 => '1101 0101 0110 0100 0000 0000 0001 0000 0000 0000 0100 1001',
};

my $AUX_CMD_FMT = join '',
  map {"\n        $_ = $$AUX_COMMANDS{$_}"}
  sort keys %$AUX_COMMANDS;

my $STATIC_COMMANDS = {
  eco => '# 1011 1001 0100 0110 1111 0101 0000 1010 0110 1001 1001 0110 *',
  led => '# 1011 1001 0100 0110 1111 0101 0000 1010 0000 1001 1111 0110 *',
};

my $STATIC_CMD_FMT = join '',
  map {"\n      $_ = $$STATIC_COMMANDS{$_}"}
  sort keys %$STATIC_COMMANDS;

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [SERIAL_DEVICE] --reset
    -run: stty -F SERIAL_DEVICE hupcl
    -run: head -1 SERIAL_DEVICE
    -run: stty -F SERIAL_DEVICE -hupcl

  $0 [SERIAL_DEVICE] [PRESET] [STATE] [MODE] [TEMP] [FAN] [AUX_CMD]
    -generate a command string for midea-ir-arduino device
    -write command to SERIAL_DEVICE

  $0 [SERIAL_DEVICE] " . join(" | ", sort keys %$STATIC_COMMANDS) . "
    write pre-generated static command string to SERIAL_DEVICE:$STATIC_CMD_FMT

  PRESET
    on | default
      same as: cool low T22
    cold
      same as: cool high T21

  STATE
    off
      set MODE to off ($$MODES{off})
      set FAN to off ($$FANS{off})
      set TEMP to off ($$TEMPS{off})

  MODE
    auto-mode | mode-auto
      set mode to auto ($$MODES{auto})
      (this is the default)
    cool
      set mode to cool ($$MODES{cool})
    heat
      set mode to heat ($$MODES{heat})
    fan | fan-only
      set mode to fan ($$MODES{fan})

  FAN
    auto-fan | fan-auto
      set fan to auto ($$FANS{auto})
      (this is the default)
    low
      set fan to low ($$FANS{low})
    med | medium
      set fan to med ($$FANS{med})
    high
      set fan to high ($$FANS{high})

  TEMP
    17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30
      set temperature in degrees celsius
    17C | 18C | 19C | 20C | 21C | 22C | 23C | 24C | 25C | 26C | 27C | 28C | 29C | 30C
      set temperature in degrees celsius
    T17 | T18 | T19 | T20 | T21 | T22 | T23 | T24 | T25 | T26 | T27 | T28 | T29 | T30
      set temperature in degrees celsius
    T17C | T18C | T19C | T20C | T21C | T22C | T23C | T24C | T25C | T26C | T27C | T28C | T29C | T30C
      set temperature in degrees celsius
    same
      set temperature to $$TEMPS{same}
      (this is the default)

  AUX_CMD
    command to append to the main command" . $AUX_CMD_FMT . "

  SERIAL_DEVICE
    -g | --guess
      use the first device that matches glob: /dev/ttyUSB*
      (this is the default)
    --dev=FILE
      use FILE as SERIAL_DEVICE
    CHARACTER_SPECIAL_FILE
      any file that exists and is a character special file
";

sub guessDevice();
sub getSerialCmd($$$$$);
sub inv($);

my $ACTION_COMMAND = "command";
my $ACTION_RESET = "reset";

sub main(@){
  my $action = $ACTION_COMMAND;
  my $cmd = undef;
  my $auxCmd = undef;
  my $device = undef;
  my $fan = $$FANS{auto};
  my $state = $$STATES{off}; #this is ignored, apparently
  my $temp = $$TEMPS{same};
  my $mode = $$MODES{auto};
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--reset)$/){
      $action = $ACTION_RESET;
    }elsif($arg =~ /^(on|default)$/){
      $mode = $$MODES{cool};
      $fan = $$FANS{low};
      $temp = $$TEMPS{22};
    }elsif($arg =~ /^(cold)$/){
      $mode = $$MODES{cool};
      $fan = $$FANS{high};
      $temp = $$TEMPS{21};
    }elsif($arg =~ /^(off)$/){
      $mode = $$MODES{off};
      $fan = $$FANS{off};
      $temp = $$TEMPS{off};
    }elsif($arg =~ /^(auto-mode|mode-auto)$/){
      $mode = $$MODES{auto};
    }elsif($arg =~ /^(cool)$/){
      $mode = $$MODES{cool};
    }elsif($arg =~ /^(heat)$/){
      $mode = $$MODES{heat};
    }elsif($arg =~ /^(fan|fan-only)$/){
      $mode = $$MODES{fan};
    }elsif($arg =~ /^(auto-fan|fan-auto)$/){
      $fan = $$FANS{auto};
    }elsif($arg =~ /^(low)$/){
      $fan = $$FANS{low};
    }elsif($arg =~ /^(med|medium)$/){
      $fan = $$FANS{med};
    }elsif($arg =~ /^(high)$/){
      $fan = $$FANS{high};
    }elsif($arg =~ /^T?(17|18|19|2\d|30)C?$/){
      $temp = $$TEMPS{$1};
    }elsif(defined $$AUX_COMMANDS{$arg}){
      $auxCmd = $$AUX_COMMANDS{$arg};
    }elsif(defined $$STATIC_COMMANDS{$arg}){
      $cmd = $$STATIC_COMMANDS{$arg};
    }elsif($arg =~ /^(-g|--guess)$/){
      $device = guessDevice();
    }elsif($arg =~ /^--dev=(.+)$/){
      $device = $1;
    }elsif(-e $arg and -c $arg){
      $device = $arg;
    }else{
      die $usage;
    }
  }

  $device = guessDevice() if not defined $device;

  if($action eq $ACTION_COMMAND){
    if(not defined $cmd){
      $cmd = getSerialCmd($fan, $state, $temp, $mode, $auxCmd);
    }

    open FH, "> $device" or die "ERROR: could not write $device\n$!\n";
    print FH $cmd;
    close FH;
  }elsif($action eq $ACTION_RESET){
    system "stty -F $device hupcl";
    system "head -1 $device";
    system "stty -F $device -hupcl";
  }else{
    die "ERROR: unknown action $action\n";
  }
}

sub guessDevice(){
  my @devices = glob $DEVICE_GLOB;
  if(@devices == 0){
    die "ERROR: could not find a device matching $DEVICE_GLOB\n";
  }
  return $devices[0];
}

sub getSerialCmd($$$$$){
  my ($fan, $state, $temp, $mode, $auxCmd) = @_;

  my $bits = "";
  $bits .= $ID1  . $ID2   . inv($ID1)  . inv($ID2);
  $bits .= $fan  . $state . inv($fan)  . inv($state);
  $bits .= $temp . $mode  . inv($temp) . inv($mode);

  $bits .= "\@$auxCmd" if defined $auxCmd;
  $bits =~ s/\s+//g;

  my $cmd = "#$bits*";

  return $cmd;
}

sub inv($){
  my ($nibble) = @_;
  $nibble =~ s/0/one/g;
  $nibble =~ s/1/zero/g;
  $nibble =~ s/zero/0/g;
  $nibble =~ s/one/1/g;
  return $nibble;
}

&main(@ARGV);
