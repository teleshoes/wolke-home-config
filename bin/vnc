#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub startVNC($$$$$);
sub runCmdSSHBind($$$@);
sub runSSHExit($);
sub getSSHControlPath($);
sub runRemoteCmd($$@);
sub guessRemoteDisplay($);

my $DELAY_MILLIS = 300;

my $LOCALHOST = "127.0.0.1";
my $DEFAULT_VNC_PORT = 5900;
my $DEFAULT_REMOTE_DISPLAY = ":0";
my $SSH_CONTROL_PATH_DIR = "/tmp/vnc-ssh-ctl";

my %VNC_SERVER_ARGS = (
  x11vnc       => [qw(-safer -localhost -nopw -once -noncache)],
);

my %VNC_CLIENT_ARGS = (
  xtigervncviewer => [qw(DotWhenNoCursor=1)],
  xtightvncviewer => [qw(-quality 0         -compresslevel 5)],
  x2vnc           => [qw(-hotkey a-F9       -edgewidth 0)],
);

my $DEFAULT_VNC_SERVER = "x11vnc";
my $DEFAULT_VNC_CLIENT = "xtigervncviewer";
my $OK_VNC_CLIENTS = join "|", sort keys %VNC_CLIENT_ARGS;

my $USAGE = "Usage:
  $0 [OPTS] HOST
    -choose a <LOCAL_PORT> based on the number of existing SSH sessions
    -start vnc server on <HOST> with port=$DEFAULT_VNC_PORT
    -setup an ssh tunnel to bind $LOCALHOST:<LOCAL_PORT> to <HOST>:$DEFAULT_VNC_PORT
    -run vnc client to connect to $LOCALHOST:<LOCAL_PORT>

  $0 -h | --help
    show this message

  $0 off
    disconnect ssh tunnel

  OPTS
    --client=VNC_CLIENT   (default is $DEFAULT_VNC_CLIENT)
      one of: $OK_VNC_CLIENTS

    -u USER | --user=USER
      -use <USER> for all ssh/ipmagic commands

    --no-ssh-tunnel
      -do not select a <LOCAL_PORT>
      -do not create an SSH tunnel
      -connect directly to the remote vnc server on <HOST>:$DEFAULT_VNC_PORT

    --no-server
      -do not start vnc server, assume already running on <HOST>:$DEFAULT_VNC_PORT

    -r | --remote
      same as: --no-ssh-tunnel --no-server

    --geometry=GEOMETRY    (default is --geometry=res)
      one of 'res', 'none', or <WIDTH>x<HEIGHT>
        if <GEOMETRY> is 'res':
          fetch <WIDTH>x<HEIGHT> with `res` command
          and pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is <WIDTH>x<HEIGHT>:
          pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is 'none':
          do not pass '-geometry' to server

    --no-geometry
      synonym for --geometry=none (do not pass '-geometry GEOMETRY' to server)
";

my $CMD_START_VNC = "start";
my $CMD_SSH_OFF = "off";

my $GEOMETRY_RES = "res";
my $GEOMETRY_NONE = "none";

sub main(@){
  my $cmd = $CMD_START_VNC;
  my $opts = {
    remoteInfo    => {
      host        => undef,
      user        => undef,
    },
    vncClient     => $DEFAULT_VNC_CLIENT,
    geometry      => $GEOMETRY_RES,
    isStartServer => 1,
    isSSHTunnel   => 1,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(off)$/){
      $cmd = $CMD_SSH_OFF;
    }elsif($arg =~ /^--client=($OK_VNC_CLIENTS)$/){
      $$opts{vncClient} = $1;
    }elsif($arg =~ /^(--no-server)$/){
      $$opts{isStartServer} = 0;
    }elsif($arg =~ /^(--no-ssh-tunnel)$/){
      $$opts{isSSHTunnel} = 0;
    }elsif($arg =~ /^(-r|--remote)$/){
      $$opts{isStartServer} = 0;
      $$opts{isSSHTunnel} = 0;
    }elsif($arg =~ /^--geometry=res$/){
      $$opts{geometry} = $GEOMETRY_RES;
    }elsif($arg =~ /^--geometry=none$/){
      $$opts{geometry} = $GEOMETRY_NONE;
    }elsif($arg =~ /^--geometry=(\d+x\d+)$/){
      $$opts{geometry} = $1;
    }elsif($arg =~ /^--user=(.+)$/){
      $$opts{remoteInfo}{user} = $1;
    }elsif($arg =~ /^(-u)$/ and @_ > 0){
      $$opts{remoteInfo}{user} = shift @_;
    }elsif(not defined $$opts{remoteInfo}{host}){
      $$opts{remoteInfo}{host} = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_START_VNC){
    die "$USAGE\nERROR: missing HOST\n" if not defined $$opts{remoteInfo}{host};
    startVNC($$opts{remoteInfo}, $$opts{vncClient}, $$opts{geometry},
      $$opts{isStartServer}, $$opts{isSSHTunnel});
  }elsif($cmd eq $CMD_SSH_OFF){
    runSSHExit($$opts{host});
  }else{
    die "ERROR: unknown cmd $cmd\n";
  }
}

sub startVNC($$$$$){
  my ($remoteInfo, $vncClient, $geometry, $isStartServer, $isSSHTunnel) = @_;

  my @serverGeometryArgs;
  if($geometry eq $GEOMETRY_RES){
    my $res = `res`;
    chomp $res;
    if($res =~ /^(\d+x\d+)$/){
      @serverGeometryArgs = ("-geometry", $res);
    }else{
      die "ERROR: invalid geometry returned by `res` - '$res'\n";
    }
  }elsif($geometry =~ /^(\d+x\d+)$/){
    @serverGeometryArgs = ("-geometry", $geometry);
  }elsif($geometry eq $GEOMETRY_NONE){
    @serverGeometryArgs = ();
  }else{
    die "invalid geometry: $geometry\n";
  }

  my $vncServer = $DEFAULT_VNC_SERVER;

  my @vncServerCmd = ($vncServer,
    '-display', guessRemoteDisplay($remoteInfo),
    @serverGeometryArgs,
    @{$VNC_SERVER_ARGS{$vncServer}},
  );

  my $sshCtlFileCount = 0 + grep {-f $_} glob("$SSH_CONTROL_PATH_DIR/*.ctl");

  #5900 + 10*otherVNCSessions + random first digit
  my $localPort = $DEFAULT_VNC_PORT + 10*($sshCtlFileCount) + int(rand(10));
  my $remotePort = $DEFAULT_VNC_PORT;

  if($isStartServer and $isSSHTunnel){
    runRemoteCmd($remoteInfo, {}, "pkill", $vncServer);
    runSSHExit($remoteInfo);
    runCmdSSHBind($remoteInfo, $localPort, $remotePort, @vncServerCmd);
    sleep($DELAY_MILLIS/1000.0);
  }elsif(not $isStartServer and $isSSHTunnel){
    runSSHExit($remoteInfo);
    my $exitCode = runCmdSSHBind($remoteInfo, $localPort, $remotePort, "-N");
    if($exitCode != 0){
      die "ERROR: ssh bind failed for vnc server on $$remoteInfo{host}\n";
    }
  }elsif($isStartServer and not $isSSHTunnel){
    runRemoteCmd($remoteInfo, {}, "pkill", $vncServer);
    runRemoteCmd($remoteInfo, {background=>1}, @vncServerCmd);
    sleep($DELAY_MILLIS/1000.0);
  }else{
    #not starting server or creating SSH tunnel
  }

  my @vncClientCmd = ($vncClient, @{$VNC_CLIENT_ARGS{$vncClient}});
  if($isSSHTunnel){
    push @vncClientCmd, sprintf("%s::%s", $LOCALHOST, $localPort);
  }else{
    push @vncClientCmd, sprintf("%s::%s", $$remoteInfo{host}, $remotePort);
  }

  system @vncClientCmd;

  if($isStartServer){
    runRemoteCmd($remoteInfo, {}, "pkill", $vncServer);
  }
  if($isSSHTunnel){
    runSSHExit($remoteInfo);
  }
}

sub runCmdSSHBind($$$@){
  my ($remoteInfo, $localPort, $remotePort, @cmd) = @_;
  my $host = $$remoteInfo{host};
  my @sshCmd = ("ssh",
    $host,
    "-f",
    "-o", "ControlMaster=yes",
    "-o", ("ControlPath=" . getSSHControlPath($remoteInfo)),
    "-L", "$localPort:$LOCALHOST:$remotePort",
    @cmd,
  );
  system @sshCmd;
  my $exitCode = $? >> 8;
  if($exitCode != 0){
    die "ERROR: ssh bind failed for $host\n";
  }
}

sub runSSHExit($){
  my ($remoteInfo) = @_;
  my @sshCmd = ("ssh",
    "-o", ("ControlPath=" . getSSHControlPath($remoteInfo)),
    "-O", "exit",
    "$LOCALHOST",
  );
  system @sshCmd;
}

sub getSSHControlPath($){
  my ($remoteInfo) = @_;
  if(not -d $SSH_CONTROL_PATH_DIR){
    system "mkdir", "-p", $SSH_CONTROL_PATH_DIR;
  }
  if(not -d $SSH_CONTROL_PATH_DIR){
    die "ERROR: $SSH_CONTROL_PATH_DIR does not exist\n";
  }

  my $baseName = $$remoteInfo{host};
  $baseName =~ s/\W+/_/g;
  $baseName =~ s/^_+//;
  $baseName =~ s/_+$//;

  return "$SSH_CONTROL_PATH_DIR/$baseName.ctl";
}

sub runRemoteCmd($$@){
  my ($remoteInfo, $opts, @remoteCmd) = @_;
  my @cmd = ("ssh");
  if(defined $$remoteInfo{user}){
    @cmd = (@cmd, $$remoteInfo{user} . "@" . $$remoteInfo{host});
  }else{
    @cmd = (@cmd, $$remoteInfo{host});
  }
  @cmd = (@cmd, "-f", "-n") if $$opts{background};
  @cmd = (@cmd, @remoteCmd);

  if($$opts{readProc}){
    open my $cmdH, "-|", @cmd or die "ERROR: command failed @cmd\n$!\n";
    my @lines = <$cmdH>;
    close $cmdH;
    if(wantarray){
      return @lines;
    }else{
      return join "", @lines;
    }
  }else{
    system @cmd;
  }
}

sub guessRemoteDisplay($){
  my ($remoteInfo) = @_;
  my $who = runRemoteCmd($remoteInfo, {readProc=>1}, qw(who));
  if($who =~ /\s*\((:\d+)\)$/m){
    return $1;
  }
  return $DEFAULT_REMOTE_DISPLAY;
}

&main(@ARGV);
