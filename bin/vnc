#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub startVNC($$$);
sub guessDisplay($);

my $DEFAULT_DISPLAY = ":0";
my $LOCALHOST = "127.0.0.1";
my $PORT = '5900';
my $DELAY_MILLIS = 2500;
my $SSH_CONTROL_FILE = '/tmp/vncSSH.ctl';

my @SERVER = (
  "x11vnc",
    "-safer", "-localhost", "-nopw", "-once",
    "-noncache",
);

my %CLIENTS = (
  xtigervncviewer => [
    "$LOCALHOST:0",
  ],
  xtightvncviewer => [
    "$LOCALHOST:0",
    "-quality", "0",
    "-compresslevel", "5",
  ],
  x2vnc => [
    "-hotkey", "a-F9",
    "-edgewidth", "0",
    "$LOCALHOST:0",
  ],
);

my $DEFAULT_CLIENT = "xtigervncviewer";
my $OK_CLIENTS = join "|", sort keys %CLIENTS;

my @SSH_BIND = (
  "ssh", "-f",
    "-S", $SSH_CONTROL_FILE,
    "-L", "$PORT:$LOCALHOST:$PORT",
);
my @SSH_EXIT = (
  "ssh",
    "-S", $SSH_CONTROL_FILE,
    "-O", "exit",
    "$LOCALHOST",
);

my $USAGE = "Usage:
  $0 [OPTS] HOST
    start x11vnc on the HOST, setup an ssh tunnel and then connect to it
    if --x2vnc is given, client is x2vnc. otherwise, client is vncviewer

  $0 -h | --help
    show this message

  $0 off
    disconnect ssh tunnel

  OPTS
    --client=CLIENT   (default is $DEFAULT_CLIENT)
      one of: $OK_CLIENTS
    --geometry=GEOMETRY    (default is --geometry=res)
      one of 'res', 'none', or <WIDTH>x<HEIGHT>
        if <GEOMETRY> is 'res':
          fetch <WIDTH>x<HEIGHT> with `res` command
          and pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is <WIDTH>x<HEIGHT>:
          pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is 'none':
          do not pass '-geometry' to server
    --no-geometry
      synonym for --geometry=none (do not pass '-geometry GEOMETRY' to server)
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)/){
    print $USAGE;
    exit 0;
  }elsif(@_ == 1 and $_[0] eq 'off'){
    exec @SSH_EXIT;
  }

  my $client = $DEFAULT_CLIENT;
  my $geometry = "res";
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--client=($OK_CLIENTS)$/){
      $client = $1;
    }elsif($arg =~ /^--geometry=(res|none|\d+x\d+)$/){
      $geometry = $1;
    }
  }

  my $host = shift if @_ > 0;

  die $USAGE if not defined $host or @_ > 0;

  startVNC($host, $client, $geometry);
}

sub startVNC($$$){
  my ($host, $client, $geometry) = @_;
  if($geometry eq "res"){
    $geometry = `res`;
    chomp $geometry;
  }

  if($geometry !~ /^(none|\d+x\d+)$/){
    die "invalid geometry: $geometry\n";
  }

  system @SSH_EXIT;
  system "ssh", $host, "pkill x11vnc";

  @SERVER = (@SERVER, '-display', guessDisplay $host);
  if($geometry =~ /^(\d+x\d+)$/){
    @SERVER = (@SERVER, "-geometry", $geometry);
  }

  system @SSH_BIND, $host, "@SERVER";
  exit $? if $? != 0;

  sleep($DELAY_MILLIS/1000.0);

  my @clientArgs = @{$CLIENTS{$client}};
  system $client, @clientArgs;
}

sub guessDisplay($){
  my $host = shift;
  my $who = `ssh "$host" who`;
  if($who =~ /\s*\((:\d+)\)$/m){
    return $1;
  }
  return $DEFAULT_DISPLAY;
}

&main(@ARGV);
