#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub startVNC($$$);
sub runCmdSSHBind($$$$@);
sub runSSHExit($);
sub guessRemoteDisplay($);

my $DEFAULT_REMOTE_DISPLAY = ":0";
my $LOCALHOST = "127.0.0.1";
my $PORT = '5900';
my $DELAY_MILLIS = 2500;
my $SSH_CONTROL_FILE = '/tmp/vncSSH.ctl';

my $EXEC_X11VNC = "x11vnc";

my @SERVER_ARGS = qw(
  -safer -localhost -nopw -once -noncache
);

my %CLIENT_ARGS = (
  xtigervncviewer => [qw()],
  xtightvncviewer => [qw(-quality 0   -compresslevel 5)],
  x2vnc           => [qw(-hotkey a-F9 -edgewidth 0)],
);

my $DEFAULT_CLIENT = "xtigervncviewer";
my $OK_CLIENTS = join "|", sort keys %CLIENT_ARGS;

my $USAGE = "Usage:
  $0 [OPTS] HOST
    start x11vnc on the HOST, setup an ssh tunnel and then connect to it
    if --x2vnc is given, client is x2vnc. otherwise, client is vncviewer

  $0 -h | --help
    show this message

  $0 off
    disconnect ssh tunnel

  OPTS
    --client=CLIENT   (default is $DEFAULT_CLIENT)
      one of: $OK_CLIENTS
    --geometry=GEOMETRY    (default is --geometry=res)
      one of 'res', 'none', or <WIDTH>x<HEIGHT>
        if <GEOMETRY> is 'res':
          fetch <WIDTH>x<HEIGHT> with `res` command
          and pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is <WIDTH>x<HEIGHT>:
          pass '-geometry <WIDTH>x<HEIGHT>' to server
        if <GEOMETRY> is 'none':
          do not pass '-geometry' to server
    --no-geometry
      synonym for --geometry=none (do not pass '-geometry GEOMETRY' to server)
";

my $CMD_START_VNC = "start";
my $CMD_SSH_OFF = "off";

sub main(@){
  my $cmd = $CMD_START_VNC;
  my $opts = {
    client   => $DEFAULT_CLIENT,
    geometry => "res",
    host     => undef,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(off)$/){
      $cmd = $CMD_SSH_OFF;
    }elsif($arg =~ /^--client=($OK_CLIENTS)$/){
      $$opts{client} = $1;
    }elsif($arg =~ /^--geometry=(res|none|\d+x\d+)$/){
      $$opts{geometry} = $1;
    }elsif(not defined $$opts{host}){
      $$opts{host} = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_START_VNC){
    die "$USAGE\nERROR: missing HOST\n" if not defined $$opts{host};
    startVNC($$opts{host}, $$opts{client}, $$opts{geometry});
  }elsif($cmd eq $CMD_SSH_OFF){
    runSSHExit($SSH_CONTROL_FILE);
  }else{
    die "ERROR: unknown cmd $cmd\n";
  }
}

sub startVNC($$$){
  my ($host, $client, $geometry) = @_;

  if($geometry eq "res"){
    $geometry = `res`;
    chomp $geometry;
  }

  if($geometry !~ /^(none|\d+x\d+)$/){
    die "invalid geometry: $geometry\n";
  }

  runSSHExit($SSH_CONTROL_FILE);
  system "ssh", $host, "pkill x11vnc";

  my @serverGeometryArgs;
  if($geometry =~ /^(\d+x\d+)$/){
    @serverGeometryArgs = ("-geometry", $geometry);
  }

  my @vncServerCmd = ($EXEC_X11VNC,
    '-display', guessRemoteDisplay($host),
    @serverGeometryArgs,
    @SERVER_ARGS,
  );

  my $exitCode = runCmdSSHBind($host, $PORT, $PORT, $SSH_CONTROL_FILE, @vncServerCmd);
  if($exitCode != 0){
    die "ERROR: ssh bind failed for vnc server on host\n";
  }

  sleep($DELAY_MILLIS/1000.0);

  my @vncClientCmd = ($client,
    @{$CLIENT_ARGS{$client}},
    "$LOCALHOST:0",
  );

  system @vncClientCmd;
}

sub runCmdSSHBind($$$$@){
  my ($host, $localPort, $remotePort, $ctlFile, @cmd) = @_;
  my @sshCmd = ("ssh",
    $host,
    "-f",
    "-S", $ctlFile,
    "-L", "$localPort:$LOCALHOST:$remotePort",
    @cmd,
  );
  system @sshCmd;
  return $? >> 8;
}

sub runSSHExit($){
  my ($ctlFile) = @_;
  my @sshCmd = ("ssh",
    "-S", $ctlFile,
    "-O", "exit",
    "$LOCALHOST",
  );
  system @sshCmd;
}

sub guessRemoteDisplay($){
  my $host = shift;
  my $who = `ssh "$host" who`;
  if($who =~ /\s*\((:\d+)\)$/m){
    return $1;
  }
  return $DEFAULT_REMOTE_DISPLAY;
}

&main(@ARGV);
