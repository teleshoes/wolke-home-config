#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC_RES = basename $0;
my $MODES_DEV_GLOB = "/sys/class/*/*/modes";

my $usage = "Usage:
  $EXEC_RES --help
    show this message

  $EXEC_RES [OPTS]

  $EXEC_RES [OPTS] -g|--get
    use `xrandr` to print \"<WIDTH>x<HEIGHT>\" of the <FIRST_MONITOR>

  $EXEC_RES [OPTS] -m|--modes [MODES_PREF_REGEX]
    find graphics cards `modes` devs in /sys/class
    select one that contains a <GEOMETRY>, and print it
      -if given, prefer `modes` devices where full path matches MODES_PREF_REGEX
      -otherwise, sort paths in lexicographical order

  $EXEC_RES [OPTS] -s GEOMETRY
  $EXEC_RES [OPTS] --set GEOMETRY
  $EXEC_RES [OPTS] --set=GEOMETRY
    set `xrandr` mode by calling:
      xrandr --output <FIRST_MONITOR> --mode GEOMETRY

  $EXEC_RES [OPTS] --clone
    use `xrandr` to position the first monitor the same as the last monitor
      (swap order if --alt)
      xrandr --output <FIRST_MONITOR> --same-as <LAST_MONITOR>

  GEOMETRY
    <WIDTH>x<HEIGHT>

  MODES_PREF_REGEX
    comma-separated list of values to pattern match the graphics card in --modes
    the full path of the `modes` devices is matched against

  FIRST_MONITOR
    the first monitor returned by `xrandr --list-monitors`
  LAST_MONITOR
    the last monitor returned by `xrandr --list-monitors`

  OPTS:
    --alt | --hdmi
      swap first/last monitors for --get --set and --clone
        set <FIRST_MONITOR> to the last monitor in `xrandr --listmonitors`
        set <LAST_MONITOR> to the first monitor in `xrandr --listmonitors`
    w | -w | --width | WIDTH | width
      print just <WIDTH> in --get and --modes
    h | -h | --height | HEIGHT | height
      print just <HEIGHT> in --get and --modes
    --percent=PERCENT
      print modified <WIDTH> and <HEIGHT> in --get and --modes
      multiply the <WIDTH> and <HEIGHT> by PERCENT,
        divide by 100,
        and round to the nearest pixel
      <PERCENT> can be any non-negative rational number
      e.g.: `$EXEC_RES -p 50` prints \"960x540\" on 1920x1080 screen
";

sub readModeFromDev($);
sub getMonitors();

my $CMD_GET = "get";
my $CMD_MODES = "modes";
my $CMD_SET = "set";
my $CMD_CLONE = "clone";

sub main(@){
  my $cmd = $CMD_GET;
  my $modesPrefRegex = undef;
  my $setMode = undef;
  my $altMonitor = 0;
  my $showWidth = 1;
  my $showHeight = 1;
  my $percent = 100;
  while(@_ > 0){
    my $opt = shift;
    if($opt =~ /^(--help)$/){
      print $usage;
      exit 0;
    }elsif($opt =~ /^(-g|--get)$/){
      $cmd = $CMD_GET;
    }elsif($opt =~ /^(-m|--modes)$/){
      $cmd = $CMD_MODES;
      $modesPrefRegex = shift if @_ == 1;
    }elsif($opt =~ /^--set=(\d+x\d+)$/){
      $cmd = $CMD_SET;
      $setMode = $1;
    }elsif($opt =~ /^(-s|--set)$/ and @_ > 0 and $_[0] =~ /^(\d+x\d+)$/){
      $cmd = $CMD_SET;
      $setMode = $1;
      shift;
    }elsif($opt =~ /^(--clone)$/){
      $cmd = $CMD_CLONE;
    }elsif($opt =~ /^(--alt|--hdmi)$/){
      $altMonitor = 1;
    }elsif($opt =~ /^(w|-w|--width|WIDTH|width)$/){
      $showWidth = 1;
      $showHeight = 0;
    }elsif($opt =~ /^(h|-h|--height|HEIGHT|height)$/){
      $showWidth = 0;
      $showHeight = 1;
    }elsif($opt =~ /^--percent=(\d+(?:\.\d+)?)$/){
      $percent = $1;
    }else{
      die "$usage\nERROR: unknown opt $opt\n";
    }
  }

  my ($primaryMonitor, $secondaryMonitor);
  if($cmd =~ /^$CMD_GET|$CMD_SET|$CMD_CLONE$/){
    my @monitors = getMonitors();
    $primaryMonitor = $altMonitor ? $monitors[-1] : $monitors[0];
    $secondaryMonitor = $altMonitor ? $monitors[0] : $monitors[-1];
  }

  if($cmd eq $CMD_GET){
    my ($width, $height) = ($$primaryMonitor{width}, $$primaryMonitor{height});
    $width = int($width * $percent / 100 + 0.5);
    $height = int($height * $percent / 100 + 0.5);

    my $fmt = "";
    $fmt .= $width if $showWidth;
    $fmt .= "x" if $showWidth and $showHeight;
    $fmt .= $height  if $showHeight;

    print "$fmt\n";
  }elsif($cmd eq $CMD_MODES){
    my ($width, $height) = readModeFromDev($modesPrefRegex);
    $width = int($width * $percent / 100 + 0.5);
    $height = int($height * $percent / 100 + 0.5);

    my $fmt = "";
    $fmt .= $width if $showWidth;
    $fmt .= "x" if $showWidth and $showHeight;
    $fmt .= $height  if $showHeight;

    print "$fmt\n";
  }elsif($cmd eq $CMD_SET){
    my $name = $$primaryMonitor{name};
    my @cmd = ("xrandr", "--output", $name, "--mode", $setMode);
    print "@cmd\n";
    system @cmd;
  }elsif($cmd eq $CMD_CLONE){
    my @cmd = ("xrandr",
      "--output", $$primaryMonitor{name},
      "--same-as", $$secondaryMonitor{name},
    );
    print "@cmd\n";
    system @cmd;
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub readModeFromDev($){
  my ($modesPrefRegex) = @_;
  my @modesDevs = sort glob $MODES_DEV_GLOB;
  $modesPrefRegex = "" if not defined $modesPrefRegex;
  my @prefDevs = sort grep {$_ =~ /$modesPrefRegex/} @modesDevs;
  my @unprefDevs = sort grep {$_ !~ /$modesPrefRegex/} @modesDevs;
  for my $dev (@prefDevs, @unprefDevs){
    my $out = `cat $dev 2>/dev/null`;
    if($out =~ /(\d+)x(\d+)/){
      return ($1, $2);
    }
  }
  die "ERROR: could not find geomery in $MODES_DEV_GLOB\n";
}

sub getMonitors(){
  my @xrandrOutput = `xrandr --listmonitors`;
  die "Error running xrandr\n" if $? != 0;

  my @monitors;
  for my $line(@xrandrOutput){
    if($line =~ /^\s*(\d+): [+*]*([a-zA-Z0-9_\-]+)\s+(\d+)\/\d+x(\d+)\/\d+\+\d+\+\d+\s+/){
      my ($num, $name, $width, $height) = ($1, $2, $3, $4);
      push @monitors, {name => $name, width => $width, height => $height};
    }
  }
  die "ERROR: could not parse xrandr output\n" if @monitors == 0;
  return @monitors;
}

&main(@ARGV);
