#!/usr/bin/perl
use strict;
use warnings;

my $IGCMD_REMOTE_NAME = "ac";
my $IGCMD_BTN_NAME = "custom";
my $IGCMD_BTN_FILE = "$ENV{HOME}/.config/iguana/names/$IGCMD_REMOTE_NAME/buttons/$IGCMD_BTN_NAME";

my $CONST1 = '1011';
my $CONST2 = '0010';

my $TEMPS = {
  17   => '0000',
  18   => '0001',
  19   => '0011',
  20   => '0010',
  21   => '0110',
  22   => '0111',
  23   => '0101',
  24   => '0100',
  25   => '1100',
  26   => '1101',
  27   => '1001',
  28   => '1000',
  29   => '1010',
  30   => '1011',
  same => '1111',
  off  => '1110',
};

my $FANS = {
  auto => '1011',
  low  => '1001',
  med  => '0101',
  high => '0011',
  off  => '0111',
};

my $STATES = {
  on   => '1111',
  off  => '1011',
};

my $MODES = {
  auto => '1000',
  cool => '0000',
  heat => '1100',
  fan  => '0100',
  off  => '0000',
};

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [PRESET] [STATE] [MODE] [TEMP] [FAN]
    generate an iguana pattern for midea ac to set MODE/TEMP/FAN

  PRESET
    on | default
      same as: cool low T22
    cold
      same as: cool high T21

  STATE
    off
      set MODE to off ($$MODES{off})
      set FAN to off ($$FANS{off})
      set TEMP to off ($$TEMPS{off})

  MODE
    auto-mode | mode-auto
      set mode to auto ($$MODES{auto})
      (this is the default)
    cool
      set mode to cool ($$MODES{cool})
    heat
      set mode to heat ($$MODES{heat})
    fan | fan-only
      set mode to fan ($$MODES{fan})

  FAN
    auto-fan | fan-auto
      set fan to auto ($$FANS{auto})
      (this is the default)
    low
      set fan to low ($$FANS{low})
    med | medium
      set fan to med ($$FANS{med})
    high
      set fan to high ($$FANS{high})

  TEMP
    17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30
      set temperature in degrees celsius
    17C | 18C | 19C | 20C | 21C | 22C | 23C | 24C | 25C | 26C | 27C | 28C | 29C | 30C
      set temperature in degrees celsius
    T17 | T18 | T19 | T20 | T21 | T22 | T23 | T24 | T25 | T26 | T27 | T28 | T29 | T30
      set temperature in degrees celsius
    T17C | T18C | T19C | T20C | T21C | T22C | T23C | T24C | T25C | T26C | T27C | T28C | T29C | T30C
      set temperature in degrees celsius
    same
      set temperature to $$TEMPS{same}
      (this is the default)
";

my $COMMAND_CUSTOM_BTN = "custom-btn";

sub igcmdPattern($$$$);
sub inv($);

sub main(@){
  my $fan = $$FANS{auto};
  my $state = $$STATES{off}; #this is ignored, apparently
  my $temp = $$TEMPS{same};
  my $mode = $$MODES{auto};
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(on|default)$/){
      $mode = $$MODES{cool};
      $fan = $$FANS{low};
      $temp = $$TEMPS{22};
    }elsif($arg =~ /^(cold)$/){
      $mode = $$MODES{cool};
      $fan = $$FANS{high};
      $temp = $$TEMPS{21};
    }elsif($arg =~ /^(off)$/){
      $mode = $$MODES{off};
      $fan = $$FANS{off};
      $temp = $$TEMPS{off};
    }elsif($arg =~ /^(auto-mode|mode-auto)$/){
      $mode = $$MODES{auto};
    }elsif($arg =~ /^(cool)$/){
      $mode = $$MODES{cool};
    }elsif($arg =~ /^(heat)$/){
      $mode = $$MODES{heat};
    }elsif($arg =~ /^(fan|fan-only)$/){
      $mode = $$MODES{fan};
    }elsif($arg =~ /^(auto-fan|fan-auto)$/){
      $fan = $$FANS{auto};
    }elsif($arg =~ /^(low)$/){
      $fan = $$FANS{low};
    }elsif($arg =~ /^(med|medium)$/){
      $fan = $$FANS{med};
    }elsif($arg =~ /^(high)$/){
      $fan = $$FANS{high};
    }elsif($arg =~ /^T?(17|18|19|2\d|30)C?$/){
      $temp = $$TEMPS{$1};
    }else{
      die $usage;
    }
  }

  if($cmd eq $COMMAND_CUSTOM_BTN){
    my $ptrn = igcmdPattern($fan, $state, $temp, $mode);

    open FH, "> $IGCMD_BTN_FILE" or die "ERROR: could not write $IGCMD_BTN_FILE\n$!\n";
    print FH $ptrn;
    close FH;

    system "igcmd", "$IGCMD_REMOTE_NAME-$IGCMD_BTN_NAME";
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub igcmdPattern($$$$){
  my ($fan, $state, $temp, $mode) = @_;

  my $bits = "";
  $bits .= $CONST1 . $CONST2 . inv($CONST1) . inv($CONST2);
  $bits .= $fan    . $state  . inv($fan)    . inv($state);
  $bits .= $temp   . $mode   . inv($temp)   . inv($mode);

  my $ptrn = "#$bits#$bits";


  $ptrn =~ s/0/%0%/g;
  $ptrn =~ s/1/%1%/g;
  $ptrn =~ s/%0%/space 500\npulse 500\n/g;
  $ptrn =~ s/%1%/space 1500\npulse 500\n/g;
  $ptrn =~ s/#/space 5000\npulse 4400\nspace 4300\npulse 550\n/g;

  $ptrn =~ s/^space \d+\n//;

  return $ptrn;
}

sub inv($){
  my ($nibble) = @_;
  $nibble =~ s/0/one/g;
  $nibble =~ s/1/zero/g;
  $nibble =~ s/zero/0/g;
  $nibble =~ s/one/1/g;
  return $nibble;
}

&main(@ARGV);
