#!/usr/bin/perl
use strict;
use warnings;
use Text::Unidecode;
use HTML::TableExtract;
use URI::Escape qw(uri_unescape);
binmode STDOUT, ":encoding(UTF-8)";

my $BASE_URL = "https://zenius-i-vanisher.com";
my $API_URL = "$BASE_URL/v5.2";
my $CACHE_DIR = "$ENV{HOME}/.cache/ddr-zenius";
my $GAME_IDS = {
  DDRA20 => 3802,
  DDRA   => 2979,
  SN2    => 89,
  2013   => 1129,
  X      => 148,
};
my $ABBREV_LEN = 7;
my $MAX_SONG_NAME_ID_LEN = 40;

my @GAME_ORDER_FOR_DIFF_CALC = qw(DDRA20 DDRA 2013 X SN2);
my $GAME_DIFFICULTY_SCALING_BASE = {
  SN2 => "DDRA20", #scale SN2 difficulties to be similar to DDRA20 difficulties
};

my @NONSTOP_COURSES = qw(
  bemani-spirits
  classic
  skip-master
  terra
);

my $songNameIdOverridesDuplicates = [
  [11   => "la-bamba" =>
           "la-bamba-lh-music-creation"],
  [303  => "la-bamba" =>
           "la-bamba-mexican-folk-song"],
  [176  => "ever-snow" =>
           "ever-snow-komatsu"],
  [2810 => "ever-snow" =>
           "ever-snow-terra"],
];
my $songNameIdOverridesCleanups = [
  #redundant special characters
  [852  => "raspberry-heart-heart-english-version" =>
           "raspberry-heart-english-version"],
  [1091 => "sunkiss-heart-drop" =>
           "sunkiss-drop"],
  [1105 => "stars-star-star-star-re-tuned-by-hll-ddr-edition" =>
           "stars-re-tuned-by-hll-ddr-edition"],

  #short/confusing name IDs
  [1446 => "aa" =>
           "aa-djamuro"],
  [1550 => "a" =>
           "a-renaissance"],

  #long name IDs
  [60   => "cant-stop-fallin-in-love-super-euro-version" =>
           "cant-stop-fallin-in-love-super-euro"],
  [240  => "let-the-beat-hit-em-classic-r-and-b-style" =>
           "let-the-beat-hit-em-classic-r-and-b"],
  [1104 => "l-amour-et-la-liberte-darwin-and-dj-silver-remix" =>
           "l-amour-et-la-liberte-darwindjsilver"],
  [1105 => "stars-star-star-star-re-tuned-by-hll-ddr-edition" =>
           "stars-terra-retuned-by-hll-ddr-edition"],
  [2271 => "taj-he-spitz-tommie-sunshines-brooklyn-fire-re-touch" =>
           "taj-he-spitz-tommie-sunshine-brklyn-fire"],
  [2454 => "paranoia-max-dirty-mix-in-roulette-x-special" =>
           "paranoia-max-dirty-in-roulette-x-special"],
  [2731 => "zeta-the-world-of-prime-numbers-and-the-transcendental-being" =>
           "zeta-the-world-of-prime-numbers"],
  [3165 => "all-my-heart-kono-koi-ni-watashi-no-subete-o-kakeru" =>
           "all-my-heart-super-heroine"],
  [5149 => "put-your-faith-in-me-das-twinkly-disco-remix" =>
           "put-your-faith-in-me-das-twinkly-disco"],
  [5503 => "marisa-wa-taihen-na-mono-wo-nusunde-ikimashita" =>
           "marisa-wa-taihen-na-mono-wo-nusunde"],
  [5801 => "how-to-cook-delicious-rice-and-the-effect-of-eating-rice" =>
           "how-to-cook-delicious-rice"],
  [6002 => "rinto-shite-saku-hana-no-gotoku-hinabita-edition" =>
           "rinto-shite-saku-hana-no-gotoku-hinabita"],
  [6393 => "yakyu-no-asobikata-soshite-sono-rekishi-ketteihan" =>
           "yakyu-no-asobikata-soshite-sono-rekishi"],
  [6607 => "party-lights-tommie-sunshines-brooklyn-fire-remix" =>
           "party-lights-tommie-sunshine-brklyn-fire"],
  [7314 => "mahou-no-tamago-cocona-electro-pop-edition" =>
           "mahou-no-tamago-cocona-electro-pop"],
  [7324 => "cirno-no-perfect-sansuu-kyoushitsu-edm-remix" =>
           "cirno-no-perfect-sansuu-kyoushitsu-edm"],
  [7376 => "kurokami-midareshi-shura-to-narite-rin-edition" =>
           "kurokami-midareshi-shura-to-narite-rin"],
  [7500 => "far-east-nightbird-kors-k-remix-ddr-edit-ver" =>
           "far-east-nightbird-kors-k-remix"],
  [8062 => "50th-memorial-songs-futari-no-toki-under-the-cherry-blossoms" =>
           "50th-memorial-songs-futari-no-toki"],
  [8128 => "mikansei-no-jouki-kudou-otome-ddr-edition" =>
           "mikansei-no-jouki-kudou-otome-ddr"],
];
my %customSongNamesBySongId = map {$$_[0] => $$_[2]} (
  @$songNameIdOverridesDuplicates, @$songNameIdOverridesCleanups);
my %cleanupSongNameIdBySongNameId = map {$$_[1] => $$_[2]} (
  @$songNameIdOverridesCleanups);

my @difficulties = qw(
  diff-singles-beginner
  diff-singles-basic diff-singles-difficult diff-singles-expert diff-singles-challenge
  diff-doubles-basic diff-doubles-difficult diff-doubles-expert diff-doubles-challenge
);

sub formatSongList();
sub searchSongs($$$);
sub searchQueryToRegex($);
sub getAllGameInfo();
sub getGameInfo($);
sub ensureGameInfoCache($);
sub refetchGameInfoCache($);
sub readGameInfoCache($);
sub writeGameInfoCache($$);
sub parseGameHtml($$);
sub getCachedSongsBySongNameId();
sub getSongInfo($);
sub ensureSongInfoCache($);
sub songInfoCacheExists($);
sub readSongInfoCache($);
sub writeSongInfoCache($$);
sub parseSongHtml($$);
sub fetchGameSongIds($);
sub fetchAllSongIds();
sub fetchGameHtml($);
sub fetchSongHtml($);
sub fetchSongBanner($);
sub ensureSongBanners($);
sub getRemyWikiPageHtmlFile($);
sub ensureRemyWikiPage($);
sub ensureRemyWikiFiles($);
sub getRemyWikiFiles($);
sub getRemyWikiFileUrlsByFilePath($);
sub getAvgDifficultyRatiosBetweenGames($$);
sub extractNameId($);
sub abbrevNameId($$$$);
sub trimVowels($);
sub abbrevWords($@);
sub calculateSongDifficulties($$$);
sub formatSong($$@);
sub htmlGetAllTables($);
sub getJapaneseChars();

my $usage = "Usage:
  $0 [--songlist]
    print song list with feet difficulties

  $0 --refetch-game GAME_NAME
    -find <GAME_ID>
      <GAME_NAME> => <GAME_ID>
      " . (join "\n      ",
             map {sprintf "%-11s => %s", $_, $$GAME_IDS{$_}}
             sort keys %$GAME_IDS) . "
    -delete $CACHE_DIR/game-info/<GAME_ID>
    -delete $CACHE_DIR/game-html/<GAME_ID>
    -ensure game info cached for <GAME_ID>
      (game info cache should need to be fetched)
    -ensure song info cached for all songs in <GAME_ID>
      (only 'new' songs should need to be fetched)
    -ensure banners cached for all songs in <GAME_ID>
    -ensure remywiki HTML cached for all songs in <GAME_ID>
    -ensure remywiki files cached for all songs in <GAME_ID>
    -print summary of 'new' songs
      (songs that were not cached at the start and are now)

  $0 --extract-name-id SONG_NAME
    -extract SONG_NAME_ID from SONG_NAME,
      removing special chars and replacing some sequences,
      ensuring only letters, numbers, and hyphens remain
    -replace SONG_NAME_ID with custom cleanups
      (redundant special chars, too short or confusing, too long, etc)
    -print SONG_NAME_ID

  $0 --banners SONG_NAME_ID
    print banner image file paths for given song name ID (e.g.: max-300)

  $0 --search NAME_QUERY [ARTIST_QUERY]
    print song info for songs that match both <NAME_QUERY> and <ARTIST_QUERY>
      NAME_QUERY matches against 'nameNative' if available, otherwise 'name'
      ARTIST_QUERY matches against 'artistNative' if available, otherwise 'artist'

      NAME_QUERY and ARTIST_QUERY are case-insensitive regular expressions
      with additional substitutions
        -if the entire query is JUST a positive integer N, replace it with '^.{N}\$'

        -common full-width symbols and similar-looking pronunciation marks:
           '-'        matches '-' or '－'U+FF0D or 'ー'U+30FC or '–'U+2013 or '—'0x2014
           '!'        matches '!' or '！'U+FF01
           '~'        matches '~' or '～'U+FF5E

        -other common symbols:
           '{star}'   matches '★'U+2605 or '☆'U+2606
           '{heart}'  matches '♥'U+2665

        -literals to escape chars and explicitly avoid substitutions:
           '{lbrace}' matches '{'
           '{rbrace}' matches '}'
           '{dash}'   matches '-'
           '{bang}'   matches '!'
           '{tilde}'  matches '~'

        -japanese character names match hiragana or katakana, or small forms:
         e.g.:
           '{no}'     matches 'の'U+306E or 'ノ'U+30CE
           '{ya}'     matches 'や'U+3084 or 'ヤ'U+30E4 or 'ゃ'U+3083 or 'ャ'U+30E3
";

sub main(@){
  my $cmd = shift;
  $cmd = "--songlist" if not defined $cmd;
  if($cmd =~ /^(--songlist)$/ and @_ == 0){
    print formatSongList();
  }elsif($cmd =~ /^(--refetch-game)$/ and @_ == 1){
    my ($gameName) = @_;
    my $gameId = $$GAME_IDS{uc $gameName};
    die "unknown game name: $gameName\n" if not defined $gameId;
    refetchGameInfoCache $gameId;
    my @gameSongIds = fetchGameSongIds $gameId;
    my @newSongIds;
    for my $songId(@gameSongIds){
      push @newSongIds, $songId if not songInfoCacheExists $songId;
    }
    my $newSongCount = @newSongIds;
    my $newSongFmt = "$newSongCount new song" . ($newSongCount == 1 ? "" : "s");

    print "\n\n\n===$newSongFmt===\n";
    for my $songId(@gameSongIds){
      ensureSongInfoCache $songId;
      my $song = readSongInfoCache $songId;
      ensureSongBanners $song;
      ensureRemyWikiPage $$song{remywiki};
      ensureRemyWikiFiles $$song{remywiki};
    }

    print "\n\n\n===$newSongFmt===\n";
    for my $songId(@newSongIds){
      my $songInfo = readSongInfoCache $songId;
      print "  $songId => $$songInfo{nameId}\n";
    }
  }elsif($cmd =~ /^(--extract-name-id)$/ and @_ == 1){
    my ($songName) = @_;
    my $songNameId = extractNameId($songName);
    if(defined $cleanupSongNameIdBySongNameId{$songNameId}){
      $songNameId = $cleanupSongNameIdBySongNameId{$songNameId};
    }
    print "$songNameId\n";
  }elsif($cmd =~ /^(--banners)$/ and @_ == 1){
    my ($songNameId) = @_;
    my $songsByNameId = getCachedSongsBySongNameId();
    if(not defined $$songsByNameId{$songNameId}){
      die "song '$songNameId' is not cached\n";
    }
    my $songInfo = $$songsByNameId{$songNameId};
    my @banners = @{$$songInfo{banners}};
    for my $b(@banners){
      my ($bannerId, $bannerGame) = @$b;
      print "$CACHE_DIR/banners/$bannerId.png\n";
    }
    if(@banners == 0){
      my @remywikiFiles = getRemyWikiFiles $$songInfo{remywiki};
      print "$_\n" foreach @remywikiFiles;
    }
  }elsif($cmd =~ /^(--search)$/ and (@_ == 1 or @_ == 2)){
    my ($nameSearch, $artistSearch) = @_;
    $artistSearch = "" if not defined $artistSearch;
    my $songsByNameId = getCachedSongsBySongNameId();
    my @nameIds = searchSongs $songsByNameId, $nameSearch, $artistSearch;
    for my $nameId(sort @nameIds){
      my $song = $$songsByNameId{$nameId};
      my $fmtSrcStr = ""
        . "\n"
        . "%s\n"
        . "  nameNative:   %s\n"
        . "  name:         %s\n"
        . "  artistNative: %s\n"
        . "  artist:       %s\n"
        ;
      my $fmt = sprintf $fmtSrcStr,
        $nameId,
        defined $$song{nameNative} ? $$song{nameNative} : "",
        defined $$song{name} ? $$song{name} : "",
        defined $$song{artistNative} ? $$song{artistNative} : "",
        defined $$song{artist} ? $$song{artist} : "",
        ;
      utf8::decode $fmt;
      print $fmt;
    }
  }else{
    die $usage;
  }
}

sub formatSongList(){
  my @songIds = fetchAllSongIds();
  my $allGameInfo = getAllGameInfo();

  my $diffScalingRatios = {};
  for my $targetGame(sort keys %$GAME_DIFFICULTY_SCALING_BASE){
    my $baseGame = $$GAME_DIFFICULTY_SCALING_BASE{$targetGame};
    my $avgDiffRatios = getAvgDifficultyRatiosBetweenGames($baseGame, $targetGame);
    $$diffScalingRatios{$targetGame} = $avgDiffRatios;
  }

  my $songList = {};

  for my $songId(@songIds){
    my $song = getSongInfo $songId;
    ensureSongBanners $song;
    ensureRemyWikiPage $$song{remywiki};
    ensureRemyWikiFiles $$song{remywiki};

    my $songDifficulties = calculateSongDifficulties $songId, $allGameInfo, $diffScalingRatios;

    my $abbrev = abbrevNameId $ABBREV_LEN, $$song{nameId}, $$song{artist}, $$song{genre};

    $$songList{$$song{nameId}} = {
      abbrev          => $abbrev,
      difficultiesArr => [map {$$songDifficulties{$_}} @difficulties],
    };
  }

  my $fmt = '';

  for my $nameId(sort keys %$songList){
    my $abbrev = $$songList{$nameId}{abbrev};
    my @diffArr = @{$$songList{$nameId}{difficultiesArr}};

    $fmt .= formatSong($nameId, $abbrev, @diffArr);
  }
  $fmt .= "\n";
  for my $nonstopCourse(sort @NONSTOP_COURSES){
    my $abbrev = "non" . ucfirst abbrevNameId $ABBREV_LEN-3, $nonstopCourse, "", "";
    my @diffArr = map {"-"} (0..8);

    $fmt .= formatSong($nonstopCourse, $abbrev, @diffArr);
  }

  return $fmt;
}

sub searchSongs($$$){
  my ($songsByNameId, $nameQuery, $artistQuery) = @_;
  my @okNameIds;
  my $nameRegex = searchQueryToRegex $nameQuery;
  my $artistRegex = searchQueryToRegex $artistQuery;
  $nameRegex = '^.*$' if length $nameRegex == 0;
  $artistRegex = '^.*$' if length $artistRegex == 0;
  for my $nameId(sort keys %$songsByNameId){
    my $song = $$songsByNameId{$nameId};

    my $name;
    my $nameNative = $$song{nameNative};
    if(defined $nameNative and length($nameNative) > 0){
      $name = $nameNative;
    }else{
      $name = $$song{name};
    }
    utf8::decode $name;

    my $artist;
    my $artistNative = $$song{artistNative};
    if(defined $artistNative and length($artistNative) > 0){
      $artist = $artistNative;
    }else{
      $artist = $$song{artist};
    }
    utf8::decode $artist;

    if($name =~ /$nameRegex/i and $artist =~ /$artistRegex/i){
      push @okNameIds, $nameId;
    }
  }
  return @okNameIds;
}

sub searchQueryToRegex($){
  my ($query) = @_;

  if($query =~ /^(\d+)$/){
    my $length = $1;
    return "^.{$length}\$";
  }

  my $regex = $query;

  my $substitutions = {
    #common full-width symbols
    "-"        => ["-", "\x{FF0D}", "\x{30FC}", "\x{2013}", "\x{2014}"],
    "!"        => ["!", "\x{FF01}"],
    "~"        => ["~", "\x{FF5E}"],

    #other common symbols
    "{star}"   => ["\x{2605}", "\x{2606}"],
    "{heart}"  => ["\x{2665}"],

    #literals
    "{lbrace}" => ["{"],
    "{rbrace}" => ["}"],
    "{dash}"   => ["-"],
    "{bang}"   => ["!"],
    "{tilde}"  => ["~"],
  };

  for my $charArr(@{getJapaneseChars()}){
    my ($unicodeHex, $charName, $symbol, $scriptName) = @$charArr;
    my $srcRegex = $charName;
    $srcRegex =~ s/^small_//;
    $srcRegex = "{$srcRegex}";
    my $replacement = chr(hex($unicodeHex));
    if(not defined $$substitutions{$srcRegex}){
      $$substitutions{$srcRegex} = [];
    }
    push @{$$substitutions{$srcRegex}}, $replacement;
  }

  for my $srcRegex(sort keys %$substitutions){
    my @replacements = @{$$substitutions{$srcRegex}};
    my $replacementRegex = join "|", @replacements;
    $replacementRegex = "(?:$replacementRegex)";
    $regex =~ s/$srcRegex/$replacementRegex/g;
  }

  utf8::decode $regex;

  return $regex;
}

sub getAllGameInfo(){
  my $gameInfoByName = {};
  for my $gameName(sort keys %$GAME_IDS){
    my $gameId = $$GAME_IDS{$gameName};
    $$gameInfoByName{$gameName} = getGameInfo $gameId;
  }
  return $gameInfoByName;
}

sub getGameInfo($){
  my $gameId = shift;
  ensureGameInfoCache $gameId;
  return readGameInfoCache $gameId;
}

sub ensureGameInfoCache($){
  my $gameId = shift;
  my $dir = "$CACHE_DIR/game-info";
  system "mkdir", "-p", $dir;
  my $file = "$dir/$gameId.info";
  if(not -f $file){
    my $html = fetchGameHtml $gameId;
    my $gameInfo = parseGameHtml $gameId, $html;
    writeGameInfoCache $gameId, $gameInfo;
  }
  if(not -f $file){
    die "Could not fetch gameid=$gameId\n";
  }
}
sub refetchGameInfoCache($){
  my $gameId = shift;
  my $infoFile = "$CACHE_DIR/game-info/$gameId.info";
  my $htmlFile = "$CACHE_DIR/game-html/$gameId.html";
  system "rm", "-f", $infoFile, $htmlFile;

  ensureGameInfoCache($gameId);
}
sub readGameInfoCache($){
  my ($gameId) = @_;
  my $dir = "$CACHE_DIR/game-info";
  my $file = "$dir/$gameId.info";
  if(not -f $file){
    die "Could not find file $file\n" if not -f $file;
  }
  open FH, "< $file" or die "Could not read file $file\n$!\n";
  my $gameInfo = {};
  while(my $line = <FH>){
    if($line =~ /^(\d+)\.([a-zA-Z0-9_\-]+)\s*=\s*(.+)$/){
      my ($songId, $field, $val) = ($1, $2, $3);
      $$gameInfo{$songId} = {} if not defined $$gameInfo{$songId};
      $$gameInfo{$songId}{$field} = $val;
    }
  }
  close FH;
  return $gameInfo;
}
sub writeGameInfoCache($$){
  my ($gameId, $gameInfo) = @_;
  my $dir = "$CACHE_DIR/game-info";
  my $file = "$dir/$gameId.info";
  open FH, "> $file" or die "Could not write file $file\n$!\n";
  for my $songId(sort {$a <=> $b} keys %$gameInfo){
    my $gameSongInfo = $$gameInfo{$songId};
    for my $field(sort keys %$gameSongInfo){
      my $val = $$gameSongInfo{$field};
      $val = '' if not defined $val;
      $val =~ s/^[ \t\n\r]+//;
      $val =~ s/[ \t\n\r]+$//;
      $val =~ s/\n+/ /;
      print FH "$songId.$field=$val\n";
    }
  }
  close FH;
}

sub parseGameHtml($$){
  my ($gameId, $html) = @_;

  my $songs = {};

  my @songRows;
  for my $table(htmlGetAllTables($html)){
    for my $row(@$table){
      if(@$row == 13 and defined $$row[0] and $$row[0] =~ /songdb\.php\?songid=\d+/){
        push @songRows, $row;
      }
    }
  }

  for my $row(@songRows){
    my $col=0;
    my $songInfo = {
      "nameHtml"               => $$row[$col++],
      "artistHtml"             => $$row[$col++],
      "genreHtml"              => $$row[$col++],
      "bpm"                    => $$row[$col++],
      "diff-singles-beginner"  => $$row[$col++],
      "diff-singles-basic"     => $$row[$col++],
      "diff-singles-difficult" => $$row[$col++],
      "diff-singles-expert"    => $$row[$col++],
      "diff-singles-challenge" => $$row[$col++],
      "diff-doubles-basic"     => $$row[$col++],
      "diff-doubles-difficult" => $$row[$col++],
      "diff-doubles-expert"    => $$row[$col++],
      "diff-doubles-challenge" => $$row[$col++],
    };

    if($$songInfo{nameHtml} =~ m/<a\s+href=\"songdb\.php\?songid=(\d+)\">(.+)<\/a>/s){
      my ($songId, $name) = ($1, $2);
      $name =~ s/<[^>]*>//g;
      $$songInfo{name} = $name;
      $$songInfo{songId} = $songId;
    }else{
      die "invalid song row=\"@$row\"\n";
    }

    my $artist = $$songInfo{artistHtml};
    $artist =~ s/<[^>]*>//g;
    $$songInfo{artist} = $artist;

    my $genre = $$songInfo{genreHtml};
    $genre = "" if not defined $genre;
    $genre =~ s/<[^>]*>//g;
    $$songInfo{genre} = $genre;

    $$songs{$$songInfo{songId}} = $songInfo;

    for my $difficulty(@difficulties){
      my $d = $$songInfo{$difficulty};
      $d = "" if not defined $d;
      $d =~ s/<[^>]*>//g;

      if($d !~ /^(\d+|-)$/){
        die "malformed difficulty $difficulty=\"$d\" for row=\"@$row\"\n";
      }
      $$songInfo{$difficulty} = $d;
    }
  }

  my @missingSongIds;
  for my $songId(fetchGameSongIds $gameId){
    push @missingSongIds, $songId if not defined $$songs{$songId};
  }
  if(@missingSongIds > 0){
    die "error parsing game page, missing songids: @missingSongIds\n";
  }

  return $songs;
}

sub getCachedSongsBySongNameId(){
  my $dir = "$CACHE_DIR/song-info";
  my @songIds;
  for my $file(glob "$dir/*.info"){
    if($file =~ /^$dir\/(\d+).info$/){
      my $songId = $1;
      push @songIds, $songId;
    }else{
      die "malformed file name: $file\n";
    }
  }
  my $songInfoByNameId = {};
  for my $songId(sort @songIds){
    my $songInfo = readSongInfoCache $songId;
    my $nameId = $$songInfo{nameId};
    $$songInfoByNameId{$nameId} = $songInfo;
  }
  return $songInfoByNameId;
}

sub getSongInfo($){
  my $songId = shift;
  ensureSongInfoCache $songId;
  return readSongInfoCache $songId;
}

sub ensureSongInfoCache($){
  my $songId = shift;
  my $dir = "$CACHE_DIR/song-info";
  system "mkdir", "-p", $dir;
  my $file = "$dir/$songId.info";
  if(not -f $file){
    my $html = fetchSongHtml $songId;
    my $songInfo = parseSongHtml $songId, $html;
    writeSongInfoCache $songId, $songInfo;
  }
  if(not -f $file){
    die "Could not fetch songid=$songId\n";
  }
}
sub songInfoCacheExists($){
  my ($songId) = @_;
  my $dir = "$CACHE_DIR/song-info";
  my $file = "$dir/$songId.info";
  if(-f $file){
    return 1;
  }else{
    return 0;
  }
}
sub readSongInfoCache($){
  my ($songId) = @_;
  my $dir = "$CACHE_DIR/song-info";
  my $file = "$dir/$songId.info";
  if(not -f $file){
    die "Could not find file $file\n" if not -f $file;
  }
  open FH, "< $file" or die "Could not read file $file\n$!\n";
  my $songInfo = {};
  $$songInfo{banners} = [];
  while(my $line = <FH>){
    if($line =~ /^banners\.(\d+)\s*=\s*(.*)$/){
      my ($bannerId, $bannerGame) = ($1, $2);
      push @{$$songInfo{banners}}, [$bannerId, $bannerGame];
    }elsif($line =~ /^([a-zA-Z0-9_\-]+)\s*=\s*(.+)$/){
      my ($field, $val) = ($1, $2);
      $$songInfo{$field} = $val;
    }
  }
  close FH;

  if(length $$songInfo{nameId} > $MAX_SONG_NAME_ID_LEN){
    die "ERROR: name id \"$$songInfo{nameId}\" for songid=$songId "
      . "is too long (>$MAX_SONG_NAME_ID_LEN)\n";
  }

  return $songInfo;
}
sub writeSongInfoCache($$){
  my ($songId, $songInfo) = @_;
  my $dir = "$CACHE_DIR/song-info";
  my $file = "$dir/$songId.info";

 if(length $$songInfo{nameId} > $MAX_SONG_NAME_ID_LEN){
   die "ERROR: name id \"$$songInfo{nameId}\" for songid=$songId "
     . "is too long (>$MAX_SONG_NAME_ID_LEN)\n";
 }

  open FH, "> $file" or die "Could not write file $file\n$!\n";
  for my $field(sort keys %$songInfo){
    if($field eq "banners"){
      for my $banner(@{$$songInfo{banners}}){
        my ($bannerId, $bannerGame) = @$banner;
        $bannerGame = '' if not defined $bannerGame;
        print FH "banners.$bannerId=$bannerGame\n";
      }
    }else{
      my $val = $$songInfo{$field};
      $val = '' if not defined $val;
      $val =~ s/^[ \t\n\r]+//;
      $val =~ s/[ \t\n\r]+$//;
      $val =~ s/\n+/ /;
      print FH "$field=$val\n";
    }
  }
  close FH;
}
sub parseSongHtml($$){
  my ($songId, $html) = @_;

  my $song = {};

  if($html =~ /<tr><td><strong>Song Name<\/strong><\/td><td>(.+)<\/td><td>(.+)<\/td><\/tr>/){
    $$song{name} = $1;
    $$song{nameNative} = $2;
  }
  if($html =~ /<tr><td><strong>Song Artist<\/strong><\/td><td>(.+)<\/td><td>(.+)<\/td><\/tr>/){
    $$song{artist} = $1;
    $$song{artistNative} = $2;
  }
  if($html =~ /<tr><td><strong>Song Genre<\/strong><\/td><td>(.+)<\/td><td>(.+)<\/td><\/tr>/){
    $$song{genre} = $1;
    $$song{genreNative} = $2;
  }

  if($html =~ /href="https?:\/\/remywiki\.com\/([^"]+)"/){
    $$song{remywiki} = $1;
  }

  for my $key(qw(name nameNative artist artistNative genre genreNative remywiki)){
    my $val = $$song{$key};
    $val = '' if not defined $val;
    $val =~ s/<[^>]*>//g;
    $val =~ s/^\s+//;
    $val =~ s/\s+$//;
    $val =~ s/^\((.*)\)$/$1/;
    $val =~ s/^none$//;
    $val =~ s/&lt;/</g;
    $val =~ s/&gt;/>/g;
    $val =~ s/&apos;/'/g;
    $val =~ s/&quot;/"/g;
    $val =~ s/&amp;/&/g;
    $$song{$key} = $val;
  }

  if(defined $customSongNamesBySongId{$songId}){
    $$song{nameId} = $customSongNamesBySongId{$songId};
  }else{
    $$song{nameId} = extractNameId $$song{name};
  }

  if($$song{nameId} !~ /^[a-zA-Z0-9\-]+$/){
    die "could not find song name for songid=$songId\n";
  }

  $$song{banners} = [];
  my @imgs = $html =~ /<img\s+[^<>]*src=['"]\/images\/songs\/\d+\.png['"][^<>]*>/g;
  for my $img(@imgs){
    my $bannerId = $1 if $img =~ /src=['"]\/images\/songs\/(\d+)\.png['"]/;
    my $bannerGame = $1 if $img =~ /alt=['"]([^'"]+)['"]/;
    die "banner malformed in $img\n" if not defined $bannerId;
    push @{$$song{banners}}, [$bannerId, $bannerGame];
  }

  return $song;
}

sub fetchGameSongIds($){
  my $gameId = shift;

  my $html = fetchGameHtml $gameId;
  my @gameSongIds = $html =~ /['"]songdb\.php\?songid=(\d+)['"]/g;
  return @gameSongIds;
}
sub fetchAllSongIds(){
  my @allSongIds;
  for my $gameId(sort values %$GAME_IDS){
    @allSongIds = (@allSongIds, fetchGameSongIds $gameId);
  }
  my @uniqSongIds;
  my %foundSongIds;
  for my $songId(@allSongIds){
    push @uniqSongIds, $songId if not defined $foundSongIds{$songId};
    $foundSongIds{$songId} = 1;
  }
  return @uniqSongIds;
}

sub fetchGameHtml($){
  my $gameId = shift;
  my $dir = "$CACHE_DIR/game-html";
  system "mkdir", "-p", $dir;
  my $file = "$dir/$gameId.html";
  if(not -f $file){
    system "rm", "-f", "$CACHE_DIR/game-info/$gameId.info";
    system "wget $API_URL/gamedb.php?gameid=$gameId -O $file";
  }
  if(not -f $file){
    die "Could not fetch gameid=$gameId\n";
  }
  return `cat $file`;
}

sub fetchSongHtml($){
  my $songId = shift;
  my $dir = "$CACHE_DIR/song-html";
  system "mkdir", "-p", $dir;
  my $file = "$dir/$songId.html";
  if(not -f $file){
    system "wget $API_URL/songdb.php?songid=$songId -O $file";
  }
  if(not -f $file){
    die "Could not fetch songid=$songId\n";
  }
  return `cat $file`;
}

sub fetchSongBanner($){
  my $bannerId = shift;
  my $dir = "$CACHE_DIR/banners";
  system "mkdir", "-p", $dir;
  my $file = "$dir/$bannerId.png";
  if(not -f $file){
    system "wget $BASE_URL/images/songs/$bannerId.png -O $file";
  }
  if(not -f $file){
    die "Could not fetch bannerid=$bannerId\n";
  }
  return $file;
}

sub ensureSongBanners($){
  my $song = shift;
  for my $banner(@{$$song{banners}}){
    my $bannerId = $$banner[0];
    fetchSongBanner $bannerId;
  }
}

sub getRemyWikiPageHtmlFile($){
  my $remywikiPage = shift;
  my $dir = "$CACHE_DIR/remywiki-html";
  if(defined $remywikiPage and $remywikiPage !~ /^\s*$/){
    my $remywikiName = $remywikiPage;
    $remywikiName = uri_unescape $remywikiPage;
    $remywikiName =~ s/\//_/g;
    return "$dir/remywiki-$remywikiName.html";
  }else{
    return undef;
  }
}

sub ensureRemyWikiPage($){
  my $remywikiPage = shift;
  my $htmlFile = getRemyWikiPageHtmlFile $remywikiPage;
  return if not defined $htmlFile;

  if(not -f $htmlFile){
    my $dir = "$CACHE_DIR/remywiki-html";
    system "mkdir", "-p", $dir;

    my $url = "https://remywiki.com/$remywikiPage";
    system "wget", $url, "-O", $htmlFile;
    if($? != 0){
      system "rm", "-f", $htmlFile;
      die "error fetching $url\n";
    }
  }
}

sub ensureRemyWikiFiles($){
  my $remywikiPage = shift;
  my $dir = "$CACHE_DIR/remywiki-files";

  my $urlsByFile = getRemyWikiFileUrlsByFilePath $remywikiPage;
  for my $remywikiFile(sort keys %$urlsByFile){
    if(not -f $remywikiFile){
      system "mkdir", "-p", $dir;

      my $url = $$urlsByFile{$remywikiFile};
      system "wget", $url, "-O", $remywikiFile;
      if($? != 0){
        system "rm", "-f", $remywikiFile;
        die "error fetching $url\n";
      }
    }
  }
}

sub getRemyWikiFiles($){
  my $remywikiPage = shift;
  my $urlsByFile = getRemyWikiFileUrlsByFilePath $remywikiPage;
  return sort keys %$urlsByFile;
}

sub getRemyWikiFileUrlsByFilePath($){
  my $remywikiPage = shift;
  my $dir = "$CACHE_DIR/remywiki-files";
  my $htmlFile = getRemyWikiPageHtmlFile $remywikiPage;
  my $urlsByFile = {};
  return $urlsByFile if not defined $htmlFile;

  if(not -f $htmlFile){
    die "missing HTML for remywiki page: $remywikiPage\n";
  }
  open FH, "< $htmlFile" or die "could not read $htmlFile: $!\n";
  my $html = join '', <FH>;
  close FH;

  my @imgFileUrls = $html =~ /<img[^>]*src="\/(images\/\w+\/\w+\/[^"]*)"/g;
  for my $imgFileUrl(@imgFileUrls){
    if($imgFileUrl =~ /^images\/thumb\/(.*\.(?:png|PNG|jpg|JPG))\/\d+px/){
      $imgFileUrl = "images/$1";
    }

    my $imgFileName = $imgFileUrl;
    $imgFileName =~ s/\//_/g;

    my $remywikiFile = "$dir/$imgFileName";
    $$urlsByFile{$remywikiFile} = "https://remywiki.com/$imgFileUrl";
  }

  return $urlsByFile;
}

sub getAvgDifficultyRatiosBetweenGames($$){
  my ($baseGame, $targetGame) = @_;
  my $gameInfoBase = getGameInfo $$GAME_IDS{$baseGame};
  my $gameInfoTarget = getGameInfo $$GAME_IDS{$targetGame};
  my $ratios = {};
  for my $songId(fetchAllSongIds()){
    my $gBase = $$gameInfoBase{$songId};
    my $gTarget = $$gameInfoTarget{$songId};
    if(defined $gBase and defined $gTarget){
      my @diffNames = grep {/^diff/} sort keys %$gBase;
      for my $diffName(@diffNames){
        my $dBase = $$gBase{$diffName};
        my $dTarget = $$gTarget{$diffName};
        if($dTarget =~ /^\d+$/ and $dTarget =~ /^\d+$/){
          $$ratios{$diffName} = [] if not defined $$ratios{$diffName};
          push @{$$ratios{$diffName}}, $dBase/$dTarget;
        }
      }
    }
  }

  my $meanRatios = {};
  for my $diffName(sort keys %$ratios){
    my $total = 0;
    my @vals = @{$$ratios{$diffName}};
    for my $val(@vals){
      $total += $val;
    }
    my $mean = sprintf "%5.3f", $total/@vals;
    $$meanRatios{$diffName} = $mean;
  }

  return $meanRatios;
}

sub extractNameId($){
  my $name = shift;
  my $nameId = $name;

  #unicode special chars
  utf8::decode $nameId;
  $nameId =~ s/\x{2605}/ star /g;
  $nameId =~ s/\x{2606}/ star /g;
  $nameId =~ s/\x{2665}/ heart /g;

  #all other unicode
  $nameId = unidecode $nameId;

  #special chars
  $nameId =~ s/&/ and /g;
  $nameId =~ s/(\w)'([a-zA-Z])(\s)/${1}${2}${3}/;

  #A.C.R.O.N.Y.M. => ACRONYM
  my @accrons = $nameId =~ /(?:^|\W)((?:[A-Z]\.)+)(?:$|\W)/g;
  for my $accron(@accrons){
    my $accronWithoutDots = $accron;
    $accronWithoutDots =~ s/\.//g;
    $nameId =~ s/$accron/$accronWithoutDots/g;
  }

  #lowercase
  $nameId = lc $nameId;

  #strip out non-word chars
  $nameId =~ s/\W+/_/g;
  $nameId =~ s/__+/_/g;
  $nameId =~ s/^_//g;
  $nameId =~ s/_$//g;

  #use hyphen as sep instead of underscore
  $nameId =~ s/_/-/g;

  return $nameId;
}

sub abbrevNameId($$$$){
  my ($len, $nameId, $artist, $genre) = @_;

  my @words = split /-/, $nameId;

  #upper-case the first letter of each word, except the first word
  my ($firstWord, @rest) = @words;
  @words = ($firstWord, map {ucfirst $_} @rest);

  #remove vowels from words, except the first letter if its a vowel
  my @shortWords = map {trimVowels $_} @words;

  #try abbrev without vowels
  my $abbrev = abbrevWords $len, @shortWords;

  #if abbrev is too short, add the vowels back
  if(length $abbrev < $len){
    $abbrev = abbrevWords $len, @words;
  }

  #if the nameId ends in a number,
  #  ensure the last digit is at the end of the abbrev,
  #  unless the abbrev already ends in a number
  if($nameId =~ /(\d)$/){
    my $num = $1;
    if($abbrev !~ /\d$/){
      if(length $abbrev < $len){
        $abbrev .= $num;
      }else{
        my $oldAbbrev = $abbrev;
        $abbrev =~ s/.$/$num/;
      }
    }
  }

  #if abbrev is still too short, append an artist abbrev
  if(length $abbrev < $len){
    $artist = extractNameId $artist;
    my @artistWords = split /-/, $artist;
    @artistWords = map {ucfirst $_} @artistWords;
    my @artistShortWords = map {trimVowels $_} @artistWords;

    my $remLen = $len - length $abbrev;

    my $artistAbbrev = abbrevWords $remLen, @artistShortWords;
    if(length $artistAbbrev < $remLen){
      $artistAbbrev = abbrevWords $remLen, @artistWords;
    }
    $abbrev .= $artistAbbrev;
  }

  #if abbrev is STILL too short, append a genre abbrev
  if(length $abbrev < $len){
    $genre = extractNameId $genre;
    my @genreWords = split /-/, $genre;
    @genreWords = map {ucfirst $_} @genreWords;
    my @genreShortWords = map {trimVowels $_} @genreWords;

    my $remLen = $len - length $abbrev;

    my $genreAbbrev = abbrevWords $remLen, @genreShortWords;
    if(length $genreAbbrev < $remLen){
      $genreAbbrev = abbrevWords $remLen, @genreWords;
    }
    $abbrev .= $genreAbbrev;
  }

  $abbrev = substr $abbrev, 0, $len;

  return $abbrev;
}
sub trimVowels($){
  my ($s) = @_;
  my $first = substr $s, 0, 1;
  my $rest = substr $s, 1;
  $rest =~ s/[aeiou]//g;

  return $first . $rest;
}
sub abbrevWords($@){
  my ($len, @words) = @_;

  my $abbrev = "";
  for(my $i=0; $i<@words; $i++){
    my $remLen = $len - length $abbrev;
    my $remWords = @words - $i;
    my $target = int($remLen / $remWords + 0.5);

    my $word = $words[$i];
    $abbrev .= substr $word, 0, $target;
  }

  return $abbrev;
}

sub calculateSongDifficulties($$$){
  my ($songId, $allGameInfo, $diffScalingRatios) = @_;

  my $gameInfo;
  for my $game(@GAME_ORDER_FOR_DIFF_CALC){
    if(defined $$allGameInfo{$game}{$songId}){
      $gameInfo = $$allGameInfo{$game}{$songId};

      if(defined $$diffScalingRatios{$game}){
        for my $difficulty(@difficulties){
          my $scalingRatio = $$diffScalingRatios{$game}{$difficulty};
          my $val = $$gameInfo{$difficulty};
          if($val =~ /^\d+$/){
            $val = int(0.5 + ($val * $scalingRatio));
          }
          $$gameInfo{$difficulty} = $val;
        }
      }
    }
    last if defined $gameInfo;
  }

  if(not defined $gameInfo){
    die "ERROR: Could not find any game for $songId\n";
  }

  return $gameInfo;
}

sub formatSong($$@){
  my ($nameId, $abbrev, @difficultiesArr) = @_;

  return sprintf "%-${MAX_SONG_NAME_ID_LEN}s  %${ABBREV_LEN}s  %3s %3s %3s %3s %3s    %3s %3s %3s %3s\n",
    $nameId,
    $abbrev,
    @difficultiesArr,
    ;
}

sub htmlGetAllTables($){
  my $html = shift;

  my $htmlTE = HTML::TableExtract->new(keep_html=>1);
  $htmlTE->parse($html);

  my @tables;
  for my $table ($htmlTE->tables) {
    push @tables, [$table->rows];
  }
  return @tables;
}

# return a list of [UNICODE_HEX, CHAR_NAME, SYMBOL, SCRIPT_NAME]
sub getJapaneseChars(){
  return [
    ["3041", "small_a" , "ぁ", "hiragana"], ["30A1", "small_a" , "ァ", "katakana"],
    ["3042", "a"       , "あ", "hiragana"], ["30A2", "a"       , "ア", "katakana"],
    ["3043", "small_i" , "ぃ", "hiragana"], ["30A3", "small_i" , "ィ", "katakana"],
    ["3044", "i"       , "い", "hiragana"], ["30A4", "i"       , "イ", "katakana"],
    ["3045", "small_u" , "ぅ", "hiragana"], ["30A5", "small_u" , "ゥ", "katakana"],
    ["3046", "u"       , "う", "hiragana"], ["30A6", "u"       , "ウ", "katakana"],
    ["3047", "small_e" , "ぇ", "hiragana"], ["30A7", "small_e" , "ェ", "katakana"],
    ["3048", "e"       , "え", "hiragana"], ["30A8", "e"       , "エ", "katakana"],
    ["3049", "small_o" , "ぉ", "hiragana"], ["30A9", "small_o" , "ォ", "katakana"],
    ["304A", "o"       , "お", "hiragana"], ["30AA", "o"       , "オ", "katakana"],
    ["304B", "ka"      , "か", "hiragana"], ["30AB", "ka"      , "カ", "katakana"],
    ["304C", "ga"      , "が", "hiragana"], ["30AC", "ga"      , "ガ", "katakana"],
    ["304D", "ki"      , "き", "hiragana"], ["30AD", "ki"      , "キ", "katakana"],
    ["304E", "gi"      , "ぎ", "hiragana"], ["30AE", "gi"      , "ギ", "katakana"],
    ["304F", "ku"      , "く", "hiragana"], ["30AF", "ku"      , "ク", "katakana"],
    ["3050", "gu"      , "ぐ", "hiragana"], ["30B0", "gu"      , "グ", "katakana"],
    ["3051", "ke"      , "け", "hiragana"], ["30B1", "ke"      , "ケ", "katakana"],
    ["3052", "ge"      , "げ", "hiragana"], ["30B2", "ge"      , "ゲ", "katakana"],
    ["3053", "ko"      , "こ", "hiragana"], ["30B3", "ko"      , "コ", "katakana"],
    ["3054", "go"      , "ご", "hiragana"], ["30B4", "go"      , "ゴ", "katakana"],
    ["3055", "sa"      , "さ", "hiragana"], ["30B5", "sa"      , "サ", "katakana"],
    ["3056", "za"      , "ざ", "hiragana"], ["30B6", "za"      , "ザ", "katakana"],
    ["3057", "si"      , "し", "hiragana"], ["30B7", "si"      , "シ", "katakana"],
    ["3058", "zi"      , "じ", "hiragana"], ["30B8", "zi"      , "ジ", "katakana"],
    ["3059", "su"      , "す", "hiragana"], ["30B9", "su"      , "ス", "katakana"],
    ["305A", "zu"      , "ず", "hiragana"], ["30BA", "zu"      , "ズ", "katakana"],
    ["305B", "se"      , "せ", "hiragana"], ["30BB", "se"      , "セ", "katakana"],
    ["305C", "ze"      , "ぜ", "hiragana"], ["30BC", "ze"      , "ゼ", "katakana"],
    ["305D", "so"      , "そ", "hiragana"], ["30BD", "so"      , "ソ", "katakana"],
    ["305E", "zo"      , "ぞ", "hiragana"], ["30BE", "zo"      , "ゾ", "katakana"],
    ["305F", "ta"      , "た", "hiragana"], ["30BF", "ta"      , "タ", "katakana"],
    ["3060", "da"      , "だ", "hiragana"], ["30C0", "da"      , "ダ", "katakana"],
    ["3061", "ti"      , "ち", "hiragana"], ["30C1", "ti"      , "チ", "katakana"],
    ["3062", "di"      , "ぢ", "hiragana"], ["30C2", "di"      , "ヂ", "katakana"],
    ["3063", "small_tu", "っ", "hiragana"], ["30C3", "small_tu", "ッ", "katakana"],
    ["3064", "tu"      , "つ", "hiragana"], ["30C4", "tu"      , "ツ", "katakana"],
    ["3065", "du"      , "づ", "hiragana"], ["30C5", "du"      , "ヅ", "katakana"],
    ["3066", "te"      , "て", "hiragana"], ["30C6", "te"      , "テ", "katakana"],
    ["3067", "de"      , "で", "hiragana"], ["30C7", "de"      , "デ", "katakana"],
    ["3068", "to"      , "と", "hiragana"], ["30C8", "to"      , "ト", "katakana"],
    ["3069", "do"      , "ど", "hiragana"], ["30C9", "do"      , "ド", "katakana"],
    ["306A", "na"      , "な", "hiragana"], ["30CA", "na"      , "ナ", "katakana"],
    ["306B", "ni"      , "に", "hiragana"], ["30CB", "ni"      , "ニ", "katakana"],
    ["306C", "nu"      , "ぬ", "hiragana"], ["30CC", "nu"      , "ヌ", "katakana"],
    ["306D", "ne"      , "ね", "hiragana"], ["30CD", "ne"      , "ネ", "katakana"],
    ["306E", "no"      , "の", "hiragana"], ["30CE", "no"      , "ノ", "katakana"],
    ["306F", "ha"      , "は", "hiragana"], ["30CF", "ha"      , "ハ", "katakana"],
    ["3070", "ba"      , "ば", "hiragana"], ["30D0", "ba"      , "バ", "katakana"],
    ["3071", "pa"      , "ぱ", "hiragana"], ["30D1", "pa"      , "パ", "katakana"],
    ["3072", "hi"      , "ひ", "hiragana"], ["30D2", "hi"      , "ヒ", "katakana"],
    ["3073", "bi"      , "び", "hiragana"], ["30D3", "bi"      , "ビ", "katakana"],
    ["3074", "pi"      , "ぴ", "hiragana"], ["30D4", "pi"      , "ピ", "katakana"],
    ["3075", "hu"      , "ふ", "hiragana"], ["30D5", "hu"      , "フ", "katakana"],
    ["3076", "bu"      , "ぶ", "hiragana"], ["30D6", "bu"      , "ブ", "katakana"],
    ["3077", "pu"      , "ぷ", "hiragana"], ["30D7", "pu"      , "プ", "katakana"],
    ["3078", "he"      , "へ", "hiragana"], ["30D8", "he"      , "ヘ", "katakana"],
    ["3079", "be"      , "べ", "hiragana"], ["30D9", "be"      , "ベ", "katakana"],
    ["307A", "pe"      , "ぺ", "hiragana"], ["30DA", "pe"      , "ペ", "katakana"],
    ["307B", "ho"      , "ほ", "hiragana"], ["30DB", "ho"      , "ホ", "katakana"],
    ["307C", "bo"      , "ぼ", "hiragana"], ["30DC", "bo"      , "ボ", "katakana"],
    ["307D", "po"      , "ぽ", "hiragana"], ["30DD", "po"      , "ポ", "katakana"],
    ["307E", "ma"      , "ま", "hiragana"], ["30DE", "ma"      , "マ", "katakana"],
    ["307F", "mi"      , "み", "hiragana"], ["30DF", "mi"      , "ミ", "katakana"],
    ["3080", "mu"      , "む", "hiragana"], ["30E0", "mu"      , "ム", "katakana"],
    ["3081", "me"      , "め", "hiragana"], ["30E1", "me"      , "メ", "katakana"],
    ["3082", "mo"      , "も", "hiragana"], ["30E2", "mo"      , "モ", "katakana"],
    ["3083", "small_ya", "ゃ", "hiragana"], ["30E3", "small_ya", "ャ", "katakana"],
    ["3084", "ya"      , "や", "hiragana"], ["30E4", "ya"      , "ヤ", "katakana"],
    ["3085", "small_yu", "ゅ", "hiragana"], ["30E5", "small_yu", "ュ", "katakana"],
    ["3086", "yu"      , "ゆ", "hiragana"], ["30E6", "yu"      , "ユ", "katakana"],
    ["3087", "small_yo", "ょ", "hiragana"], ["30E7", "small_yo", "ョ", "katakana"],
    ["3088", "yo"      , "よ", "hiragana"], ["30E8", "yo"      , "ヨ", "katakana"],
    ["3089", "ra"      , "ら", "hiragana"], ["30E9", "ra"      , "ラ", "katakana"],
    ["308A", "ri"      , "り", "hiragana"], ["30EA", "ri"      , "リ", "katakana"],
    ["308B", "ru"      , "る", "hiragana"], ["30EB", "ru"      , "ル", "katakana"],
    ["308C", "re"      , "れ", "hiragana"], ["30EC", "re"      , "レ", "katakana"],
    ["308D", "ro"      , "ろ", "hiragana"], ["30ED", "ro"      , "ロ", "katakana"],
    ["308E", "small_wa", "ゎ", "hiragana"], ["30EE", "small_wa", "ヮ", "katakana"],
    ["308F", "wa"      , "わ", "hiragana"], ["30EF", "wa"      , "ワ", "katakana"],
    ["3090", "wi"      , "ゐ", "hiragana"], ["30F0", "wi"      , "ヰ", "katakana"],
    ["3091", "we"      , "ゑ", "hiragana"], ["30F1", "we"      , "ヱ", "katakana"],
    ["3092", "wo"      , "を", "hiragana"], ["30F2", "wo"      , "ヲ", "katakana"],
    ["3093", "n"       , "ん", "hiragana"], ["30F3", "n"       , "ン", "katakana"],
    ["3094", "vu"      , "ゔ", "hiragana"], ["30F4", "vu"      , "ヴ", "katakana"],
                                            ["30F5", "small_ka", "ヵ", "katakana"],
                                            ["30F6", "small_ke", "ヶ", "katakana"],
                                            ["30F7", "va"      , "ヷ", "katakana"],
                                            ["30F8", "vi"      , "ヸ", "katakana"],
                                            ["30F9", "ve"      , "ヹ", "katakana"],
                                            ["30FA", "vo"      , "ヺ", "katakana"],
                                            ["30FB", "dot"     , "・", "katakana"],
  ];
}

&main(@ARGV);
