#!/usr/bin/python
#qtbtn.py
#Copyright 2012,2015 Elliot Wolk
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtQuick import *
from PyQt5.QtWidgets import *
from collections import deque

import glob
import os
import re
import sys
import subprocess
import signal
import tempfile
import time

signal.signal(signal.SIGINT, signal.SIG_DFL)

usage = """Usage:
  %(exec)s

  OPTIONS:
    --landscape
      align top of UI with longest screen dimenstion
        if screen width < screen height:
          rotate UI 90 degrees clockwise
        else
          do not rotate UI
    --portrait
      align top of UI with shortest screen dimenstion
        if screen width > screen height:
          rotate UI 90 degrees clockwise
        else
          do not rotate UI
""" % {"exec": sys.argv[0]}

def main():
  args = sys.argv
  args.pop(0)

  orientation=None
  while len(args) > 0 and args[0].startswith("-"):
    arg = args.pop(0)
    if arg == "--landscape":
      orientation = "landscape"
    elif arg == "--portrait":
      orientation = "portrait"
    else:
      print >> sys.stderr, usage
      sys.exit(2)

  if len(args) != 0:
    print >> sys.stderr, usage
    sys.exit(2)

  app = QApplication([])

  geometry = app.desktop().availableGeometry()
  (screenWidth, screenHeight) = (geometry.width(), geometry.height())

  screenNames = getScreenNames()

  qml = QmlGenerator(screenWidth, screenHeight, orientation, screenNames).getQml()
  fd, qmlFile = tempfile.mkstemp(prefix="qtbtn_", suffix=".qml")
  fh = open(qmlFile, 'w')
  fh.write(qml)
  fh.close()

  widget = MainWindow(qmlFile, screenNames)

  widget.showFullScreen()

  app.exec_()

def getScreenNames():
  proc = subprocess.Popen(['screen-daemon', '--list-names'],
    stdout=subprocess.PIPE)
  lines = proc.stdout.readlines()
  proc.terminate()
  screenNames = map(str.strip, lines)
  return screenNames

def getContainerWidgetId(screenName):
  screenNameId = RE.sub('-', '_', screenName)
  return "containerWidgetId_" + screenNameId

def getStatusBarWidgetId(screenName):
  screenNameId = RE.sub('-', '_', screenName)
  return "statusbarWidgetId_" + screenNameId

class QmlGenerator():
  def __init__(self, screenWidth, screenHeight, orientation, screenNames):
    self.screenNames = screenNames
    self.screenWidth = screenWidth
    self.screenHeight = screenHeight
    self.orientation = orientation

  def getQml(self):
    qml = ""
    qml += self.indent(0, self.getHeader())
    qml += self.indent(1, self.getMain())
    qml += "\n"
    for screenName in self.screenNames:
      qml += self.indent(1, self.getScreenWidget(screenName)) + "\n"
    qml += self.indent(0, self.getFooter())
    print qml
    return qml

  def indent(self, level, msg):
    lines = msg.splitlines()
    while len(lines) > 0 and len(lines[-1].strip(' ')) == 0:
      lines.pop()
    while len(lines) > 0 and len(lines[0].strip(' ')) == 0:
      lines.pop(0)
    minspaces = None
    for line in lines:
      if len(line.strip(' ')) == 0:
        continue
      spaces = len(line) - len(line.lstrip(' '))
      if minspaces == None:
        minspaces = spaces
      minspaces = min(spaces, minspaces)
    if minspaces == None:
      minspaces = 0
    newlines = []
    for line in lines:
      newlines.append('  ' * level + line[minspaces:] + "\n")
    return ''.join(newlines)

  def getMain(self):
    if self.orientation == "landscape" and self.screenWidth < self.screenHeight:
      rotationDegrees = 90
    elif self.orientation == "portrait" and self.screenWidth > self.screenHeight:
      rotationDegrees = 90
    else:
      rotationDegrees = 0

    return self.getLayout(rotationDegrees)

  def getLayout(self, rotationDegrees):
    loaders = []
    for screenName in self.screenNames:
      widgetId = getContainerWidgetId(screenName)
      loaders.append("Loader { sourceComponent: " + widgetId + " }")

    qmlRows = []
    qml = ""
    qml += "Rectangle{\n"
    qml += "  width: " + str(self.screenWidth) + "\n"
    qml += "  height: " + str(self.screenHeight) + "\n"
    qml += "  rotation: " + str(rotationDegrees) + "\n"
    qml += "  Column{\n"
    qml += "    spacing: 10\n"
    qml += "    anchors.centerIn: parent\n"
    qml +=      self.indent(2, "\n".join(loaders))
    qml += "  }\n"
    qml += "}\n"
    return qml

  def getHeader(self):
    return """
      import QtQuick 2.3

      Rectangle {
    """
  def getFooter(self):
    return """
      }
    """

  def getScreenWidget(self, screenName):
    return """
      Component{
        id: %(containerWidgetId)s
        Column {
          Row {
            Text {
              text: "%(screenName)s:"
              font.pointSize: 32
            }
            Text {
              property string statusBarWidgetId: "%(statusBarWidgetId)s"
              objectName: "statusBar"
              font.pointSize: 32
              width: 100
            }
          }
          Rectangle {
            id: btnRect
            border.width: 5
            border.color: "black"

            property variant hover: false
            property variant buttonColorDefault: "gray"
            property variant buttonColorGradient: "white"
            property variant buttonColor: buttonColorDefault
            gradient: Gradient {
              GradientStop { position: 0.0; color: btnRect.buttonColor }
              GradientStop { position: 1.0; color: btnRect.buttonColorGradient }
            }

            MouseArea {
              hoverEnabled: true
              anchors.fill: parent
              onClicked: commandRunner.runCommand("%(toggleCommand)s")
              function setColor(){
                if(this.pressed){
                  parent.buttonColor = Qt.lighter(parent.buttonColorDefault)
                }else if(this.containsMouse){
                  parent.buttonColor = Qt.darker(parent.buttonColorDefault)
                }else{
                  parent.buttonColor = parent.buttonColorDefault
                }
              }
              onEntered: setColor()
              onExited: setColor()
              onPressed: setColor()
              onReleased: setColor()
            }

            width: 100
            height: 100
          }
          Rectangle {
            height: 5
            width: 500
            color: "black"
          }
        }
      }
    """ % { "containerWidgetId": getContainerWidgetId(screenName)
          , "statusBarWidgetId": getStatusBarWidgetId(screenName)
          , "toggleCommand": "screen-daemon " + screenName + " --toggle"
          , "screenName": screenName
          }


class CommandRunner(QObject):
  def __init__(self, mainWindow, screenNames, statusBarWidgets):
    QObject.__init__(self, mainWindow)
    self.mainWindow = mainWindow
    self.screenNames = screenNames
    self.statusBarWidgets = statusBarWidgets

    self.screenNamesByStatusBarWidgetId = {}
    for screenName in screenNames:
      statusBarWidgetId = getStatusBarWidgetId(screenName)
      self.screenNamesByStatusBarWidgetId[statusBarWidgetId] = screenName

    self.statusBarTimerIntervalMillis = 1000
    self.statusBarTimer = QTimer(self)
    self.statusBarTimer.timeout.connect(self.updateStatusBars)
    self.setStatusBarTimerEnabled(True)
    self.mainWindow.activeChanged.connect(self.onMainWindowActiveChanged)
  @pyqtSlot(str)
  def runCommand(self, command):
    os.system(command)
    time.sleep(0.5)
    self.updateStatusBars()
  def onMainWindowActiveChanged(self):
    self.setStatusBarTimerEnabled(self.mainWindow.isActive())
  def setStatusBarTimerEnabled(self, enabled):
    self.statusBarTimer.stop()
    if enabled:
      self.statusBarTimer.start(self.statusBarTimerIntervalMillis)
  def updateStatusBars(self):
    if not self.mainWindow.isActive():
      return

    for statusBarWidget in self.statusBarWidgets:
      statusBarWidgetId = statusBarWidget.property("statusBarWidgetId")
      screenName = self.screenNamesByStatusBarWidgetId[statusBarWidgetId]
      cmd = "screen-daemon " + screenName + " --status"
      print "  running status bar command: " + cmd

      try:
        proc = subprocess.Popen(['sh', '-c', cmd],
          stdout=subprocess.PIPE)
        msg = proc.stdout.read()
        proc.terminate()
      except:
        msg = "ERROR"
      statusBarWidget.setProperty("text", msg.strip())

class MainWindow(QQuickView):
  def __init__(self, qmlFile, screenNames):
    super(MainWindow, self).__init__(None)
    self.setSource(QUrl(qmlFile))

    statusBarWidgets = self.rootObject().findChildren(QObject, "statusBar")
    self.commandRunner = CommandRunner(self, screenNames, statusBarWidgets)
    self.commandRunner.updateStatusBars()
    self.rootContext().setContextProperty("commandRunner", self.commandRunner)

#threadsafety: DANGEROUS AF
class RE:
  lastMatch = None

  @staticmethod
  def match(regex, s):
    RE.lastMatch = re.match(regex, s)
    return RE.lastMatch
  @staticmethod
  def sub(regex, repl, s):
    return re.sub(regex, repl, s)
  @staticmethod
  def group(num):
    return RE.lastMatch.group(num)

if __name__ == "__main__":
  sys.exit(main())
