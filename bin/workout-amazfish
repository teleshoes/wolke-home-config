#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use XML::LibXML;
use Date::Parse qw(str2time);
use Date::Format qw(time2str);
use Time::Local qw(timegm_posix);

sub readKexiDbInfoCache($);
sub writeKexiDbInfoCache($);
sub ensureWorkoutKexiDBInfo($$$);
sub grepFile($$);
sub parseTcxFile($$);
sub formatWorkout($$);
sub dtmStrToEpoch($);
sub formatDatetime($);
sub formatDur($);

my $DIR_CACHE = "$ENV{HOME}/.cache/workouts";

my $DIR_AMAZFISH_BASE = "$DIR_CACHE/backup-amazfish";
my $DIR_AMAZFISH_WORKOUTS = "$DIR_AMAZFISH_BASE/workouts";
my $DIR_DEFAULT_KEXI_DB_BAK = "$DIR_AMAZFISH_BASE/kexi-db/diffs";

my $KEXI_DB_CACHE_FILE = "$DIR_CACHE/amazfish-kexi-db.cache";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS] TCX_FILE [TCX_FILE ..]
    print info about each TCX_FILE

  $EXEC [OPTS]
    roughly the same as:
      $EXEC OPTS $DIR_AMAZFISH_WORKOUTS/*.tcx

  $EXEC [OPTS] DATE_YYYY_MM_DD
  $EXEC [OPTS] --date=DATE_YYYY_MM_DD
    -remove any dashes from DATE_YYYY_MM_DD (e.g. 1970-01-01 => 19700101)
    -roughly the same as: $EXEC OPTS $DIR_AMAZFISH_WORKOUTS/*DATE_YYYY_MM_DD*.tcx

  OPTS
    --summary
      (this is the default)
      for each TCX_FILE format info, one per line, as SUMMARY_LINE
        SUMMARY_LINE
          \"START_TIME_LOCAL | DURATION_FMT | SEGMENT_HEARTRATES | PEAK_HEARTRATE\"
        START_TIME_LOCAL
          lap start time, in local time, formatted %Y-%m-%d %H:%M:%S
        SEGMENT_HEARTRATES
          for each PERCENT = 0%, 20%, 40%, 60%, 80% and 100%:
            -select the earliest Trackpoint where the elapsed time is on or after PERCENT of total
              -if no such Trackpoint exists, use the last
            -extract the heartrate from the trackpoint, and format as 3 chars (leftpad spaces)
          join the formatted heartrates, separated by a space
        PEAK_HEARTRATE
          take the maximum heartrate that appears in any Trackpoint

    --details
      for each TCX_FILE
        -print the SUMMARY_LINE as in --summary
        -print each Trackpoint as \"  TRACKPOINT_TIME = TRACKPOINT_HEARTRATE\"
          TRACKPOINT_TIME
            trackpoint time, formatted %Y-%m-%d %H:%M:%S
          TRACKPOINT_HEARTRATE
            trackpoint heartrate

    --heartrates
      for each TCX_FILE
        -print each Trackpoint as \"TRACKPOINT_EPOCH = TRACKPOINT_HEARTRATE\"
          TRACKPOINT_EPOCH
            trackpoint time in seconds since epoch
          TRACKPOINT_HEARTRATE
            trackpoint heartrate

    --kexi-db-dir=KEXI_DB_DIR
      dir containing files with kexi DB backups, possibly compressed with gzip/bzip2/xz
        parses lines containing 'INSERT INTO sports_data'
      (default is $DIR_DEFAULT_KEXI_DB_BAK)
";

my $FORMAT_SUMMARY = "summary";
my $FORMAT_DETAILS = "details";
my $FORMAT_HEARTRATES = "heartrates";

sub main(@){
  my $kexiDbBakDir = $DIR_DEFAULT_KEXI_DB_BAK;
  my @tcxFiles;
  my $format = $FORMAT_SUMMARY;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--summary)$/){
      $format = $FORMAT_SUMMARY;
    }elsif($arg =~ /^(--details)$/){
      $format = $FORMAT_DETAILS;
    }elsif($arg =~ /^(--heartrates)$/){
      $format = $FORMAT_HEARTRATES;
    }elsif($arg =~ /^--kexi-db-dir=(.+)$/){
      $kexiDbBakDir = $1;
    }elsif($arg =~ /^(?:--date=)?(\d\d\d\d)-?(\d\d)-?(\d\d)$/){
      my $ymd = "$1$2$3";
      my @dateTcxFiles = grep {-f $_} grep {/\.tcx$/} glob "$DIR_AMAZFISH_WORKOUTS/*$ymd*";
      if(@dateTcxFiles == 0){
        die "ERROR: could not find any TCX files for date=$ymd\n";
      }
      @tcxFiles = (@tcxFiles, @dateTcxFiles);
    }elsif(-f $arg){
      push @tcxFiles, $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(@tcxFiles == 0){
    @tcxFiles = grep {-f $_} glob "$DIR_AMAZFISH_WORKOUTS/*.tcx";
  }

  my $kexiDbInfo = {
    workouts => {},
    parsedFiles => {},
  };

  readKexiDbInfoCache $kexiDbInfo;
  my $oldCacheSize = 0+keys %{$$kexiDbInfo{workouts}};

  for my $file(@tcxFiles){
    my $workoutName = $1 if $file =~ /(Treadmill-\d+-\d+)/;
    if(not defined $workoutName){
      die "ERROR: could not parse workout name in filename=$file\n";
    }
    ensureWorkoutKexiDBInfo($kexiDbInfo, $workoutName, $kexiDbBakDir);
    my $workout = parseTcxFile($file, $kexiDbInfo);
    print formatWorkout($format, $workout);
  }

  my $newCacheSize = 0+keys %{$$kexiDbInfo{workouts}};
  if($newCacheSize > $oldCacheSize){
    writeKexiDbInfoCache $kexiDbInfo;
  }
}

sub readKexiDbInfoCache($){
  my ($kexiDbInfo) = @_;
  return if not -f $KEXI_DB_CACHE_FILE;
  open my $fh, "<", $KEXI_DB_CACHE_FILE
    or die "ERROR: could not read $KEXI_DB_CACHE_FILE\n$!\n";
  my @lines = <$fh>;
  close $fh;

  for my $line(@lines){
    next if $line =~ /^\s*(#.*)$/;

    if($line =~ /^\s*(\S+)\s*,\s*(\d+)\s*,\s*(\d+)\s*$/){
      my ($workoutName, $startEpoch, $endEpoch) = ($1, $2, $3);
      $$kexiDbInfo{workouts}{$workoutName} = {
        startEpoch => $startEpoch,
        endEpoch => $endEpoch,
      };
    }else{
      die "ERROR: malformed kexi db cache line $line";
    }
  }
}
sub writeKexiDbInfoCache($){
  my ($kexiDbInfo) = @_;
  system "mkdir", "-p", $DIR_CACHE;
  open my $fh, ">", $KEXI_DB_CACHE_FILE
    or die "ERROR: could not write $KEXI_DB_CACHE_FILE\n$!\n";
  for my $workoutName(sort keys %{$$kexiDbInfo{workouts}}){
    my $info = $$kexiDbInfo{workouts}{$workoutName};
    print $fh "$workoutName,$$info{startEpoch},$$info{endEpoch}\n";
  }
  close $fh;
}

sub ensureWorkoutKexiDBInfo($$$){
  my ($kexiDbInfo, $targetWorkoutName, $kexiDbBakDir) = @_;
  return if defined $$kexiDbInfo{workouts}{$targetWorkoutName};
  my @files = grep {-f $_ and not -l $_} glob "$kexiDbBakDir/*";
  for my $file(reverse sort @files){
    next if defined $$kexiDbInfo{parsedFiles}{$file};
    $$kexiDbInfo{parsedFiles}{$file} = 1;
    my @lines = grepFile $file, "INSERT INTO sports_data";
    #CREATE TABLE [sports_data] (
    #  [id] INTEGER PRIMARY KEY,
    #  [name] Text,
    #  [version] Integer UNSIGNED,
    #  [start_timestamp] Integer UNSIGNED,
    #  [start_timestamp_dt] DateTime,
    #  [end_timestamp] Integer UNSIGNED,
    #  [end_timestamp_dt] DateTime,
    #  [kind] Integer UNSIGNED,
    #  [base_longitude] Double,
    #  [base_latitude] Double,
    #  [base_altitude] Double,
    #  [device_id] Integer UNSIGNED,
    #  [user_id] Integer UNSIGNED,
    #  [gpx] CLOB
    #);
    for my $line(@lines){
      if($line =~ /
        ^ .*
        INSERT \s+
        INTO \s+
        sports_data \s+
        VALUES \s* \( \s*
          [^,]+,
          '(Treadmill-\d+-\d+)', #workout name
          [^,]+,
          (\d+),                 #start epoch
          '[^']*',
          (\d+),                 #end epoch
          '[^']*',
          \d+,
          [^,]*,
          [^,]*,
          [^,]*,
          [^,]*,
          [^,]*,
          '.*\/(Treadmill-\d+-\d+.tcx)'
        \s* \) \s* ;
      /sxi){
        my ($workoutName, $startEpoch, $endEpoch, $tcxFile) = ($1, $2, $3, $4);
        $$kexiDbInfo{workouts}{$workoutName} = {
          startEpoch => $startEpoch,
          endEpoch   => $endEpoch,
        };
        return if defined $$kexiDbInfo{workouts}{$targetWorkoutName};
      }
    }
  }

  if(not defined $$kexiDbInfo{workouts}{$targetWorkoutName}){
    die "ERROR: could not find $targetWorkoutName in $kexiDbBakDir/*\n";
  }
}

sub grepFile($$){
  my ($file, $ptrn) = @_;
  $file =~ s/'/'\\''/g;
  $ptrn =~ s/'/'\\''/g;
  my $cmd;
  if($file =~ /\.gz$/){
    $cmd = "zgrep '$ptrn' '$file'";
  }elsif($file =~ /\.xz$/){
    $cmd = "xz -d -c '$file' | grep '$ptrn'";
  }elsif($file =~ /\.bz2$/){
    $cmd = "bzip2 -d -c '$file' | grep '$ptrn'"
  }else{
    $cmd = "grep '$ptrn' '$file'";
  }

  open my $fh, "-|", "sh", "-c", $cmd;
  my @lines = <$fh>;
  close $fh;

  return @lines;
}

sub parseTcxFile($$){
  my ($filename, $kexiDbInfo) = @_;

  my $workoutName = $1 if $filename =~ /(Treadmill-\d+-\d+)/;
  if(not defined $workoutName){
    die "ERROR: could not parse workout name in filename=$filename\n";
  }

  if(not defined $$kexiDbInfo{workouts}{$workoutName}){
    die "ERROR: missing kexi-db-info for $workoutName\n";
  }
  my $startEpoch = $$kexiDbInfo{workouts}{$workoutName}{startEpoch};
  my $endEpoch = $$kexiDbInfo{workouts}{$workoutName}{endEpoch};

  my $workout = {
    hrByEpoch     => {},
    startEpoch    => $startEpoch,
    endEpoch      => $endEpoch,
    durSeconds    => $endEpoch - $startEpoch,
    lapStartEpoch => undef,
    lapEndEpoch   => undef,
    hrPeak        => undef,
    hrSegments    => [],
  };

  my $dom = XML::LibXML->load_xml(location => $filename);
  $dom->getDocumentElement->setNamespace(
    "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2",
    "tcd");

  for my $act($dom->findnodes("/tcd:TrainingCenterDatabase/tcd:Activities/tcd:Activity")){
    for my $lap($act->findnodes("tcd:Lap")){
      if(defined $$workout{lapStartEpoch}){
        die "ERROR: mutiple Lap elements found in $filename\n";
      }
      my $lapStart = $lap->getAttribute("StartTime");
      $$workout{lapStartEpoch} = dtmStrToEpoch($lapStart);
      for my $tp($lap->findnodes("tcd:Track/tcd:Trackpoint")){
        my $t = $tp->findvalue("./tcd:Time");
        my $hr = $tp->findvalue("./tcd:HeartRateBpm/tcd:Value");
        my $epoch = dtmStrToEpoch($t);
        $$workout{hrByEpoch}{$epoch} = $hr;
        if(not defined $$workout{lapEndEpoch} or $$workout{lapEndEpoch} < $epoch){
          $$workout{lapEndEpoch} = $epoch;
        }
        if(not defined $$workout{hrPeak} or $$workout{hrPeak} < $hr){
          $$workout{hrPeak} = $hr;
        }
      }
    }
  }
  my @epochs = sort keys %{$$workout{hrByEpoch}};

  if(not defined $$workout{lapStartEpoch}){
    die "ERROR: could not parse any laps in $filename\n";
  }
  if(not defined $$workout{lapEndEpoch} or @epochs == 0){
    die "ERROR: could not parse any trackpoints in $filename\n";
  }

  my @targetPcts = qw(0 20 40 60 80 100);
  for(my $i=0; $i<@epochs; $i++){
    my $epoch = $epochs[$i];
    my $isLastEpoch = $i == $#epochs ? 1 : 0;

    my $elapsed = $epoch - $$workout{startEpoch};
    if($elapsed < 0){
      die "ERROR: lap contains trackpoint before lap start in $filename\n";
    }

    my $pct = 100.0 * ($elapsed/$$workout{durSeconds});
    while(@targetPcts > 0 and ($pct >= $targetPcts[0] || $isLastEpoch)){
      my $hr = $$workout{hrByEpoch}{$epoch};
      push @{$$workout{hrSegments}}, $hr;
      shift @targetPcts;
    }
  }

  return $workout;
}

sub formatWorkout($$){
  my ($format, $workout) = @_;

  my $durFmt = formatDur($$workout{durSeconds});
  my $dtmFmt = formatDatetime($$workout{startEpoch});
  my $hrSegFmt = join(" ", map {sprintf "%3d", $_} @{$$workout{hrSegments}});
  my $hrPeakFmt = sprintf "%3d", $$workout{hrPeak};

  my $summaryLine = "$dtmFmt | $durFmt | $hrSegFmt | $hrPeakFmt\n";
  my %hrByEpoch = %{$$workout{hrByEpoch}};

  if($format eq $FORMAT_SUMMARY){
    return $summaryLine;
  }elsif($format eq $FORMAT_DETAILS){
    my @epochs = sort keys %hrByEpoch;
    my %dateFmtByEpoch = map {$_ => formatDatetime($_)} @epochs;
    my @trackpointLines = map {"  $dateFmtByEpoch{$_} = $hrByEpoch{$_}\n"} @epochs;
    return join("", $summaryLine, @trackpointLines);
  }elsif($format eq $FORMAT_HEARTRATES){
    my @epochs = sort keys %{$$workout{hrByEpoch}};
    my @trackpointLines = map {"$_ = $hrByEpoch{$_}\n"} @epochs;
    return join("", @trackpointLines);
  }else{
    die "ERROR: unknown format $format\n";
  }
}

sub dtmStrToEpoch($){
  my ($dtm) = @_;

  my $epoch;
  if($dtm =~ /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/){
    #faster (~2x) conversion for xsd:dateTime with timezone=UTC
    $epoch = timegm_posix($6, $5, $4, $3, $2-1, $1-1900);
  }else{
    $epoch = str2time($dtm);
  }

  if(not defined $epoch or $epoch !~ /^-?\d+$/){
    die "ERROR: failed to convert $dtm to epoch\n";
  }

  return $epoch;
}

sub formatDatetime($){
  my ($epoch) = @_;
  return time2str("%Y-%m-%d %H:%M:%S", $epoch);
}

sub formatDur($){
  my ($dur) = @_;
  return ""
    . sprintf("%3d:", int($dur / 60))
    . sprintf("%02d", int($dur) % 60)
  ;
}

&main(@ARGV);
