#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use XML::LibXML;
use Date::Parse qw(str2time);
use Date::Format qw(time2str);
use Time::Local qw(timegm_posix);

sub parseTcxFile($);
sub formatWorkout($$);
sub dtmStrToEpoch($);
sub formatDatetime($);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS] TCX_FILE [TCX_FILE ..]
    print info about each TCX_FILE

  OPTS
    --summary
      format TCX_FILE info, one per line
      (this is the default)
    --details
      print detailed list of each trackpoint for each TCX_FILE
";

my $FORMAT_SUMMARY = "summary";
my $FORMAT_DETAILS= "details";

sub main(@){
  my @tcxFiles;
  my $format = $FORMAT_SUMMARY;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--summary)$/){
      $format = $FORMAT_SUMMARY;
    }elsif($arg =~ /^(--details)$/){
      $format = $FORMAT_DETAILS;
    }elsif(-f $arg){
      push @tcxFiles, $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(@tcxFiles == 0){
    die "ERROR: missing TCX_FILE\n";
  }

  for my $file(@tcxFiles){
    my $workout = parseTcxFile($file);
    print formatWorkout($format, $workout);
  }
}

sub parseTcxFile($){
  my ($filename) = @_;

  my $workout = {
    hrByEpoch  => {},
    startEpoch => undef,
    hrPeak     => undef,
  };

  my $dom = XML::LibXML->load_xml(location => $filename);
  $dom->getDocumentElement->setNamespace(
    "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2",
    "tcd");

  for my $act($dom->findnodes("/tcd:TrainingCenterDatabase/tcd:Activities/tcd:Activity")){
    for my $lap($act->findnodes("tcd:Lap")){
      if(defined $$workout{startEpoch}){
        die "ERROR: mutiple Lap elements found in $filename\n";
      }
      my $lapStart = $lap->getAttribute("StartTime");
      $$workout{startEpoch} = dtmStrToEpoch($lapStart);
      for my $tp($lap->findnodes("tcd:Track/tcd:Trackpoint")){
        my $t = $tp->findvalue("./tcd:Time");
        my $hr = $tp->findvalue("./tcd:HeartRateBpm/tcd:Value");
        my $epoch = dtmStrToEpoch($t);
        $$workout{hrByEpoch}{$epoch} = $hr;
        if(not defined $$workout{hrPeak} or $$workout{hrPeak} < $hr){
          $$workout{hrPeak} = $hr;
        }
      }
    }
  }

  return $workout;
}

sub formatWorkout($$){
  my ($format, $workout) = @_;

  my @epochs = sort keys %{$$workout{hrByEpoch}};
  my $summaryLine = formatDatetime($$workout{startEpoch}) . ": "
    . $$workout{hrByEpoch}{$epochs[0]} . " - "
    . $$workout{hrPeak} . "\n";

  if($format eq $FORMAT_SUMMARY){
    return $summaryLine;
  }elsif($format eq $FORMAT_DETAILS){
    my @trackpointLines = map {
      "  " . formatDatetime($_) . " = $$workout{hrByEpoch}{$_}\n"
    } @epochs;
    return join("", $summaryLine, @trackpointLines);
  }else{
    die "ERROR: unknown format $format\n";
  }
}

sub dtmStrToEpoch($){
  my ($dtm) = @_;

  my $epoch;
  if($dtm =~ /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/){
    #faster (~2x) conversion for xsd:dateTime with timezone=UTC
    $epoch = timegm_posix($6, $5, $4, $3, $2-1, $1-1900);
  }else{
    $epoch = str2time($dtm);
  }

  if(not defined $epoch or $epoch !~ /^-?\d+$/){
    die "ERROR: failed to convert $dtm to epoch\n";
  }

  return $epoch;
}

sub formatDatetime($){
  my ($epoch) = @_;
  return time2str("%Y-%m-%d %H:%M:%S", $epoch);
}

&main(@ARGV);
