#!/usr/bin/perl
use strict;
use warnings;

my $hostsFile = "/etc/hosts";
my $sshConfigFile = "$ENV{HOME}/.ssh/config";
my $defaultUser = "ewolk";
my $marker = "###escribe-hosts###";

sub dig($$);
sub getHosts();
sub getSSHConfig();
sub canPing($);

my $nameserver = '10.128.1.10';

my $cacertsHosts = [qw(
  ehr-01.dev.int.aws.lillegroup.com
  ehr-01.stage.int.aws.lillegroup.com
)];

my $intAws = "int.aws.lillegroup.com";

my $lookupHosts = [
  "ehr-01.dev.$intAws"       => ["ehr-01.dev", "ehr.dev", "ehr.dev.$intAws"],
  "ehr-01.stage.$intAws"     => ["ehr-01.stage", "ehr.stage", "ehr.stage.$intAws"],
  "ehr-01.prod.$intAws"      => ["ehr-01.prod", "ehr.prod", "ehr.prod.$intAws"],

  "ehr-01.testdeploy.$intAws" => ["ehr-01.testdeploy", "ehr.testdeploy", "ehr.testdeploy.$intAws"],

  "ehr-01.test.$intAws"      => ["ehr-01.test", "ehr.test", "ehr.test.$intAws"],
  "ehr-01.demo.$intAws"      => ["ehr-01.demo", "ehr.demo", "ehr.demo.$intAws"],

  "ehr.dev.escribe.com"      => [],
  "ehr.stage.escribe.com"    => [],
  "ehr.prod.escribe.com"     => [],
  "cypress.$intAws"          => ["cypress"],

  "ehr-aux-01.stage.$intAws" => ["ehr-aux-01.stage", "ehr-aux.stage"],
  "ehr-aux-01.prod.$intAws"  => ["ehr-aux-01.prod", "ehr-aux.prod"],

  "ehr-db.dev.$intAws"       => ["ehr-db.dev"],
  "ehr-db.stage.$intAws"     => ["ehr-db.stage"],
  "ehr-db.prod.$intAws"      => ["ehr-db.prod"],

  "ehr-db.test.$intAws"      => ["ehr-db.test"],
  "ehr-db.demo.$intAws"      => ["ehr-db.demo"],

  "ehr-edi-01.dev.$intAws"   => ["ehr-edi-01.dev", "ehr-edi.dev", "ehr-edi.dev.$intAws",
                                 "edi-01.dev", "edi.dev", "edi.dev.$intAws"],
  "ehr-edi-01.stage.$intAws" => ["ehr-edi-01.stage", "ehr-edi.stage", "ehr-edi.stage.$intAws",
                                 "edi-01.stage", "edi.stage", "edi.stage.$intAws"],
  "ehr-edi-01.prod.$intAws"  => ["ehr-edi-01.prod", "ehr-edi.prod", "ehr-edi.prod.$intAws",
                                 "edi-01.prod", "edi.prod", "edi.prod.$intAws"],

  "ehr-proxy.dev.$intAws"    => ["ehr-proxy.dev"],
  "passwd.$intAws"           => ["passwd"],
  "jenkins.$intAws"          => ["jenkins"],
  "systems-jenkins.$intAws"  => ["systems-jenkins"],
  "trac.$intAws"             => ["trac"],
  "trac-db.$intAws"          => ["trac-db"],
  "mvn.$intAws"              => ["mvn"],

  "mon.$intAws"              => ["mon"],
  "www-01.prod.$intAws"      => ["www-01.prod"],
  "www-02.prod.$intAws"      => ["www-02.prod"],
  "trac.escribe.com"         => ["trac"],
  "proxy.escribe.com"        => ["proxy"],
  "web.escribe.com"          => ["web"],
  "tx.escribe.com"           => ["tx"],
  "escribehost.com"          => [],
];
my $fixedHosts = [
  'dev1'                     => '172.18.10.91',
  'dev2'                     => '172.18.10.92',
  'web.escribehost.com'      => '10.1.14.20',
  'escribehost.com'          => '10.1.14.20',
];
my $sshHostIdentityFiles = {
   "www-01.prod" => "~/.ssh/lillegroup_rsa",
};

my @lookupHostNames = map {$$lookupHosts[$_]} grep {$_%2==0} (0..@$lookupHosts-1);
my %lookupHostSyns = map {$$lookupHosts[$_] => $$lookupHosts[$_+1]} grep {$_%2==0} (0..@$lookupHosts-1);
my @fixedHostNames = map {$$fixedHosts[$_]} grep {$_%2==0} (0..@$fixedHosts-1);
my %fixedHostIps = (@$fixedHosts);

my $usage = "Usage:
  $0
    -dig IPs for indicated <LOOKUP_HOST>s using DNS nameserver $nameserver
    -update /etc/hosts:
       -fetched IPs for the indicated <LOOKUP_HOST>s and <SYNONYMS>
       -hardcoded IPs for the indicated <FIXED_HOSTS>
    -update SSH config file:
       -with User $defaultUser for all <LOOKUP_HOST>s and <FIXED_HOST>s
       -with IdentityFile <IDENTIFY_FILE> for indicated <SSH_HOST>s
    -update cacerts for the indicated <CACERT_HOST>s

      LOOKUP_HOST => SYNONYMS (for DNS lookup)
        " . join("\n        ", map {"$_ => @{$lookupHostSyns{$_}}"}
                                 @lookupHostNames) . "

      FIXED_HOST => FIXED_IP (hardcoded)
        " . join("\n        ", map {"$_ => $fixedHostIps{$_}"}
                                 @fixedHostNames) . "

      SSH_HOST => IDENTITY_FILE
        " . join("\n        ", map {"$_ => $$sshHostIdentityFiles{$_}"}
                                 sort keys %$sshHostIdentityFiles) . "

      CACERT_HOST
        " . join("\n        ", @$cacertsHosts) . "
";

sub main(@){
  die "Cannot run $0 as root\n" if `whoami` eq "root\n";
  die $usage if @_ != 0;

  if(not canPing $nameserver){
    die "ERROR: cant ping nameserver $nameserver\n";
  }

  my %hostIps;
  my @hostOrder;

  my @unknownHosts;

  for(my $i=0; $i < @$lookupHosts; $i+=2){
    my $host = $$lookupHosts[$i];
    my @syns = @{$$lookupHosts[$i+1]};
    my $ip = dig $host, $nameserver;
    if(not defined $ip){
      print STDERR "WARNING: unknown server: $host\n";
      push @unknownHosts, $host;
    }
    for my $hostname($host, @syns){
      $hostIps{$hostname} = $ip;
      push @hostOrder, $hostname;
    }
  }

  for(my $i=0; $i < @$fixedHosts; $i+=2){
    my $hostname = $$fixedHosts[$i];
    my $ip = $$fixedHosts[$i+1];
    $hostIps{$hostname} = $ip;
    push @hostOrder, $hostname;
  }

  my @hostLines = getHosts();
  my @sshConfigLines = getSSHConfig();
  push @sshConfigLines, "$marker\n";
  for my $host(@hostOrder){
    my $ip = $hostIps{$host};
    push @hostLines, "$ip\t$host $marker\n";
    push @sshConfigLines, "Host $host\n";
    push @sshConfigLines, "    User $defaultUser\n";
    if(defined $$sshHostIdentityFiles{$host}){
      push @sshConfigLines, "    IdentityFile $$sshHostIdentityFiles{$host}\n";
    }
  }
  push @sshConfigLines, "$marker\n";

  print "\n\nhosts:\n";
  open FH, "| sudo tee $hostsFile" or die "Could not write to $hostsFile\n";
  print FH @hostLines;
  close FH;

  print "\n\nssh config:\n";
  open FH, "| tee $sshConfigFile" or die "Could not write to $hostsFile\n";
  print FH @sshConfigLines;
  close FH;

  for my $host(@$cacertsHosts){
    print "\n\n\nrunning: keytool-cacerts $host\n";
    system "keytool-cacerts", $host;
  }

  if(@unknownHosts > 0){
    print "\n\n\nWARNING: the following hosts were not found\n";
    print "$_\n" foreach @unknownHosts;
  }
}

sub dig($$){
  my ($host, $nameserver) = @_;
  my $section = undef;
  for my $line(`dig \@$nameserver $host`){
    if($line =~ /^;; (\w+) SECTION:$/){
      $section = $1;
    }
    if(defined $section and $section eq "ANSWER"){
      if($line =~ /(\d+\.\d+\.\d+\.\d+)/){
        return $1;
      }
    }
  }
  return undef;
}

sub getHosts(){
  open FH, "< $hostsFile" or die "Could not read $hostsFile\n";
  my @lines = <FH>;
  close FH;

  #remove lines with comment #escribe-host at the end
  for my $line(@lines){
    $line = '' if $line =~ /$marker\s*$/;
  }
  return @lines;
}

sub getSSHConfig(){
  return () if not -e $sshConfigFile;
  open FH, "< $sshConfigFile" or die "Could not read $sshConfigFile\n";
  my @lines = <FH>;
  close FH;

  my $remove = 0;
  my @okLines;
  for my $line(@lines){
    if($line =~ /^\s*$marker\s*$/){
      $remove = not $remove;
    }else{
      push @okLines, $line unless $remove;
    }
  }
  return @okLines;
}

sub canPing($){
  my ($host) = @_;
  system "ping $host -c 1 -w 1 >/dev/null 2>/dev/null";
  if($? == 0){
    return 1;
  }else{
    return 0;
  }
}

&main(@ARGV);
