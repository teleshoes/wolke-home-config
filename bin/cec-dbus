#!/usr/bin/env python

import dbus
import dbus.service
import dbus.mainloop.glib
import fcntl
import os
import re
import signal
import subprocess
import sys
import time

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

signal.signal(signal.SIGINT, signal.SIG_DFL)

DBUS_SERVICE = "org.teleshoes.cec"

usage = """Usage: %(exec)s""" % {"exec": sys.argv[0]}

def main(args):
  if len(args) > 0:
    sys.stderr.write(usage + "\n")
    sys.exit(2)

  dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

  CecDbus()

  Gtk.main()


class CecClient():
  def start(self):
    self.p = subprocess.Popen(["cec-client"],
      stdin=subprocess.PIPE,stdout=subprocess.PIPE)
    flags = fcntl.fcntl(self.p.stdout, fcntl.F_GETFL)
    fcntl.fcntl(self.p.stdout, fcntl.F_SETFL, flags | os.O_NONBLOCK)

    self.nameCmd(5)

  def read(self):
    out = ''
    while True:
      try:
        line = self.p.stdout.readline()
      except:
        break
      if len(line) > 0:
        out += line.decode("utf-8")
      else:
        break
    return out
  def write(self, cecInput):
    self.p.stdin.write(cecInput.encode('utf-8'))
    self.p.stdin.flush()

  def writeCommands(self, commands):
    first=True
    for c in commands:
      if not first:
        time.sleep(0.25)
      first=False
      self.write(c + "\n")

  def nameCmd(self, address):
    self.writeCommands(["name " + str(address)])
    print(self.read())
  def volCmd(self, cmd, address, count):
    commands = [cmd + " " + str(address) for i in range(count)]
    self.writeCommands(commands)
    print(self.read())

  def getPowerStatusCmd(self, address):
    getPowCmd = "tx 4" + str(address) + ":8f"
    self.writeCommands([getPowCmd])
    time.sleep(0.15)
    self.writeCommands([getPowCmd])
    time.sleep(0.15)
    out = self.read()
    print(out)
    lines = out.splitlines()
    lines.reverse()

    status = None
    for line in lines:
      m = re.search('[0-9a-f][0-9a-f]:90:([0-9a-f][0-9a-f])', line)
      if m:
        status = int(m.group(1), 16)
        break
    if status == None:
      return None
    elif status == 0:
      return "on"
    elif status == 1:
      return "standby"
    elif status == 2:
      #in transition from standby => on
      return None
    elif status == 3:
      #in transition from on => standby
      return None

  def getPowerStatusCmdWithPow(self, address):
    self.writeCommands(["pow " + str(address)])
    time.sleep(0.25)
    out = self.read()
    print(out)
    lines = out.splitlines()
    lines.reverse()

    status = None
    for line in lines:
      print(line)
      m = re.search('power status: (on|standby)', line)
      if m:
        status = m.group(1)
        break
    if status == None:
      return None
    else:
      return status

  def getVolumeCmd(self, address):
    self.writeCommands(["tx 4" + str(address) + ":71"])
    time.sleep(0.25)
    out = self.read()
    print(out)
    lines = out.splitlines()
    lines.reverse()

    status = None
    for line in lines:
      print(line)
      m = re.search('[0-9a-f][0-9a-f]:7a:([0-9a-f][0-9a-f])', line)
      if m:
        status = int(m.group(1), 16)
        break
    if status == None:
      return None
    else:
      return status - int(status/5) #why? who knows?


class CecDbus(dbus.service.Object):
  def __init__(self):
    self.cecClient = CecClient()
    self.cecClient.start()
    dbus.service.Object.__init__(self, self.getBusName(), '/')
  def getBusName(self):
    return dbus.service.BusName(DBUS_SERVICE, bus=dbus.SessionBus())

  @dbus.service.method(DBUS_SERVICE)
  def init(self, address):
    print("DBUS: init " + address)
    self.cecClient.nameCmd(address)
    return "initialized address " + str(address)

  @dbus.service.method(DBUS_SERVICE)
  def command(self, address, command):
    print("DBUS: command " + address + " " + command)
    self.cecClient.writeCommands([command + " " + address])
    return "ran " + command + " " + address

  @dbus.service.method(DBUS_SERVICE)
  def togglestandby(self, address):
    print("DBUS: togglestandby " + address)

    command = None
    status = self.cecClient.getPowerStatusCmd(address)
    if status == "on":
      command = "standby"
    elif status == "standby":
      command = "on"
    else:
      return "ERROR: powerstatus not 'on' or 'standby' (" + str(status) + ")"

    self.cecClient.writeCommands([command + " " + address])
    return "ran " + command + " " + address

  @dbus.service.method(DBUS_SERVICE)
  def getpowerstatus(self, address):
    print("DBUS: getpowerstatus " + address)
    status = self.cecClient.getPowerStatusCmd(address)
    return status

  @dbus.service.method(DBUS_SERVICE)
  def getvol(self, address):
    print("DBUS: getvol " + address)
    curVol = self.cecClient.getVolumeCmd(address)
    return curVol

  @dbus.service.method(DBUS_SERVICE)
  def volup(self, address, relVol):
    print("DBUS: volup " + address + " " + relVol)
    self.cecClient.volCmd("volup", address, int(relVol))
    return "vol +" + str(relVol) + " on address " + str(address)

  @dbus.service.method(DBUS_SERVICE)
  def voldown(self, address, relVol):
    print("DBUS: voldown " + address + " " + relVol)
    self.cecClient.volCmd("voldown", address, int(relVol))
    return "vol -" + str(relVol) + " on address " + str(address)

  @dbus.service.method(DBUS_SERVICE)
  def setvol(self, address, absVol):
    print("DBUS: setvol " + address + " " + absVol)
    curVol = self.cecClient.getVolumeCmd(address)
    delta = int(absVol) - curVol
    cmd = "volup"
    if delta < 0:
      delta = 0 - delta
      cmd = "voldown"
    self.cecClient.volCmd(cmd, address, delta)
    return str(curVol) + " => " + absVol + " on address " + str(address)

if __name__ == "__main__":
  args = sys.argv
  args.pop(0)
  sys.exit(main(args))
