#!/usr/bin/perl
use strict;
use warnings;

my @exts = qw(
  jpg jpeg png gif mpo
  avi m2ts mts mov mkv mpeg mpg mp4
);
my $okExts = "(?:" . (join "|", @exts) . ")";

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS] FILE [FILE FILE ...]
    rename, touch, or print info about files, using exif data, mtime, or filename
      -default action is to rename
      -default timestamp mode is to use exif for JPEG, and mtime otherwise
    FILE must end in '.' followed by one of: @exts
      (see --no-check-ext)

  OPTS
    --rename       {default}
      rename files using mv
      new name is: YYYYMMDD_HHMMSS_<FILE>
        -if FILE already starts with YYYYMMDD_HHMMSS, YYYYMMDD_HHMMSS is removed from FILE
        -if FILE is YYYYMMDD_INDEX.ext, YYYYMMDD is removed from FILE
    --touch
      use touch to set the mtime
      (uses the same method to get timestamp as --rename)
    --print
      do not perform any action, instead just print information

    --exif-mtime   {default}
      use exif for JPEG and mtime for non-JPEG to get timestamp
    --exif
      use (only) exif to get timestamp
      reads exif field 'Date and Time'
    --mtime
      use (only) mtime to get timestamp
    --filename
      use picname file name to get timestamp
      fails if file is not named in the expected format

    --quiet
      do not print 'skipping rename' or 'skipping touch' messages

    --check-ext
      fail if FILE does not end in '.' followed by one of: @exts
      (this is the default)
    -a | --no-check-ext | --allow-ext
      do NOT fail if FILE does not end in '.' followed by one of: @exts
      any ext (or no ext) is permitted
      (files ending in .jpg or .jpeg still use exif mode by default)

    --tag=TAG
      insert \"_<TAG>\" after YYYYMMDD_HHMMSS when renaming
        -TAG can contain only lowercase letters, numbers, and underscores
        -TAG is ignored if filename is already named:
          TAG.ext
          or YYYYMMDD_HHMMSS_TAG.ext
          or YYYYMMDD_HHMMSS_TAG_INDEX.ext
      e.g.:
        $0 --tag=screenshot 20150601_001.png
          mv 20150601_001.png 20150601_194358_screenshot_001.png
        $0 --tag=screenshot 20150601_194358_screenshot_001.png
          skipping rename 20150601_194358_screenshot_001.png

    -n | -s | --no-act | --simulate
      print the commands, but dont actually run 'touch' or 'mv'
      commands are prefixed by '#' to make it clear they werent run

    --shift-hours=HOURS
      add HOURS*60*60 to the timestamp, regardless of method chosen
      HOURS must be an integer (positive, negative, or zero)
      e.g.: --shift-hours=-4  subtracts 4*60*60 seconds
";

sub handleFile($$$$$$$$);
sub exifEpoch($);
sub mtimeEpoch($);
sub filenameEpoch($);
sub run(@);

my $ACTION_RENAME = "rename";
my $ACTION_TOUCH = "touch";
my $ACTION_PRINT = "print";

my $MODE_EXIF_MTIME = "exif-mtime";
my $MODE_EXIF = "exif";
my $MODE_MTIME = "mtime";
my $MODE_FILENAME = "filename";

sub main(@){
  my $action = $ACTION_RENAME;
  my $mode = $MODE_EXIF_MTIME;
  my $simulate = 0;
  my $shiftHours = 0;
  my $quiet = 0;
  my $checkExt = 1;
  my $tag = undef;
  my @files;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--rename)$/ and @_ > 0){
      $action = $ACTION_RENAME;
    }elsif($arg =~ /^(--touch)$/ and @_ > 0){
      $action = $ACTION_TOUCH;
    }elsif($arg =~ /^(--print)$/ and @_ > 0){
      $action = $ACTION_PRINT;
    }elsif($arg =~ /^(--exif-mtime)$/ and @_ > 0){
      $mode = $MODE_EXIF_MTIME;
    }elsif($arg =~ /^(--exif)$/){
      $mode = $MODE_EXIF;
    }elsif($arg =~ /^(--mtime)$/){
      $mode = $MODE_MTIME;
    }elsif($arg =~ /^(--filename)$/){
      $mode = $MODE_FILENAME;
    }elsif($arg =~ /^(--quiet)$/){
      $quiet = 1;
    }elsif($arg =~ /^(--check-ext)$/){
      $checkExt = 1;
    }elsif($arg =~ /^(-a|--no-check-ext|--allow-ext)$/){
      $checkExt = 0;
    }elsif($arg =~ /^--tag=(.+)$/){
      $tag = $1;
      die "$usage\nERROR: invalid tag $tag\n" if $tag !~ /^[a-z0-9_]+$/;
    }elsif($arg =~ /^(-n|-s|--no-act|--simulate)$/){
      $simulate = 1;
    }elsif($arg =~ /^--shift-hours=(-?\d+)$/){
      $shiftHours = $1;
    }elsif(-f $arg){
      push @files, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }
  die "$usage\nERROR: no files given\n" if @files == 0;
  my @errors;
  for my $file(@files){
    if(-f $file){
      my $isOk = handleFile $action, $mode, $shiftHours, $tag, $simulate, $quiet, $checkExt, $file;
      push @errors, $file if not $isOk;
    }
  }
  if(@errors > 0){
    my $errorsFmt = join "", map {" $_\n"} @errors;
    die "\n\nERROR HANDLING FILES:\n$errorsFmt";
  }
}

sub handleFile($$$$$$$$){
  my ($action, $mode, $shiftHours, $tag, $simulate, $quiet, $checkExt, $file) = @_;

  my ($dir, $fileName, $ext);
  $fileName = $file;

  if($fileName =~ /^(.*\/)([^\/]+)$/){
    ($dir, $fileName) = ($1, $2);
  }else{
    $dir = "";
  }
  if($fileName =~ /^(.*)(\.\w+)$/){
    ($fileName, $ext) = ($1, $2);
  }else{
    $ext = "";
  }

  if($fileName =~ /\//){
    die "ERROR: could not parse directory of file: $file\n";
  }
  if($checkExt and $ext !~ /^\.($okExts)$/i){
    die "ERROR: invalid ext for $file (use -a to allow any): @exts\n";
  }

  my $isJpeg;
  if($ext =~ /^\.(jpg|jpeg)$/i){
    $isJpeg = 1;
  }

  my $epoch;
  if($mode eq $MODE_EXIF_MTIME){
    if($isJpeg){
      $epoch = exifEpoch $file;
    }else{
      $epoch = mtimeEpoch $file;
    }
  }elsif($mode eq $MODE_EXIF){
    $epoch = exifEpoch $file;
  }elsif($mode eq $MODE_MTIME){
    $epoch = mtimeEpoch $file;
  }elsif($mode eq $MODE_FILENAME){
    $epoch = filenameEpoch $file;
  }else{
    die "unknown mode: $mode\n";
  }

  if(not defined $epoch){
    print "cannot process $file\n";
    return 0;
  }

  $epoch += $shiftHours * 60 * 60;

  my $dateFmt = `date --date \@$epoch +'%Y%m%d_%H%M%S'`;
  chomp $dateFmt;

  my ($ymd, $hms);
  if($dateFmt =~ /^(\d\d\d\d\d\d\d\d)_(\d\d\d\d\d\d)$/){
    ($ymd, $hms) = ($1, $2);
  }else{
    die "ERROR: malformed output of `date` \"$dateFmt\"\n";
  }

  my ($namePrefix, $nameSuffix);

  #extract prefix+suffix from file
  if($fileName =~ /^(VID_)(.*)$/){
    $namePrefix = $1;
    $nameSuffix = $2;
  }else{
    $namePrefix = "";
    $nameSuffix = $fileName;
  }

  if($nameSuffix =~ /^\d\d\d\d\d\d\d\d_\d\d\d\d\d\d(?:_\d+)?_(.*)/){
    my ($trimmedNameSuffix) = ($1);

    my $oldFileNameEpoch = filenameEpoch $file;
    my $diff = $epoch - $oldFileNameEpoch;
    $diff = 0-$diff if $diff < 0;
    if($diff > 60*60*24){
      print STDERR ""
        . "WARNING: old date prefix disagrees by more than a day"
        . " for $file ($oldFileNameEpoch vs $epoch)\n";
    }

    $nameSuffix = $trimmedNameSuffix;
  }


  if($nameSuffix =~ /^${ymd}_(\d+)$/){
    my $index = $1;
    #remove duplicate YYYYMMDD from files that start out named <YYYYMMDD>_<INDEX><EXT>
    #e.g.: 20181031_001.png => 20181031_153022_20181031_001.png => 20181031_153022_001.png
    $nameSuffix = "$index";
  }

  $namePrefix =~ s/^_+//;
  $namePrefix =~ s/_+$//;
  $nameSuffix =~ s/^_+//;
  $nameSuffix =~ s/_+$//;

  if(defined $tag and $nameSuffix !~ /^${tag}(_.*)?$/){
    #prepend <TAG> to file suffix, unless file suffix is already <TAG> or <TAG>_<SUFFIX>
    if(length $nameSuffix > 0){
      $nameSuffix = "${tag}_${nameSuffix}";
    }else{
      $nameSuffix = "${$tag}";
    }
  }

  $namePrefix = "${namePrefix}_" if length $namePrefix > 0;
  $nameSuffix = "_${nameSuffix}" if length $nameSuffix > 0;

  my $newFile = "${dir}${namePrefix}${dateFmt}${nameSuffix}${ext}";
  my $count = 0;
  my $countFmt = "";
  while(-f $newFile and $file ne $newFile){
    $count++;
    $countFmt = "_$count";
    $newFile = "${dir}${namePrefix}${dateFmt}${nameSuffix}${countFmt}${ext}";
  }

  if($action eq $ACTION_RENAME){
    if($file eq $newFile){
      print "skipping rename $file\n" unless $quiet;
      return 1;
    }else{
      my @mvCmd = ("mv", "--no-clobber", $file, $newFile);
      if($simulate){
        print "#@mvCmd\n";
      }else{
        run @mvCmd;
        return $? == 0 ? 1 : 0;
      }
    }
  }elsif($action eq $ACTION_TOUCH){
    my $epochMtime = mtimeEpoch $file;
    if($epoch == $epochMtime){
      print "skipping touch $file\n" unless $quiet;
    }else{
      my @touchCmd = ("touch", $file, "--date", "\@$epoch");
      if($simulate){
        print "#@touchCmd\n";
      }else{
        run @touchCmd;
        return $? == 0 ? 1 : 0;
      }
    }
  }elsif($action eq $ACTION_PRINT){
    my $epochMtime = mtimeEpoch $file;
    my $isSameFilename = $file eq $newFile;
    my $isSameMtime = $epoch == $epochMtime;
    printf "%d %s (%s) %s %s\n",
      $epoch,
      $file,
      $newFile,
      $isSameFilename ? "(same file)" : "(diff file)",
      $isSameMtime ? "(same mtime)" : "(diff mtime)",
      ;
    return 1;
  }else{
    die "unknown action: $action\n";
  }
}

sub exifEpoch($){
  my ($file) = @_;
  open EXIF, "-|", "exif", "-m", $file;
  my @lines = <EXIF>;
  close EXIF;
  die "error running exif on $file\n" if $? != 0;
  my @dates;
  for my $line(@lines){
    if($line =~ /^Date and Time[^\t]*\t(.+)$/){
      my $dt = $1;
      if($dt =~ /^(\d\d\d\d):(\d\d):(\d\d) (\d\d):(\d\d):(\d\d)$/){
        my ($y, $m, $d, $hr, $min, $sec) = ($1, $2, $3, $4, $5, $6);
        my $s = `date --date '$y-$m-$d $hr:$min:$sec' +%s`;
        chomp $s;
        if($s !~ /^\d+$/){
          print STDERR "ERROR: malformed date output $s\n";
          return undef;
        }
        push @dates, $s;
      }else{
        print STDERR "ERROR: malformed date line: $line\n";
        return undef;
      }
    }
  }
  if(@dates == 0){
    print STDERR "ERROR: no EXIF date time found for: $file\n";
    return undef;
  }
  my $date = $dates[0];
  for my $d(@dates){
    if($d != $date){
      print STDERR "WARNING: mismatched date tags for $file: $d != $date\n";
      if($d < $date){
        $date = $d;
      }
    }
  }
  return $date;
}

sub mtimeEpoch($){
  my ($file) = @_;
  my $mtimeEpoch = (stat $file)[9];
  return $mtimeEpoch;
}

sub filenameEpoch($){
  my ($file) = @_;
  my $filename = $file;
  $filename =~ s/.*\///;
  if($filename =~ /^(?:VID_)?(\d\d\d\d)(\d\d)(\d\d)_(\d\d)(\d\d)(\d\d)[_\.]/){
    my ($y, $m, $d, $hr, $min, $sec) = ($1, $2, $3, $4, $5, $6);
    my $dateFmt = "$y$m$d $hr:$min:$sec";
    my $epoch = `date +%s --date='$dateFmt'`;
    chomp $epoch;
    if($epoch =~ /^\d+$/){
      return $epoch;
    }else{
      print STDERR "ERROR: could not read datetime fmt '$dateFmt' using `date`\n";
    }
  }else{
    print STDERR "ERROR: filename must start with YYYYMMDD_HHMMSS, then . or _\n";
  }
  return undef;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
