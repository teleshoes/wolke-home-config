#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $rtViews = {
  default => "main",
  all => "main",
};

my $remoteStatusDir = "~/rt-status";
my $remoteTorrentDir = "~/rt-torrents";
my $remoteSessionDir = "~/.config/rtorrent/session/";

my $localStatusDir = "$ENV{HOME}/.cache/rt-status-cache";
my $localTorrentDir = "$ENV{HOME}/.cache/rt-torrent-cache";
my $localDownloadDir = "/media/seedbox";

my $skipSeedsRegex = "/seeds/";

my $logFile = "/tmp/rt-status-" . int(time*1000) . ".log";

my $FORMAT_DETAIL = "detail";
my $FORMAT_ONELINE = "oneline";
my $FORMAT_DEFAULT = $FORMAT_ONELINE;

my $PEERS_ALL = "ALL";
my $PEERS_HALF = "HALF";
my $PEERS_LITTLE = "LITTLE";
my $PEERS_NONE = "NONE";
my $PEERS_UNKNOWN = "UNKNOWN";
my @PEERS_BUCKET_ORDER = ($PEERS_ALL, $PEERS_HALF, $PEERS_LITTLE, $PEERS_NONE, $PEERS_UNKNOWN);

sub openLog();
sub printLog($);
sub closeLog();
sub filterTorrents($$);
sub checkTorrent($);
sub formatTimeS($);
sub formatTorrent($$);
sub parseTorrents();
sub parsePeers($);
sub parsePythonStr($);
sub run(@);

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] [TORRENT TORRENT ..]
    use `rtxmlrpc` to print download+peer status of torrents on `seedbox`

  TORRENT:
    optional torrent hash or torrent name (cannot start with '-')
    if given, skip all torrents except for the listed torrents

  OPTS:
    --all
      same as: --rtview-all --no-skip-seeds

    --rtview-default
      same as: --rtview=$$rtViews{default}
    --rtview-all
      same as: --rtview=$$rtViews{all}
    --rtview RTVIEW
      use RTVIEW in 'rtxmlrpc d.multicall'
      default is '$$rtViews{default}')

    --skip-seeds
      exclude torrents that match the regex '$skipSeedsRegex'
      (this is the default)
    --no-skip-seeds
      include torrents that match the regex '$skipSeedsRegex'
      (excluded by default)

    --check
      instead of printing status, use `check-torrent` to verify local download
      implies --quick
      download dir: `$localDownloadDir

    --quick
      skip checking peers (implied by --check)

    --detail
      print details about each torrent in multiple lines, separated with --- lines
    --oneline
      print a shorter format with less details, one line per torrent
      (this is the default)
";

sub main(@){
  my $rtView = $$rtViews{default};
  my $skipSeeds = 1;
  my $check = 0;
  my $quick = 0;
  my $format = $FORMAT_DEFAULT;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--all)$/){
      $rtView = $$rtViews{all};
      $skipSeeds = 0;
    }elsif($arg =~ /^(--rtview-default)$/){
      $rtView = $$rtViews{default};
    }elsif($arg =~ /^(--rtview-all)$/){
      $rtView = $$rtViews{all};
    }elsif($arg =~ /^(--rtview=(.+))$/){
      $rtView = $1;
    }elsif($arg =~ /^(--skip-seeds)$/){
      $skipSeeds = 1;
    }elsif($arg =~ /^(--no-skip-seeds)$/){
      $skipSeeds = 0;
    }elsif($arg =~ /^(--check)$/){
      $check = 1;
      $quick = 1;
    }elsif($arg =~ /^(--quick)$/){
      $quick = 1;
    }elsif($arg =~ /^(--detail)$/){
      $format = $FORMAT_DETAIL;
    }elsif($arg =~ /^(--oneline)$/){
      $format = $FORMAT_ONELINE;
    }else{
      die $usage;
    }
  }

  my $host = `seedbox --host`;
  chomp $host;
  die "ERROR: invalid `seedbox --host`\n" if $host !~ /\w/;

  my @torrentFilters = @_;

  my $copyTorrents = "no";
  my $fetchPeers = "yes";

  if($check){
    $copyTorrents = "yes";
  }
  if($quick){
    $fetchPeers = "no";
  }

  run "ssh", $host, "
    rm -rf $remoteStatusDir
    mkdir $remoteStatusDir

    rtxmlrpc d.multicall $rtView \\
      d.get_hash=                \\
      d.get_name=                \\
      d.get_directory=           \\
      d.get_completed_bytes=     \\
      d.get_size_bytes=          \\
      d.get_down_rate=           \\
      > $remoteStatusDir/info
    hashes=`grep -oP \"^\\[\\'[A-F0-9]{40}\" $remoteStatusDir/info | cut -c3-`
    echo found \$(echo \$hashes | wc -w) torrents

    touch $remoteStatusDir/magnet_names
    for h in \$hashes; do
      magnet_name=` \\
        grep --text -o '&dn=[^&]*' $remoteSessionDir/\$h.torrent \\
        | sed s/'^&dn='// \\
      `
      if \\[ -n \"\$magnet_name\" \\]; then
        echo \"\$h \$magnet_name\" >> $remoteStatusDir/magnet_names
      fi
    done

    if \\[ \"$copyTorrents\" == \"yes\" \\]; then
      echo copying .torrent files
      rm -rf $remoteTorrentDir
      mkdir $remoteTorrentDir
      cp -ar $remoteSessionDir/*.torrent $remoteTorrentDir
    else
      echo not copying .torrent files
    fi
    if \\[ \"$fetchPeers\" == \"yes\" \\]; then
      echo fetching peers
      for h in \$hashes; do
        echo \"  \$h\"
        rtxmlrpc p.multicall \$h '' \\
          p.get_completed_percent=  \\
          p.get_down_rate=          \\
          p.get_down_total=         \\
          > $remoteStatusDir/peers-\$h
      done
    else
      echo not fetching peers
    fi

    echo -ne \"finished\\n\\n\"
  ";

  run "mkdir", "-p", $localStatusDir;
  run "rsync", "-avP", "--del", "$host:$remoteStatusDir/", $localStatusDir;

  if($copyTorrents eq "yes"){
    run "mkdir", "-p", $localStatusDir;
    run "rsync", "-avP", "--del", "$host:$remoteTorrentDir/", $localTorrentDir;
  }

  openLog();

  my @torrents = parseTorrents();

  my @okTorrents = @torrents;
  @okTorrents = grep {$$_{dir} !~ /$skipSeedsRegex/} @okTorrents if $skipSeeds;

  if(@torrentFilters > 0){
    @okTorrents = filterTorrents [@torrentFilters], [@okTorrents];
  }

  printLog "\n\n\nshowing " . (0+@okTorrents) . " torrents\n";
  if($check){
    die "missing download dir: $localDownloadDir\n" if not -d $localDownloadDir;
    $ENV{PWD} = $localDownloadDir;
    chdir $localDownloadDir;
    my @verified;
    my @corrupted;

    for my $t(@okTorrents){
      my $verified = checkTorrent $t;
      if($verified){
        push @verified, $t;
      }else{
        push @corrupted, $t;
      }
    }
    printLog "\n\n" . (0+@corrupted) . " corrupted torrents\n";
    @verified = sort {$$a{name} cmp $$b{name}} @verified;
    @corrupted = sort {$$a{name} cmp $$b{name}} @corrupted;
    for my $t(@verified){
      printLog "VERIFIED: $$t{name} ($$t{localDownloadSize})\n";
    }
    printLog "\n\n";
    for my $t(@corrupted){
      printLog "CORRUPTED: $$t{name} ($$t{localDownloadSize})\n";
    }
  }else{
    @okTorrents = sort {
      $$b{percent} <=> $$a{percent} || $$a{name} cmp $$b{name}
    } @okTorrents;
    for my $t(@okTorrents){
      printLog formatTorrent $t, $format;
    }
  }

  closeLog;
}

sub openLog(){
  print STDOUT "\nstart logging to: $logFile\n";
  open LOG, "> $logFile" or die "Could not log to $logFile\n$!\n";
}
sub printLog($){
  print STDOUT $_[0];
  print LOG $_[0];
}
sub closeLog(){
  print STDOUT "\nstop logging to: $logFile\n";
  close LOG;
}

sub filterTorrents($$){
  my @filters = @{$_[0]};
  my @torrents = @{$_[1]};

  #verify each filter hits at least one torrent
  for my $filter(@filters){
    my $found = 0;
    for my $t(@torrents){
      if(lc $$t{name} eq lc $filter or lc $$t{hash} eq lc $filter){
        $found = 1;
        last;
      }
    }
    die "unknown torrent hash or torrent name: $filter\n" if not $found;
  }

  #filter torrent list
  my @filteredTorrents;
  my @skippedTorrents;
  for my $t(@torrents){
    my $found = 0;
    for my $filter(@filters){
      if(lc $$t{name} eq lc $filter or lc $$t{hash} eq lc $filter){
        $found = 1;
        last;
      }
    }
    if($found){
      push @filteredTorrents, $t;
    }else{
      push @skippedTorrents, $t;
    }
  }

  #print skipped/checking
  printLog "="x30 . "\n" . "SKIPPING " . (0+@skippedTorrents) . " TORRENTS:\n";
  for my $t (@skippedTorrents){
    printLog "$$t{hash}\n  $$t{name}\n";
  }

  printLog "="x30 . "\n" . "HANDLING " . (0+@filteredTorrents) . " TORRENTS:\n";
  for my $t (@filteredTorrents){
    printLog "$$t{hash}\n  $$t{name}\n";
  }

  return @filteredTorrents;
}

sub checkTorrent($){
  my $t = shift;
  printLog "="x30 . "\n" . "checking $$t{name}\n$$t{hash}\n";
  my $torrentFile = "$localTorrentDir/$$t{hash}.torrent";
  if(not -f $torrentFile){
    die "MISSING TORRENT FILE for $$t{name}:\n$torrentFile\n"
  }
  my $file = "$localDownloadDir/$$t{name}";
  my $size = "size unknown";
  if(-e $file){
    open CMD, "-|", "du", "-hs", $file or die "Could not run du -hs on $file\n";
    $size = <CMD>;
    close CMD;
    if($size =~ /^(\d+(?:\.\d+)?[A-Z]+)\s*/){
      $size = $1;
    }
  }else{
    printLog "\n\n$file does not exist\n";
  }
  $$t{localDownloadSize} = $size;

  open CMD, "-|", "check-torrent", $torrentFile
    or die "Could not run check-torrent\n";
  my $line;
  my $verified = 0;
  while($line = <CMD>){
    printLog $line;
    if($line =~ /^VERIFIED$/){
      $verified = 1;
    }
  }
  close CMD;
  if($? != 0){
    $verified = 0;
  }
  return $verified;
}

sub formatTimeS($){
  my $sex = shift;
  my $d = int($sex / 60 / 60 / 24);
  my $h = int($sex / 60 / 60) % 24;
  my $m = int($sex / 60) % 60;
  my $s = int($sex) % 60;
  $d = $d > 0 ? sprintf "%02dd", $d : "";
  $h = $h > 0 ? sprintf "%02dh", $h : "";
  $m = $m > 0 ? sprintf "%02dm", $m : "";
  $s = $s > 0 ? sprintf "%02ds", $s : "";
  return sprintf "%12s", "$d$h$m$s";
}

sub formatTorrent($$){
  my ($t, $format) = @_;
  my @peerCountsFmt;
  if(defined $$t{peerCounts}){
    for my $bucket(@PEERS_BUCKET_ORDER){
      my $bucketCount = $$t{peerCounts}{$bucket};
      if(defined $bucketCount){
        push @peerCountsFmt, "$bucket=$bucketCount";
      }
    }
  }
  my $peersWithAllOnlyFmt = "ALL=??";
  if(defined $$t{peerCounts}){
    my $allCount = $$t{peerCounts}{$PEERS_ALL};
    $allCount = 0 if not defined $allCount;
    $peersWithAllOnlyFmt = sprintf "ALL=%02d", $allCount;
  }

  my $name = $$t{name};
  if($name =~ /$$t{hash}/ and defined $$t{magnetName}){
    $name = "magnet: $$t{magnetName}";
  }
  my $percent = int($$t{percent});
  my $completedMiB = $$t{completedBytes} / 1024 / 1024;
  my $sizeMiB = $$t{sizeBytes} / 1024 / 1024;
  my $sizeGiB = $$t{sizeBytes} / 1024 / 1024 / 1024;
  my $downRateMiBs = $$t{downRate} / 1024 / 1024;
  my $etaS = $downRateMiBs == 0 ? 0 : ($sizeMiB-$completedMiB)/$downRateMiBs;
  my $etaFormat = formatTimeS $etaS;

  if($format eq $FORMAT_DETAIL){
    return sprintf "%s\n%3d%% %s\n     %9.3fMiB / %9.3fMiB  @ %9.3fMiB/s    ETA: %s\n  PEERS: %s\n",
      "-" x 30,
      $percent,
      $name,
      $completedMiB,
      $sizeMiB,
      $downRateMiBs,
      $etaFormat,
      "@peerCountsFmt",
    ;
  }elsif($format eq $FORMAT_ONELINE){
    return sprintf "%3d%% %5.1fGiB %5.1fMiB/s %s ETA: %s %s\n",
      $percent,
      $sizeGiB,
      $downRateMiBs,
      $peersWithAllOnlyFmt,
      $etaFormat,
      $name,
    ;
  }else{
    die "ERROR: unknown format: $format\n";
  }
}

sub parseTorrents(){
  my $infoFile = "$localStatusDir/info";
  my $magnetNamesFile = "$localStatusDir/magnet_names";
  die "'$infoFile' does not exist\n" if not -f $infoFile;
  die "'$magnetNamesFile' does not exist\n" if not -f $magnetNamesFile;

  my %magnetNames;
  for my $line(`cat "$magnetNamesFile"`){
    if($line =~ /^([0-9A-F]{40})\s*(.+)$/){
      $magnetNames{lc $1} = $2;
    }else{
      die "invalid magnet name line: $line";
    }
  }

  my $info = `cat "$infoFile"`;
  my @torrents;
  while($info =~ /
    ^\[ '([0-9A-F]{40})',\n
    ^\s (.*),\n
    ^\s (.*),\n
    ^\s (\d+),\n
    ^\s (\d+),\n
    ^\s (\d+)\]\n
    /mgx){
    my $t = {
      hash => $1,
      name => $2,
      dir  => $3,
      completedBytes => $4,
      sizeBytes => $5,
      downRate => $6,
      percent => sprintf("%5.2f", 100 * $4/$5),
      magnetName => $magnetNames{lc $1},
    };
    $$t{name} = parsePythonStr $$t{name};
    $$t{dir} = parsePythonStr $$t{dir};
    push @torrents, $t;
  }

  for my $t(@torrents){
    my $peersFile = "$localStatusDir/peers-$$t{hash}";
    if(-f $peersFile){
      my $peersInfo = `cat "$localStatusDir/peers-$$t{hash}"`;
      $$t{peerCounts} = parsePeers $peersInfo;
    }
  }

  return @torrents;
}

sub parsePeers($){
  my $peersInfo = shift;

  my $peerCounts = {};
  for my $peer(split /\n/, $peersInfo){
    if($peer =~ /^\[(\d+), (\d+), (\d+)\]$/){
      my ($percent, $downRate, $downTotal) = ($1, $2, $3);
      my $bucket;
      if($percent == 100){
        $bucket = $PEERS_ALL;
      }elsif($percent >= 50){
        $bucket = $PEERS_HALF;
      }elsif($percent > 0){
        $bucket = $PEERS_LITTLE;
      }elsif($percent == 0){
        $bucket = $PEERS_NONE;
      }else{
        $bucket = $PEERS_UNKNOWN;
      }
      my $cur = defined $$peerCounts{$bucket} ? $$peerCounts{$bucket} : 0;
      $$peerCounts{$bucket} = $cur + 1;
    }
  }
  return $peerCounts;
}

sub parsePythonStr($){
  my $s = shift;
  $s =~ s/^[ub]?'(.*)'$/$1/;
  $s =~ s/^[ub]?"(.*)"$/$1/;
  return $s;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
