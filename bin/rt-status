#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $DEFAULT_RT_VIEW = "main";

my $RTORRENT_SESSION_DIR = "~/.config/rtorrent/session/";

my $SKIP_SEEDS_REGEX = "/seeds/";

my $FORMAT_DETAIL = "detail";
my $FORMAT_ONELINE = "oneline";
my $FORMAT_DEFAULT = $FORMAT_ONELINE;

my $PEERS_ALL = "ALL";
my $PEERS_HALF = "HALF";
my $PEERS_LITTLE = "LITTLE";
my $PEERS_NONE = "NONE";
my $PEERS_UNKNOWN = "UNKNOWN";
my @PEERS_BUCKET_ORDER = ($PEERS_ALL, $PEERS_HALF, $PEERS_LITTLE, $PEERS_NONE, $PEERS_UNKNOWN);

sub filterTorrents($@);
sub formatTimeS($);
sub formatTorrent($$);
sub getTorrents($$$$);
sub parsePeers($);
sub parsePythonStr($);
sub run(@);

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] [FILTER_REGEX]
    use `rtxmlrpc` to print download+peer status of torrents in local rtorrent

  FILTER_REGEX:
    optional regex to match against torrent name, magnet name, or hash
      (case insensitive)
    if given, skip all torrents except for the matching torrents

  OPTS:
    --rtview RTVIEW
      use RTVIEW in 'rtxmlrpc d.multicall'
      default is '$DEFAULT_RT_VIEW'

    --skip-seeds
      exclude torrents that match the regex '$SKIP_SEEDS_REGEX'
      (this is the default)
    --no-skip-seeds
      include torrents that match the regex '$SKIP_SEEDS_REGEX'

    --quick | --no-fetch-peers
      skip checking peers
    --fetch-peers
      check peers and include peer info in summary
      (this is the default)

    --detail
      print details about each torrent in multiple lines, separated with --- lines
    --oneline
      print a shorter format with less details, one line per torrent
      (this is the default)
";

sub main(@){
  my $rtView = $DEFAULT_RT_VIEW;
  my $skipSeeds = 1;
  my $fetchPeers = 1;
  my $format = $FORMAT_DEFAULT;
  my $filterRegex = undef;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--rtview=(.+))$/){
      $rtView = $1;
    }elsif($arg =~ /^(--skip-seeds)$/){
      $skipSeeds = 1;
    }elsif($arg =~ /^(--no-skip-seeds)$/){
      $skipSeeds = 0;
    }elsif($arg =~ /^(--fetch-peers)$/){
      $fetchPeers = 1;
    }elsif($arg =~ /^(--quick|--no-fetch-peers)$/){
      $fetchPeers = 0;
    }elsif($arg =~ /^(--detail)$/){
      $format = $FORMAT_DETAIL;
    }elsif($arg =~ /^(--oneline)$/){
      $format = $FORMAT_ONELINE;
    }elsif(not defined $filterRegex){
      $filterRegex = $arg;
    }else{
      die $usage;
    }
  }

  my $host = "";

  my @torrents = getTorrents($rtView, $skipSeeds, $fetchPeers, $filterRegex);

  print "showing " . (0+@torrents) . " torrents\n";
  @torrents = sort {
    $$b{percent} <=> $$a{percent} || $$a{name} cmp $$b{name}
  } @torrents;
  for my $t(@torrents){
    print formatTorrent $t, $format;
  }
}

sub filterTorrents($@){
  my ($filterRegex, @torrents) = @_;

  my @okTorrents;
  for my $t(@torrents){
    my $match;
    if($$t{name} =~ /$filterRegex/i){
      $match = 1;
    }elsif(defined $$t{magnetName} and $$t{magnetName} =~ /$filterRegex/i){
      $match = 1;
    }elsif($$t{hash} =~ /$filterRegex/i){
      $match = 1;
    }else{
      $match = 0;
    }
    push @okTorrents, $t if $match;
  }

  return @okTorrents;
}

sub formatTimeS($){
  my $sex = shift;
  my $d = int($sex / 60 / 60 / 24);
  my $h = int($sex / 60 / 60) % 24;
  my $m = int($sex / 60) % 60;
  my $s = int($sex) % 60;
  $d = $d > 0 ? sprintf "%02dd", $d : "";
  $h = $h > 0 ? sprintf "%02dh", $h : "";
  $m = $m > 0 ? sprintf "%02dm", $m : "";
  $s = $s > 0 ? sprintf "%02ds", $s : "";
  return sprintf "%12s", "$d$h$m$s";
}

sub formatTorrent($$){
  my ($t, $format) = @_;
  my @peerCountsFmt;
  if(defined $$t{peerCounts}){
    for my $bucket(@PEERS_BUCKET_ORDER){
      my $bucketCount = $$t{peerCounts}{$bucket};
      if(defined $bucketCount){
        push @peerCountsFmt, "$bucket=$bucketCount";
      }
    }
  }
  my $peersWithAllOnlyFmt = "ALL=??";
  if(defined $$t{peerCounts}){
    my $allCount = $$t{peerCounts}{$PEERS_ALL};
    $allCount = 0 if not defined $allCount;
    $peersWithAllOnlyFmt = sprintf "ALL=%02d", $allCount;
  }

  my $name = $$t{name};
  if($name =~ /$$t{hash}/ and defined $$t{magnetName}){
    $name = "magnet: $$t{magnetName}";
  }
  my $percent = int($$t{percent});
  my $completedMiB = $$t{completedBytes} / 1024 / 1024;
  my $sizeMiB = $$t{sizeBytes} / 1024 / 1024;
  my $sizeGiB = $$t{sizeBytes} / 1024 / 1024 / 1024;
  my $downRateMiBs = $$t{downRate} / 1024 / 1024;
  my $etaS = $downRateMiBs == 0 ? 0 : ($sizeMiB-$completedMiB)/$downRateMiBs;
  my $etaFormat = formatTimeS $etaS;

  if($format eq $FORMAT_DETAIL){
    return sprintf "%s\n%3d%% %s\n     %9.3fMiB / %9.3fMiB  @ %9.3fMiB/s    ETA: %s\n  PEERS: %s\n",
      "-" x 30,
      $percent,
      $name,
      $completedMiB,
      $sizeMiB,
      $downRateMiBs,
      $etaFormat,
      "@peerCountsFmt",
    ;
  }elsif($format eq $FORMAT_ONELINE){
    return sprintf "%3d%% %5.1fGiB %5.1fMiB/s %s ETA: %s %s\n",
      $percent,
      $sizeGiB,
      $downRateMiBs,
      $peersWithAllOnlyFmt,
      $etaFormat,
      $name,
    ;
  }else{
    die "ERROR: unknown format: $format\n";
  }
}

sub getTorrents($$$$){
  my ($rtView, $skipSeeds, $fetchPeers, $torrentRegex) = @_;

  my @infoCmd = ("rtxmlrpc", "d.multicall", $rtView,
     "d.get_hash=",
     "d.get_name=",
     "d.get_directory=",
     "d.get_completed_bytes=",
     "d.get_size_bytes=",
     "d.get_down_rate=",
  );
  my $info = `@infoCmd`;

  my @torrents;
  while($info =~ /
    ^\[ '([0-9A-F]{40})',\n
    ^\s (.*),\n
    ^\s (.*),\n
    ^\s (\d+),\n
    ^\s (\d+),\n
    ^\s (\d+)\]\n
    /mgx){
    my $t = {
      hash => $1,
      name => $2,
      dir  => $3,
      completedBytes => $4,
      sizeBytes => $5,
      downRate => $6,
      percent => sprintf("%5.2f", 100 * $4/$5),
    };
    $$t{name} = parsePythonStr $$t{name};
    $$t{dir} = parsePythonStr $$t{dir};
    push @torrents, $t;
  }

  @torrents = grep {$$_{dir} !~ /$SKIP_SEEDS_REGEX/} @torrents if $skipSeeds;

  if(defined $torrentRegex){
    @torrents = filterTorrents $torrentRegex, @torrents;
  }

  for my $torrent(@torrents){
    my $h = $$torrent{hash};
    my $magnetName = `grep --text -o '&dn=[^&]*' $RTORRENT_SESSION_DIR/$h.torrent`;
    $magnetName =~ s/^&dn=//;
    $$torrent{magnetName} = $magnetName;
  }

  if($fetchPeers){
    for my $torrent(@torrents){
      my $h = $$torrent{hash};
      my @peersCmd = ("rtxmlrpc", "p.multicall", $h, '""',
        "p.get_completed_percent=",
        "p.get_down_rate=",
        "p.get_down_total=",
      );
      my $peersInfo = `@peersCmd`;

      $$torrent{peerCounts} = parsePeers $peersInfo;
    }
  }

  return @torrents;
}

sub parsePeers($){
  my ($peersInfo) = @_;

  my $peerCounts = {};
  for my $peer(split /\n/, $peersInfo){
    if($peer =~ /^\[(\d+), (\d+), (\d+)\]$/){
      my ($percent, $downRate, $downTotal) = ($1, $2, $3);
      my $bucket;
      if($percent == 100){
        $bucket = $PEERS_ALL;
      }elsif($percent >= 50){
        $bucket = $PEERS_HALF;
      }elsif($percent > 0){
        $bucket = $PEERS_LITTLE;
      }elsif($percent == 0){
        $bucket = $PEERS_NONE;
      }else{
        $bucket = $PEERS_UNKNOWN;
      }
      my $cur = defined $$peerCounts{$bucket} ? $$peerCounts{$bucket} : 0;
      $$peerCounts{$bucket} = $cur + 1;
    }
  }
  return $peerCounts;
}

sub parsePythonStr($){
  my $s = shift;
  $s =~ s/^[ub]?'(.*)'$/$1/;
  $s =~ s/^[ub]?"(.*)"$/$1/;
  return $s;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
