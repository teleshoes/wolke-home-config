#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);
use Date::Format qw(time2str);
use Date::Parse qw(str2time);
use File::Basename qw(basename dirname);
use Time::HiRes qw(stat time);

sub findDirFiles($);
sub dedupeArr(@);
sub filenameTime($);
sub mtimeMillis($);
sub nowMillis();
sub run(@);

my @EXTS_VIDEO = qw(
  avi flv m2ts mkv mov mp4 mpv mpeg mpg mts webm wmv
);
my $REGEX_EXTS_VIDEO = join "|", @EXTS_VIDEO;

my $EXEC = basename $0;

my $MAX_MTIME_FILENAME_DIFFERENCE_SECONDS = 60;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] PATH [PATH PATH ..]
    same as: $EXEC --move OPTS PATH PATH PATH...

  $EXEC --list-files [OPTS] PATH [PATH PATH ..]
    -extract list of <FILE>s from each <PATH>
      -if <PATH> is a file, include as <FILE_ARG>
      -if <PATH> is a directory:
        -*recursively* find all files in this dir and any dirs contained
        -include each file as <FILE_ARG>
      -extract full, absolute paths of each <FILE_ARG> as <FILE>
      -de-duplicate <FILE> list so that each <FILE> appears at most once
    -for each <FILE>:
      -obtain <MTIME> in seconds since UNIX epoch (in UTC)
      -obtain <FILENAME_TIME> in seconds since UNIX epoch (in UTC)
        -ensure that file basename contains a valid <FILENAME_TIMESTAMP_STRING>
          -format is YYYYMMDD_HHMMSS, with optional hyphens between fields
            -e.g.: 20180621_142153 or 2018-06-21_14-21-53
          -if any filename does not contain a timestamp string:
            -fail immediately
        -treat <FILENAME_TIMESTAMP_STRING> as a timestamp in the current system timezone
        -convert to seconds since epoch in UTC with Date::Parse->str2time
          -e.g.: 1969-12-31_19-00-05 in America/New_York => 5
    -for each <FILE>:
      -print info, formatted:
        <FILE> : <MTIME> : <FILENAME_TIME>

  $EXEC -m | --move | --day | --days [OPTS] PATH [PATH PATH ..]
    -extract <FILE> + <MTIME> + <FILENAME_TIME> from <PATH>s as in `$EXEC --list-files`
    -for each <FILE>, validate mtime vs filename:
      -ensure that <MTIME> is within ${MAX_MTIME_FILENAME_DIFFERENCE_SECONDS}s of <FILENAME_TIME>
        -if not, fail with an error for that <FILE>
    -for each <FILE>, calculate <DAY_BUCKET> from <MTIME>:
      -use the system timezone, and treat times before 5:00am as the previous day
        -calculate <TARGET_TIME> as <MTIME> minus five hours
        -convert <TARGET_TIME> to a string in the system time zone with Date::Format->time2str
        -format <DAY_BUCKET> as YYYY-MM-DD
          -e.g.: '2019-02-06T03:04:08-05:00'   =>  '2019-02-05'
    -calculate the <COMMON_PARENT_DIR>
      -take the longest common prefix of each <FILE> that ends in '/'
      -remove the trailing '/'
    -calculate <LOG_FILE> as './$EXEC-<CURRENT_TIME_MILLIS>.log'
    -for each <FILE>, create <BUCKET_DIR>s in <COMMON_PARENT_DIR> if they do not exist:
      -calculate <BUCKET_DIR> as '<COMMON_PARENT_DIR>/<DAY_BUCKET>'
      -create <BUCKET_DIR> if it does not exist (unless --simulate is given)
        -run: `mkdir -p <BUCKET_DIR>`
    -for each <FILE>, move to <COMMON_PARENT_DIR>/<DAY_BUCKET>:
      -extract <BASE_FILENAME> from <FILE> with `basename`
      -move <FILE> to <BUCKET_DIR> (unless --simulate is given)
        -run: `mv --no-clobber <FILE> <BUCKET_DIR>/<BASE_FILENAME>`
        -write to <LOG_FILE>:
          <FILE> ::: <NEW_FILE_PATH>

  $EXEC -p | --prefix [OPTS] PATH [PATH PATH ..]
    -extract <FILE> + <MTIME> + <FILENAME_TIME> from <PATH>s as in `$EXEC --list-files`
    -for each <FILE>:
      -extract <BASE_FILENAME> from <FILE> with `basename`
      -calculate <NEW_FILE>:
        -remove 'IMG_' prefix from <BASE_FILENAME> if present
        -ensure 'VID_' prefix from <BASE_FILENAME> if file ends in extension:
          @EXTS_VIDEO
      -fail if <NEW_FILE> exists unless if it is the same as <FILE>
    -for each <FILE> (unless --simulate is given):
      -rename <FILE> with:
        -`mv --no-clobber <FILE> <NEW_FILE>`

  $EXEC -f | --fix [OPTS] PATH [PATH PATH ..]
    -extract <FILE> + <MTIME> + <FILENAME_TIME> from <PATH>s as in `$EXEC --list-files`
    -for each <FILE>:
      -obtain <MTIME_MILLIS> in milliseconds since epoch
      -ensure that <MTIME> is within one minute of <FILENAME_TIME>
        -if not, fail with an error for that <FILE>
      -store <FILENAME_TIME> as <ORIG_FILENAME_TIME>, as the name in the actual file
      -store <FILENAME_TIME> as <NEW_FILENAME_TIME>, to update for duplicates
    -sort the <FILE>s by increasing mtime into <SORTED_FILE_LIST>
      -use the following criteria, in order:
        -<MTIME_MILLIS>, oldest first
        -file basename length, shortest first
        -lexicographically by file basename, ascending
        -lexicographically by full <FILE> name, ascending
    -ensure that <ORIG_FILENAME_TIME> increases monotonically with <MTIME>
      -check each successive <FILE> in <SORTED_FILE_LIST>
        -FAIL if <ORIG_FILENAME_TIME> is less than the previous
    -for each <FILE> in <SORTED_FILE_LIST> (in increasing order of <ORIG_FILENAME_TIME>):
      -collect <FILE_LIST> of <FILE>s with this same <NEW_FILENAME_TIME>
      -assign an <INDEX>, starting with 0, to each <FILE> in the <SORTED_FILE_LIST>
      -for each <FILE> in the <SORTED_FILE_LIST>:
        -increment <NEW_FILENAME_TIME> by the <INDEX> of this <FILE>
          -i.e.: add 0 to the first file (first file is always unchanged),
                 add 1 to the second file,
                 add 2 to the third file,
                 etc.
        -add this new <NEW_FILENAME_TIME> to the list considered, if not present
    -ensure that <NEW_FILENAME_TIME> is UNIQUE, and increases monotonically with <MTIME>
      -check each successive <FILE> in <SORTED_FILE_LIST>
        -FAIL if <NEW_FILENAME_TIME> is less than or EQUAL TO the previous
    -for each <FILE>:
      -extract <NEW_FILENAME_YMD> and <NEW_FILENAME_HMS> from <NEW_FILENAME_TIME>
      -extract <ORIG_FILENAME_YMD> and <ORIG_FILENAME_HMS> from <ORIG_FILENAME_TIME>
      -ensure that <NEW_FILENAME_YMD> is the same as <ORIG_FILENAME_YMD>
      -ensure that <NEW_FILENAME_TIME> is within 10 seconds of <ORIG_FILENAME_TIME>
    -for each <FILE>:
      -if <NEW_FILENAME_TIME> is not the same as <ORIGINAL_MODIFIED_TIME>:
        -calculate <NEW_FILE>:
          -remove ' (#)' following <ORIG_FILENAME_HMS>, if present
            -space character, followed by '(', followed by digits, followed by ')'
          -replace <ORIG_FILENAME_HMS> with '<NEW_FILENAME_HMS>_<ORIG_FILENAME_HMS>'
    e.g.:
      20181129_185500.jpg       =>  20181129_185500.jpg
      20181129_185500 (1).jpg   =>  20181129_185501_185500.jpg
      20181129_185500 (2).jpg   =>  20181129_185502_185500.jpg
      20181129_185500 (3).jpg   =>  20181129_185503_185500.jpg
      20181129_185500 (4).jpg   =>  20181129_185504_185500.jpg
      20181129_185501.jpg       =>  20181129_185505_185501.jpg
      20181129_185501 (2).jpg   =>  20181129_185506_185501.jpg
      20181129_185501 (3).jpg   =>  20181129_185507_185501.jpg
      20181129_185501 (4).jpg   =>  20181129_185508_185501.jpg
      20181129_185501 (5).jpg   =>  20181129_185509_185501.jpg
      20181129_185502.jpg       =>  20181129_185510_185502.jpg
      20181129_185503.jpg       =>  20181129_185511_185503.jpg
      20181129_185504.jpg       =>  20181129_185512_185504.jpg
      20181129_185505.jpg       =>  20181129_185513_185505.jpg

  OPTS
    -s | -n | --simulate | --no-act | --dry-run
      -never run any 'mv' commands
      -print 'mv' commands prefixed with '#'
      -do not create any dirs
      -do not write to <LOG_FILE>
";

my $MODE_LIST_FILES = "list-files";
my $MODE_MOVE_DAY_BUCKETS = "move-day-buckets";
my $MODE_PREFIX = "prefix";
my $MODE_UNIQUE_TIMESTAMPS = "unique-timestamps";

sub main(@){
  my @files;
  my $mode = $MODE_MOVE_DAY_BUCKETS;
  my $opts = {
    simulate => 0,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--list-files)$/){
      $mode = $MODE_LIST_FILES;
    }elsif($arg =~ /^(-m|--move|--day|--days)$/){
      $mode = $MODE_MOVE_DAY_BUCKETS;
    }elsif($arg =~ /^(-p|--prefix)$/){
      $mode = $MODE_PREFIX;
    }elsif($arg =~ /^(-f|--fix)$/){
      $mode = $MODE_UNIQUE_TIMESTAMPS;
    }elsif($arg =~ /^(-s|-n|--simulate|--no-act|--dry-run)$/){
      $$opts{simulate} = 1;
    }elsif(-f $arg){
      push @files, $arg;
    }elsif(-d $arg){
      @files = (@files, findDirFiles($arg));
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  @files = map {abs_path $_} @files;
  @files = dedupeArr(@files);

  if($mode eq $MODE_LIST_FILES){
    for my $file(@files){
      my $filenameTime = filenameTime($file);
      my $mtime = int(mtimeMillis($file) / 1000.0);
      if(defined $filenameTime){
        print "$file : $filenameTime : $mtime\n";
      }else{
        die "ERROR: '$file' does not contain YYYYmmdd_HHMMSS timestamp\n";
      }
    }
  }elsif($mode eq $MODE_MOVE_DAY_BUCKETS){
    moveDayBuckets($opts, @files);
  }elsif($mode eq $MODE_PREFIX){
    prefixFiles($opts, @files);
  }elsif($mode eq $MODE_UNIQUE_TIMESTAMPS){
    moveUniqueTimestamps($opts, @files);
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub moveDayBuckets($@){
  my ($opts, @files) = @_;
  my %mtimes;
  for my $file(@files){
    my $mtime = int(mtimeMillis($file) / 1000.0);
    my $filenameTime = filenameTime($file);
    if(not defined $filenameTime){
      die "ERROR: $file does not contain YYYYmmdd_HHMMSS\n";
    }

    my $diff = $mtime - $filenameTime;
    $diff = 0 - $diff if $diff < 0;
    if($diff > $MAX_MTIME_FILENAME_DIFFERENCE_SECONDS){
      die "ERROR: '$file' mtime and filename time more than"
       . " ${MAX_MTIME_FILENAME_DIFFERENCE_SECONDS}s apart\n";
    }

    $mtimes{$file} = $mtime;
  }

  my $parentDir = getCommonParentDir(@files);

  my $nowMillis = nowMillis();
  my $logFile = "./$EXEC-$nowMillis.log";
  my $logFH = undef;
  if(not $$opts{simulate}){
    open $logFH, ">", $logFile or die "ERROR: could not write $logFile\n$!\n";
  }

  for my $file(@files){
    my $targetTime = $mtimes{$file} - (4*60*60);
    my $dayBucket = time2str("%Y-%m-%d", $targetTime);

    my $targetDir = "$parentDir/$dayBucket";

    my $baseFilename = basename $file;
    my $newFile = "$targetDir/$baseFilename";

    if($file eq $newFile){
      print "  #skip $file\n";
      next;
    }

    if(-e $newFile){
      die "ERROR: $newFile already exists\n";
    }

    my @mvCmd = ("mv", "--no-clobber", $file, $newFile);
    if($$opts{simulate}){
      print "#@mvCmd\n";
    }else{
      run "mkdir", "-p", $targetDir if not -d $targetDir;
      die "ERROR: missing $targetDir\n" if not -d $targetDir;
      run @mvCmd;
      if(-e $file || not -e $newFile){
        die "ERROR: @mvCmd failed\n";
      }
      print $logFH "$file ::: $newFile\n";
    }
  }

  close $logFH if defined $logFH;
}

sub prefixFiles($@){
  my ($opts, @files) = @_;
  for my $file(@files){
    my $ext = $1 if $file =~ /\.(\w+)$/;
    my $prefix;
    if($ext =~ /^$REGEX_EXTS_VIDEO$/i){
      $prefix = "VID_";
    }else{
      $prefix = "";
    }

    my $newFile = $file;
    $newFile =~ s/\/(IMG_|VID_)?([^\/]*)$/\/$prefix$2/;
    if($file ne $newFile){
      if(-e $newFile){
        die "ERROR: '$newFile' already exists\n";
      }

      my @mvCmd = ("mv", "--no-clobber", $file, $newFile);
      if($$opts{simulate}){
        print "#@mvCmd\n";
      }else{
        run @mvCmd;
        if(-e $file || not -e $newFile){
          die "ERROR: @mvCmd failed\n";
        }
      }
    }
  }
}

sub moveUniqueTimestamps($@){
  my ($opts, @files) = @_;
  my $fileInfo = {};
  for my $file(@files){
    my $filenameTime = filenameTime($file);
    if(not defined $filenameTime){
      die "ERROR: could not extract YYYYmmdd_HHMMSS from $file\n";
    }
    $$fileInfo{$file} = {
      file             => $file,
      newFile          => $file,
      baseFilename     => basename($file),
      origFilenameTime => $filenameTime,
      newFilenameTime  => $filenameTime,
      mtimeMillis      => mtimeMillis($file),
    };
  }

  @files = sort {
    0
    || $$fileInfo{$a}{mtimeMillis} <=> $$fileInfo{$b}{mtimeMillis}
    || length($$fileInfo{$a}{baseFilename}) <=> length($$fileInfo{$b}{baseFilename})
    || $$fileInfo{$a}{baseFilename} cmp $$fileInfo{$b}{baseFilename}
    || $a cmp $b
  } @files;

  my $prevOrigFilenameTime = undef;
  for my $file(@files){
    my $origFilenameTime = $$fileInfo{$file}{origFilenameTime};
    if(defined $prevOrigFilenameTime){
     if($prevOrigFilenameTime > $origFilenameTime){
       die "ERROR: mtime order and filename time order are mismatched for $file\n";
     }
    }
    $prevOrigFilenameTime = $origFilenameTime;
  }

  for my $file(@files){
    my $filenameTime = $$fileInfo{$file}{newFilenameTime};
    my @matchingFiles =
      grep {$_ ne $file}
      grep {$$fileInfo{$_}{newFilenameTime} == $filenameTime}
      @files;
    for(my $i=0; $i<@matchingFiles; $i++){
      my $otherFile = $matchingFiles[$i];
      $$fileInfo{$otherFile}{newFilenameTime} += $i + 1;
    }
  }

  my $prevNewFilenameTime = undef;
  for my $file(@files){
    my $newFilenameTime = $$fileInfo{$file}{newFilenameTime};
    if(defined $prevNewFilenameTime){
     #fail if new time is not unique
     if($prevNewFilenameTime >= $newFilenameTime){
       die "ERROR: calculated filename time not unique, or out of order with mtime, for $file\n";
     }
    }
    $prevNewFilenameTime = $newFilenameTime;
  }

  for my $file(@files){
    my $origYMD = time2str("%Y%m%d", $$fileInfo{$file}{origFilenameTime});
    my $origHMS = time2str("%H%M%S", $$fileInfo{$file}{origFilenameTime});
    my $newYMD = time2str("%Y%m%d", $$fileInfo{$file}{newFilenameTime});
    my $newHMS = time2str("%H%M%S", $$fileInfo{$file}{newFilenameTime});
    if($origYMD ne $newYMD){
      die "ERROR: filename fix crosses a day boundary for $file\n";
    }
    my $diff = $$fileInfo{$file}{newFilenameTime} - $$fileInfo{$file}{origFilenameTime};
    die "ERROR: file rename fix is negative for $file\n" if $diff < 0;
    if($diff > 0){
      my $newFile = $file;
      $newFile =~ s/\Q${origYMD}_${origHMS}\E(?: \(\d+\))?/${newYMD}_${newHMS}_${origHMS}/;
      if($newFile eq $file){
        die "ERROR: rename of $file failed\n";
      }
      if(-e $newFile){
        die "ERROR: '$newFile' already exists\n";
      }
      $$fileInfo{$file}{newFile} = $newFile;
    }
  }

  for my $file(@files){
    my $newFile = $$fileInfo{$file}{newFile};
    next if $file eq $newFile;
    my @mvCmd = ("mv", "--no-clobber", $file, $newFile);
    if($$opts{simulate}){
      print "#@mvCmd\n";
    }else{
      run @mvCmd;
      if(-e $file || not -e $newFile){
        die "ERROR: @mvCmd failed\n";
      }
    }
  }
}

sub findDirFiles($){
  my ($dir) = @_;
  $dir =~ s/\/$//g;
  $dir = "$dir/";
  my @findCmd = ("find", $dir, "-type", "f");
  open my $cmdH, "-|", @findCmd
    or die "ERROR: '@findCmd' failed\n";
  my @outFiles = <$cmdH>;
  close $cmdH;
  my @files;
  for my $file(@outFiles){
    chomp $file;
    if(-f $file){
      push @files, $file;
    }else{
      die "ERROR: failed to parse output of '@findCmd':\n  $file\n";
    }
  }
  return @files;
}

sub getCommonParentDir(@){
  my @files = @_;
  my $dir = undef;
  for my $file(@files){
    $dir = dirname $file if not defined $dir;
    while($file !~ /^\Q$dir\E/){
      my $oldDir = $dir;
      $dir = dirname $oldDir;
      if($dir eq $oldDir){
        last;
      }
    }
    if($file !~ /^\Q$dir\E/){
      die "ERROR: could not extract common subdir for $file\n";
    }
  }
  return $dir;
}

sub dedupeArr(@){
  my @arr = @_;
  my %seen;
  my @newArr;
  for my $elem(@arr){
    next if $seen{$elem};
    push @newArr, $elem;
    $seen{$elem} = 1;
  }
  return @newArr;
}

sub filenameTime($){
  my ($file) = @_;
  my $boundary = '(?:^|$|[^0-9a-zA-Z])'; #start or end or non-alphanumeric
  if($file =~ /$boundary(\d\d\d\d-?\d\d-?\d\d)_(\d\d-?\d\d-?\d\d)$boundary/){
    my ($ymd, $hms) = ($1, $2);
    return str2time("$ymd $hms", "YYYYmmdd HHMMSS");
  }else{
    return undef;
  }
}

sub mtimeMillis($){
  my ($file) = @_;
  my @stat = stat $file;
  my $mtime = $stat[9];
  return int($mtime * 1000.0 + 0.5);
}

sub nowMillis(){
  return int(time*1000.0 + 0.5)
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
