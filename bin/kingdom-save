#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);
use JSON;

sub parseSaveInfo($);
sub extractTarToSaveDir($$);
sub removeCurrentSave($);
sub ensureSaveCached($$);
sub fetchCurrentSaveTar($);
sub fetchCurrentSaveMtime($);
sub readCachedSaves($);
sub getSortedCachedSaves($);
sub getCachedSaveByIndex($$);
sub notifySend($);
sub sha1($);
sub mtime($);
sub nowMillis();
sub run(@);
sub runQuiet(@);
sub readFile($);
sub globOne($);

my $DEFAULT_LIST_LIMIT = 10;
my $NOTIFY_SEND_MILLIS = 1500;

my $SAVE_DIR_LINUX = "$ENV{HOME}/.config/unity3d/noio/KingdomTwoCrowns/Release";

my $SAVE_DIR_PROTON_PATTERN = ""
  . "$ENV{HOME}/.steam/steam/"
  . "steamapps/compatdata/"
  . "*/" #app ID, should be: 701160
  . "pfx/drive_c/users/steamuser/"
  . "AppData/LocalLow/noio/KingdomTwoCrowns/Release"
;
my $SAVE_DIR_PROTON = globOne($SAVE_DIR_PROTON_PATTERN);

my $SAVE_DIR = $SAVE_DIR_LINUX;

my $CACHE_DIR = "$ENV{HOME}/.cache/kingdom-saves";

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --backup|--save [SAVE_DIR]
    take files from $SAVE_DIR/* and make an xz'd tarball in $CACHE_DIR
      skips storing the tarball if an identical one already exists
    SAVE_DIR
      use SAVE_DIR instead of $SAVE_DIR

  $EXEC --restore TAR_BALL
    takes a (compressed or uncompressed) tar ball
      and extracts it to the save dir, after backing up the contents
    -MOVE files from
      $SAVE_DIR/
      to
      /tmp/kingdom-save-backup-<MILLIS>
    -extract <TAR_BALL> to
      $SAVE_DIR

  $EXEC --restore INDEX
    same as `$EXEC --restore <TAR_BALL>`,
      after finding <TAR_BALL> in $CACHE_DIR based on <INDEX>:
        0   => most recent save
        1   => second-most recent save
        2   => third-most recent save
        ...etc
    NOTE: <TAR_BALL> is selected based on <INDEX> BEFORE backing up current

  $EXEC --info TAR_BALL
    print detailed info about a save

  $EXEC --info INDEX
    same as `$EXEC --restore <TAR_BALL`
    after finding <TAR_BALL> in $CACHE_DIR based on <INDEX>
        0   => most recent save
        1   => second-most recent save
        2   => third-most recent save
        ...etc

  $EXEC --list [LIST_LIMIT]
    print the most recent LIST_LIMIT cached saves (default is $DEFAULT_LIST_LIMIT)
    oldest to newest, formatted like:
      <INDEX> <MTIME> <DAYS>D <LAND> <SHA1SUM>
        INDEX:    the index to pass to --restore, 0 is most recent backup
        MTIME:    tarfile mtime formatted: YYYY-MM-DD HH:MM:SS
        DAYS:     the current in-game days counter
        LAND:     the current land or challenge island, e.g: land0, ch2
        SHA1SUM:  the sha1sum of the tarfile, also contained in the filename
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0 or (@_ >= 1 and $_[0] =~ /^(--backup|--save)$/)){
    my $saveDir;
    if(@_ == 0 or @_ == 1){
      $saveDir = $SAVE_DIR;
    }elsif(@_ == 2){
      $saveDir = $_[1];
    }else{
      die "$usage\nERROR: invalid args to backup command\n";
    }
    if(not -d $saveDir){
      die "save dir \"$saveDir\" does not exist\n";
    }
    ensureSaveCached($saveDir, $CACHE_DIR);
  }elsif(@_ == 2 and $_[0] =~ /^(--restore)$/){
    my $tarFile;
    if($_[1] =~ /^\d+$/){
      $tarFile = ${getCachedSaveByIndex($_[1], $CACHE_DIR)}{file};
    }elsif(-f $_[1]){
      $tarFile = $_[1];
    }

    print "\nREMOVING CURRENT SAVE:\n";
    removeCurrentSave($SAVE_DIR);

    print "\nEXTRACTING NEW SAVE:\n";
    extractTarToSaveDir($tarFile, $SAVE_DIR);
  }elsif(@_ == 2 and $_[0] =~ /^(--info)$/){
    my $tarFile;
    if($_[1] =~ /^\d+$/){
      $tarFile = ${getCachedSaveByIndex($_[1], $CACHE_DIR)}{file};
    }elsif(-f $_[1]){
      $tarFile = $_[1];
    }
    my $saveInfo = parseSaveInfo $tarFile;
    print "DAYS:  $$saveInfo{daysFmt}\n";
    print "LAND:  $$saveInfo{land}\n";
    for my $islandName(sort keys %{$$saveInfo{islands}}){
      my $islandInfo = $$saveInfo{islands}{$islandName};
      print "$$islandInfo{landFmt}: $$islandInfo{countFmt}\n";
    }
  }elsif((@_ == 1 or @_ == 2) and $_[0] =~ /^(--list)$/){
    my $listLimit = $DEFAULT_LIST_LIMIT;
    if(@_ == 2){
      $listLimit = $_[1];
      if($listLimit !~ /^\d+$/ or $listLimit == 0){
        die "$usage\nERROR: LIST_LIMIT must be a positive integer: $listLimit\n";
      }
    }
    print "listing last $listLimit saves in: $CACHE_DIR\n";
    my @saves = getSortedCachedSaves($CACHE_DIR);

    my $limit = @saves < $listLimit ? @saves : $listLimit;
    @saves = @saves[0 .. $limit-1];

    my $index = $#saves;
    for my $save(reverse @saves){
      my $saveInfo = parseSaveInfo $$save{file};

      printf "%-2d %19s %4s %5s %s\n",
        $index, $$save{mtimeFmt}, $$saveInfo{daysFmt}, $$saveInfo{land}, $$save{sha1};

      $index--;
    }
  }else{
    die $usage;
  }
}

sub parseSaveInfo($){
  my ($tarFile) = @_;
  my $workDir = "/tmp/kingdom-save-tmp-" . nowMillis();
  runQuiet "mkdir", "-p", $workDir;
  runQuiet "tar", "-xf", $tarFile, "-C", $workDir;

  my $info = {
    land => "?",
    days => "?",
    islands => {},
  };

  my $challenges = {
    1 => 'SKULL',
    2 => 'PLAGUE',
    4 => 'DIRE',
    8 => 'TRADE',
  };

  my $globalFile = globOne "$workDir/global-*";
  if(-f $globalFile){
    my $globalJson = readFile $globalFile;
    my ($campaigns, $challenges, $currentCampaign, $currentChallenge);

    my $obj = JSON->new->decode($globalJson);
    if(ref $obj eq "HASH" and defined $$obj{campaigns}){
      $campaigns = $$obj{campaigns};
      $challenges = $$obj{challenges};
      $currentCampaign = $$obj{_currentCampaign};
      $currentChallenge = $$obj{_currentChallenge};
    };

    my $cur;
    if(
      ref $campaigns eq "ARRAY"
      and defined $currentCampaign
      and $currentCampaign =~ /^(\d+)$/
      and $currentCampaign < @$campaigns
    ){
      $cur = $$campaigns[$currentCampaign];
      $$info{land} = "land$$cur{currentLand}";
    }elsif(
      ref $challenges eq "ARRAY"
      and defined $currentChallenge
      and $currentChallenge =~ /^(\d+)$/
    ){
      for my $challenge(@$challenges){
        if(ref $challenge eq "HASH"){
          my $challengeId = $$challenge{challengeId};
          if($currentChallenge == $challengeId){
            $cur = $challenge;
            $$info{land} = "ch$currentChallenge";
            last;
          }
        }
      }
    }
    if(defined $cur and defined $$cur{playTimeDays}){
      $$info{days} = $$cur{playTimeDays};
    }
  }

  my @islandFiles = glob "$workDir/island-*";
  for my $islandFile(@islandFiles){
    my $islandName = $islandFile;
    $islandName =~ s/.*\///;
    $$info{islands}{$islandName} = {};

    my $landFmt;
    if($islandName =~ /^island-v\d+-c([012])-l([01234])$/){
      my ($campaignIndex, $landIndex) = ($1, $2);
      $landFmt = sprintf "SLOT %d/3 - LAND %2d/5",
        ($campaignIndex+1),
        ($landIndex+1),
      ;
    }elsif($islandName =~ /^island-v\d+-ch(\d+)-l(\d+)$/){
      my ($challengeIndex, $landIndex) = ($1, $2);
      my $challengeFmt = defined $$challenges{$challengeIndex}
        ? $$challenges{$challengeIndex}
        : sprintf "CHLNG#%02d", $challengeIndex;

      my $maxLand = 1 if $challengeFmt =~ /^(SKULL|PLAGUE)$/;
      $maxLand = 2 if $challengeFmt =~ /^(TRADE)$/;
      $maxLand = '?' if $challengeFmt =~ /^(DIRE)$/;
      $maxLand = '?' if not defined $maxLand;

      $landFmt = sprintf "%-8s - LAND %2d/%s",
        $challengeFmt,
        ($landIndex+1),
        $maxLand,
      ;
    }else{
      $landFmt = $islandName;
    }

    $$info{islands}{$islandName}{"landFmt"} = $landFmt;

    my $json = `gzip --force --decompress --stdout $islandFile`;
    if($? != 0){
      die "ERROR: could not gzip decompress $islandFile\n";
    }

    my $bankFmt;
    if($json =~ /{[^}]*"name":"Banker"[^}]*\\"stashedCoins\\":(\d+)/){
      $bankFmt = sprintf "B\$%03d", $1;
    }else{
      $bankFmt = "B\$???";
    }

    my %objNameAbbrevs = (
      Archer  => "Ar",
      Peasant => "Ps",
      Worker  => "Wk",
      Farmer  => "Fa",
      Pikeman => "Pk",
      Squire  => "Sq",
      Knight  => "Kn",
    );
    my @countFmts;
    for my $objName(sort keys %objNameAbbrevs){
      my $objAbbrev = $objNameAbbrevs{$objName};
      my @ids = $json =~ /"uniqueID"\s*:\s*"($objName \w+ \[\w+\]--\d+)"/g;
      my %uniqIds = map {$_ => 1} @ids;
      @ids = sort keys %uniqIds;
      my $count = @ids;
      $$info{islands}{$islandName}{"count$objName"} = $count;
      push @countFmts, sprintf("%3d%s", $count, $objAbbrev);
    }

    $$info{islands}{$islandName}{"countFmt"} = join(" ", @countFmts) . " ${bankFmt}";
  }

  if(defined $$info{days} and $$info{days} =~ /^-?(\d+|\d*\.\d+)$/){
    $$info{daysFmt} = sprintf "%03dD", int($$info{days} + 1 + 0.5);
  }else{
    $$info{daysFmt} = "?D";
  }

  runQuiet "rm", "-rf", $workDir;
  return $info;
}

sub extractTarToSaveDir($$){
  my ($tarFile, $saveDir) = @_;
  run "tar", "-xf", $tarFile, "-C", $SAVE_DIR;
}

sub removeCurrentSave($){
  my ($saveDir) = @_;
  my $millis = nowMillis();
  my $tmpDir = "/tmp/kingdom-save-backup-$millis";
  my @files = glob "$saveDir/*";
  if(@files > 0){
    run "mkdir", "-p", $tmpDir;
    run "mv", glob("$saveDir/*"), "$tmpDir/";
  }else{
    print "no files to remove\n";
  }
}

sub ensureSaveCached($$){
  my ($saveDir, $cacheDir) = @_;
  if(not defined $saveDir or not -d $saveDir){
    $saveDir = "";
    my $msg = "ERROR: save dir does not exist: $saveDir";
    notifySend $msg;
    die "$msg\n";
  }

  my $currentSaveTar = fetchCurrentSaveTar($saveDir);
  my $currentSaveMtime = fetchCurrentSaveMtime($saveDir);
  my $currentSaveSha1 = sha1 $currentSaveTar;

  run "mkdir", "-p", $cacheDir if not -d $cacheDir;
  if(not -d $cacheDir){
    my $msg = "ERROR: cache dir does not exist: $cacheDir";
    notifySend $msg;
    die "$msg\n";
  }

  my $saves = readCachedSaves($cacheDir);
  if(defined $$saves{$currentSaveSha1}){
    my $file = $$saves{$currentSaveSha1}{file};
    my $msg = "save already cached: $file\n";
    notifySend $msg;
    print "$msg\n";
  }else{
    my $datetimeFmt = `date --date \@$currentSaveMtime +%Y%m%d_%H%M%S`;
    chomp $datetimeFmt;
    my $cacheFileName = "${datetimeFmt}_${currentSaveSha1}.tar.xz";

    my $saveFileCachePath = "$cacheDir/$cacheFileName";
    run "xz --compress --stdout $currentSaveTar > $saveFileCachePath";
    if(not -f $saveFileCachePath){
      my $msg = "ERROR: could not create file $saveFileCachePath";
      notifySend $msg;
      die "$msg\n";
    }
    my $saveInfo = parseSaveInfo $saveFileCachePath;

    run "touch", $saveFileCachePath, "--date", "\@$currentSaveMtime";

    run "rm", "-f", "$cacheDir/latest.tar.xz";
    run "ln", "-s", $cacheFileName, "$cacheDir/latest.tar.xz";

    my $mtimeFmt = `date --date \@$currentSaveMtime '+%Y-%m-%d %H:%M:%S'`;
    my $msg = "SAVED: $mtimeFmt  $$saveInfo{daysFmt}  $$saveInfo{land}";
    notifySend $msg;
    print "$msg\n";
  }

  run "rm", $currentSaveTar;
}

sub fetchCurrentSaveTar($){
  my ($saveDir) = @_;
  die "ERROR: could not find dir $saveDir\n" if not -d $saveDir;

  my $millis = nowMillis();
  my $oldPWD = $ENV{PWD};
  chdir $saveDir;
  $ENV{PWD} = $saveDir;

  my $tmpTar = "/tmp/kingdom-save-$millis.tar";
  run "tar", "-cf", $tmpTar, glob("*");

  chdir $oldPWD;
  $ENV{PWD} = $oldPWD;

  return $tmpTar;
}

sub fetchCurrentSaveMtime($){
  my ($saveDir) = @_;
  my @files = glob("$saveDir/*");
  my $maxMtime = undef;
  for my $file(@files){
    my $mtime = mtime $file;
    if(not defined $maxMtime or $mtime > $maxMtime){
      $maxMtime = $mtime;
    }
  }
  return $maxMtime;
}

sub readCachedSaves($){
  my ($cacheDir) = @_;
  my @cacheSaves = glob("$cacheDir/*.tar.xz");
  my $saves = {};
  for my $file(@cacheSaves){
    my $mtime = mtime $file;
    my $mtimeFmt = `date --date \@$mtime +'%Y-%m-%d %H:%M:%S'`;
    chomp $mtimeFmt;

    if($file =~ /^$cacheDir\/(\d\d\d\d\d\d\d\d)_(\d\d\d\d\d\d)_([0-9a-f]{40})\.tar\.xz$/){
      my ($date, $time, $sha1) = ($1, $2, $3);
      $$saves{$sha1} = {
        file     => $file,
        date     => $date,
        time     => $time,
        sha1     => $sha1,
        mtime    => $mtime,
        mtimeFmt => $mtimeFmt,
      };
    }
  }
  return $saves;
}

sub getSortedCachedSaves($){
  my ($cacheDir) = @_;
  my %mtimesBySha1;
  my @saves = values %{readCachedSaves $cacheDir};
  for my $save(@saves){
    $mtimesBySha1{$$save{sha1}} = mtime $$save{file};
  }
  @saves = reverse sort {$mtimesBySha1{$$a{sha1}} <=> $mtimesBySha1{$$b{sha1}}} @saves;
  return @saves;
}

sub getCachedSaveByIndex($$){
  my ($index, $cacheDir) = @_;
  my @saves = getSortedCachedSaves($cacheDir);
  if($index >= @saves){
    my $cnt = @saves;
    die "ERROR: save index '$index' is too large (there are $cnt saves)\n";
  }
  return $saves[$index];
}

sub notifySend($){
  system "notify-send", "-t", $NOTIFY_SEND_MILLIS, @_;
}

sub sha1($){
  my ($file) = @_;
  if(not -f $file){
    die "ERROR: could not read $file\n";
  }
  open FH, "-|", "sha1sum", $file;
  my $sha1sum = <FH>;
  close FH;
  if($sha1sum =~ /^([0-9a-f]{40})\s+$file$/){
    return $1;
  }else{
    die "ERROR: could not sha1sum $file\n";
  }
}

sub mtime($){
  return (stat $_[0])[9];
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  runQuiet @_;
}
sub runQuiet(@){
  system @_;
  if($? != 0){
    die "ERROR: \"@_\" failed\n";
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "<", $file or die "could not read $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;
  return $contents;
}

sub globOne($){
  my ($ptrn) = @_;
  my @files = glob($ptrn);
  if(@files == 0){
    return undef;
  }elsif(@files > 1){
    die "glob pattern matched more than one file: $ptrn\n";
  }else{
    return $files[0];
  }
}

&main(@ARGV);
