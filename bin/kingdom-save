#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);
use JSON;

sub getSavesFromSaveArgs($@);
sub formatSave($$$$$);
sub getMaxLand($$$$);
sub formatGame($$$$);
sub formatLand($$$$$$);
sub parseSaveInfo($$);
sub parseGlobalSaveFileJSON($);
sub parseIslandSaveFileJSON($);
sub extractTarToSaveDir($$);
sub removeCurrentSave($);
sub ensureSaveCached($$$);
sub fetchCurrentSaveTar($);
sub fetchCurrentSaveMtime($);
sub readCacheDirSavesInfo($);
sub getSaveInfoFromTarFile($);
sub readOrCalculateTarFileSHA1($);
sub calculateTarFileSHA1($);
sub runSha1Cmd($);

sub notifySend($);
sub mtime($);
sub nowMillis();
sub run(@);
sub runQuiet(@);
sub readFile($);
sub writeFile($$);
sub globOne($);

my $GAMES = {
  "kingdom-two-crowns" => ["K2C",  [qw(k2c two-crowns)],  "noio/KingdomTwoCrowns/Release"],
  "kingdom-80s"        => ["K80s", [qw(k80s k80 80 80s)], "RawFury/Kingdom Eighties/Release"],
  "kingdom-classic"    => ["KC",   [qw(kingdom classic)], "noio/Kingdom"],
};
my $GAME_SHORT_NAMES =  {map {$_ => ${$$GAMES{$_}}[0]} sort keys %$GAMES};
my $GAME_ALIASES =      {map {$_ => ${$$GAMES{$_}}[1]} sort keys %$GAMES};
my $GAME_SAVE_SUBDIRS = {map {$_ => ${$$GAMES{$_}}[2]} sort keys %$GAMES};

my $GAME_NAME_BY_ALIAS = {map {
  my $gameName = $_;
  map {$_ => $gameName} ($gameName, @{$$GAME_ALIASES{$gameName}})
} sort keys %$GAMES};

my $PROTON_BASE_DIR_PATTERN = "$ENV{HOME}/.steam/steam/"
  . "steamapps/compatdata/"
  . "*/" #app ID, e.g.: 701160
  . "pfx/drive_c/users/steamuser/"
  . "AppData/LocalLow"
;
my $LINUX_BASE_DIR_PATTERN = "$ENV{HOME}/.config/unity3d";

my $CACHE_BASE_DIR = "$ENV{HOME}/.cache";

my $LAST_KINGDOM_GAME_NAME_FILE = "$CACHE_BASE_DIR/kingdom-saves/last-game";

my $DEFAULT_LIST_LIMIT = 10;
my $NOTIFY_SEND_MILLIS = 1500;

my $CHALLENGE_ISLANDS = {
  "kingdom-two-crowns" => {
    1 => {id=>1, name=>'SKULL',  shortName=>'SKUL', maxLand=>'1'},
    2 => {id=>2, name=>'PLAGUE', shortName=>'PLAG', maxLand=>'1'},
    4 => {id=>4, name=>'DIRE',   shortName=>'DIRE', maxLand=>'?'},
    8 => {id=>8, name=>'TRADE',  shortName=>'TRAD', maxLand=>'2'},
    9 => {id=>9, name=>'LOST',   shortName=>'LOST', maxLand=>'1'},
  },
};

my $DEFAULT_FORMAT_SUMMARY_SPEC = ''
  . '%-3d:INDEX:'
  . ' | %19s:DATE_TIME:'
  . ' | %4s:CUR_GAME_SHORT:'
  . ' | %4s:CUR_LAND_SHORT:'
  . ' | D%03d:CUR_DAY:'
  . '%n'
  ;
my $DEFAULT_FORMAT_LAND_SPEC = ''
  . '  %-8s:GAME: - %8s:LAND::'
  . ' D%03d:ISLAND_DAY:/D%03d:DAY:'
  . ' %3d:ARCHER:Ar'
  . ' %3d:WORKER:Wk'
  . ' %3d:FARMER:Fa'
  . ' %3d:SQUIRE:Sq'
  . ' %3d:KNIGHT:Kn'
  . ' %3d:PIKEMAN:Pk'
  . ' %3d:PEASANT:Ps'
  . ' B$%3d:BANK:'
  . '%n'
  ;
my $NEW_SAVE_FORMAT_SUMMARY_SPEC = ''
  . 'SAVED:'
  . ' %4s:GAME_NAME_SHORT:'
  . ' %19s:DATE_TIME:'
  . ' %03d:CUR_DAY:'
  . ' %4s:CUR_GAME_SHORT:'
  . ' %4s:CUR_LAND_SHORT:'
  ;
my $DIRE_FORMAT_SUMMARY_SPEC = ''
  . '%4s:CUR_GAME_SHORT:'
  . ' | %%19s:DATE_TIME:'
  . ' | L%4s:CUR_LAND_NUM:'
  . ' | D%03d:CUR_DAY:'
  . ' | GRD %04d:CUR_STAT20:'
  . '%n'
  ;

my $CMD_BACKUP = "backup";
my $CMD_RESTORE = "restore";
my $CMD_GET_TAR = "get-tar";
my $CMD_INFO = "info";
my $CMD_LIST = "list";

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] --backup|--save
    take files from <KINGDOM_GAME_SAVE_DIR>/*
      and make an xz'd tar file in <CACHE_DIR>
    skips storing the tar file if an identical one already exists

  $EXEC [OPTS] --restore TAR_FILE
    move current game save files to a tmp dir
    takes a (compressed or uncompressed) tar file
      and extracts it to <KINGDOM_GAME_SAVE_DIR>, after backing up the contents

      -MOVE files from
        <KINGDOM_GAME_SAVE_DIR>/
        to
        /tmp/kingdom-save-backup-<MILLIS>
      -extract <TAR_FILE> to
        <KINGDOM_GAME_SAVE_DIR>

  $EXEC [OPTS] --restore INDEX
    same as: $EXEC --restore \$($EXEC --get-tar INDEX) KINGDOM_GAME_SAVE_DIR


  $EXEC [OPTS] --get-tar INDEX_ARG [INDEX_ARG INDEX_ARG...]
    parse each <INDEX_ARG> as a list of <INDEX>s,
    and print the <TAR_FILE> for each save in <CACHE_DIR> at index <INDEX>, one per line
    (0 is the most recent save, 1 is the second most recent)

  $EXEC [OPTS] --get-tar TAR_FILE [TAR_FILE TAR_FILE...]
    print each <TAR_FILE> in <CACHE_DIR>, one per line


  $EXEC [OPTS] --info [FORMAT_OPTS] TAR_FILE [TAR_FILE TAR_FILE...]
    for each <TAR_FILE> in <CACHE_DIR>, print a summary of the save using FORMAT_SUMMARY_SPEC
      followed by detailed info for each land, each formatted using FORMAT_LAND_SPEC

  $EXEC [OPTS] --info [FORMAT_OPTS] INDEX_ARG [INDEX_ARG INDEX_ARG...]
    same as: $EXEC --info \$($EXEC --get-tar INDEX_ARG...)

  $EXEC [OPTS] --info [FORMAT_OPTS]
    same as: $EXEC --info 0


  $EXEC [OPTS] --list TAR_FILE [TAR_FILE TAR_FILE...]
    same as: $EXEC --info --no-lands --reverse TAR_FILE...

  $EXEC [OPTS] --list INDEX_ARG [INDEX_ARG INDEX_ARG...]
    same as: $EXEC --info --no-lands --reverse INDEX_ARG...

  $EXEC [OPTS] --list
    same as: $EXEC --info --no-lands --reverse 0-9

  $EXEC [OPTS] --dire
    same as: $EXEC --info 0 --no-lands \\
             --format='$DIRE_FORMAT_SUMMARY_SPEC'

  OPTS
    --game=KINGDOM_GAME_NAME
      -use CACHE_DIR=$CACHE_BASE_DIR/kingdom-saves/<KINGDOM_GAME_NAME>/
      -calculate KINGDOM_GAME_SAVE_DIR using SAVE_BASE_DIR_PTRN and KINGDOM_GAME_NAME"
        . join("",
            map {"\n        $_: " . join("|", ($_, @{$$GAME_ALIASES{$_}}))}
            sort keys %$GAME_ALIASES) . "
    --game-last
      -read LAST_KINGDOM_GAME_NAME from $LAST_KINGDOM_GAME_NAME_FILE
      -same as --game=LAST_KINGDOM_GAME_NAME
      (this is the default)
    --proton
      use SAVE_BASE_DIR_PTRN=$PROTON_BASE_DIR_PATTERN
    --no-proton
      use SAVE_BASE_DIR_PTRN=$LINUX_BASE_DIR_PATTERN
      (this is the default)

  FORMAT_OPTS
    --format=FORMAT_SUMMARY_SPEC
    --format-summary=FORMAT_SUMMARY_SPEC
      default: $DEFAULT_FORMAT_SUMMARY_SPEC
      format specification for formatting the save summary in --info and --list
      the following replacements are peformed:
        %%                                  => literal '%' character
        %n                                  => newline character
        %<PRINTF_SPEC>:<SUMMARY_VAR_NAME>:  => formatted variable

        PRINTF_SPEC
          passed exactly to sprintf
          e.g.:
            -03d    => left-aligned 3-digit integer
            s       => unmodified string

        SUMMARY_VAR_NAME
          INDEX          = the game save index, 0 for the most recent, 1 for next
                              0 for the most recent
                              1 for the next most recent, etc.
                              -1 for <TAR_FILE>s not backed up in <CACHE_DIR>
          TAR_FILE       = filename of the (possibly compressed) tar file
          DATE_TIME      = save backup datetime, formatted like `date '+%Y-%m-%d %H:%M:%S'`
          MTIME          = save backup datetime, formatted like `date '+%s'`
          SHA1SUM        = the sha1sum of the uncompressed tar file (before xz)
          CUR_DAY        = the current day number
                             playTimeDays + 1, rounded down to nearest integer
          CUR_GAME       = the current game mode, for campaign+challenges
                           for campaign:
                              'SLOT <SLOT>/3'  where <SLOT> is 1, 2, or 3
                           for challenge:
                              <CUR_CHLNG_NAME>
          CUR_GAME_SHORT = the current game mode, for campaign+challenges
                           for campaign:
                              'SLT<SLOT>'  where <SLOT> is 1, 2, or 3
                           for challenge:
                              <CUR_CHLNG_SHRT>
          CUR_CHLNG_NAME = current long challenge name, formatted same as CHLNG_NAME
          CUR_CHLNG_SHRT = current short challenge name, formatted same as CHLNG_SHRT
          CUR_LAND_NUM   = current island number, with 1 being the first
          CUR_LAND_MAX   = the maximum number of islands for the current game mode
                           (same values as LAND_MAX)
          CUR_LAND       = if <CUR_LAND_NUM> is less than 10:
                              'LAND  <CUR_LAND_NUM>/<CUR_LAND_MAX>'
                           otherwise:
                              'LAND <CUR_LAND_NUM>/<CUR_LAND_MAX>'
          CUR_LAND_SHORT = if <CUR_LAND_NUM> is less than 10:
                              'L<CUR_LAND_NUM>/<CUR_LAND_MAX>'
                           otherwise:
                              '<LAND_NUM>/<LAND_MAX>'
          CUR_STAT<STAT> = 'persistentStats' at index <STAT> for the current
                           campaign or challenge
                           e.g.: CUR_STAT20 may be the number of greed killed on DIRE

    --format-land=FORMAT_LAND_SPEC
      default: $DEFAULT_FORMAT_LAND_SPEC
      format specification for formatting each land in a save in --info,
        following the save summary (formatted with <FORMAT_SUMMARY_SPEC>)
      the following replacements are performed:
        %%                               => literal '%' character
        %n                               => newline character
        %<PRINTF_SPEC>:<LAND_VAR_NAME>:  => formatted variable

        PRINTF_SPEC
          passed exactly to sprintf
          e.g.:
            -03d    => left-aligned 3-digit integer
            s       => unmodified string

        LAND_VAR_NAME
          DAY        = the current day number on the island
                         playTimeDays + 1, rounded down to nearest integer
          GAME       = the current game mode, for campaign+challenges
                       for campaign:
                          'SLOT <SLOT>/3'  where <SLOT> is 1, 2, or 3
                       for challenge:
                          <CHLNG_NAME>
          GAME_SHORT = the current game mode, for campaign+challenges
                       for campaign:
                          'SLT<SLOT>'  where <SLOT> is 1, 2, or 3
                       for challenge:
                          <CHLNG_SHRT>
          CHLNG_NAME = long name of the challenge (e.g.: SKULL/TRADE/PLAGUE/DIRE/LOST),
                         or 'CHLNG#<CHLNG_ID>' if unknown, where <CHLNG_ID> is an integer
          CHLNG_SHRT = short name of the challenge (e.g.: SKUL/TRAD/PLAG/DIRE/LOST),
                         or 'CH<CHLNG_ID>' if unknown, where <CHLNG_ID> is an integer
          LAND_NUM   = island number, with 1 being the first
          LAND_MAX   = the maximum number of islands for the game mode
                         '1' for all games except K2C
                         '5' for K2C base/shogun/deadlands campaign
                         '6' for K2C norselands campaign
                         '2' for K2C TRADE
                         '1' for K2C SKULL+PLAGUE
                         '?' for K2C DIRE or unknown
          LAND       = if <LAND_NUM> is less than 10:
                          'LAND  <LAND_NUM>/<LAND_MAX>'
                       otherwise:
                          'LAND <LAND_NUM>/<LAND_MAX>'
          LAND_SHORT = if <CUR_LAND_NUM> is less than 10:
                          'L<CUR_LAND_NUM>/<CUR_LAND_MAX>'
                       otherwise:
                          '<LAND_NUM>/<LAND_MAX>'
          ARCHER    = count of all objects named 'Archer' on the island
          WORKER    = count of all objects named 'Worker' on the island
          FARMER    = count of all objects named 'Farmer' on the island
          SQUIRE    = count of all objects named 'Squire' on the island
          KNIGHT    = count of all objects named 'Knight' on the island
          PIKEMAN   = count of all objects named 'Pikeman' on the island
          PEASANT   = count of all objects named 'Peasant' on the island
          BANK      = integer number of coins stashed by the banker

    --lands
      print each land in the save file, formatted with FORMAT_LAND_SPEC
      (this is the default)
    --no-lands
      do not print land info (this is implied by --list)

    --reverse
      print the saves in the reverse order given,
      so that the first appears at the bottom

  KINGDOM_GAME_SAVE_DIR
    determined by --game=KINGDOM_GAME_NAME and --proton/--no-proton
      -if --proton, use BASE_SAVE_DIR:
        $PROTON_BASE_DIR_PATTERN
      -if --no-proton, use BASE_SAVE_DIR:
        $LINUX_BASE_DIR_PATTERN
      -get KINGDOM_GAME_NAME from --game
      -use GAME_SUB_DIR based on KINGDOM_GAME_NAME:"
        . join("",
            map {"\n        $_ => $$GAME_SAVE_SUBDIRS{$_}"}
            sort keys %$GAME_SAVE_SUBDIRS
          ) . "
      -use KINGDOM_GAME_SAVE_DIR=<BASE_SAVE_DIR>/<GAME_SUB_DIR>

  CACHE_DIR
    determined by --game=KINGDOM_GAME_NAME
      -get KINGDOM_GAME_NAME from --game
      -use CACHE_DIR=$CACHE_BASE_DIR/kingdom-saves/KINGDOM_GAME_NAME/

  INDEX_ARG
    either an INDEX or an INDEX_RANGE

  INDEX_RANGE
    low index to high index (inclusive on both sides), formated LOW-HIGH or LOW..HIGH
    e.g.: 0-5    => 0 1 2 3 4 5
          99-99  => 99

  INDEX
    non-negative integer for save index
    most recent save is 0, next most recent is 1
";

sub main(@){
  my $cmd = $CMD_BACKUP;
  my $kingdomGameName = undef;
  my $isProton = 0;

  my @saveArgs;
  my $formatSummarySpec = $DEFAULT_FORMAT_SUMMARY_SPEC;
  my $formatLandSpec = $DEFAULT_FORMAT_LAND_SPEC;
  my $includeLands = 1;
  my $reverseSaves = 0;
  my $useLastGame = 1;

  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--game=(.+)$/){
      my $alias = lc $1;
      if(not defined $$GAME_NAME_BY_ALIAS{$alias}){
        die "$usage\nERROR: unknown game $alias\n";
      }
      $kingdomGameName = $$GAME_NAME_BY_ALIAS{$alias};
      $useLastGame = 0;
    }elsif($arg =~ /^(--game-last)$/){
      $kingdomGameName = undef;
      $useLastGame = 1;
    }elsif($arg =~ /^(--proton)$/){
      $isProton = 1;
    }elsif($arg =~ /^(--no-proton)$/){
      $isProton = 0;
    }elsif($arg =~ /^(--backup|--save)$/){
      $cmd = $CMD_BACKUP;
    }elsif($arg =~ /^(--restore)$/){
      $cmd = $CMD_RESTORE;
    }elsif($arg =~ /^(--get-tar)$/){
      $cmd = $CMD_GET_TAR;
    }elsif($arg =~ /^(--info)$/){
      $cmd = $CMD_INFO;
      $includeLands = 1;
      $reverseSaves = 0;
    }elsif($arg =~ /^(?:--format|--format-summary)=(.+)$/){
      $formatSummarySpec = $1;
    }elsif($arg =~ /^(?:--format-land)=(.+)$/){
      $formatLandSpec = $1;
    }elsif($arg =~ /^(--lands)$/){
      $includeLands = 1;
    }elsif($arg =~ /^(--no-lands)$/){
      $includeLands = 0;
    }elsif($arg =~ /^(--reverse)$/){
      $reverseSaves = 1;
    }elsif($arg =~ /^(--list)$/){
      $cmd = $CMD_INFO;
      $includeLands = 0;
      $reverseSaves = 1;
    }elsif($arg =~ /^(--dire)$/){
      $cmd = $CMD_INFO;
      $includeLands = 0;
      push @saveArgs, "0";
      $formatSummarySpec = $DIRE_FORMAT_SUMMARY_SPEC;
    }elsif($arg =~ /^(\d+)$/){
      push @saveArgs, $1;
    }elsif($arg =~ /^(\d+)(?:-|\.\.|\.\.\.)(\d+)$/){
      my ($minIndex, $maxIndex) = ($1, $2);
      @saveArgs = (@saveArgs, ($minIndex..$maxIndex));
    }elsif(-f $arg){
      push @saveArgs, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if($useLastGame and -f $LAST_KINGDOM_GAME_NAME_FILE){
    $kingdomGameName = readFile $LAST_KINGDOM_GAME_NAME_FILE;
    chomp $kingdomGameName;
  }

  if(not defined $kingdomGameName){
    die "$usage\nERROR: missing KINGDOM_GAME_NAME (use --game)\n";
  }
  if(not defined $$GAME_SAVE_SUBDIRS{$kingdomGameName}){
    die "$usage\nERROR: unknown KINGDOM_GAME_NAME\n";
  }
  if(not $useLastGame){
    if(not -d "$CACHE_BASE_DIR/kingdom-saves/"){
      system "mkdir", "-p", "$CACHE_BASE_DIR/kingdom-saves/";
    }
    writeFile $LAST_KINGDOM_GAME_NAME_FILE, "$kingdomGameName\n";
  }

  my $saveDirPtrn = $isProton ? $PROTON_BASE_DIR_PATTERN : $LINUX_BASE_DIR_PATTERN;
  $saveDirPtrn .= "/" . $$GAME_SAVE_SUBDIRS{$kingdomGameName};
  my $saveDir = globOne "'$saveDirPtrn'";
  if(not defined $saveDir or not -d $saveDir){
    die "ERROR: SAVE_DIR '$saveDirPtrn' does not exist\n";
  }

  my $cacheDir = "$CACHE_BASE_DIR/kingdom-saves/$kingdomGameName";

  if($cmd eq $CMD_BACKUP){
    die "ERROR: cannot specify saves by TAR_FILE or INDEX for $cmd\n" if @saveArgs > 0;
    ensureSaveCached($kingdomGameName, $saveDir, $cacheDir);
  }elsif($cmd eq $CMD_RESTORE){
    my @saves = getSavesFromSaveArgs($cacheDir, @saveArgs);
    if(@saves != 1){
      die "ERROR: must specify exactly one save by TAR_FILE or INDEX for $cmd\n";
    }
    my $tarFile = $saves[0]{file};

    print "\nREMOVING CURRENT SAVE:\n";
    removeCurrentSave($saveDir);

    print "\nEXTRACTING NEW SAVE:\n";
    extractTarToSaveDir($tarFile, $saveDir);
  }elsif($cmd eq $CMD_GET_TAR){
    my @saves = getSavesFromSaveArgs($cacheDir, @saveArgs);
    for my $save(@saves){
      print "$$save{file}\n";
    }
  }elsif($cmd eq $CMD_INFO){
    if(@saveArgs == 0){
      @saveArgs = $includeLands ? qw(0) : qw(0 1 2 3 4 5 6 7 8 9);
    }
    my @saves = getSavesFromSaveArgs($cacheDir, @saveArgs);

    @saves = reverse @saves if $reverseSaves;

    for my $save(@saves){
      my $fmt = formatSave($save, $kingdomGameName, $formatSummarySpec, $formatLandSpec, $includeLands);
      print $fmt;
    }
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub getSavesFromSaveArgs($@){
  my ($cacheDir, @saveArgs) = @_;

  my $cacheDirSavesInfo = readCacheDirSavesInfo($cacheDir);

  my @saves;
  for my $arg(@saveArgs){
    my $save;
    if($arg =~ /^(\d+)$/){
      my $index = $arg;
      my $cachedSave = $$cacheDirSavesInfo{savesByIndex}{$index};

      if(defined $cachedSave){
        $save = $cachedSave;
      }else{
        die "ERROR: index $index not found in $cacheDir\n";
      }
    }elsif(-f $arg){
      my $tarFile = $arg;
      my $sha1 = readOrCalculateTarFileSHA1($tarFile);
      my $cachedSave = $$cacheDirSavesInfo{savesBySha1}{$sha1};

      if(defined $cachedSave){
        $save = $cachedSave;
      }else{
        $save = getSaveInfoFromTarFile($tarFile);
        $$save{index} = -1;
      }
    }else{
      die "ERROR: invalid save arg $arg\n";
    }

    push @saves, $save;
  }

  return @saves;
}

sub formatSave($$$$$){
  my ($save, $kingdomGameName, $formatSummarySpec, $formatLandSpec, $includeLands) = @_;

  my $jsonInfo = parseSaveInfo($$save{file}, $includeLands);

  my $g = $$jsonInfo{globalSaveInfo};

  my $summaryVars = {
    INDEX           => $$save{index},
    TAR_FILE        => $$save{file},
    DATE_TIME       => $$save{mtimeFmt},
    MTIME           => $$save{mtime},
    SHA1SUM         => $$save{sha1},
    CUR_DAY         => int($$g{curPlayTimeDays} + 1),
    GAME_NAME       => $kingdomGameName,
    GAME_NAME_SHORT => $$GAME_SHORT_NAMES{$kingdomGameName},
    CUR_GAME        => formatGame($kingdomGameName, $$g{curCampaignIndex}, $$g{curChallengeId}, 0),
    CUR_GAME_SHORT  => formatGame($kingdomGameName, $$g{curCampaignIndex}, $$g{curChallengeId}, 1),
    CUR_LAND_NUM    => $$g{curLandIndex} + 1,
    CUR_LAND_MAX    => getMaxLand($kingdomGameName, $$g{curCampaignIndex}, $$g{curBiomeIndex}, $$g{curChallengeId}),
    CUR_LAND        => formatLand($kingdomGameName, $$g{curCampaignIndex}, $$g{curBiomeIndex}, $$g{curChallengeId}, $$g{curLandIndex}, 0),
    CUR_LAND_SHORT  => formatLand($kingdomGameName, $$g{curCampaignIndex}, $$g{curBiomeIndex}, $$g{curChallengeId}, $$g{curLandIndex}, 1),
  };
  my @stats = @{$$g{curStats}};
  for(my $statIndex=0; $statIndex<@stats; $statIndex++){
    $$summaryVars{"CUR_STAT$statIndex"} = $stats[$statIndex];
    if($statIndex < 10){
      #e.g.: add CUR_STAT06 as a synonym for CUR_STAT6
      $$summaryVars{"CUR_STAT0$statIndex"} = $stats[$statIndex];
    }
  }

  my @landVarSets = map { {
    DAY        => int($$_{playTimeDays} + 1),
    ISLAND_DAY => int($$_{islandDays}),
    GAME       => formatGame($kingdomGameName, $$_{campaignIndex}, $$_{challengeId}, 0),
    GAME_SHORT => formatGame($kingdomGameName, $$_{campaignIndex}, $$_{challengeId}, 1),
    LAND_NUM   => $$_{landIndex} + 1,
    LAND_MAX   => getMaxLand($kingdomGameName, $$_{campaignIndex}, $$_{biomeIndex}, $$_{challengeId}),
    LAND       => formatLand($kingdomGameName, $$_{campaignIndex}, $$_{biomeIndex}, $$_{challengeId}, $$_{landIndex}, 0),
    LAND_SHORT => formatLand($kingdomGameName, $$_{campaignIndex}, $$_{biomeIndex}, $$_{challengeId}, $$_{landIndex}, 0),
    ARCHER     => $$_{objectCounts}{Archer},
    WORKER     => $$_{objectCounts}{Worker},
    FARMER     => $$_{objectCounts}{Farmer},
    SQUIRE     => $$_{objectCounts}{Squire},
    KNIGHT     => $$_{objectCounts}{Knight},
    PIKEMAN    => $$_{objectCounts}{Pikeman},
    PEASANT    => $$_{objectCounts}{Peasant},
    BANK       => $$_{bankCount},
  } } @{$$jsonInfo{islandSaveInfos}};

  my $fmt = applyFormatVars($formatSummarySpec, $summaryVars);
  if($includeLands){
    for my $landVars(@landVarSets){
      $fmt .= applyFormatVars($formatLandSpec, $landVars);
    }
  }
  return $fmt;
}

sub applyFormatVars($$){
  my ($spec, $vars) = @_;

  $spec =~ s/&/&amp;/g;
  $spec =~ s/%%/&boing;/g;
  $spec =~ s/%n/&newline;/g;

  for my $varName(sort keys %$vars){
    my $val = $$vars{$varName};
    while($spec =~ /(%[^:]*):$varName:/){
      my $sprintfSpec = $1;
      my $valFmt = sprintf($1, $val);
      if($spec !~ s/$sprintfSpec:$varName:/$valFmt/){
        die "ERROR: could not replace variable $sprintfSpec:$varName:\n";
      }
    }
  }

  $spec =~ s/&newline;/\n/g;
  $spec =~ s/&boing;/%/g;
  $spec =~ s/&amp;/&/g;

  return $spec;
}

sub getMaxLand($$$$){
  my ($kingdomGameName, $campaignIndex, $biomeIndex, $challengeId) = @_;
  if($kingdomGameName ne "kingdom-two-crowns"){
    return 1;
  }
  if(defined $campaignIndex){
    if($biomeIndex == 3){
      return '6'; #norselands
    }else{
      return '5';
    }
  }elsif(defined $challengeId){
    my $chal;
    my $gameChgs = $$CHALLENGE_ISLANDS{$kingdomGameName};
    if(defined $gameChgs and defined $$gameChgs{$challengeId}){
      $chal = $$gameChgs{$challengeId};
    }
    if(defined $chal){
      return $$chal{maxLand};
    }else{
      return '?';
    }
  }
}

sub formatGame($$$$){
  my ($kingdomGameName, $campaignIndex, $challengeId, $formatShort) = @_;

  if(defined $campaignIndex){
    my $slot = $campaignIndex + 1;
    return $formatShort ? "SLT$slot" : "SLOT $slot/3";
  }elsif(defined $challengeId){
    my $chal;
    my $gameChgs = $$CHALLENGE_ISLANDS{$kingdomGameName};
    if(defined $gameChgs and defined $$gameChgs{$challengeId}){
      $chal = $$gameChgs{$challengeId};
    }
    if($formatShort){
      return defined $chal ? $$chal{shortName} : "CH$challengeId";
    }else{
      return defined $chal ? $$chal{name} : "CHLNG#$challengeId";
    }
  }else{
    die "ERROR: no campaign or challenge found\n";
  }
}

sub formatLand($$$$$$){
  my ($kingdomGameName, $campaignIndex, $biomeIndex, $challengeId, $landIndex, $formatShort) = @_;

  my $landNum = $landIndex + 1;

  my $maxLand = getMaxLand($kingdomGameName, $campaignIndex, $biomeIndex, $challengeId);

  if($landNum < 10){
    return $formatShort ? "L$landNum/$maxLand" : "LAND  $landNum/$maxLand";
  }else{
    return $formatShort ? "$landNum/$maxLand" : "LAND $landNum/$maxLand";
  }
}

sub parseSaveInfo($$){
  my ($tarFile, $includeLands) = @_;
  my $workDir = "/tmp/kingdom-save-tmp-" . nowMillis();
  runQuiet "mkdir", "-p", $workDir;
  runQuiet "tar", "-xf", $tarFile, "-C", $workDir;

  my $globalFile = globOne "$workDir/global*";
  if(not defined $globalFile or not -f $globalFile){
    die "ERROR: global save file missing from $tarFile\n";
  }
  my @islandFiles = grep {-f $_} glob "$workDir/island-*";

  my $globalSaveInfo = parseGlobalSaveFileJSON($globalFile);
  my @islandSaveInfos;
  if($includeLands){
    @islandSaveInfos = map {parseIslandSaveFileJSON $_} @islandFiles;
  }

  for my $islandInfo(@islandSaveInfos){
    if(defined $islandInfo and defined $$islandInfo{campaignIndex}){
      my $campaignIndex = $$islandInfo{campaignIndex};
      if(defined ${$$globalSaveInfo{campaigns}}[$campaignIndex]){
        my $campaign = ${$$globalSaveInfo{campaigns}}[$campaignIndex];
        if(defined $campaign and defined $$campaign{biomeIndex}){
          $$islandInfo{biomeIndex} = $$campaign{biomeIndex};
        }
      }
    }
  }

  runQuiet "rm", "-rf", $workDir;

  return {
    globalSaveInfo => $globalSaveInfo,
    islandSaveInfos => [@islandSaveInfos],
  };
}

sub parseGlobalSaveFileJSON($){
  my ($globalFile) = @_;
  my $globalJson = readFile $globalFile;

  my ($curPlayTimeDays, $curCampaignIndex, $curBiomeIndex, $curChallengeId, $curLandIndex, $curStats);

  my ($campaigns, $challenges, $currentCampaign, $currentChallenge);
  my $obj = JSON->new->decode($globalJson);
  if(ref $obj eq "HASH" and defined $$obj{campaigns}){
    $campaigns = $$obj{campaigns};
    $challenges = $$obj{challenges};
    $currentCampaign = $$obj{_currentCampaign};
    $currentChallenge = $$obj{_currentChallenge};
  };

  if(
    ref $campaigns eq "ARRAY"
    and defined $currentCampaign
    and $currentCampaign =~ /^(\d+)$/
    and $currentCampaign < @$campaigns
  ){
    my $cur = $$campaigns[$currentCampaign];
    if(ref $cur eq "HASH"){
      $curCampaignIndex = $currentCampaign;
      $curBiomeIndex = $$cur{biomeIndex};
      $curChallengeId = undef;
      $curPlayTimeDays = $$cur{playTimeDays};
      $curLandIndex = $$cur{currentLand};
      $curStats = $$cur{persistentStats};
    }
  }elsif(
    ref $challenges eq "ARRAY"
    and defined $currentChallenge
    and $currentChallenge =~ /^(\d+)$/
  ){
    for my $challenge(@$challenges){
      if(ref $challenge eq "HASH"){
        my $challengeId = $$challenge{challengeId};
        if($currentChallenge == $challengeId){
          my $cur = $challenge;
          if(ref $cur eq "HASH"){
            $curCampaignIndex = undef;
            $curBiomeIndex = undef;
            $curChallengeId = $currentChallenge;
            $curPlayTimeDays = $$cur{playTimeDays};
            $curLandIndex = $$cur{currentLand};
            $curStats = $$cur{persistentStats};
          }
          last;
        }
      }
    }
  }

  if(not defined $curCampaignIndex and not defined $curChallengeId){
    die "ERROR: could not find campaign slot or challenge ID in $globalFile\n";
  }elsif(defined $curCampaignIndex and $curCampaignIndex !~ /^\d$/){
    die "ERROR: malformed campaign index $curCampaignIndex in $globalFile\n";
  }elsif(defined $curChallengeId and $curChallengeId !~ /^(\d|\d\d)$/){
    die "ERROR: malformed challenge ID $curChallengeId in $globalFile\n";
  }

  if(not defined $curLandIndex or $curLandIndex !~ /^\d+$/){
    die "ERROR: could not find current land index in $globalFile\n";
  }

  if(not defined $curPlayTimeDays or $curPlayTimeDays !~ /^\d*(\.\d*)?$/){
    die "ERROR: could not find current playTimeDays in $globalFile\n";
  }

  if(defined $curStats and ref $curStats eq "ARRAY"){
    $curStats = [@$curStats];
  }else{
    $curStats = [];
  }

  return {
    curCampaignIndex => $curCampaignIndex,
    curBiomeIndex    => $curBiomeIndex,
    curChallengeId   => $curChallengeId,
    curPlayTimeDays  => $curPlayTimeDays,
    curLandIndex     => $curLandIndex,
    curStats         => $curStats,
    campaigns        => $campaigns,
    challenges       => $challenges,
  }
}

sub parseIslandSaveFileJSON($){
  my ($islandFile) = @_;

  my ($campaignIndex, $challengeId, $landIndex,
    $playTimeDays, $islandDays, $objectCounts, $bankCount);

  if($islandFile =~ /(?:^|\/)island(?:-v\d+)?-c([012])-l([012345])$/){
    ($campaignIndex, $landIndex) = ($1, $2);
  }elsif($islandFile =~ /(?:^|\/)island(?:-v\d+)?-(?:ch|sv)(\d+)-l(\d+)$/){
    ($challengeId, $landIndex) = ($1, $2);
  }else{
    die "ERROR: malformed island file name $islandFile\n";
  }

  my $json = `gzip --force --decompress --stdout $islandFile`;
  $json =~ s/\\"/"/g;
  if($? != 0){
    die "ERROR: could not gzip decompress $islandFile\n";
  }

  if($json =~ /{[^}]*"name":"Banker"[^}]*\\"stashedCoins\\":(\d+)/){
    $bankCount = $1;
  }else{
    $bankCount = 0;
  }

  if($json =~ /"playTimeDays":(\d+|\d*\.\d+)/){
    $playTimeDays = $1;
  }else{
    die "ERROR: could not file playTimeDays for island $islandFile\n";
  }

  if($json =~ /"islandDays":(\d+|\d*\.\d+)/){
    $islandDays = $1;
  }

  $objectCounts = {
    Archer    => 0,
    Worker    => 0,
    Farmer    => 0,
    Squire    => 0,
    Knight    => 0,
    Pikeman   => 0,
    Peasant   => 0,
    Beggar    => 0,
  };

  my $objRegexs = {
    Archer  => qr/Archer(_eighties)?/,
    Worker  => qr/Worker(_eighties)?/,
    Farmer  => qr/Farmer(_eighties)?/,
    Squire  => qr/Squire(_eighties)?/,
    Knight  => qr/Knight(_eighties)?/,
    Pikeman => qr/Pikeman(_eighties)?/,
    Peasant => qr/(?:Peasant|Kid)(_eighties)?/,
    Beggar  => qr/Beggar(_eighties)?/,
  };

  my @objectNames = sort keys %$objectCounts;
  for my $objName(@objectNames){
    my $objRegex = $$objRegexs{$objName};
    my @ids = $json =~ /"uniqueID"\s*:\s*"((?:$objRegex) \w+ \[\w+\]--\d+)"/g;
    my %uniqIds = map {$_ => 1} @ids;
    @ids = sort keys %uniqIds;

    my $count = @ids;
    $$objectCounts{$objName} = $count;
  }

  return {
    campaignIndex => $campaignIndex,
    challengeId   => $challengeId,
    landIndex     => $landIndex,
    islandDays    => $islandDays,
    playTimeDays  => $playTimeDays,
    objectCounts  => $objectCounts,
    bankCount     => $bankCount,
  };
}

sub extractTarToSaveDir($$){
  my ($tarFile, $saveDir) = @_;
  run "tar", "-xf", $tarFile, "-C", $saveDir;
}

sub removeCurrentSave($){
  my ($saveDir) = @_;
  my $millis = nowMillis();
  my $tmpDir = "/tmp/kingdom-save-backup-$millis";
  my @files = glob "'$saveDir'/*";
  if(@files > 0){
    run "mkdir", "-p", $tmpDir;
    run "mv", glob("'$saveDir'/*"), "$tmpDir/";
  }else{
    print "no files to remove\n";
  }
}

sub ensureSaveCached($$$){
  my ($kingdomGameName, $saveDir, $cacheDir) = @_;
  if(not defined $saveDir or not -d $saveDir){
    $saveDir = "";
    my $msg = "ERROR: save dir does not exist: $saveDir";
    notifySend $msg;
    die "$msg\n";
  }

  my $currentSaveTar = fetchCurrentSaveTar($saveDir);
  my $currentSaveMtime = fetchCurrentSaveMtime($saveDir);
  my $currentSaveSha1 = calculateTarFileSHA1 $currentSaveTar;

  run "mkdir", "-p", $cacheDir if not -d $cacheDir;
  if(not -d $cacheDir){
    my $msg = "ERROR: cache dir does not exist: $cacheDir";
    notifySend $msg;
    die "$msg\n";
  }

  my $cacheDirSavesInfo = readCacheDirSavesInfo($cacheDir);

  my $cachedSave = $$cacheDirSavesInfo{savesBySha1}{$currentSaveSha1};

  my $datetimeFmt = `date --date \@$currentSaveMtime +%Y%m%d_%H%M%S`;
  chomp $datetimeFmt;

  if(defined $cachedSave){
    my $file = $$cachedSave{file};
    my $msg = "save already cached: $file\n";
    my $gameShortName = $$GAME_SHORT_NAMES{$kingdomGameName};
    notifySend "CACHED: $gameShortName - $datetimeFmt";
    print "$msg\n";
  }else{
    my $cacheFileName = "${datetimeFmt}_${currentSaveSha1}.tar.xz";

    my $saveFileCachePath = "$cacheDir/$cacheFileName";
    run "xz --compress --stdout $currentSaveTar > $saveFileCachePath";
    if(not -f $saveFileCachePath){
      my $msg = "ERROR: could not create file $saveFileCachePath";
      notifySend $msg;
      die "$msg\n";
    }

    run "touch", $saveFileCachePath, "--date", "\@$currentSaveMtime";

    run "rm", "-f", "$cacheDir/latest.tar.xz";
    run "ln", "-s", $cacheFileName, "$cacheDir/latest.tar.xz";

    my $save = getSaveInfoFromTarFile($saveFileCachePath);
    $$save{index} = 0;

    my $msg = formatSave($save, $kingdomGameName, $NEW_SAVE_FORMAT_SUMMARY_SPEC, '', 0);
    notifySend $msg;
    print "$msg\n";
  }

  run "rm", $currentSaveTar;
}

sub fetchCurrentSaveTar($){
  my ($saveDir) = @_;
  die "ERROR: could not find dir $saveDir\n" if not -d $saveDir;

  my $millis = nowMillis();
  my $oldPWD = $ENV{PWD};
  chdir $saveDir;
  $ENV{PWD} = $saveDir;

  my $tmpTar = "/tmp/kingdom-save-$millis.tar";
  run "tar", "-cf", $tmpTar, glob("*");

  chdir $oldPWD;
  $ENV{PWD} = $oldPWD;

  return $tmpTar;
}

sub fetchCurrentSaveMtime($){
  my ($saveDir) = @_;
  my @files = glob("'$saveDir'/*");
  my $maxMtime = undef;
  for my $file(@files){
    my $mtime = mtime $file;
    if(not defined $maxMtime or $mtime > $maxMtime){
      $maxMtime = $mtime;
    }
  }
  return $maxMtime;
}

sub readCacheDirSavesInfo($){
  my ($cacheDir) = @_;

  my @tarFiles = grep {-f $_} glob("$cacheDir/*.tar.xz");

  #get save files
  my @saves = map {getSaveInfoFromTarFile $_} @tarFiles;

  #remove duplicate save files using SHA-1 sums, keeping the latest by filename
  my %seenSha1;
  my @uniqueSaves;
  for my $save(reverse sort @saves){
    next if defined $seenSha1{$$save{sha1}};
    $seenSha1{$$save{sha1}} = 1;
    push @uniqueSaves, $save;
  }

  #sort save files by mtime, newest first
  @uniqueSaves = sort {$$b{mtime} <=> $$a{mtime}} @uniqueSaves;

  #add indexes to saves
  my $index = 0;
  for my $save(@uniqueSaves){
    $$save{index} = $index++;
  }

  #parse index=>save and save=>index
  my $savesByIndex = {};
  my $savesBySha1 = {};

  for my $save(@uniqueSaves){
    $$savesByIndex{$$save{index}} = $save;
    $$savesBySha1{$$save{sha1}} = $save;
  }

  return {
    savesByIndex => $savesByIndex,
    savesBySha1 => $savesBySha1,
  };
}

sub getSaveInfoFromTarFile($){
  my ($tarFile) = @_;

  my $mtime = mtime $tarFile;
  my $mtimeFmt = `date --date \@$mtime +'%Y-%m-%d %H:%M:%S'`;
  chomp $mtimeFmt;

  my $sha1 = readOrCalculateTarFileSHA1($tarFile);

  return {
    file     => $tarFile,
    sha1     => $sha1,
    mtime    => $mtime,
    mtimeFmt => $mtimeFmt,
    index    => undef,
  };
}

sub readOrCalculateTarFileSHA1($){
  my ($tarFile) = @_;
  my $sha1;
  if($tarFile =~ /(?:^|\/)(\d\d\d\d\d\d\d\d)_(\d\d\d\d\d\d)_([0-9a-f]{40})\.tar\.xz$/){
    my ($date, $time, $sha1sum) = ($1, $2, $3);
    $sha1 = $sha1sum;
  }else{
    $sha1 = calculateTarFileSHA1($tarFile);
  }
  return $sha1;
}

sub calculateTarFileSHA1($){
  my ($tarFile) = @_;
  my $sha1Cmd = "";
  $sha1Cmd .= "cat \"$tarFile\"";
  $sha1Cmd .= " | xz --decompress --stdout" if $tarFile =~ /\.xz$/i;
  $sha1Cmd .= " | sha1sum";

  my $sha1 = runSha1Cmd($sha1Cmd);

  my $emptySha1 = runSha1Cmd(": | sha1sum");

  die "ERROR: empty sha1sum returned for $tarFile\n" if $sha1 eq $emptySha1;

  return $sha1;
}

sub runSha1Cmd($){
  my ($sha1ShellCmd) = @_;
  open FH, "-|", $sha1ShellCmd or die "ERROR: cmd failed $sha1ShellCmd\n$!\n";
  my $out = join '', <FH>;
  close FH;

  if($out =~ /^([0-9a-f]{40})\s+-$/){
    return $1;
  }else{
    die "ERROR: cmd failed $sha1ShellCmd\n";
  }
}

sub notifySend($){
  system "notify-send", "-t", $NOTIFY_SEND_MILLIS, @_;
}

sub mtime($){
  return (stat $_[0])[9];
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  runQuiet @_;
}
sub runQuiet(@){
  system @_;
  if($? != 0){
    die "ERROR: \"@_\" failed\n";
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "<", $file or die "could not read $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;
  return $contents;
}
sub writeFile($$){
  my ($file, $contents) = @_;
  open FH, ">", $file or die "could not write $file\n$!\n";
  print FH $contents;
  close FH;
}

sub globOne($){
  my ($ptrn) = @_;
  my @files = glob($ptrn);
  if(@files == 0){
    return undef;
  }elsif(@files > 1){
    die "glob pattern matched more than one file: $ptrn\n";
  }else{
    return $files[0];
  }
}

&main(@ARGV);
