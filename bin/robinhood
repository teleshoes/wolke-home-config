#!/usr/bin/perl
use strict;
use warnings;
use JSON qw(from_json);
use Time::HiRes qw(time);

my $JSON_ORDERS_CACHE_DIR = "$ENV{HOME}/.cache/robinhood/orders-json";
my $JSON_QUOTES_CACHE_DIR = "$ENV{HOME}/.cache/robinhood/quotes-json";
my $INSTRUMENT_CACHE = "$ENV{HOME}/.cache/robinhood/instrument-cache";

my $API_INSTRUMENT_URL_PREFIX = "https://api.robinhood.com/instruments";
my $API_CURRENCY_PAIRS_URL_PREFIX = "https://nummus.robinhood.com/currency_pairs";
my $API_ORDERS_STOCKS_URL = "https://api.robinhood.com/orders/?page_size=100";
my $API_ORDERS_CRYPTO_URL = "https://nummus.robinhood.com/orders/?page_size=100";
my $API_QUOTES_CRYPTO_URL = "https://api.robinhood.com/marketdata/forex/quotes";
my $API_QUOTES_STOCKS_URL = "https://api.robinhood.com/quotes";

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0
  $0 --summary
    show all instruments total cost and total quantity

  $0 -o | --orders
    show all orders

  $0 --fetch-orders BEARER_TOKEN
    fetch stocks+crypto orders JSON and place them in:
      $JSON_ORDERS_CACHE_DIR

    to get BEARER_CODE:
      -log in with username/password/mfa/etc in a browser
      -inspect any network call to api.robinhood.com
      -copy the auth header
      -paste between single quotes as arg to $0
      -CLEAR YOUR TERMINAL HISTORY

    BEARER_CODE
      the fully authorized robinhood auth token
      can optionally start with \"Authorization: Bearer \"
        or can just be the token
      NOTE: protect BEARER_TOKEN closer than a password

  $0 --fetch-quotes
    -obtain a readonly auth token
    -for each instrument in any cached order
      -fetch a quote from the api (last_trade_price or ask_price)
      -store the quote in:
        $JSON_QUOTES_CACHE_DIR/YYYYMMDD_HHMMSS_MILLIS_SYMBOL.json
";

sub apiCallCurl($$);
sub getInstrumentSummary(@);
sub getReadonlyBearerToken();
sub fetchAndCacheQuote($$$$$);
sub readCachedQuote($);
sub parseJsonOrders();
sub readInstrumentCache();
sub writeInstrumentCache($);
sub getInstrumentSymbol($);
sub getCryptoCode($);
sub readUrl($);
sub readFile($);
sub writeFile($$);
sub dateFmt($$);
sub nowMillis();
sub run(@);
sub runQuiet(@);

my $COMMAND_SUMMARY = "summary";
my $COMMAND_ORDERS = "orders";
my $COMMAND_FETCH_ORDERS = "fetch-orders";
my $COMMAND_FETCH_QUOTES = "fetch-quotes";

sub main(@){
  my $cmd = $COMMAND_SUMMARY;
  my @cmdArgs;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--summary)$/){
      $cmd = $COMMAND_SUMMARY;
    }elsif($arg =~ /^(-o|--orders)$/){
      $cmd = $COMMAND_ORDERS;
    }elsif($arg =~ /^(--fetch-orders)$/){
      $cmd = $COMMAND_FETCH_ORDERS;
    }elsif($arg =~ /^(--fetch-quotes)$/){
      $cmd = $COMMAND_FETCH_QUOTES;
    }else{
      push @cmdArgs, $arg;
    }
  }

  if($cmd eq $COMMAND_SUMMARY){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    my @orders = parseJsonOrders();
    my $summary = getInstrumentSummary(@orders);
    my $totalCost = 0;
    my $totalValue = 0;
    for my $sym(sort keys %$summary){
      my ($cost, $amount) = ($$summary{$sym}{cost}, $$summary{$sym}{amount});
      my $quote = readCachedQuote($sym);
      my $value = $amount * $quote;
      my $profit = $value - $cost;

      $totalCost += $cost;
      $totalValue += $value;

      my $profitSign = $profit > 0 ? "+" : "-";
      my $absProfit = $profit >= 0 ? $profit : 0-$profit;

      printf "%-5s | %8.2f\$ | %8.3f for %8.2f\$ | %s%8.2f\n",
        $sym, $value, $amount, $cost, $profitSign, $absProfit;
    }
    my $totalProfit = $totalValue - $totalCost;
    my $totalProfitSign = $totalProfit > 0 ? "+" : "-";
    my $totalAbsProfit = $totalProfit >= 0 ? $totalProfit : 0-$totalProfit;

    printf "%-5s | %8.2f\$ | %8s     %8.2f\$ | %s%8.2f\n",
      "TOTAL", $totalValue, "", $totalCost, $totalProfitSign, $totalAbsProfit;
  }elsif($cmd eq $COMMAND_ORDERS){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    my @orders = parseJsonOrders();
    for my $order(@orders){
      my $timeFmt = dateFmt $$order{time}, '%Y-%m-%d_%H:%M:%S';
      chomp $timeFmt;
      my ($symbol, $price, $amount, $buySell) = (
        $$order{symbol}, $$order{price}, $$order{amount}, $$order{buySell});
      my $cost = defined $price && defined $amount ? $price*$amount : undef;

      $price = 0 if not defined $price;
      $amount = 0 if not defined $amount;
      $cost = 0 if not defined $cost;

      my $plusMinus = $buySell eq "buy" ? "-" : "+";

      printf "%s | %-5s | %4s | %8.3f @ %8.2f\$ | %s %8.2f\$\n",
        $timeFmt, $symbol, $buySell, $amount, $price, $plusMinus, $cost;
    }
  }elsif($cmd eq $COMMAND_FETCH_ORDERS){
    die "$USAGE\nERROR: missing BEARER_TOKEN\n" if @cmdArgs == 0;
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 1;
    my ($bearerToken) = @cmdArgs;
    $bearerToken =~ s/^\s*Authorization:\s*Bearer\s*//;

    my $nowMillis = nowMillis();
    my $nowFmt = dateFmt $nowMillis/1000, "%Y%m%d_%H%M%S";
    my $filePrefix = "${nowFmt}_${nowMillis}";

    runQuiet "mkdir", "-p", $JSON_ORDERS_CACHE_DIR;

    writeFile "${JSON_ORDERS_CACHE_DIR}/${filePrefix}_stocks.json",
      apiCallCurl($API_ORDERS_STOCKS_URL, $bearerToken) . "\n";

    writeFile "${JSON_ORDERS_CACHE_DIR}/${filePrefix}_crypto.json",
      apiCallCurl($API_ORDERS_CRYPTO_URL, $bearerToken) . "\n";
  }elsif($cmd eq $COMMAND_FETCH_QUOTES){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    my @orders = parseJsonOrders();

    my $nowMillis = nowMillis();
    my $nowFmt = dateFmt $nowMillis/1000, "%Y%m%d_%H%M%S";
    my $filePrefix = "${nowFmt}_${nowMillis}";

    my $bearerToken = getReadonlyBearerToken();

    my %seenSymbols;
    for my $order(@orders){
      next if defined $seenSymbols{$$order{symbol}};
      $seenSymbols{$$order{symbol}} = 1;
      fetchAndCacheQuote($filePrefix, $bearerToken,
        $$order{symbol}, $$order{instrumentId}, $$order{isCrypto});
    }

    print "\n";
    for my $symbol(sort keys %seenSymbols){
      printf "%-5s = %s\n", $symbol, readCachedQuote($symbol);
    }
  }else{
    die $USAGE;
  }
}

sub apiCallCurl($$){
  my ($url, $bearerToken) = @_;
  my @cmd = ("curl",
    "--silent",
    "-H", "Authorization: Bearer $bearerToken",
    $url,
  );
  open CMD, "-|", @cmd or die "ERROR: curl failed\n$!\n";
  my $out = join '', <CMD>;
  close CMD;
  return $out;
}

sub getInstrumentSummary(@){
  my @orders = @_;
  my $summary = {};
  for my $order(@orders){
    my ($sym, $price, $amount) = ($$order{symbol}, $$order{price}, $$order{amount});
    if(not defined $$summary{$sym}){
      $$summary{$sym} = {
        cost => 0,
        amount => 0,
        symbol => $sym,
        instrumentId => $$order{instrumentId},
      };
    }

    if(defined $amount and defined $price){
      my $deltaCost = $price*$amount;
      my $deltaAmount = $amount;
      $deltaCost = 0-$deltaCost if $$order{buySell} eq "sell";
      $deltaAmount = 0-$deltaAmount if $$order{buySell} eq "sell";

      $$summary{$sym}{cost} += $deltaCost;
      $$summary{$sym}{amount} += $deltaAmount;
    }
  }
  return $summary;
}

sub readCachedQuote($){
  my ($symbol) = @_;
  my @quoteFiles = sort glob "$JSON_QUOTES_CACHE_DIR/*_$symbol.json";
  return undef if @quoteFiles == 0;
  my $quoteFile = $quoteFiles[-1];
  my $json = readFile $quoteFile;
  my $obj = from_json $json;
  die "ERROR: malformed quote $quoteFile\n" if $$obj{symbol} !~ /^$symbol(USD)?$/;

  my $lastTradePrice = $$obj{last_trade_price};
  my $askPrice = $$obj{ask_price};
  my $quote = undef;
  $quote = $lastTradePrice if not defined $quote;
  $quote = $askPrice if not defined $quote;
  return $quote;
}

sub fetchAndCacheQuote($$$$$){
  my ($filePrefix, $bearerToken, $symbol, $instrumentId, $isCrypto) = @_;
  my $url;
  if($isCrypto){
    $url = "$API_QUOTES_CRYPTO_URL/$instrumentId/";
  }else{
    $url = "$API_QUOTES_STOCKS_URL/$symbol/";
  }

  runQuiet "mkdir", "-p", $JSON_QUOTES_CACHE_DIR;
  print "fetching quote for $symbol\n";
  writeFile "${JSON_QUOTES_CACHE_DIR}/${filePrefix}_$symbol.json",
    apiCallCurl($url, $bearerToken) . "\n";
}

sub getReadonlyBearerToken(){
  print "fetching read-only bearer token\n";
  my $html = `wget -q -O - https://robinhood.com/stocks/IBM`;
  if($html =~ /"access_token":"([^"]*)"/){
    return $1;
  }
  return undef;
}

sub parseJsonOrders(){
  my $instrumentCache = readInstrumentCache();
  my $updateInstrumentCache = 0;
  my @orders;
  my %seenOrderIds;
  my @ordersFiles = sort glob "$JSON_ORDERS_CACHE_DIR/*";
  for my $file(reverse @ordersFiles){
    my $json = readFile $file;
    my $obj = from_json $json;
    my @results = @{$$obj{results}};
    for my $res(@results){
      my $orderId = $$res{id};
      next if defined $seenOrderIds{$orderId};
      $seenOrderIds{$orderId} = 1;

      my $isCrypto = defined $$res{currency_pair_id};

      my $instId = $isCrypto ? $$res{currency_pair_id} : $$res{instrument_id};
      my $price = $$res{average_price};
      my $amount = $$res{cumulative_quantity};
      my $createdAt = $$res{created_at};
      my $buySell = $$res{side};

      my $time = `date --date="$createdAt" +%s.%N`;
      chomp $time;

      if(defined $instId and not defined $$instrumentCache{$instId}){
        my $sym = $isCrypto ? getCryptoCode($instId) : getInstrumentSymbol($instId);
        $$instrumentCache{$instId} = $sym;
        $updateInstrumentCache = 1;
      }

      my $symbol = $$instrumentCache{$instId} if defined $instId;

      my $order = {
        symbol       => $symbol,
        instrumentId => $instId,
        isCrypto     => $isCrypto,
        price        => $price,
        amount       => $amount,
        time         => $time,
        buySell      => $buySell,
      };
      push @orders, $order;
    }
  }
  if($updateInstrumentCache){
    writeInstrumentCache $instrumentCache;
  }

  @orders = sort { $$a{time} <=> $$b{time} } @orders;

  return @orders;
}

sub readInstrumentCache(){
  return {} if not -f $INSTRUMENT_CACHE;

  open FH, "< $INSTRUMENT_CACHE" or die "ERROR: could not read $INSTRUMENT_CACHE\n$!\n";
  my @lines = <FH>;
  close FH;
  my $instruments = { map {$_ =~ /^(\w+) (.+)$/; ($2, $1)} @lines };
  return $instruments;
}
sub writeInstrumentCache($){
  my ($instruments) = @_;
  open FH, "> $INSTRUMENT_CACHE" or die "ERROR: could not write $INSTRUMENT_CACHE\n$!\n";
  my @idOrder = sort {$$instruments{$a} cmp $$instruments{$b}} keys %$instruments;
  for my $id(@idOrder){
    my $sym = $$instruments{$id};
    print FH "$sym $id\n";
  }
  close FH;
}

sub getInstrumentSymbol($){
  my ($instrumentId) = @_;
  my $url = "$API_INSTRUMENT_URL_PREFIX/$instrumentId/";
  my $json = readUrl($url);
  my $obj = from_json($json);
  my $sym = $$obj{symbol};
  die "ERROR: invalid instrument symbol $sym\n" if $sym !~ /^\w+$/;
  return $sym;
}
sub getCryptoCode($){
  my ($currencyPairId) = @_;
  my $url = "$API_CURRENCY_PAIRS_URL_PREFIX/$currencyPairId/";
  my $json = readUrl($url);
  my $obj = from_json($json);
  my $code = $$obj{asset_currency}{code};
  die "ERROR: invalid crypto code $code\n" if $code !~ /^\w+$/;
  return $code;
}

sub readUrl($){
  my ($url) = @_;
  return `wget "$url" -O - -q`;
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}

sub writeFile($$){
  my ($file, $content) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $content;
  close FH;
}

sub dateFmt($$){
  my ($epoch, $fmt) = @_;
  my $dateFmt = `date --date=\@$epoch +'$fmt'`;
  chomp $dateFmt;
  return $dateFmt;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5)
}

sub run(@){
  print "@_\n";
  runQuiet(@_);
}

sub runQuiet(@){
  system @_;
}

&main(@ARGV);
