#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use JSON qw(from_json);
use POSIX qw(ceil);
use Time::HiRes qw(time);

my $EXEC = basename $0;
my $JSON_ORDERS_CACHE_DIR = "$ENV{HOME}/.cache/robinhood/orders-json";
my $JSON_QUOTES_CACHE_DIR = "$ENV{HOME}/.cache/robinhood/quotes-json";
my $INSTRUMENT_CACHE = "$ENV{HOME}/.cache/robinhood/instrument-cache";

my $API_INSTRUMENT_URL_PREFIX = "https://api.robinhood.com/instruments";
my $API_CURRENCY_PAIRS_URL_PREFIX = "https://nummus.robinhood.com/currency_pairs";
my $API_ORDERS_STOCKS_URL = "https://api.robinhood.com/orders/?page_size=100";
my $API_ORDERS_CRYPTO_URL = "https://nummus.robinhood.com/orders/?page_size=100";
my $API_QUOTES_CRYPTO_URL = "https://api.robinhood.com/marketdata/forex/quotes";
my $API_QUOTES_STOCKS_URL = "https://api.robinhood.com/quotes";

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
  $EXEC [OPTS] --fetch-summary
    same as: $EXEC --fetch-quotes >/dev/null && $EXEC --summary

  $EXEC [OPTS] -s | --summary
    show all instruments total cost and total quantity

  $EXEC [OPTS] -o | --orders
    show all orders

  $EXEC [OPTS] --fetch-orders BEARER_TOKEN
    fetch stocks+crypto orders JSON and place them in:
      $JSON_ORDERS_CACHE_DIR

    to get BEARER_CODE:
      -log in with username/password/mfa/etc in a browser
      -inspect any network call to api.robinhood.com
      -copy the auth header
      -paste between single quotes as arg to $EXEC
      -CLEAR YOUR TERMINAL HISTORY

    BEARER_CODE
      the fully authorized robinhood auth token
      can optionally start with \"Authorization: Bearer \"
        or can just be the token
      NOTE: protect BEARER_TOKEN closer than a password

  $EXEC [OPTS] --fetch-quotes
    -obtain a readonly auth token
    -for each instrument in any cached order
      -fetch a quote from the api (last_trade_price or ask_price)
      -store the quote in:
        $JSON_QUOTES_CACHE_DIR/YYYYMMDD_HHMMSS_MILLIS_SYMBOL.json

   OPTS
    --color
      use Term::ANSIColor to output text formatted with ANSI color escapes
      used for \$USD profit/loss in summary (green/red)
    --no-color
      do not output any ANSI color escapes
    --color-term-only
      (this is the default)
      if STDOUT is a TTY, same as --color
      if STDOUT is not a TTY, same as --no-color
";

sub apiCallCurl($$);
sub getInstrumentSummary(@);
sub getReadonlyBearerToken();
sub fetchAndCacheQuote($$$$$$);
sub readCachedQuote($);
sub parseJsonOrders();
sub readInstrumentCache();
sub writeInstrumentCache($);
sub getInstrumentSymbol($);
sub getCryptoCode($);
sub readUrl($);
sub readFile($);
sub writeFile($$);
sub maybeColorText($$$);
sub colorText($$);
sub usdFmt($$$$);
sub dateFmt($$);
sub nowMillis();
sub run(@);
sub runQuiet(@);

my $COMMAND_FETCH_SUMMARY = "fetch-summary";
my $COMMAND_SUMMARY = "summary";
my $COMMAND_ORDERS = "orders";
my $COMMAND_FETCH_ORDERS = "fetch-orders";
my $COMMAND_FETCH_QUOTES = "fetch-quotes";

my $IS_TERM = -t STDOUT;

sub main(@){
  my $cmd = $COMMAND_FETCH_SUMMARY;
  my $opts = {};
  my @cmdArgs;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--fetch-summary)$/){
      $cmd = $COMMAND_FETCH_SUMMARY;
    }elsif($arg =~ /^(-s|--summary)$/){
      $cmd = $COMMAND_SUMMARY;
    }elsif($arg =~ /^(-o|--orders)$/){
      $cmd = $COMMAND_ORDERS;
    }elsif($arg =~ /^(--fetch-orders)$/){
      $cmd = $COMMAND_FETCH_ORDERS;
    }elsif($arg =~ /^(--fetch-quotes)$/){
      $cmd = $COMMAND_FETCH_QUOTES;
    }elsif($arg =~ /^(--color)$/){
      $$opts{useColor} = 1;
    }elsif($arg =~ /^(--no-color)$/){
      $$opts{useColor} = 0;
    }elsif($arg =~ /^(--color-term-only)$/){
      $$opts{useColor} = $IS_TERM;
    }else{
      push @cmdArgs, $arg;
    }
  }

  $$opts{quiet} = $cmd eq $COMMAND_FETCH_SUMMARY ? 1 : 0 if not defined $$opts{quiet};
  $$opts{useColor} = $IS_TERM if not defined $$opts{useColor};

  if($cmd eq $COMMAND_FETCH_SUMMARY){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    cmdFetchQuotes($opts);
    cmdSummary($opts);
  }elsif($cmd eq $COMMAND_SUMMARY){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    cmdSummary($opts);
  }elsif($cmd eq $COMMAND_ORDERS){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    cmdOrders($opts);
  }elsif($cmd eq $COMMAND_FETCH_ORDERS){
    die "$USAGE\nERROR: missing BEARER_TOKEN\n" if @cmdArgs == 0;
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 1;
    my ($bearerToken) = @cmdArgs;
    cmdFetchOrders($opts, $bearerToken);
  }elsif($cmd eq $COMMAND_FETCH_QUOTES){
    die "$USAGE\nERROR: unknown args @cmdArgs\n" if @cmdArgs > 0;
    cmdFetchQuotes($opts);
  }else{
    die $USAGE;
  }
}

sub cmdSummary($){
  my ($opts) = @_;
  my @orders = parseJsonOrders();
  my $summary = getInstrumentSummary(@orders);
  my $totalCost = 0;
  my $totalValue = 0;
  for my $sym(sort keys %$summary){
    my ($cost, $amount) = ($$summary{$sym}{cost}, $$summary{$sym}{amount});
    my $quote = readCachedQuote($sym);
    my $value = $amount * $quote;
    my $profit = $value - $cost;

    $totalCost += $cost;
    $totalValue += $value;

    my $profitSign = $profit > 0 ? "+" : "-";
    my $absProfit = $profit >= 0 ? $profit : 0-$profit;
    my $colorProfit = $profitSign eq "+" ? "green" : "red";

    printf "%-5s | %s | %8.3f for %s | %s%s\n",
      $sym,
      usdFmt($opts, 10, undef, $value),
      $amount,
      usdFmt($opts, 10, undef, $cost),
      $profitSign,
      usdFmt($opts, 10, $colorProfit, $absProfit),
    ;
  }
  my $totalProfit = $totalValue - $totalCost;
  my $totalProfitSign = $totalProfit > 0 ? "+" : "-";
  my $totalAbsProfit = $totalProfit >= 0 ? $totalProfit : 0-$totalProfit;
  my $colorTotalProfit = $totalProfitSign eq "+" ? "green" : "red";

  printf "%-5s | %s | %8s     %s | %s%s\n",
    "TOTAL",
    usdFmt($opts, 10, undef, $totalValue),
    "",
    usdFmt($opts, 10, undef, $totalCost),
    $totalProfitSign,
    usdFmt($opts, 10, $colorTotalProfit, $totalAbsProfit),
  ;
}
sub cmdOrders($){
  my ($opts) = @_;
  my @orders = parseJsonOrders();
  for my $order(@orders){
    my $timeFmt = dateFmt $$order{time}, '%Y-%m-%d_%H:%M:%S';
    chomp $timeFmt;
    my ($symbol, $price, $amount, $buySell) = (
      $$order{symbol}, $$order{price}, $$order{amount}, $$order{buySell});
    my $cost = defined $price && defined $amount ? $price*$amount : undef;

    $price = 0 if not defined $price;
    $amount = 0 if not defined $amount;
    $cost = 0 if not defined $cost;

    my $plusMinus = $buySell eq "buy" ? "-" : "+";

    printf "%s | %-5s | %4s | %8.3f @ %8.2f\$ | %s %8.2f\$\n",
      $timeFmt, $symbol, $buySell, $amount, $price, $plusMinus, $cost;
  }
}
sub cmdFetchOrders($$){
  my ($opts, $bearerToken) = @_;
  $bearerToken =~ s/^\s*Authorization:\s*Bearer\s*//;

  my $nowMillis = nowMillis();
  my $nowFmt = dateFmt $nowMillis/1000, "%Y%m%d_%H%M%S";
  my $filePrefix = "${nowFmt}_${nowMillis}";

  runQuiet "mkdir", "-p", $JSON_ORDERS_CACHE_DIR;

  writeFile "${JSON_ORDERS_CACHE_DIR}/${filePrefix}_stocks.json",
    apiCallCurl($API_ORDERS_STOCKS_URL, $bearerToken) . "\n";

  writeFile "${JSON_ORDERS_CACHE_DIR}/${filePrefix}_crypto.json",
    apiCallCurl($API_ORDERS_CRYPTO_URL, $bearerToken) . "\n";
}
sub cmdFetchQuotes($){
  my ($opts) = @_;
  my @orders = parseJsonOrders();

  my $nowMillis = nowMillis();
  my $nowFmt = dateFmt $nowMillis/1000, "%Y%m%d_%H%M%S";
  my $filePrefix = "${nowFmt}_${nowMillis}";

  print "fetching read-only bearer token\n" unless $$opts{quiet};
  my $bearerToken = getReadonlyBearerToken();

  my %seenSymbols;
  for my $order(@orders){
    next if defined $seenSymbols{$$order{symbol}};
    $seenSymbols{$$order{symbol}} = 1;
    fetchAndCacheQuote($$opts{quiet}, $filePrefix, $bearerToken,
      $$order{symbol}, $$order{instrumentId}, $$order{isCrypto});
  }

  if(not $$opts{quiet}){
    print "\n";
    for my $symbol(sort keys %seenSymbols){
      printf "%-5s = %s\n", $symbol, readCachedQuote($symbol);
    }
  }
}

sub apiCallCurl($$){
  my ($url, $bearerToken) = @_;
  my @cmd = ("curl",
    "--silent",
    "-H", "Authorization: Bearer $bearerToken",
    $url,
  );
  open CMD, "-|", @cmd or die "ERROR: curl failed\n$!\n";
  my $out = join '', <CMD>;
  close CMD;
  return $out;
}

sub getInstrumentSummary(@){
  my @orders = @_;
  my $summary = {};
  for my $order(@orders){
    my ($sym, $price, $amount) = ($$order{symbol}, $$order{price}, $$order{amount});
    if(not defined $$summary{$sym}){
      $$summary{$sym} = {
        cost => 0,
        amount => 0,
        symbol => $sym,
        instrumentId => $$order{instrumentId},
      };
    }

    if(defined $amount and defined $price){
      my $deltaCost = $price*$amount;
      my $deltaAmount = $amount;
      $deltaCost = 0-$deltaCost if $$order{buySell} eq "sell";
      $deltaAmount = 0-$deltaAmount if $$order{buySell} eq "sell";

      $$summary{$sym}{cost} += $deltaCost;
      $$summary{$sym}{amount} += $deltaAmount;
    }
  }
  return $summary;
}

sub readCachedQuote($){
  my ($symbol) = @_;
  my @quoteFiles = sort glob "$JSON_QUOTES_CACHE_DIR/*_$symbol.json";
  return undef if @quoteFiles == 0;
  my $quoteFile = $quoteFiles[-1];
  my $json = readFile $quoteFile;
  my $obj = from_json $json;
  die "ERROR: malformed quote $quoteFile\n" if $$obj{symbol} !~ /^$symbol(USD)?$/;

  my @priceKeyOrder = qw(
    mark_price
    last_extended_hours_trade_price
    last_trade_price
    ask_price
    bid_price
    adjusted_previous_close
    previous_close
  );

  my $quote = undef;
  for my $key(@priceKeyOrder){
    my $price = $$obj{$key};
    if(defined $price){
      $quote = $price;
      last;
    }
  }

  return $quote;
}

sub fetchAndCacheQuote($$$$$$){
  my ($quiet, $filePrefix, $bearerToken, $symbol, $instrumentId, $isCrypto) = @_;
  my $url;
  if($isCrypto){
    $url = "$API_QUOTES_CRYPTO_URL/$instrumentId/";
  }else{
    $url = "$API_QUOTES_STOCKS_URL/$symbol/";
  }

  runQuiet "mkdir", "-p", $JSON_QUOTES_CACHE_DIR;
  print "fetching quote for $symbol\n" unless $quiet;
  writeFile "${JSON_QUOTES_CACHE_DIR}/${filePrefix}_$symbol.json",
    apiCallCurl($url, $bearerToken) . "\n";
}

sub getReadonlyBearerToken(){
  my $html = `wget -q -O - https://robinhood.com/stocks/IBM`;
  if($html =~ /"access_token":"([^"]*)"/){
    return $1;
  }
  return undef;
}

sub parseJsonOrders(){
  my $instrumentCache = readInstrumentCache();
  my $updateInstrumentCache = 0;
  my @orders;
  my %seenOrderIds;
  my @ordersFiles = sort glob "$JSON_ORDERS_CACHE_DIR/*";
  for my $file(reverse @ordersFiles){
    my $json = readFile $file;
    my $obj = from_json $json;
    my @results = @{$$obj{results}};
    for my $res(@results){
      my $orderId = $$res{id};
      next if defined $seenOrderIds{$orderId};
      $seenOrderIds{$orderId} = 1;

      my $isCrypto = defined $$res{currency_pair_id};

      my $instId = $isCrypto ? $$res{currency_pair_id} : $$res{instrument_id};
      my $price = $$res{average_price};
      my $amount = $$res{cumulative_quantity};
      my $createdAt = $$res{created_at};
      my $buySell = $$res{side};

      my $time = `date --date="$createdAt" +%s.%N`;
      chomp $time;

      if(defined $instId and not defined $$instrumentCache{$instId}){
        my $sym = $isCrypto ? getCryptoCode($instId) : getInstrumentSymbol($instId);
        $$instrumentCache{$instId} = $sym;
        $updateInstrumentCache = 1;
      }

      my $symbol = $$instrumentCache{$instId} if defined $instId;

      my $order = {
        symbol       => $symbol,
        instrumentId => $instId,
        isCrypto     => $isCrypto,
        price        => $price,
        amount       => $amount,
        time         => $time,
        buySell      => $buySell,
      };
      push @orders, $order;
    }
  }
  if($updateInstrumentCache){
    writeInstrumentCache $instrumentCache;
  }

  @orders = sort { $$a{time} <=> $$b{time} } @orders;

  return @orders;
}

sub readInstrumentCache(){
  return {} if not -f $INSTRUMENT_CACHE;

  open FH, "< $INSTRUMENT_CACHE" or die "ERROR: could not read $INSTRUMENT_CACHE\n$!\n";
  my @lines = <FH>;
  close FH;
  my $instruments = { map {$_ =~ /^(\w+) (.+)$/; ($2, $1)} @lines };
  return $instruments;
}
sub writeInstrumentCache($){
  my ($instruments) = @_;
  open FH, "> $INSTRUMENT_CACHE" or die "ERROR: could not write $INSTRUMENT_CACHE\n$!\n";
  my @idOrder = sort {$$instruments{$a} cmp $$instruments{$b}} keys %$instruments;
  for my $id(@idOrder){
    my $sym = $$instruments{$id};
    print FH "$sym $id\n";
  }
  close FH;
}

sub getInstrumentSymbol($){
  my ($instrumentId) = @_;
  my $url = "$API_INSTRUMENT_URL_PREFIX/$instrumentId/";
  my $json = readUrl($url);
  my $obj = from_json($json);
  my $sym = $$obj{symbol};
  die "ERROR: invalid instrument symbol $sym\n" if $sym !~ /^\w+$/;
  return $sym;
}
sub getCryptoCode($){
  my ($currencyPairId) = @_;
  my $url = "$API_CURRENCY_PAIRS_URL_PREFIX/$currencyPairId/";
  my $json = readUrl($url);
  my $obj = from_json($json);
  my $code = $$obj{asset_currency}{code};
  die "ERROR: invalid crypto code $code\n" if $code !~ /^\w+$/;
  return $code;
}

sub readUrl($){
  my ($url) = @_;
  return `wget "$url" -O - -q`;
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "ERROR: could not read $file\n$!\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}

sub writeFile($$){
  my ($file, $content) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $content;
  close FH;
}

sub maybeColorText($$$){
  my ($useColor, $text, $color) = @_;
  if($useColor and defined $color){
    return colorText($text, $color);
  }else{
    return $text;
  }
}
sub colorText($$){
  my ($text, $color) = @_;
  require Term::ANSIColor;
  return Term::ANSIColor::colored($text, $color);
}

sub usdFmt($$$$){
  my ($opts, $len, $color, $usd) = @_;
  my $sign = $usd >= 0 ? "" : "-";
  $usd = $usd*-1 if $usd < 0;
  my $fmt = sprintf "\$%.2f", ceil($usd * 100.0) / 100.0;
  $fmt = "$sign$fmt";
  $fmt = sprintf "%${len}s", $fmt;
  return maybeColorText($$opts{useColor}, $fmt, $color);
}

sub dateFmt($$){
  my ($epoch, $fmt) = @_;
  my $dateFmt = `date --date=\@$epoch +'$fmt'`;
  chomp $dateFmt;
  return $dateFmt;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5)
}

sub run(@){
  print "@_\n";
  runQuiet(@_);
}

sub runQuiet(@){
  system @_;
}

&main(@ARGV);
