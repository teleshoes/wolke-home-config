#!/usr/bin/python3
import aiohttp
import argparse
import asyncio
import logging
import os
import re
import subprocess
import sys
import time
from pathlib import Path

### suppress slimxpp warning:
###   Using slower stringprep, consider compiling the faster cython/libidn one.
from contextlib import redirect_stderr, suppress
with redirect_stderr(None), suppress(ModuleNotFoundError):
  import slixmpp
###

from gehomesdk import (
    EVENT_APPLIANCE_INITIAL_UPDATE,
    ErdAcOperationMode,
    ErdAcFanSetting,
    ErdCode,
    ErdOnOff,
    GeAppliance,
    GeWebsocketClient,
)

TOKEN_CACHE_DIR = str(Path.home()) + "/.cache/gehomesdk-tokens/"
SECRETS_FILE = str(Path.home()) + "/.secrets"
CONFIG_FILE = str(Path.home()) + "/.config/gehomesdk.config"

COMMAND_GET = '--get'
COMMAND_SET_POWER = '--power'
COMMAND_SET_MODE = '--mode'
COMMAND_SET_TEMP = '--temp'
COMMAND_SET_FAN = '--fan'

POWER_ON = "on"
POWER_OFF = "off"
POWER_TOGGLE = "toggle"

TIMEOUT_MILLIS = 10000

class ArgParseFormatter(argparse.HelpFormatter):
  def _split_lines(self, text, width):
    return text.splitlines()

class GeCmd:
  def __init__(self, cmdName, cmdVal=None):
    self.cmdName = cmdName
    self.cmdVal = cmdVal
  def __str__(self):
    return self.cmdName + ("="+str(self.cmdVal) if self.cmdVal else "")

COMMAND_SYNONYMS = {
  "on":     [ GeCmd(COMMAND_SET_POWER, POWER_ON) ],
  "off":    [ GeCmd(COMMAND_SET_POWER, POWER_OFF) ],
  "toggle": [ GeCmd(COMMAND_SET_POWER, POWER_TOGGLE) ],
  "cool":   [ GeCmd(COMMAND_SET_POWER, POWER_ON),
              GeCmd(COMMAND_SET_MODE,  ErdAcOperationMode.COOL),
              GeCmd(COMMAND_SET_TEMP,  72),
              GeCmd(COMMAND_SET_FAN,   ErdAcFanSetting.MED),
            ],
  "cold":   [ GeCmd(COMMAND_SET_POWER, POWER_ON),
              GeCmd(COMMAND_SET_MODE,  ErdAcOperationMode.COOL),
              GeCmd(COMMAND_SET_TEMP,  70),
              GeCmd(COMMAND_SET_FAN,   ErdAcFanSetting.HIGH),
            ],
}

COMMAND_SYNONYM_FORMAT = "".join([""
  + synName + "\n"
  + "".join(["  " + str(cmd) + "\n" for cmd in cmdList])
  for synName, cmdList in sorted(COMMAND_SYNONYMS.items())
])

async def main():
  parser = argparse.ArgumentParser(formatter_class=ArgParseFormatter)
  parser.add_argument("--username", type=str,
                      help=("SmartHQ account username\n"
                              + "(smarthq.username in secrets, or SMARTHQ_USERNAME env var)"))
  parser.add_argument("--password", type=str,
                      help=("SmartHQ account password\n"
                              + "(smarthq.password in secrets, or SMARTHQ_PASSWORD env var)"))
  parser.add_argument("--region", type=str,
                      help=("SmartHQ region (US or EU, defaults to US)\n"
                              + "(smarthq.region in secrets, or SMARTHQ_REGION env var)"))
  parser.add_argument("--debug", action='store_true',
                      help="enable debug logging in gehomesdk")
  parser.add_argument("-d", "--device", dest="DEVICE_NAME", type=str,
                      help="name of device in config (default is first device)")
  parser.add_argument("-g", "--get", dest="GET", action='store_true',
                      help="print one-line summary of device (this is the default)")
  parser.add_argument("-p", "--power", dest="POWER", type=str,
                      help="set power, one of: on, off, toggle")
  parser.add_argument("-m", "--mode", dest="MODE", type=str,
                      help="set mode, one of: auto, cool, dry, eco/energysaver, fan")
  parser.add_argument("-t", "--temp", dest="TEMP", type=int,
                      help="target temperature in °F, 64-86")
  parser.add_argument("-f", "--fan", dest="FAN", type=str,
                      help="set fan speed, one of: auto, high, med/medium, low")
  parser.add_argument('synonyms', metavar='COMMAND_SYNONYM', type=str, nargs='*',
                      help=COMMAND_SYNONYM_FORMAT)

  args = parser.parse_args()

  username = args.username
  if username == None:
    username = os.environ.get("SMARTHQ_USERNAME")
  if username == None:
    username = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.username"])

  password = args.password
  if password == None:
    password = os.environ.get("SMARTHQ_PASSWORD")
  if password == None:
    password = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.password"])

  region = args.region
  if region == None:
    region = os.environ.get("SMARTHQ_REGION")
  if region == None:
    region = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.region"])
  if region == None:
    region = "US"

  if username == None or password == None or username == "" or password == "":
    die(parser.format_help() + "\nERROR: missing username and/or password\n")

  deviceConfig = readConfig(CONFIG_FILE)
  if not deviceConfig:
    die("ERROR: no devices found in " + CONFIG_FILE + "\n")

  targetDeviceName = args.DEVICE_NAME
  if targetDeviceName == None:
    targetDeviceName = deviceConfig[0]['name']
  elif targetDeviceName not in [cfg['name'] for cfg in deviceConfig]:
    die(parser.format_help() + "\nERROR: unknown device " + targetDeviceName)

  commands = []

  if args.GET:
    commands.append(GeCmd(COMMAND_GET))

  if args.POWER:
    powerArg = args.POWER.lower()
    powerVal = None
    if powerArg == "on":
      powerVal = POWER_ON
    elif powerArg == "off":
      powerVal = POWER_OFF
    elif powerArg == "toggle":
      powerVal = POWER_TOGGLE
    else:
      die(parser.format_help()+ "\nERROR: invalid --power\n")

    commands.append(GeCmd(COMMAND_SET_POWER, powerVal))

  if args.MODE:
    modeArg = args.MODE.lower()
    modeVal = None
    if modeArg == "auto":
      modeVal = ErdAcOperationMode.AUTO
    elif modeArg == "cool":
      modeVal = ErdAcOperationMode.COOL
    elif modeArg == "dry":
      modeVal = ErdAcOperationMode.DRY
    elif modeArg == "eco" or modeArg == "energysaver":
      modeVal = ErdAcOperationMode.ENERGY_SAVER
    elif modeArg == "fan":
      modeVal = ErdAcOperationMode.FAN_ONLY
    else:
      die(parser.format_help()+ "\nERROR: invalid --mode\n")
    commands.append(GeCmd(COMMAND_SET_MODE, modeVal))

  if args.TEMP:
    commands.append(GeCmd(COMMAND_SET_TEMP, args.TEMP))

  if args.FAN:
    fanArg = args.FAN.lower()
    fanVal = None
    if fanArg == "auto":
      fanVal = ErdAcFanSetting.AUTO
    elif fanArg == "high":
      fanVal = ErdAcFanSetting.HIGH
    elif fanArg == "medium" or fanArg == "med":
      fanVal = ErdAcFanSetting.MED
    elif fanArg == "low":
      fanVal = ErdAcFanSetting.LOW
    else:
      die(parser.format_help() + "\nERROR: invalid --fan\n")
    commands.append(GeCmd(COMMAND_SET_FAN, fanVal))

  if args.synonyms:
    for syn in args.synonyms:
      if not syn in COMMAND_SYNONYMS:
        die(parser.format_help() + "\nERROR: unknown arg " + syn)
      commands.extend(COMMAND_SYNONYMS[syn])

  if not commands:
    commands.append(GeCmd(COMMAND_GET))

  if args.debug:
    logging.basicConfig(level=logging.DEBUG, format='%(levelname)-8s %(message)s')

  acHandler = ACHandler(deviceConfig, targetDeviceName, commands)

  client = GeWebsocketClient(username, password, region, asyncio.get_running_loop())
  client.add_event_handler(EVENT_APPLIANCE_INITIAL_UPDATE, acHandler.handle)

  session = aiohttp.ClientSession()
  credentials = readToken(username)
  if credentials != None:
    try:
      client._session = session
      client.credentials = credentials
      await client._async_run_client()
    except:
      await client.async_get_credentials_and_run(session)
  else:
    await client.async_get_credentials_and_run(session)


class ACHandler():
  def __init__(self, config, targetDeviceName, commands):
    self.config = config
    self.targetDeviceName = targetDeviceName
    self.commands = commands

    self.targetMac = None
    for entry in self.config:
      if entry['name'] == targetDeviceName:
        self.targetMac = entry['mac']

  async def handle(self, appliance):
    if self.targetMac == None:
      return

    if getMacSuffix(appliance.mac_addr) == getMacSuffix(self.targetMac):
      await self.applyCommands(appliance)

  async def setErdVal(self, appliance, erdCode, targetVal):
    previousVal = appliance.get_erd_value(erdCode)
    print("SETTING: " + str(erdCode) + " => " + str(targetVal) + " ", end="", flush=True)

    await appliance.async_set_erd_value(erdCode, targetVal)
    await asyncio.sleep(0.2)
    curVal = appliance.get_erd_value(erdCode)

    startMillis = int(time.time() * 1000.0 + 0.5)
    while curVal != targetVal:
      nowMillis = int(time.time() * 1000.0 + 0.5)
      if nowMillis - startMillis > TIMEOUT_MILLIS:
        break
      print(".", end="", flush=True)
      await asyncio.sleep(0.2)
      curVal = appliance.get_erd_value(erdCode)

    if curVal == targetVal:
      print(" - OK", flush=True)
    else:
      print(" - ERROR\nERROR: could not set " + str(erdCode), flush=True)

    return previousVal != curVal

  async def applyCommands(self, appliance):
    isUpdate = False
    isChanged = False
    for cmd in self.commands:
      cmdName = cmd.cmdName
      cmdVal = cmd.cmdVal
      if cmdName == COMMAND_GET:
        pwr = appliance.get_erd_value(ErdCode.AC_POWER_STATUS)
        mode = appliance.get_erd_value(ErdCode.AC_OPERATION_MODE)
        temp = appliance.get_erd_value(ErdCode.AC_TARGET_TEMPERATURE)
        ambientTemp = appliance.get_erd_value(ErdCode.AC_AMBIENT_TEMPERATURE)
        fan = appliance.get_erd_value(ErdCode.AC_FAN_SETTING)

        fmt = ""

        if pwr == ErdOnOff.OFF:
          fmt += "OFF - "

        fmt += str(temp) + "°F"
        fmt += " (cur=" + str(ambientTemp) + "°F)"

        fmt += " " + str(mode).replace("ErdAcOperationMode.", "")
        fmt += " " + str(fan).replace("ErdAcFanSetting.", "")

        print(fmt, flush=True)
      elif cmdName == COMMAND_SET_POWER:
        isUpdate = True
        curPwr = appliance.get_erd_value(ErdCode.AC_POWER_STATUS)
        if cmdVal == POWER_ON or (cmdVal == POWER_TOGGLE and curPwr == ErdOnOff.OFF):
          targetPwr = ErdOnOff.ON
        else:
          targetPwr = ErdOnOff.OFF

        if await self.setErdVal(appliance, ErdCode.AC_POWER_STATUS, targetPwr):
          isChanged = True
      elif cmdName == COMMAND_SET_MODE:
        isUpdate = True
        if await self.setErdVal(appliance, ErdCode.AC_OPERATION_MODE, cmdVal):
          isChanged = True
      elif cmdName == COMMAND_SET_TEMP:
        isUpdate = True
        if await self.setErdVal(appliance, ErdCode.AC_TARGET_TEMPERATURE, cmdVal):
          isChanged = True
      elif cmdName == COMMAND_SET_FAN:
        isUpdate = True
        if await self.setErdVal(appliance, ErdCode.AC_FAN_SETTING, cmdVal):
          isChanged = True
      else:
        die("ERROR: unknown command " + cmd)

      if isUpdate:
        print("  set: " + str(cmd))

    if isChanged:
      print("AC updated")
      await asyncio.sleep(0.1)
    elif isUpdate:
      print("(no change)")

    writeToken(appliance.client.account_username, appliance.client._credentials)
    os._exit(0)

def readConfig(configFile):
  try:
    with open(CONFIG_FILE, "r") as fh:
      lines = fh.readlines()
  except:
    return None

  devices = []

  hh = "[0-9a-fA-F][0-9a-fA-F]"
  c = ":?"
  macRe = hh + c + hh + c + hh + c + hh + c + hh + c + hh
  for line in lines:
    m = re.match(r'^\s*(\w+)\s*=\s*(' + macRe + r')\s*$', line)
    if m:
      devices.append({"name": m.group(1), "mac": m.group(2)})

  return devices

def readToken(email):
  try:
    lines = []
    with open(TOKEN_CACHE_DIR + "/" + email, "r") as fh:
      lines = fh.readlines()
    endpoint = None
    userId = None
    kind = None
    for line in lines:
      m = re.match(r'^\s*(endpoint|userId|kind)\s*=\s*(\S.*)$', line)
      if m and m.group(1) == "endpoint":
        endpoint = m.group(2)
      elif m and m.group(1) == "userId":
        userId = m.group(2)
      elif m and m.group(1) == "kind":
        kind = m.group(2)
    if endpoint == None:
      return None
    else:
      return {"endpoint": endpoint, "userId": userId, "kind": kind}
  except:
    return None

def writeToken(email, credentials):
  if not os.path.isdir(TOKEN_CACHE_DIR):
    os.mkdir(TOKEN_CACHE_DIR)

  with open(TOKEN_CACHE_DIR + "/" + email, "w") as fh:
    fh.write(f"endpoint={credentials['endpoint']}\n")
    fh.write(f"userId={credentials['userId']}\n")
    fh.write(f"kind={credentials['kind']}\n")

def readProc(cmd):
  return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()

def getMacSuffix(mac):
  mac = str.lower(mac.replace(":", ""))
  return mac[6:]

def die(msg):
  print(msg, file=sys.stderr)
  os._exit(1)

if __name__ == "__main__":
  asyncio.set_event_loop(asyncio.new_event_loop())
  asyncio.get_event_loop().run_until_complete(main())
