#!/usr/bin/python3
import aiohttp
import asyncio
import logging
import os
import re
import subprocess
import sys
from configfile import (MAC)
from pathlib import Path

### suppress slimxpp warning:
###   Using slower stringprep, consider compiling the faster cython/libidn one.
from contextlib import redirect_stderr, suppress
with redirect_stderr(None), suppress(ModuleNotFoundError):
  import slixmpp
###

from gehomesdk import (
    EVENT_APPLIANCE_INITIAL_UPDATE,
    ErdAcOperationMode,
    ErdAcFanSetting,
    ErdCode,
    ErdOnOff,
    GeAppliance,
    GeWebsocketClient,
)

TOKEN_CACHE_DIR = str(Path.home()) + "/.cache/gehomesdk-tokens/"
SECRETS_FILE = str(Path.home()) + "/.secrets"


async def handle(appliance: GeAppliance):
  if appliance.mac_addr == MAC:
    print(appliance.get_erd_value(ErdCode.AC_POWER_STATUS))
    print(appliance.get_erd_value(ErdCode.AC_OPERATION_MODE))
    print(appliance.get_erd_value(ErdCode.AC_FAN_SETTING))
    print(appliance.get_erd_value(ErdCode.AC_TARGET_TEMPERATURE))

    writeToken(appliance.client.account_username, appliance.client._credentials)
    os._exit(0)

async def main():
  username = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.username"])
  password = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.password"])
  region = readProc(["gpg-conf-read", SECRETS_FILE, "--key=smarthq.region"])

  client = GeWebsocketClient(username, password, region, asyncio.get_running_loop())
  client.add_event_handler(EVENT_APPLIANCE_INITIAL_UPDATE, handle)

  session = aiohttp.ClientSession()
  credentials = readToken(username)
  if credentials != None:
    try:
      client._session = session
      client.credentials = credentials
      await client._async_run_client()
    except:
      await client.async_get_credentials_and_run(session)
  else:
    await client.async_get_credentials_and_run(session)

def readToken(email):
  try:
    lines = []
    with open(TOKEN_CACHE_DIR + "/" + email, "r") as fh:
      lines = fh.readlines()
    endpoint = None
    userId = None
    kind = None
    for line in lines:
      m = re.match('^\s*(endpoint|userId|kind)\s*=\s*(\S.*)$', line)
      if m and m.group(1) == "endpoint":
        endpoint = m.group(2)
      elif m and m.group(1) == "userId":
        userId = m.group(2)
      elif m and m.group(1) == "kind":
        kind = m.group(2)
    if endpoint == None:
      return None
    else:
      return {"endpoint": endpoint, "userId": userId, "kind": kind}
  except:
    return None

def writeToken(email, credentials):
  if not os.path.isdir(TOKEN_CACHE_DIR):
    os.mkdir(TOKEN_CACHE_DIR)

  with open(TOKEN_CACHE_DIR + "/" + email, "w") as fh:
    fh.write(f"endpoint={credentials['endpoint']}\n")
    fh.write(f"userId={credentials['userId']}\n")
    fh.write(f"kind={credentials['kind']}\n")

def readProc(cmd):
  return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()

if __name__ == "__main__":
  asyncio.get_event_loop().run_until_complete(main())
