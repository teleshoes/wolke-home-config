#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub bluetoothctlDevCmd($$);
sub tryBluetoothctlDevCmd($$);
sub forceReconnectDevice($);
sub expectReconnect($);
sub devInitCmd($);
sub parseBluetoothDevicesConf();
sub tryrun(@);
sub runOrDie(@);

my $BLUETOOTH_RESTART_CMD = "sudo bluetooth unblock off on module-reload restart";

my $DEVICE_CSV_FILE = "$ENV{HOME}/.config/bluetooth-devices.conf";

my @DEVICE_CSV_ARR = parseBluetoothDevicesConf();
my @DEVICE_NAMES = map {uc $$_[0]} @DEVICE_CSV_ARR;
my %DEVICE_MACS = map {uc $$_[0] => $$_[1]} @DEVICE_CSV_ARR;
my %DEVICE_INIT_CMDS = map {uc $$_[0] => $$_[2]} @DEVICE_CSV_ARR;

my $BLUETOOTHCTL_SCAN_TIMEOUT_S = 20;

my @BLUETOOTHCTL_DEV_CMDS = qw(
  pair trust untrust block unblock remove connect disconnect info
);
my $REGEX_BLUETOOTHCTL_DEV_CMD = join "|", @BLUETOOTHCTL_DEV_CMDS;

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC DEVICE_NAME
  $EXEC setup DEVICE_NAME
  $EXEC --setup DEVICE_NAME
    -run: `$EXEC --connect DEVICE_NAME`
    -if not successful:
      -if successful:
        -run: `$EXEC --init DEVICE_NAME`
      -otherwise:
        -run: `$EXEC --reconnect DEVICE_NAME`
        -run: `$EXEC --init DEVICE_NAME`

  $EXEC restart
  $EXEC --restart
    restart/reload/unblock bluetooth (modprobe/systemctl/rfkill) with `bluetooth` cmd
    -run: $BLUETOOTH_RESTART_CMD

  $EXEC reconnect DEVICE_NAME
  $EXEC --reconnect DEVICE_NAME
    -obtain DEVICE_MAC for DEVICE_NAME
    -run: $EXEC --restart-bluetooth
    -run: `bluetoothctl remove DEVICE_MAC`
    -run `bluetoothctl` with `expect`:
      -expect: Agent Registered
      -send:   scan on
      -expect: [NEW] Device DEVICE_MAC
      -send:   pair DEVICE_MAC
      -expect: Pairing successful
      -send:   connect DEVICE_MAC
      -expect: Connection successful
      -send:   trust DEVICE_MAC
      -expect: Changing DEVICE_MAC trust succeeded

  $EXEC init DEVICE_NAME
  $EXEC --init DEVICE_NAME
    -obtain optional DEVICE_INIT_CMD for DEVICE_NAME
    -if DEVICE_INIT_CMD exists for the device:
      -run: `sh -c 'DEVICE_INIT_CMD'`

  $EXEC BLUETOOTHCTL_DEV_CMD DEVICE_NAME
  $EXEC --BLUETOOTHCTL_DEV_CMD DEVICE_NAME
    -obtain DEVICE_MAC for DEVICE_NAME
    -run: `bluetoothctl BLUETOOTHCTL_CMD DEVICE_MAC`
      e.g.:
        $EXEC --pair DEVICE_NAME
        $EXEC trust DEVICE_NAME

   BLUETOOTHCTL_DEV_CMD
     one of: @BLUETOOTHCTL_DEV_CMDS

   DEVICE_NAME
     one of: @DEVICE_NAMES

   DEVICE_MAC
     the MAC address of the device

   DEVICE_INIT_CMD
     the command, if any, that will be run after connecting the device
";

my $CMD_SETUP = "setup";
my $CMD_RESTART_BLUETOOTH = "restart-bluetooth";
my $CMD_RECONNECT = "reconnect";
my $CMD_INIT = "init";
my $CMD_BLUETOOTHCTL_DEV_CMD = "bluetoothctl-dev-cmd";

sub main(@){
  my $deviceName;
  my $cmd = $CMD_SETUP;
  my $bluetoothctlDevCmd = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(setup|--setup)$/){
      $cmd = $CMD_SETUP;
    }elsif($arg =~ /^(restart|--restart)$/){
      $cmd = $CMD_RESTART_BLUETOOTH;
    }elsif($arg =~ /^(reconnect|--reconnect)$/){
      $cmd = $CMD_RECONNECT;
    }elsif($arg =~ /^(init|--init)$/){
      $cmd = $CMD_INIT;
    }elsif($arg =~ /^(?:--)?($REGEX_BLUETOOTHCTL_DEV_CMD)$/i){
      $cmd = $CMD_BLUETOOTHCTL_DEV_CMD;
      $bluetoothctlDevCmd = lc $1;
    }elsif(defined $DEVICE_MACS{uc $arg}){
      $deviceName = uc $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_SETUP){
    die "ERROR: missing DEVICE_NAME\n" if not defined $deviceName;
    if(not tryBluetoothctlDevCmd($deviceName, "connect")){
      forceReconnectDevice($deviceName);
    }
    devInitCmd($deviceName);
  }elsif($cmd eq $CMD_RESTART_BLUETOOTH){
    runOrDie $BLUETOOTH_RESTART_CMD;
  }elsif($cmd eq $CMD_RECONNECT){
    die "ERROR: missing DEVICE_NAME\n" if not defined $deviceName;
    forceReconnectDevice($deviceName);
  }elsif($cmd eq $CMD_INIT){
    die "ERROR: missing DEVICE_NAME\n" if not defined $deviceName;
    devInitCmd($deviceName);
  }elsif($cmd eq $CMD_BLUETOOTHCTL_DEV_CMD){
    die "ERROR: missing DEVICE_NAME\n" if not defined $deviceName;
    bluetoothctlDevCmd($deviceName, $bluetoothctlDevCmd);
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub bluetoothctlDevCmd($$){
  my ($deviceName, $cmd) = @_;
  my $res = tryBluetoothctlDevCmd($deviceName, $cmd);
  die "ERROR: $cmd failed for $deviceName\n" if not $res;
}
sub tryBluetoothctlDevCmd($$){
  my ($deviceName, $cmd) = @_;
  my $deviceMac = $DEVICE_MACS{$deviceName};
  return tryrun "bluetoothctl", $cmd, $deviceMac;
}

sub forceReconnectDevice($){
  my ($deviceName) = @_;

  runOrDie $BLUETOOTH_RESTART_CMD;
  sleep 1;
  tryBluetoothctlDevCmd($deviceName, "remove");

  expectReconnect($deviceName);
}

sub expectReconnect($){
  my ($deviceName) = @_;
  my $deviceMac = $DEVICE_MACS{$deviceName};
  my $expectScript = "
    set timeout $BLUETOOTHCTL_SCAN_TIMEOUT_S

    expect_before {
      timeout { puts \"ERROR: timeout\"; exit 1 }
    }

    spawn bluetoothctl
    expect {Agent registered}
    send -- \"scan on\\r\"
    expect -re {NEW.* Device $deviceMac}
    puts \"\\n\\nDEVICE '$deviceName' $deviceMac FOUND IN SCAN\\n\"
    send -- \"pair $deviceMac\\r\"
    expect {Pairing successful}
    send -- \"connect $deviceMac\\r\"
    expect {Connection successful}
    send -- \"trust $deviceMac\\r\"
    expect {Changing $deviceMac trust succeeded}
  ";

  print "\n\n";
  print "running bluetoothctl in expect (timeout=${BLUETOOTHCTL_SCAN_TIMEOUT_S}s)\n";
  system "expect", "-c", $expectScript;
  print "\n\n";

  if($? != 0){
    die "ERROR: expect failed\n";
  }
}

sub devInitCmd($){
  my ($deviceName) = @_;
  my $deviceInitCmd = $DEVICE_INIT_CMDS{$deviceName};
  if(defined $deviceInitCmd){
    runOrDie "sh", "-c", $deviceInitCmd;
  }else{
    print "no init command for $deviceName\n";
  }
}

sub parseBluetoothDevicesConf(){
  my @devicesCsv;
  if(not -f $DEVICE_CSV_FILE){
    print STDERR "WARNING: missing $DEVICE_CSV_FILE\n";
    return @devicesCsv;
  }
  open my $fh, "< $DEVICE_CSV_FILE" or die "ERROR: could not read $DEVICE_CSV_FILE\n$!\n";
  my @lines = <$fh>;
  close $fh;
  my $byteRe = '[0-9a-f][0-9a-f]';
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^\s*(\w+)\s*,\s*($byteRe:$byteRe:$byteRe:$byteRe:$byteRe:$byteRe)\s*,(.*)$/i){
      my ($devName, $mac, $initCmd) = ($1, $2, $3);
      $mac = uc $mac;
      $initCmd =~ s/^\s*//;
      $initCmd =~ s/\s*$//;
      $initCmd = undef if $initCmd eq "";

      push @devicesCsv, [$devName, $mac, $initCmd];
    }else{
      print STDERR "WARNING: malformed line in $DEVICE_CSV_FILE\n$line";
    }
  }

  if(@devicesCsv == 0){
    print STDERR "WARNING: no devices in $DEVICE_CSV_FILE\n";
  }

  return @devicesCsv;
}

sub tryrun(@){
  print "@_\n";
  system @_;
  return $? == 0 ? 1 : 0;
}
sub runOrDie(@){
  tryrun @_ or die "ERROR: @_ failed\n";
}

&main(@ARGV);
