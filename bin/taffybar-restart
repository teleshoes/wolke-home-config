#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $SUCCESS_CMD = "alarm -s success";
my $FAILURE_CMD = "alarm -s failure";

my $EXEC_NAME = "taffybar-linux-x86_64";

my $TAFFYBAR_USER_EXEC = "$ENV{HOME}/.cache/taffybar/$EXEC_NAME";

my $NAME = basename $0;

my $USAGE = "Usage:
  $NAME -h|--help
    show this message

  $NAME [OPTS]
    kill taffybar exec and run `taffybar` (recompiles and runs)
    run '$SUCCESS_CMD' on success
    run '$FAILURE_CMD' on failure
    open a terminal with compilation errors on failure

  $NAME [OPTS] --exec [ARG ARG ARG ..]
    kill taffybar exec and run:
      `$TAFFYBAR_USER_EXEC ARG ARG ARG ..` (no recompile)

  OPTS
    -d|--daemon
      re-run this script + args with `daemon`, removing `-d` and `--daemon`
        `$NAME --daemon ARG ARG ARG ..`
          =>
        `daemon -- $NAME ARG ARG ARG ..`

    -q|--quiet
      never run '$SUCCESS_CMD' or '$FAILURE_CMD'
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $USAGE;
    exit 0;
  }

  for my $arg(@_){
    if($arg =~ /^(-d|--daemon)$/){
      my @args = grep {$_ !~ /^(-d|--daemon)/} @_;
      exec "daemon", "--", $0, @args;
    }
  }

  my $isQuiet = 0;
  my $isUserExec = 0;
  my @userExecArgs;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
    }elsif($arg =~ /^(-q|--quiet)$/){
      $isQuiet= 1;
    }elsif($arg =~ /^(--exec)$/){
      $isUserExec = 1;
      @userExecArgs = @_;
      @_ = ();
      last;
    }else{
      die "$USAGE\nunknown arg: $arg\n";
    }
  }
  die $USAGE if @_ != 0;

  system "killall $TAFFYBAR_USER_EXEC 2>/dev/null";

  if($isUserExec){
    exec $TAFFYBAR_USER_EXEC, @userExecArgs;
  }

  my $log = "/tmp/taffybar-log-" . time;
  system "rm", "/tmp/taffybar-log-latest";
  system "ln", "-s", $log, "/tmp/taffybar-log-latest";

  my $ok = 1;
  open TB, "-|", "unbuffer taffybar 2>&1 | tee $log";
  my $line;
  while($line = <TB>){
    if($line =~ /^Error occurred while loading configuration file\.$/){
      $ok = 0;
      system $FAILURE_CMD unless $isQuiet;
    }elsif($line =~ /^Launching custom binary/ and $ok){
      system $SUCCESS_CMD unless $isQuiet;
    }
    print $line;
  }
  close TB;

  if(not $ok){
    system "term", "-r", "cat", $log;
  }
}

&main(@ARGV);
