#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

my $SUCCESS_CMD = "alarm -s success";
my $FAILURE_CMD = "alarm -s failure";

my $TAFFYBAR_CMD_EXEC = "taffybar";
my $TAFFYBAR_USER_EXEC = "$ENV{HOME}/.cache/taffybar/taffybar-linux-x86_64";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS]
    kill taffybar exec and run `taffybar` (recompiles and runs)
    run '$SUCCESS_CMD' on recompile success
    run '$FAILURE_CMD' on recompile failure
    open a terminal with compilation errors on failure

  OPTS
    -d | --daemon
      re-run this script + args with `daemon`, removing `-d` and `--daemon`
        `$EXEC --daemon ARG ARG ARG ..`
          =>
        `daemon -- $EXEC ARG ARG ARG ..`

    -q|--quiet
      never run '$SUCCESS_CMD' or '$FAILURE_CMD'

    --exec CMD_ARGS
      same as: --user-exec --args CMD_ARGS

    -n | --no-recompile | --user-exec
      -use $TAFFYBAR_USER_EXEC instead of $TAFFYBAR_CMD_EXEC
      (skips recompile, implies --quiet)

    --args CMD_ARGS
      append 'CMD_ARGS' to taffybar shell command line
      CMD_ARGS is shell-interpreted
        e.g.: $EXEC --args '-x -y --foo=\"apple sauce\"'
              => $TAFFYBAR_CMD_EXEC -x -y --foo=\"apple sauce\"
";

sub main(@){
  my $daemonize = 0;
  my $isQuiet = 0;
  my $isUserExec = 0;
  my $execArgs;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-d|--daemon)$/){
      $daemonize = 1;
    }elsif($arg =~ /^(-q|--quiet)$/){
      $isQuiet= 1;
    }elsif($arg =~ /^(--exec)$/ and @_ > 0){
      $execArgs = shift @_;
      $isUserExec = 1;
    }elsif($arg =~ /^(--args)$/ and @_ > 0){
      $execArgs = shift @_;
    }elsif($arg =~ /^(-n|--no-recompile|--user-exec)$/){
      $isUserExec = 1;
    }else{
      die "$USAGE\nunknown arg: $arg\n";
    }
  }
  die $USAGE if @_ != 0;

  if($daemonize){
    my @args = grep {$_ !~ /^(-d|--daemon)$/} @ARGV;
    exec "daemon", "--", $0, @args;
  }

  my $taffybarShellCmd = $isUserExec ? $TAFFYBAR_USER_EXEC : $TAFFYBAR_CMD_EXEC;
  $taffybarShellCmd = "$taffybarShellCmd $execArgs" if defined $execArgs;

  my $logFile = "/tmp/taffybar-log-" . nowMillis();
  system "rm", "/tmp/taffybar-log-latest";
  system "ln", "-s", $logFile, "/tmp/taffybar-log-latest";

  system "killall $TAFFYBAR_USER_EXEC 2>/dev/null";
  runTaffybar($taffybarShellCmd, $logFile, $isQuiet);
}

sub runTaffybar($$$){
  my ($taffybarShellCmd, $logFile, $isQuiet) = @_;
  my $ok = 1;
  open TB, "-|", "unbuffer $taffybarShellCmd 2>&1 | tee $logFile";
  my $line;
  while($line = <TB>){
    if($line =~ /^Error occurred while loading configuration file\.$/){
      $ok = 0;
      system $FAILURE_CMD unless $isQuiet;
    }elsif($line =~ /^Launching custom binary/ and $ok){
      system $SUCCESS_CMD unless $isQuiet;
    }
    print $line;
  }
  close TB;

  if(not $ok){
    system "term", "-r", "cat", $logFile;
  }

  return $ok;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

&main(@ARGV);
