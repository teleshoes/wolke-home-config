#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $XFT_TYPEFACE = "Inconsolata";
my $DEFAULT_BASE_PX = 20;

my $EXEC = basename $0;

my $USAGE = "USAGE:
  $EXEC -h | --help
    show this message

  $EXEC FONT_SIZE_PX
    -set the font size in pixels using typeface: $XFT_TYPEFACE
      prints this <FONT_STRING>:
        xft:$XFT_TYPEFACE:pixelsize=<FONT_SIZE_PX>
      using:
        echo -ne '\\033]710;<FONT_STRING>\\033\\\\'

  $EXEC
    same as: $EXEC --scale=$DEFAULT_BASE_PX

  $EXEC --scale=BASE_FONT_SIZE_PX
    -use `resconfig` to fetch scaling factors: <SCALE_PX>, <SCALE_SIZE>, <SCALE_DIST>
      -use '0' for unknown scaling factors
      -use '0' for negative scaling factors (do not decrease base font)
    -calculate <TARGET_FONT_SIZE>:
      <BASE_FONT_SIZE_PX> + 6*(<SCALE_PX) + 2*(SCALE_SIZE) + 2*(SCALE_DIST)
    -set font size as in:
      $EXEC <TARGET_FONT_SIZE>

  $EXEC --chars=TARGET_COLUMNS
  $EXEC --cols=TARGET_COLUMNS
    -find the <WINDOW_WIDTH> and <WINDOW_HEIGHT> in pixels,
      using env var \$WINDOWID and `xwininfo`
    -get the max <CHARACTER_WIDTH>: floor(<WINDOW_WIDTH>/<TARGET_COLUMNS>)
    -get <TARGET_FONT_SIZE> = <CHARACTER_WIDTH> * 2
    -use <WINDOW_HEIGHT> for <TARGET_FONT_SIZE>,
      if the font size is greater than the window height
      (to ensure at least one line fits)
    -set font size as in:
      $EXEC <TARGET_FONT_SIZE>
";

sub scaleFontSize($);
sub getResconfigNonNegativeScale($);
sub getWindowGeometryXwininfo();
sub getFontSizeForColumns($);

sub main(@){
  my $px;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(\d+|\d*\.\d+)$/){
      $px = $1;
    }elsif($arg =~ /^--scale=(\d+|\d*\.\d+)$/){
      $px = scaleFontSize($1);
    }elsif($arg =~ /^--(?:chars|cols)=(\d+)$/){
      $px = getFontSizeForColumns($1);
    }else{
      die $USAGE;
    }
  }
  $px = scaleFontSize($DEFAULT_BASE_PX) if not defined $px;

  my $font = "xft:$XFT_TYPEFACE:pixelsize=$px";
  my @cmd = ("echo", "-ne", "\\033]710;$font\\033\\\\");
  print "@cmd\n";
  system @cmd;
}

sub scaleFontSize($){
  my ($baseFontSizePx) = @_;
  my $scalePx = getResconfigNonNegativeScale("px");
  my $scaleSize = getResconfigNonNegativeScale("size");
  my $scaleDist = getResconfigNonNegativeScale("dist");

  return $baseFontSizePx + 6*$scalePx + 2*$scaleSize + 2*$scaleDist;
}

sub getResconfigNonNegativeScale($){
  my ($scaleType) = @_;
  my $val = `resconfig --get-scale-$scaleType 2>/dev/null`;
  chomp $val;
  if($val =~ /^(\d+|\d*\.\d+)$/){
    return $1;
  }else{
    return 0;
  }
}

sub getWindowGeometryXwininfo(){
  my $windowId = $ENV{WINDOWID};
  my $geometry= {};

  return $geometry if not defined $windowId;

  my $info = `xwininfo -id $windowId 2>/dev/null`;
  $$geometry{width}  = $1 if $info =~ /^\s*Width:\s*(\d+)\s*$/m;
  $$geometry{height} = $1 if $info =~ /^\s*Height:\s*(\d+)\s*$/m;
  $$geometry{left}   = $1 if $info =~ /^\s*Absolute upper-left X:\s*(\d+)\s*$/m;
  $$geometry{top}    = $1 if $info =~ /^\s*Absolute upper-left Y:\s*(\d+)\s*$/m;
  return $geometry;
}

sub getFontSizeForColumns($){
  my ($cols) = @_;
  my $geometry = getWindowGeometryXwininfo();
  my $windowWidthPx = $$geometry{width};
  my $windowHeightPx = $$geometry{height};
  if(not defined $windowWidthPx or not defined $windowHeightPx){
    die "ERROR: could not obtain current window width and height with xwininfo\n";
  }
  my $charWidth = int($windowWidthPx/$cols);
  my $fontSize = $charWidth*2;

  if($fontSize > $windowHeightPx){
    return $windowHeightPx;
  }

  return $fontSize;
}

&main(@ARGV);
