#!/usr/bin/perl
use strict;
use warnings;
use Date::Parse qw(str2time);
use Date::Format qw(time2str);

my $WORKOUTS_BASE_DIR = "$ENV{HOME}/DCIM/xhealth";
my $KILOMETERS_PER_MILE = 1.609344;

sub getWorkoutDirs();
sub parseWorkoutDirFileInfo($);
sub getSessionsFromFileInfo(@);
sub uniq(@);

sub main(@){
  my @sessions;
  for my $dir(getWorkoutDirs()){
    my @fileInfoEntries = parseWorkoutDirFileInfo($dir);

    my @dirSessions = getSessionsFromFileInfo(@fileInfoEntries);
    for my $s(@dirSessions){
      cleanupSession($s);
      push @sessions, $s;
    }
  }

  for my $s(@sessions){
    print formatSession($s) . "\n";
  }
}

sub getWorkoutDirs(){
  return glob "$WORKOUTS_BASE_DIR/????-??-??_*/";
}

sub parseWorkoutDirFileInfo($){
  my ($dir) = @_;

  if($dir !~ /^(?:.*\/)?(\d\d\d\d-\d\d-\d\d)_(\w+)(?:_([^\/]*))?\/?$/){
    die "ERROR: malformed dir $dir\n";
  }
  my ($date, $location, $prevInfo) = ($1, $2, $3);
  my @files = glob "$dir/*.*";

  my @fileInfoEntries;
  for my $file(@files){
    next if $file =~ /^(?:.*\/)?VID_/;
    if($file !~ /^(?:.*\/)?(\d\d\d\d)(\d\d)(\d\d)_(\d\d)(\d\d)(\d\d)_(.+)\.(jpg|png)$/){
      print STDERR "WARNING: malformed file $file\n";
      next;
    }
    my ($y, $m, $d, $hr, $min, $sec, $infoStr, $ext) = ($1, $2, $3, $4, $5, $6, $7, $8);
    my @infoVals = split /-/, $infoStr;

    my $fileTime = str2time("$y-$m-$d $hr:$min:$sec");

    my $info = {};
    push @fileInfoEntries, $info;

    $$info{location} = $location;
    $$info{fileTime} = $fileTime;
    $$info{file} = $file;
    $$info{infoStr} = $infoStr;

    for my $infoSeg(@infoVals){
      if($infoSeg =~ /^(_+)([a-zA-Z_]+)$/){
        #ignore placeholders that start with _ and do not contain digits
      }elsif($infoSeg =~ /^(run|bike|weight)$/){
        $$info{type} = $1;
      }elsif($infoSeg =~ /^(reminder_\w+)$/){
        $$info{reminder} = $1;
      }elsif($infoSeg =~ /^(\d+)m(\d+)s$/){
        $$info{s} = $1*60 + $2;
      }elsif($infoSeg =~ /^(\d+|\d*\.\d+)km$/){
        $$info{cmi} = ($1/$KILOMETERS_PER_MILE)*100.0;
      }elsif($infoSeg =~ /^(\d+|\d*\.\d+)(s|min|cmi|mph|hr|hrmax|v|rpm|rpmavg|cal|lbs|offset)$/){
        my ($val, $field) = ($1, $2);
        $$info{$field} = $val;
      }else{
        die "malformed info segment $infoSeg\n";
      }
    }

    if(defined $$info{reminder} and not defined $$info{type}){
      $$info{type} = "reminder";
    }

    if(defined $$info{cmi} and defined $$info{s}){
      $$info{realMPH} = $$info{cmi}/$$info{s}*60*60/100;
    }

    if(defined $$info{rpmavg} and not defined $$info{rpm}){
      $$info{rpm} = $$info{rpmavg};
    }

    if(defined $$info{min} and defined $$info{mph} and not defined $$info{s} and not defined $$info{cmi}){
      #3min warmup at 2mph, 'min' min workout at 'mph' mph, 3min cooldown at 1.5mph
      $$info{s} = 3*60 + $$info{min}*60 + 3*60;
      $$info{cmi} = 100 * ( (2*(3/60)) + ($$info{mph}*($$info{min}/60)) + (1.5*(3/60)) );
      $$info{warmCool} = 1;
    }
  }

  return sort {$$a{fileTime} <=> $$b{fileTime}} @fileInfoEntries;
}

sub getSessionsFromFileInfo(@){
  my @fileInfoEntries = @_;

  my @sessions;
  my $curSession = undef;
  for my $info(@fileInfoEntries){
    my $isNewSession = 0;
    if(not defined $curSession){
      $isNewSession = 1;
    }elsif($$info{type} eq "reminder"){
      my $reminder = $$info{reminder};
      if($reminder =~ /^reminder_(leg_press|toe_press)\w+$/){
        if($$curSession{type} eq "reminder"){
          my $prevRem = ${$$curSession{reminders}}[-1];
          if($prevRem eq $reminder){
            $isNewSession = 0; #same reminder, duplicate
          }else{
            $isNewSession = 1; #new exercise
          }
        }else{
          $isNewSession = 1;
        }
      }else{
        $isNewSession = 0;
      }
    }elsif($$info{type} ne $$curSession{type}){
      #sessions are of different non-reminder types
      $isNewSession = 1;
    }else{
      if(not defined $$info{s}){
        $isNewSession = 0;
      }else{
        my $elapsedRealTimeS = int(($$info{fileTime} - $$curSession{maxFileTime})/1000.0 + 0.5);
        my $elapsedMachineTimeS = $$info{s} - $$curSession{maxDurS};
        if($elapsedMachineTimeS < 0){
          #timer is smaller => machine stopped and restarted
          $isNewSession = 1;
        }elsif($elapsedMachineTimeS < ($elapsedRealTimeS - ($$info{s}/2))){
          #timer is larger, but should be MUCH larger because a lot of real time passed
          $isNewSession = 1;
        }
      }
    }

    if($isNewSession){
      $curSession = {
        type        => $$info{type},
        minFileTime    => $$info{fileTime},
        maxFileTime    => $$info{fileTime},
        maxDurS     => 0,
        maxHR       => undef,
        maxDistance => undef,
        lastRPM     => undef,
        weight      => undef,
        reminders   => [],
      };
      push @sessions, $curSession;
    }

    if($$info{type} eq "reminder"){
      my $reminder = $$info{reminder};
      if($reminder =~ /^reminder_(\d+)hr$/){
        my $hr = $1;
        if(not defined $$curSession{maxHR} or $hr > $$curSession{maxHR}){
          $$curSession{maxHR} = $hr;
        }
      }else{
        push @{$$curSession{reminders}}, $$info{reminder};
      }
    }elsif($$info{type} =~ /^(weight)$/){
      $$curSession{lbs} = $$info{lbs};
    }elsif($$info{type} =~ /^(bike|run)$/){
      if($$info{fileTime} < $$curSession{minFileTime}){
        $$curSession{minFileTime} = $$info{fileTime};
      }
      if($$info{fileTime} > $$curSession{maxFileTime}){
        $$curSession{maxFileTime} = $$info{fileTime};
      }
      if(defined $$info{s}){
        if(not defined $$curSession{maxDurS} or $$curSession{maxDurS} < $$info{s}){
          $$curSession{maxDurS} = $$info{s};
        }
      }
      if(defined $$info{offset}){
        if(not defined $$curSession{maxOffset} or $$curSession{maxOffset} < $$info{offset}){
          $$curSession{maxOffset} = $$info{offset};
        }
      }
      if(defined $$info{cmi}){
        if(not defined $$curSession{maxCMI} or $$curSession{maxCMI} < $$info{cmi}){
          $$curSession{maxCMI} = $$info{cmi};
        }
      }
      if(defined $$info{warmCool}){
        $$curSession{warmCool} = $$info{warmCool};
      }
      if(defined $$info{hr}){
        if(not defined $$curSession{maxHR} or $$curSession{maxHR} < $$info{hr}){
          $$curSession{maxHR} = $$info{hr};
        }
      }
      if(defined $$info{hrmax}){
        if(not defined $$curSession{maxHR} or $$curSession{maxHR} < $$info{hrmax}){
          $$curSession{maxHR} = $$info{hrmax};
        }
      }
      if(defined $$info{v}){
        if(not defined $$curSession{maxLevel} or $$curSession{maxLevel} < $$info{v}){
          $$curSession{maxLevel} = $$info{v};
        }
      }
      if(defined $$info{rpm}){
        $$curSession{lastRPM} = $$info{rpm};
      }
    }
  }

  return @sessions;
}

sub cleanupSession($){
  my ($s) = @_;

  my @rem = @{$$s{reminders}};
  @rem = uniq @rem;
  $$s{reminders} = [@rem];

  if($$s{type} eq "reminder" and @rem >= 1 and $rem[0] =~ /^reminder_(leg|toe)_press_(\d+)$/){
    $$s{type} = "press";
    $$s{pressType} = $1;
    $$s{pressWeight} = $2;
    $$s{reminders} = [];
    @rem = shift @rem;
    $$s{reminders} = [@rem];
  }


  my $dtm = $$s{maxFileTime};
  if(defined $$s{maxDurS}){
    $dtm -= $$s{maxDurS};
  }
  if(defined $$s{maxOffset}){
    $dtm -= $$s{maxOffset};
  }
  $$s{dtm} = $dtm;


  if($$s{type} eq "run" and defined $$s{maxDurS} and $$s{maxDurS} > 12*60){
    #no warm/cool for 5km
    if($$s{maxCMI} < 305){
      $$s{warmCool} = 1;
    }
  }

  if($$s{warmCool}){
    #remove warmup
    $$s{maxDurS} -= 3*60;
    $$s{maxCMI} -= 100.0 * (2.0*(3/60.0));
    #remove cooldown
    $$s{maxDurS} -= 3*60;
    $$s{maxCMI} -= 100.0 * (1.5*(3/60.0));
    push @{$$s{reminders}}, "+warm3m+cool3m"
  }
}

sub formatSession($){
  my ($s) = shift;
  my $dtmFmt = time2str("%Y-%m-%d %H:%M:%S", $$s{dtm});

  my $type = $$s{type};
  my $durFmt = "00:00";
  if(defined $$s{maxDurS}){
    $durFmt = sprintf "%d:%02d", int($$s{maxDurS}/60), $$s{maxDurS} % 60;
  }
  my $mph = 0;
  if(defined $$s{maxDurS} and defined $$s{maxCMI} and $$s{maxDurS} > 0){
    $mph = ($$s{maxCMI}/100.0)/($$s{maxDurS}/60.0/60.0);
  }

  my $maxMI = defined $$s{maxCMI} ? $$s{maxCMI}/100.0 : 0;
  my $maxHR = defined $$s{maxHR} ? $$s{maxHR} : "???";

  my $fmt;
  if($type eq "weight"){
    $fmt = "$$s{lbs}lbs";
  }elsif($type =~ /^(press)$/){
    $fmt = "$$s{pressType}$$s{pressWeight}lbs";
  }elsif($type eq "bike"){
    my $rpm = defined $$s{lastRPM} ? $$s{lastRPM} : "???";
    my $lvl = defined $$s{maxLevel} ? $$s{maxLevel} : "??";
    $fmt = sprintf("%5s  %5.2fmi %3sbpm %4.1fmph %3srpm  %2slvl",
      $durFmt,
      $maxMI,
      $maxHR,
      $mph,
      $rpm,
      $lvl,
    );
  }elsif($type eq "run"){
    $fmt = sprintf("%5s  %5.2fmi %3sbpm %.1fmph",
      $durFmt,
      $maxMI,
      $maxHR,
      $mph,
    );
  }else{
    $fmt = "";
  }
  my @rem = uniq @{$$s{reminders}};
  @rem = map {s/^reminder_//; $_} @rem;
  my $remFmt = "";
  if(@rem > 0){
    $remFmt = "  (@rem)";
  }

  return sprintf "%s %-6s %s%s",
    $dtmFmt, $$s{type}, $fmt, $remFmt;
}

sub uniq(@){
  my (@arr) = @_;
  my %seen;
  my @newArr;
  for my $elem(@arr){
    push @newArr, $elem if not $seen{$elem};
    $seen{$elem} = 1;
  }
  return @newArr;
}

&main(@ARGV);
