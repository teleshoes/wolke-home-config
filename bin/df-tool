#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub df($);
sub getDiskUsageVariables($$$$);
sub formatDiskUsage($$);
sub listMountpoints();
sub formatBytes($$$$);
sub formatDurationS($);
sub readProcLines(@);

my $EXEC = basename $0;
my $FORMAT_SPECS = {
  default => '%MOUNTPOINT %USED_HUMAN / %SIZE_HUMAN (%USED_BYTES / %SIZE_BYTES) %PERCENT%%',
  used    => '%MOUNTPOINT %USED_HUMAN (%USED_BYTES) %PERCENT%%',
  avail   => '%MOUNTPOINT %AVAIL_HUMAN (%AVAIL_BYTES) %PERCENT%%',
};
my $OK_FORMAT_SPEC_REGEX = join "|", sort keys %$FORMAT_SPECS;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS]
    get all mountpoints with `lsblk` and pass each as a FILE to $EXEC
    roughly the same as: $EXEC [OPTS] `lsblk -n -o MOUNTPOINT`

  $0 [OPTS] FILE [FILE FILE ..]
    -for each <FILE>:
      -run `df -B1 <FILE>` and extract:
        <DEVICE>, <SIZE_BYTES>, <USED_BYTES>, <AVAIL_BYTES> and <MOUNTPOINT>
      -for each <BYTES> of <SIZE_BYTES>, <USED_BYTES>, and <AVAIL_BYTES>
        -select the largest <POWER> of 1024 between 0 and 8 where the <BYTES>/<POWER> >= 1
        -format <VALUE> of <BYTES> divided by <POWER> to exactly one decimal place i.e.: %.1f
        -select the <UNIT> corresponding to the <POWER>
          B=1024^0 |
          KiB=1024^1 | MiB=1024^2 | GiB=1024^3 | TiB=1024^4 |
          PiB=1024^5 | EiB=1024^6 | ZiB=1024^7 | YiB=1024^8
        -abbreviate the <UNIT> to one letter as <ABBREV_UNIT>:
          B | K | M | G | T | P | E | Z | Y
        -<SIZE_HUMAN> = <VALUE><ABBREV_UNIT>
        -<USED_HUMAN> = <VALUE><ABBREV_UNIT>
        -<AVAIL_HUMAN> = <VALUE><ABBREV_UNIT>
      -calculate <PERCENT> as <USED_BYTES> / <SIZE_BYTES> * 100, formatted to exactly one decimal place
      -right-align numeric values (calculate max length across all <FILE>s and left-pad with spaces):
         <SIZE_BYTES>, <USED_BYTES, <AVAIL_BYTES>, <SIZE_HUMAN>, <USED_HUMAN>, <AVAIL_HUMAN>, <PERCENT>
      -left-align non-numeric values (calculate max length across all <FILE>s and right-pad with spaces):
         <MOUNTPOINT>, <DEVICE>
      -format, on one line:
        <MOUNTPOINT> <USED_HUMAN> / <SIZE_HUMAN>  (<USED_BYTES> / <SIZE_BYTES>)

  $0 [OPTS] -w      [FILE FILE FILE ..]
  $0 [OPTS] --watch [FILE FILE FILE ..]
    -run df as in `$0 FILE FILE FILE` to get the initial value
    -every 5 seconds:
      -run df again
      -print the time with `date`, and the elapsed time
      -print the initial value
      -print the new value

  OPTS
    --si | --pow1000
      use SI units of powers of 1000 instead of powers of 1024
      also, use B|KB|MB|GB|TB|PB|EB|ZB|YB instead of B|K|M|G|T|P|E|Z|Y in human formats

    -m | --force-mb | --force-mib
      same as: --max-power=2 --min-power=2
      i.e.: always use GiB (or GB with --si)

    -g | --force-gb | --force-gib
      same as: --max-power=3 --min-power=3
      i.e.: always use GiB (or GB with --si)

    -t | --force-tb | --force-tib
      same as: --max-power=4 --min-power=4
      i.e.: always use TiB (or TB with --si)

    --min-power=MIN_POWER
      restrict <POWER> to be no smaller than <MIN_POWER>
      <MIN_POWER> is a non-negative integer, and cannot be larger than 8 (YiB / YB)

    --max-power=MAX_POWER
      restrict <POWER> to be no larger than <MAX_POWER>
      <MAX_POWER> is a non-negative integer, and cannot be smaller than 0 (B)

    default | --default
      same as: --format='$$FORMAT_SPECS{default}'

    avail | --avail
      same as: --format='$$FORMAT_SPECS{avail}'

    used | --used
      same as: --format='$$FORMAT_SPECS{used}'

    --format=FORMAT_SPEC
      default:
        --format='$$FORMAT_SPECS{default}'
      format each <FILE> with <FORMAT_SPEC>
      the following variable substitutions are performed:
         %SIZE_BYTES     size in 1B-blocks, as read by `df -B1`
         %AVAIL_BYTES    available 1B blocks, as read by `df -B1`
         %USED_BYTES     used 1B blocks, as read by `df -B1`
         %SIZE_HUMAN     SIZE_BYTES formatted with units
         %AVAIL_HUMAN    AVAIL_BYTES formatted with units
         %USED_HUMAN     USED_BYTES formatted with units
         %PERCENT        USED_BYTES/SIZE_BYTES * 100, rounded to 1 decimal place
         %MOUNTPOINT     the mountpoint returned by `df -B1`
         %DEVICE         the device listed in 'Filesystem' by `df -B1`
         %%              literal percent sign
";

sub main(@){
  my @files;
  my $formatSpec = $$FORMAT_SPECS{default};
  my $siUnits = 0;
  my $minPower = undef;
  my $maxPower = undef;
  my $watch = 0;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-w|--watch)$/){
      $watch = 1;
    }elsif($arg =~ /^(--si|--pow1000)$/){
      $siUnits = 1;
    }elsif($arg =~ /^(-m|--force-mb|--force-mib)$/){
      $minPower = 2;
      $maxPower = 2;
    }elsif($arg =~ /^(-g|--force-gb|--force-gib)$/){
      $minPower = 3;
      $maxPower = 3;
    }elsif($arg =~ /^(-t|--force-tb|--force-tib)$/){
      $minPower = 4;
      $maxPower = 4;
    }elsif($arg =~ /^--min-power=(\d+)$/){
      $minPower = $1;
      die "$usage\nERROR: MIN_POWER cannot be larger than 8\n" if $minPower > 8;
    }elsif($arg =~ /^--max-power=(\d+)$/){
      $maxPower = $1;
    }elsif($arg =~ /^--format=(.+)$/){
      $formatSpec = $1;
    }elsif($arg =~ /^(?:--)?($OK_FORMAT_SPEC_REGEX)$/){
      $formatSpec = $$FORMAT_SPECS{$1};
    }elsif(-e $arg){
      push @files, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if(@files == 0){
    @files = listMountpoints();
  }

  my @dfs = map {df $_} @files;
  my @diskUsageVars = map {getDiskUsageVariables($siUnits, $minPower, $maxPower, $_)} @dfs;
  my @formats = map {formatDiskUsage($formatSpec, $_)} @diskUsageVars;
  my $fmt = join "", map {"$_\n"} @formats;

  if($watch){
    my $initFmt = $fmt;
    my $startTime = time;
    while(1){
      @dfs = map {df $_} @files;
      @diskUsageVars = map {getDiskUsageVariables($siUnits, $minPower, $maxPower, $_)} @dfs;
      @formats = map {formatDiskUsage($formatSpec, $_)} @diskUsageVars;
      $fmt = join "", map {"$_\n"} @formats;

      my $elapsed = time - $startTime;
      my $elapsedFmt = formatDurationS $elapsed;

      my $date = `date`;
      chomp $date;
      print "\n$date     ($elapsedFmt)\n";
      print $initFmt;
      print $fmt;
      sleep 5;
    }
  }else{
    print $fmt;
  }
}

sub df($){
  my ($file) = @_;
  my @lines = readProcLines "df", "-B1", $file;
  die "ERROR: malformed df output\n" if @lines != 2;
  my ($hdr, $content) = @lines;
  if($hdr !~ /^\s*Filesystem\s*1B-blocks\s*Used\s*Available\s*Use%\s*Mounted on\s*$/){
    die "ERROR: malformed df header: $hdr\n"
  }
  if($content =~ /^(.*?\S) \s+ (\d+) \s+ (\d+) \s+ (\d+) \s+ (\d+)% \s+ (\/.*)$/x){
    return {
      dev        => $1,
      size       => $2,
      used       => $3,
      avail      => $4,
      pct        => $5,
      mountpoint => $6,
    };
  }else{
    die "ERROR: malformed df line: $content";
  }
}

sub getDiskUsageVariables($$$$){
  my ($siUnits, $minPower, $maxPower, $df) = @_;
  return {
      SIZE_BYTES  => $$df{size},
      USED_BYTES  => $$df{used},
      AVAIL_BYTES => $$df{avail},
      SIZE_HUMAN  => formatBytes($siUnits, $minPower, $maxPower, $$df{size}),
      USED_HUMAN  => formatBytes($siUnits, $minPower, $maxPower, $$df{used}),
      AVAIL_HUMAN => formatBytes($siUnits, $minPower, $maxPower, $$df{avail}),
      PERCENT     => sprintf("%.1f", $$df{used} / $$df{size} * 100.0),
      MOUNTPOINT  => $$df{mountpoint},
      DEVICE      => $$df{dev},
  };
}

sub formatDiskUsage($$){
  my ($formatSpec, $diskUsageVars) = @_;

  my %maxVarLen;
  for my $var(sort keys %$diskUsageVars){
    my $val = $$diskUsageVars{$var};
    $maxVarLen{$var} = 0 if not defined $maxVarLen{$var};
    $maxVarLen{$var} = length $val if length $val > $maxVarLen{$var};
  }

  my $fmt = $formatSpec;
  $fmt =~ s/&/&amp;/g;
  $fmt =~ s/%%/&boing;/g;
  for my $var(sort keys %$diskUsageVars){
    my $val = $$diskUsageVars{$var};
    my $len = $maxVarLen{$var};
    if($var =~ /^(MOUNTPOINT|DEVICE)$/){
      $val = sprintf "%-${len}s", $val;
    }else{
      $val = sprintf "%${len}s", $val;
    }
    $fmt =~ s/%$var/$val/g;
  }
  $fmt =~ s/&boing;/%/g;
  $fmt =~ s/&amp;/&/g;
  $fmt =~ s/[\r\n]//g;

  return $fmt;
}

sub listMountpoints(){
  my @mountpoints = readProcLines "lsblk", "-n", "-o", "MOUNTPOINT";
  chomp foreach @mountpoints;
  @mountpoints = grep {/[a-zA-Z0-9]/} sort @mountpoints;
  return @mountpoints;
}

sub formatBytes($$$$){
  my ($siUnits, $minPower, $maxPower, $bytes) = @_;
  my ($base, @units);
  if($siUnits){
    $base = 10**3;
    @units = qw(B KB MB GB TB PB EB ZB YB);
  }else{
    $base = 2**10;
    @units = qw(B K M G T P E Z Y);
  }

  my $targetPow = 0;
  for(my $pow = 0; $pow < @units; $pow++){
    if($bytes / $base**($pow) >= 1){
      $targetPow = $pow;
    }else{
      last;
    }
  }

  $targetPow = $maxPower if defined $maxPower and $targetPow > $maxPower;
  $targetPow = $minPower if defined $minPower and $targetPow < $minPower;
  $targetPow = @units - 1 if $targetPow > @units - 1;

  return sprintf "%.1f%s",
    $bytes / $base**($targetPow),
    $units[$targetPow];
}

sub formatDurationS($){
  my ($seconds) = @_;
  my $s = int($seconds) % 60;
  my $m = int($seconds / 60) % 60;
  my $h = int($seconds / 60 / 60) % 60;
  return sprintf "%dh%02dm%02ds", $h, $m, $s;
}

sub readProcLines(@){
  open CMD, "-|", @_ or die "could not run \"@_\"\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return @lines;
}

&main(@ARGV);
