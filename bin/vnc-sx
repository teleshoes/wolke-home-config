#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $IPMAGIC_NAME = "sx";
my $USERNAME = "nemo";

my $PHONE_GRAPHICS_MODES_FILE_GLOB = "/sys/class/graphics/fb*/modes";
my $LIPSTICK2VNC_CONF_FILE = "/var/lib/environment/$USERNAME/70-lipstick2vnc.conf";
my $SLEEP_DELAY_MILLIS = 300;
my $VNC_VIEWER_EXEC = "xtigervncviewer";

sub calculateScale($$);

my $usage = "Usage:
  vnc to phone using $VNC_VIEWER_EXEC and lipstick2vnc, scaling the viewport

  $0 -h|--help
    show this message

  $0 [OPTS]
    -obtain phone resolution:
      use ipmagic to run `cat $PHONE_GRAPHICS_MODES_FILE_GLOB`
    -obtain monitor resoltion:
      run `res -h`
    -calculate a scale based on the height, targeting 95% of the monitor height
    -round down to the nearest 10% (max of 100% and min of 10%)
    -put --allow-all and -s with scale as a ratio in LIPSTICK2VNC_OPTS
    -write LIPSTICK2VNC_OPTS to $LIPSTICK2VNC_CONF_FILE
    -unlock phone screen
    -start lipstick2vnc
    -sleep for $SLEEP_DELAY_MILLIS millis
    -run $VNC_VIEWER_EXEC
    -stop lipstick2vnc after vnc viewer exits

  OPTS
    --scale=SCALE_RATIO | SCALE_RATIO
    --scale=SCALE_PCT% | SCALE_PCT%
      skip calculating scale and just use the indicated ratio (or percentage)
        can be given as a fractional value, or as a percentage followed by %
        '--scale' is optional, can just give the value
        scale value is rounded to the nearest tenth
      e.g.: (all are equivalent)
        --scale=60%
        0.6
        --scale=0.6
        60%

    --res=PHONE_WIDTHxPHONE_HEIGHT
    --mode=PHONE_WIDTHxPHONE_HEIGHT
      the phone resolution, to skip checking $PHONE_GRAPHICS_MODES_FILE_GLOB
      in order to calculate scale
      orientation doesnt matter:
        landscape/landscape-inverted always uses the smaller dimension
        portrait/portrait-inverted always uses the larger dimension

    -l|--landscape
      pass --landscape to lipstick2vnc (rotate 90 degrees counter-clockwise)
      and use the smaller dimension for phone-height when calculating scale

    --landscape-inverted
      pass --landscape-inverted to lipstick2vnc (rotate 90 degrees clockwise)
      and use the smaller dimension for phone-height when calculating scale

    --portrait
      pass --portrait to lipstick2vnc (do not rotate)

    --portrait-inverted
      pass --landscape-inverted to lipstick2vnc (rotate 180 degrees)
";

sub main(@){
  my $scaleArg;
  my $modeOverride = undef;
  my $orientationArg = undef;
  my $isLandscape = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(?:--scale=)?(\d+|\d*\.\d+)(%?)$/){
      my ($scaleVal, $scaleUnit) = ($1, $2);
      if(defined $scaleUnit and $scaleUnit =~ /%/){
        $scaleVal = $scaleVal/100.0;
      }
      $scaleVal = sprintf "%.1f", $scaleVal;
      $scaleVal = 0.1 if $scaleVal < 0.1;
      $scaleVal = 1.0 if $scaleVal > 1.0;
      $scaleArg = $scaleVal;
    }elsif($arg =~ /^(?:--res=|--mode=)(\d+)x(\d+)$/){
      $modeOverride = $1 . "x" . $2;
    }elsif($arg =~ /^(-l|--landscape)$/){
      $orientationArg = "--landscape";
      $isLandscape = 1;
    }elsif($arg =~ /^(--landscape-inverted)$/){
      $orientationArg = "--landscape-inverted";
      $isLandscape = 1;
    }elsif($arg =~ /^(--portrait)$/){
      $orientationArg = "--portrait";
      $isLandscape = 0;
    }elsif($arg =~ /^(--portrait-inverted)$/){
      $orientationArg = "--portrat-inverted";
      $isLandscape = 0;
    }else{
      die "$usage\nERROR: unknown arg \"$arg\"\n";
    }
  }

  my $scale;
  if(defined $scaleArg){
    $scale = $scaleArg;
  }else{
    $scale = calculateScale($isLandscape, $modeOverride);
  }
  print "SCALE: $scale\n";

  $orientationArg = "" if not defined $orientationArg;

  my $status = `screen-daemon vnc-sx-tunnel --status`;
  if($status =~ /on/){
    system "screen-daemon", "vnc-sx-tunnel", "--stop";
    system "ipmagic", $IPMAGIC_NAME, "-u", "root", "-s", "systemctl stop vnc";
  }

  system "screen-daemon", "vnc-sx-tunnel", "--start", "0", "0",
    "ipmagic $IPMAGIC_NAME --ssh-args '-t -t -L 5901:localhost:5900' -s";

  system "ipmagic", $IPMAGIC_NAME, "-u", "root", "-s", "
    #dont run vnc as nemo (delete 'User=' line from vnc.service)
    grep User /usr/lib/systemd/system/vnc.service \\
      && sed -i '/^User=.*/d' /usr/lib/systemd/system/vnc.service \\
      && systemctl daemon-reload

    echo \"LIPSTICK2VNC_OPTS=\\\"$orientationArg -k -s $scale\\\"\" > $LIPSTICK2VNC_CONF_FILE
    lock --unlock &
    systemctl start vnc
  ";

  sleep ($SLEEP_DELAY_MILLIS/1000.0);

  system $VNC_VIEWER_EXEC, "localhost:5901";

  system "screen-daemon", "vnc-sx-tunnel", "--stop";
  system "ipmagic", $IPMAGIC_NAME, "-u", "root", "-s", "systemctl stop vnc";
}

sub calculateScale($$){
  my ($landscape, $modeOverride) = @_;
  my $phoneHeight = "";
  my $phoneMode;
  if(defined $modeOverride){
    $phoneMode = $modeOverride;
  }else{
    $phoneMode = `ipmagic $IPMAGIC_NAME -s "cat $PHONE_GRAPHICS_MODES_FILE_GLOB"`;
  }
  if($phoneMode =~ /(\d+)x(\d+)/){
    my ($w, $h)= ($1, $2);
    my $minDim = $w > $h ? $h : $w;
    my $maxDim = $w > $h ? $w : $h;
    if($landscape){
      $phoneHeight = $minDim;
    }else{
      $phoneHeight = $maxDim;
    }
  }
  if($phoneHeight !~ /^\d+$/){
    die "ERROR: could not obtain phone resolution\n";
  }

  my $monitorHeight = `res -h`;
  chomp $monitorHeight;
  if($monitorHeight !~ /^\d+$/){
    die "ERROR: could not obtain monitor resolution\n";
  }

  my $desiredViewportHeight = $monitorHeight*0.95;

  #scale is in increments of 10%, between 10% and 100%
  my $scale = sprintf "%.1f", int(10*($desiredViewportHeight)/$phoneHeight)/10.0;
  $scale = "1.0" if $scale >= 1;
  $scale = "0.1" if $scale <= 0.1;

  return $scale;
}

&main(@ARGV);
