#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $IPMAGIC_NAME = "sx";
my $USERNAME = "nemo";

my $PHONE_GRAPHICS_MODES_PREF_REGEX = "fb1|card0-DSI";

my $LIPSTICK2VNC_CONF_FILE = "/var/lib/environment/$USERNAME/70-lipstick2vnc.conf";
my $SLEEP_DELAY_MILLIS = 300;
my $VNC_VIEWER_EXEC = "xtigervncviewer";
my @VNC_VIEWER_ARGS = qw(DotWhenNoCursor=1);

my $SCALE_CACHE_PORTRAIT = "$ENV{HOME}/.cache/vnc-sx-scale-portrait";
my $SCALE_CACHE_LANDSCAPE = "$ENV{HOME}/.cache/vnc-sx-scale-landscape";

sub calculateScale($$);
sub readScaleCache($);
sub writeScaleCacheFiles();

my $usage = "Usage:
  vnc to phone using $VNC_VIEWER_EXEC and lipstick2vnc, scaling the viewport

  $0 -h|--help
    show this message

  $0 [OPTS]
    -calculate the scale
      -obtain phone resolution using: `res --modes $PHONE_GRAPHICS_MODES_PREF_REGEX`:
      -obtain monitor resoltion using: `res`
      -find the largest scale that will fit in 100% of the monitor width
      -find the largest scale that will fit in 95% of the monitor height
      -take the smaller of the two scales
      -if scale is less than 10%, use 10%
      -round down to the nearest 10%
    -put --allow-all and -s with scale as a ratio in LIPSTICK2VNC_OPTS
    -write LIPSTICK2VNC_OPTS to $LIPSTICK2VNC_CONF_FILE
    -unlock phone screen
    -start lipstick2vnc
    -sleep for $SLEEP_DELAY_MILLIS millis
    -run $VNC_VIEWER_EXEC
    -stop lipstick2vnc after vnc viewer exits

  OPTS
    --scale=SCALE_RATIO | SCALE_RATIO
    --scale=SCALE_PCT% | SCALE_PCT%
      skip calculating scale and just use the indicated ratio (or percentage)
        can be given as a fractional value, or as a percentage followed by %
        '--scale' is optional, can just give the value
        scale value is rounded to the nearest tenth
      e.g.: (all are equivalent)
        --scale=60%
        0.6
        --scale=0.6
        60%

    --res=PHONE_WIDTHxPHONE_HEIGHT
    --mode=PHONE_WIDTHxPHONE_HEIGHT
      the phone resolution, to skip checking mode with `res`
      in order to calculate scale
      orientation doesnt matter:
        landscape/landscape-inverted always uses the smaller dimension
        portrait/portrait-inverted always uses the larger dimension

    -r|-c|--read-scale-cache|--cache
      use the scale from cache file instead of calculating it:
        $SCALE_CACHE_PORTRAIT
        or
        $SCALE_CACHE_LANDSCAPE
      if the file is missing or invalid, this option has no effect
      if this option is not given, the cache files are not used

    -w|--write-scale-cache
      -do not start vnc
      -calculate scale for portrait and write to:
        $SCALE_CACHE_PORTRAIT
      -calculate scale for landscape and write to:
        $SCALE_CACHE_LANDSCAPE

    -l|--landscape
      pass --landscape to lipstick2vnc (rotate 90 degrees counter-clockwise)
      and use the smaller dimension for phone-height when calculating scale

    --landscape-inverted
      pass --landscape-inverted to lipstick2vnc (rotate 90 degrees clockwise)
      and use the smaller dimension for phone-height when calculating scale

    --portrait
      pass --portrait to lipstick2vnc (do not rotate)

    --portrait-inverted
      pass --landscape-inverted to lipstick2vnc (rotate 180 degrees)
";

sub main(@){
  my $scaleArg;
  my $modeOverride = undef;
  my $orientationArg = undef;
  my $isLandscape = 0;
  my $readScaleCache = 0;
  my $writeScaleCache = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(?:--scale=)?(\d+|\d*\.\d+)(%?)$/){
      my ($scaleVal, $scaleUnit) = ($1, $2);
      if(defined $scaleUnit and $scaleUnit =~ /%/){
        $scaleVal = $scaleVal/100.0;
      }
      $scaleVal = sprintf "%.1f", $scaleVal;
      $scaleVal = 0.1 if $scaleVal < 0.1;
      $scaleVal = 1.0 if $scaleVal > 1.0;
      $scaleArg = $scaleVal;
    }elsif($arg =~ /^(?:--res=|--mode=)(\d+)x(\d+)$/){
      $modeOverride = $1 . "x" . $2;
    }elsif($arg =~ /^(-l|--landscape)$/){
      $orientationArg = "--landscape";
      $isLandscape = 1;
    }elsif($arg =~ /^(--landscape-inverted)$/){
      $orientationArg = "--landscape-inverted";
      $isLandscape = 1;
    }elsif($arg =~ /^(--portrait)$/){
      $orientationArg = "--portrait";
      $isLandscape = 0;
    }elsif($arg =~ /^(--portrait-inverted)$/){
      $orientationArg = "--portrat-inverted";
      $isLandscape = 0;
    }elsif($arg =~ /^(-r|-c|--read-scale-cache|--cache)$/){
      $readScaleCache = 1;
    }elsif($arg =~ /^(-w|--write-scale-cache)$/){
      $writeScaleCache = 1;
    }else{
      die "$usage\nERROR: unknown arg \"$arg\"\n";
    }
  }

  if($writeScaleCache){
    writeScaleCacheFiles();
    exit 0;
  }

  my $scale;
  if(defined $scaleArg){
    $scale = $scaleArg;
  }elsif($readScaleCache){
    $scale = readScaleCache($isLandscape);
  }

  if(not defined $scale){
    $scale = calculateScale($isLandscape, $modeOverride);
  }
  print "SCALE: $scale\n";

  $orientationArg = "" if not defined $orientationArg;

  my $controlFile = "/tmp/vnc-sx-ssh.ctl";
  if(-e $controlFile){
    system "ssh", "-o", "ControlPath=$controlFile", "-O", "exit", "localhost";
    system "ipmagic", $IPMAGIC_NAME, "-u", $USERNAME, "-s", "systemctl --user stop vnc";
  }
  die "ERROR: control file $controlFile still exists\n" if -e $controlFile;

  system "ipmagic", $IPMAGIC_NAME,
    "-u", $USERNAME,
    "--ssh-args", join(" ", (
      "-o", "ControlPath=$controlFile",
      "-o", "ControlMaster=yes",
      "-f",
      "-N",
      "-n",
      "-L", "5901:localhost:5900",
    )),
    "-s",
  ;

  system "ipmagic", $IPMAGIC_NAME, "-u", $USERNAME, "-s", "
    echo \"LIPSTICK2VNC_OPTS=\\\"$orientationArg -k -s $scale\\\"\" \\
      | sudo tee $LIPSTICK2VNC_CONF_FILE
    lock --unlock &

    #/dev/uinput is normally owned by system.net_bt_stack
    #  /usr/bin/lipstick2vnc has setgid bit and is owned by group privileged
    sudo chown system.privileged /dev/uinput

    systemctl --user stop vnc.socket
    systemctl --user stop vnc
    systemctl --user start vnc
  ";

  sleep ($SLEEP_DELAY_MILLIS/1000.0);

  system $VNC_VIEWER_EXEC, "localhost:5901", @VNC_VIEWER_ARGS;

  system "ipmagic", $IPMAGIC_NAME, "-u", $USERNAME, "-s", "systemctl --user stop vnc";
}

sub calculateScale($$){
  my ($landscape, $modeOverride) = @_;
  my ($phoneWidth, $phoneHeight);
  my $phoneMode;
  if(defined $modeOverride){
    $phoneMode = $modeOverride;
  }else{
    $phoneMode = `ipmagic $IPMAGIC_NAME "res --modes '$PHONE_GRAPHICS_MODES_PREF_REGEX'"`;
  }
  if($phoneMode =~ /(\d+)x(\d+)/){
    my ($w, $h)= ($1, $2);
    my $minDim = $w > $h ? $h : $w;
    my $maxDim = $w > $h ? $w : $h;
    if($landscape){
      $phoneWidth = $maxDim;
      $phoneHeight = $minDim;
    }else{
      $phoneWidth = $minDim;
      $phoneHeight = $maxDim;
    }
  }
  if($phoneWidth !~ /^\d+$/ or $phoneHeight !~ /^\d+$/){
    die "ERROR: could not obtain phone resolution\n";
  }

  my $monitorRes = `res`;
  my ($monitorWidth, $monitorHeight);
  if($monitorRes =~ /^(\d+)x(\d+)$/){
    $monitorWidth = $1;
    $monitorHeight = $2;
  }
  if($monitorWidth !~ /^\d+$/ or $monitorHeight !~ /^\d+$/){
    die "ERROR: could not obtain monitor resolution\n";
  }

  my $desiredViewportWidth = $monitorWidth;
  my $desiredViewportHeight = $monitorHeight*0.95;


  my $scaleW = $desiredViewportWidth/$phoneWidth;
  my $scaleH = $desiredViewportHeight/$phoneHeight;

  my $minScale = $scaleW < $scaleH ? $scaleW : $scaleH;

  #minimum scale is 10%
  $minScale = 0.1 if $minScale <= 0.1;

  #scale must be in increments of 10%
  #  weird display bugs happen at finer granularity like 0.41
  $minScale = sprintf "%.1f", int($minScale*10)/10.0;

  return $minScale;
}

sub readScaleCache($){
  my ($isLandscape) = @_;
  my $scaleFile = $isLandscape ? $SCALE_CACHE_LANDSCAPE : $SCALE_CACHE_PORTRAIT;
  return readCacheFile($scaleFile);
}

sub writeScaleCacheFiles(){
  writeCacheFile($SCALE_CACHE_PORTRAIT, calculateScale(0, undef));
  writeCacheFile($SCALE_CACHE_LANDSCAPE, calculateScale(1, undef));
}

sub readCacheFile($){
  my ($file) = @_;
  return undef if not -f $file;
  open FH, "< $file" or die "ERROR: could not read file $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;

  my $val = undef;
  if($contents =~ /^(\d+|\d*\.\d+)$/){
    $val = $1;
  }
  return $val;
}
sub writeCacheFile($$){
  my ($file, $val) = @_;
  if($val !~ /^(\d+|\d*\.\d+)$/){
    die "ERROR: $file cache can contain only non-negative real numbers\n";
  }
  open FH, "> $file" or die "ERROR: could not write file $file\n$!\n";
  print FH "$val\n";
  close FH;
}

&main(@ARGV);
