#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] VIDEO_IN_FILE GIF_OUT_FILE START_TIME DUR_TIME WIDTH_PX
    generate gif file by running ffmpeg with:
      -ss START_TIME
      -t DUR_TIME
      -i VIDEO_IN_FILE
      -filter_complex fps=10,scale=WIDTH_PX....
      GIF_OUT_FILE

  OPTS
";

sub main(@){
  my $opts = {
  };
  my ($in, $out, $start, $dur, $width);
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif(not defined $in){
      $in = $arg;
    }elsif(not defined $out){
      $out = $arg;
    }elsif(not defined $start){
      $start = $arg;
    }elsif(not defined $dur){
      $dur = $arg;
    }elsif(not defined $width){
      $width = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(not defined $in
    or not defined $out
    or not defined $start
    or not defined $dur
    or not defined $width
  ){
    die "$USAGE\nERROR: missing required argument\n";
  }

  my $filter = (""
    . "fps=10,scale=$width:-1:flags=lanczos[x];[x]split[s0][s1];"
    . "[s0]palettegen[p];[s1][p]paletteuse"
  );
  my @cmd = ("ffmpeg", "-xerror", "-y", "-ss", $start, "-t", $dur,
     "-an",
     "-i", $in,
     "-filter_complex", $filter,
     $out,
  );
  print "@cmd\n";
  system @cmd;
  if($? != 0){
    die "ERROR: @cmd failed\n";
  }
}

&main(@ARGV);
