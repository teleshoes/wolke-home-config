#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub run(@);
sub bashComplete($$);

my $EXEC = basename $0;

my $MODE_RSYNC = "rsync";
my $MODE_SCP = "scp";

my @PUBKEY_TARGETS_ARR = (
  "main"          => ["ipmagic main",         undef,  $MODE_RSYNC],
  "aux"           => ["ipmagic aux",          undef,  $MODE_RSYNC],
  "aux2"          => ["ipmagic aux2",         undef,  $MODE_RSYNC],
  "bed"           => ["ipmagic bed",          undef,  $MODE_RSYNC],
  "tv"            => ["ipmagic tv",           undef,  $MODE_RSYNC],
  "tv-root"       => ["ipmagic tv",           "root", $MODE_RSYNC],
# "nuc"           => ["ipmagic nuc",          undef,  $MODE_RSYNC],
# "nuc-root"      => ["ipmagic nuc",          "root", $MODE_RSYNC],
  "ser"           => ["ipmagic ser",          undef,  $MODE_RSYNC],
  "ser-root"      => ["ipmagic ser",          "root", $MODE_RSYNC],
  "sb"            => ["seedbox --host",       undef,  $MODE_RSYNC],
  "ddwrt-68u"     => ["ddwrt 68u --ip",       "root", $MODE_SCP],
# "ddwrt-buffalo" => ["ddwrt buffalo --ip",   "root", $MODE_SCP],
  "sx"            => ["ipmagic sx",           undef,  $MODE_RSYNC],
  "sx-root"       => ["ipmagic sx",           "root", $MODE_RSYNC],
  "pi"            => ["ipmagic raspi",        undef,  $MODE_RSYNC],
  "pi-root"       => ["ipmagic raspi",        "root", $MODE_RSYNC],
);

my %PUBKEY_TARGETS_BY_NAME = @PUBKEY_TARGETS_ARR;
my @PUBKEY_TARGET_NAMES = map {$PUBKEY_TARGETS_ARR[$_]}
                          grep {$_ % 2 == 0} (0..$#PUBKEY_TARGETS_ARR);
my $OK_PUBKEY_TARGET_NAMES = join "|", @PUBKEY_TARGET_NAMES;

my $USAGE = "Usage:
  $EXEC [OPTS] [TARGET TARGET ..]
    copy pubkeys/authkeys to the hosts returned by the above commands

  $EXEC -h|--help
    print this message

  $EXEC --bash-complete COMP_LINE COMP_POINT
    print a list of words for bash completion, one per line
    COMP_LINE  - the full cmdline as a string
    COMP_POINT - the cursor position in the cmdline

  TARGET
    one of: $OK_PUBKEY_TARGET_NAMES
    copy for just the named targets (default is all)

  OPTS
    --scp | scp
      use `scp` to copy keys regardless of the default for the named TARGET

    --rsync | rsync
      use `rsync` to copy keys regardless of the default for the named TARGET
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my @names;
  my $opts = {
    modeOverride => undef,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^($OK_PUBKEY_TARGET_NAMES)$/){
      push @names, $arg;
    }elsif($arg =~ /^(--scp|scp)$/){
      $$opts{modeOverride} = $MODE_SCP;
    }elsif($arg =~ /^(--rsync|rsync)$/){
      $$opts{modeOverride} = $MODE_RSYNC;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";;
    }
  }

  @names = @PUBKEY_TARGET_NAMES if @names == 0;

  my (@entryNamesSuccess, @entryNamesFailure);

  my @pubkeyFiles = `ls $ENV{HOME}/.ssh/*.pub`;
  chomp foreach @pubkeyFiles;
  print "Copying these pubkeys:\n" . (join "\n", @pubkeyFiles) . "\n\n";
  for my $pubkeyTargetName(@names){
    my $entry = $PUBKEY_TARGETS_BY_NAME{$pubkeyTargetName};
    if(not defined $entry){
      die "ERROR: unknown pubkey TARGET '$pubkeyTargetName'\n";
    }

    my ($ipCmd, $user, $mode) = @$entry;
    print "\n\n$pubkeyTargetName: copying pubkeys for $ipCmd" . (defined $user ? " ($user)" : "") . "\n";
    my $hostname = `$ipCmd`;
    chomp $hostname;
    if($? != 0){
      print STDERR "WARNING: error running '$ipCmd'\n";
      push @entryNamesFailure, $pubkeyTargetName;
      next;
    }elsif($hostname !~ /\w/){
      print STDERR "WARNING: malformed hostname from '$ipCmd': $hostname\n";
      push @entryNamesFailure, $pubkeyTargetName;
      next;
    }

    $mode = $$opts{modeOverride} if defined $$opts{modeOverride};

    my $host = $hostname;
    $host = "$user\@$host" if defined $user;
    if($mode eq $MODE_RSYNC){
      run "rsync", "-avP", @pubkeyFiles, "$host:~/.ssh/";
    }elsif($mode eq $MODE_SCP){
      run "scp", "-O", @pubkeyFiles, "$host:~/.ssh/";
    }else{
      die "unknown mode: $mode\n";
    }
    run "ssh", $host, "cat ~/.ssh/*.pub > ~/.ssh/authorized_keys";
    run "ssh", $host, "chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys";

    push @entryNamesSuccess, $pubkeyTargetName;
  }

  print "\n\n\n"
    . (@entryNamesSuccess+0) . " successful entries\n"
    . (@entryNamesFailure+0) . " failed entries\n"
    ;
  print "\n";
  print "SUCCESS: @entryNamesSuccess\n" if @entryNamesSuccess > 0;
  print "FAILURE: @entryNamesFailure\n" if @entryNamesFailure > 0;
}

sub run(@){
  print "@_\n";
  system @_;
  die "Error running \"@_\"\n" if $? != 0;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  my $curWord = pop @words if not $isNewWord;

  my @opts = qw(
    -h --help
    --scp --rsync
    --bash-complete
  );
  my $optWord = $isNewWord ? $words[-1] : $curWord;

  if(defined $optWord and $optWord =~ /^-/){
    return @opts;
  }elsif(@words == 0){
    return sort @PUBKEY_TARGET_NAMES;
  }

  return ();
}
&main(@ARGV);
