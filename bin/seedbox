#!/usr/bin/perl
use strict;
use warnings;

my $remoteTorrentDir = "watch";
my $remoteDownloads = "files";
my $remotePartial = "partial";
my $localDownloads = "/media/seedbox";
my @cleanupCmd = ("find $remoteDownloads/ -type d -execdir chmod og-w {} \\;");

sub handleTorrent($$);
sub ftpCommand($@);
sub rsyncRevtun($$$$@);
sub rsyncFetch($);
sub ssh($;\@);
sub scpTo($$$);
sub scpFrom($$$);
sub readCmd($$);
sub sshRevtun($;\@);
sub magnetToTorrent($);
sub fetchMtime($);
sub readMtime();
sub writeMtime($);
sub clearMtime();
sub readSecrets();
sub decrypt($);

my $secretsFile = "$ENV{HOME}/.secrets";
my $mtimeFile = "$ENV{HOME}/.cache/seedbox-mtime";
my @configKeys = qw(server ftp.protocol ftp.port home username password revtun.username revtun.portfile);
my %encryptedConfigKeys = map {$_ => 1 } qw(password);
my %optionalKeys = map {$_ => 1} qw(password);

my @revtunLocalOpts = ("-t",
  "-o", "LogLevel=ERROR",
  "-o", "NoHostAuthenticationForLocalhost=yes",
  "-o", "UserKnownHostsFile=/dev/null",
  "-o", "StrictHostKeyChecking=no",
);
my @revtunRemoteOpts = ("-t",
  "-o", "LogLevel=ERROR",
  "-o", "NoHostAuthenticationForLocalhost=yes",
  "-o", "UserKnownHostsFile=/dev/null",
  "-o", "StrictHostKeyChecking=no",
);

my @initCmdsFTP = (
  "set ftp:ssl-force true",
  "set ftp:ssl-protect-data true",
  "set ssl:verify-certificate no",
);
my @initCmdsFTPS = (
  "set ftp:ssl-force true",
  "set ftp:ssl-protect-data true",
  "set ssl:verify-certificate no",
);
my @initCmdsSFTP = (
);
my @mirrorOptions = qw(
  --continue
  --verbose
);
my @pgetOptions = qw(
  -c
);

my $DEFAULT_PGET_SEGMENTS = 3;
my $DEFAULT_PARALLEL_FILES = 2;

my $usage = "Usage:
  $0 [--host]
     print \"user\@seedbox\"

  $0 -f
     read from stdin and send the commands to lftp

  $0 -g [PARALLEL_FILE_COUNT [PGET_SEGMENT_COUNT]]
     use lftp mirror to sync seedbox:$remoteDownloads => $localDownloads
     like: lftp SERVER -c \"mirror $remoteDownloads $localDownloads\"

     PARALLEL_FILE_COUNT
       number of files to download simultaneously
         -pass \"--parallel=PARALLEL_FILE_COUNT\" to `mirror` command
         -must be an integer >= 0
         -'0' means do not pass \"--parallel\" to `mirror`
         -default is $DEFAULT_PARALLEL_FILES

     PGET_SEGMENT_COUNT
       number of segments to download simultaneously per file
         -pass \"--use-pget=PGET_SEGMENT_COUNT\" to `mirror` command
         -must be an integer >= 0
         -'0' means do not pass \"--use-pget\" to `mirror`
         -default is $DEFAULT_PGET_SEGMENTS

  $0 -p PATH_GLOB [PGET_SEGMENT_COUNT]
     fetch a single file from $remotePartial to CWD using pget
     like: lftp SERVER -c \"glob -- pget @pgetOptions partial/PATH_GLOB\"

     PGET_SEGMENT_COUNT
       number of segments to download simultaneously per file
         -pass \"-n PGET_SEGMENT_COUNT\" to `pget` command
         -must be an integer >= 0
         -'0' means do not pass \"-n\" to `pget`
         -default is $DEFAULT_PGET_SEGMENTS

  $0 --mark-up-to-date
     fetch mtime of $remoteDownloads from seedbox and write to file $mtimeFile

  $0 --mark-out-of-date
     simply remove $mtimeFile, if it exists

  $0 --is-up-to-date
     compare mtime of $remoteDownloads on seedbox and contents of file $mtimeFile
     if different, print 'modified', else print 'up-to-date'

  $0 --rsync-revtun [RSYNC_OPTS] :REMOTE_SRC [RSYNC_OPTS]  LOCAL_DEST  [RSYNC_OPTS]
  $0 --rsync-revtun [RSYNC_OPTS] LOCAL_SRC   [RSYNC_OPTS] :REMOTE_DEST [RSYNC_OPTS]
     copy files using rsync to/from the revtun server over two SSH tunnels
     the remote file arg must start with ':', and the local file arg must not

     it is sort of like this pseudo-code:
       $0 --rsync-revtun -avP :~/pix/ backup/pix/
         =>
       rsync -avP 'ssh SERVER ssh REVTUN_USER\@localhost -p `cat revtun-port`':~/pix pix

     it is very much like this real code:
       SERVER=\"<config:server>\"
       SB_USER=\"<config:username>\"
       REVTUN_USERNAME=\"<config:revtun.username>\"
       REVTUN_PORTFILE=\"<config:revtun.portfile>\"
       REMOTE_SRC=\"\"
       LOCAL_DEST=\"\"

       SSH_OPTS=\"@revtunRemoteOpts\"
       REVTUN_PORT=`ssh \$SSH_OPTS \$SB_USER\@\$SERVER cat REVTUN_PORTFILE`
       RSYNC_PROXYCMD=\"ssh \$SSH_OPTS \$SB_USER\@\$SERVER -W localhost:\$REVTUN_PORT\"
       #note the user below is REVTUN_USER and not SB_USER
       rsync \$RSYNC_OPTS \\
         -e \"ssh \$SSH_OPTS -o ProxyCommand='\$RSYNC_PROXYCMD'\" \\
         \$REVTUN_USER\@\$SERVER:\$REMOTE_SRC \$LOCAL_DEST
         #or: \$LOCAL_SRC \$REVTUN_USER\@\$SERVER:\$REMOTE_DEST

  $0 --rsync
     use rsync to sync seedbox:$remoteDownloads => $localDownloads
     like: rsync -avP SERVER:$remoteDownloads/ $localDownloads

  $0 --cleanup
     run '@cleanupCmd' on seedbox

  $0 -s [CMD]
     ssh to seedbox

  $0 -r [CMD]
     ssh to seedbox with '@revtunLocalOpts' and run {on the seedbox}:

      ssh -t @revtunRemoteOpts REVTUN_USERNAME\@localhost -p REVTUN_PORT

  $0 -i
     read lines from STDIN and parse as TORRENT below

  $0 TORRENT [TORRENT TORRENT ..]
     if TORRENT is the path to a torrent file, send it to seedbox:$remoteTorrentDir
       if TORRENT is a magnet link, create a .torrent file from it
       if TORRENT is a 40-char hex sha1sum, treat as infohash and create a .torrent file from it
";

sub main(@){
  my $config = readSecrets();

  if(@_ == 0 or @_ == 1 and $_[0] =~ /^(--host)$/){
    print "$$config{username}\@$$config{server}\n";
    exit 0;
  }elsif(@_ == 0 or @_ == 1 and $_[0] =~ /^(--home)$/){
    print "$$config{home}\n";
    exit 0;
  }elsif(@_ == 1 and $_[0] =~ /^(-f)$/){
    ftpCommand $config;
  }elsif(@_ >= 1 and $_[0] =~ /^(-g)$/){
    my ($cmd, @args) = @_;

    my ($parallelFiles, $pgetSegments);
    if(@args == 0){
      ($parallelFiles, $pgetSegments) = ($DEFAULT_PARALLEL_FILES, $DEFAULT_PGET_SEGMENTS);
    }elsif(@args == 1 and $args[0] =~ /^\d+$/){
      ($parallelFiles, $pgetSegments) = ($args[0], $DEFAULT_PGET_SEGMENTS);
    }elsif(@args == 2 and $args[0] =~ /^\d+$/ and $args[1] =~ /^\d+$/){
      ($parallelFiles, $pgetSegments) = ($args[0], $args[1]);
    }else{
      die "$usage\ninvalid arguments to $cmd: @args\n";
    }

    if($parallelFiles > 0){
      @mirrorOptions = (@mirrorOptions, "--parallel=$parallelFiles");
    }
    if($pgetSegments > 0){
      @mirrorOptions = (@mirrorOptions, "--use-pget=$pgetSegments");
    }
    ftpCommand $config, "mirror @mirrorOptions $remoteDownloads $localDownloads";
  }elsif(@_ >= 2 and $_[0] =~ /^(-p)$/){
    my ($cmd, $pathGlob, @args) = @_;

    my $pgetSegments;
    if(@args == 0){
      $pgetSegments = $DEFAULT_PGET_SEGMENTS;
    }elsif(@args == 1 and $args[0] =~ /^\d+$/){
      $pgetSegments = $args[0];
    }else{
      die "$usage\ninvalid arguments to $cmd: @args\n";
    }

    if($pgetSegments > 0){
      @pgetOptions = (@pgetOptions, "-n", $pgetSegments);
    }
    ftpCommand $config, "glob -- pget @pgetOptions partial/$pathGlob";
  }elsif(@_ == 1 and $_[0] =~ /^(--mark-up-to-date)$/){
    my $mtime = fetchMtime $config;
    writeMtime $mtime;
    print "stored mtime $mtime\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--mark-out-of-date)$/){
    clearMtime();
    print "cleared mtime\n";
  }elsif(@_ == 1 and $_[0] =~ /^(--is-up-to-date)$/){
    my $prevMtime = readMtime();
    my $upToDate = 0;
    if(defined $prevMtime){
      my $mtime = fetchMtime $config;
      if($prevMtime == $mtime){
        $upToDate = 1;
      }
    }
    if($upToDate){
      print "up-to-date\n";
    }else{
      print "modified\n";
    }
  }elsif(@_ == 1 and $_[0] =~ /^(--rsync)$/){
    rsyncFetch $config;
  }elsif(@_ >= 3 and $_[0] =~ /^(--rsync-revtun)$/){
    shift @_;

    my ($src, $dest, @rsyncOpts);
    my $srcDestMsg = "exactly two args that do not start with '-' must be given\n";
    for my $arg(@_){
      if($arg !~ /^-/){
        if(not defined $src){
          $src = $arg;
        }elsif(not defined $dest){
          $dest = $arg;
        }else{
          die $srcDestMsg;
        }
      }else{
        push @rsyncOpts, $arg;
      }
    }
    if(not defined $src or not defined $dest){
      die $srcDestMsg;
    }

    my $direction;
    if($src =~ /^:/ and $dest !~ /^:/){
      $direction = "from";
      $src =~ s/^://;
    }elsif($dest =~ /^:/ and $src !~ /^:/){
      $direction = "to";
      $dest =~ s/^://;
    }else{
      die "exactly one of SRC or DEST must start with ':'\n";
    }

    rsyncRevtun $config, $src, $dest, $direction, @rsyncOpts;
  }elsif(@_ == 1 and $_[0] =~ /^(--cleanup)$/){
    ssh $config, @cleanupCmd;
  }elsif(@_ >= 1 and $_[0] =~ /^(-s)$/){
    shift;
    my @cmd = @_;
    ssh $config, @cmd;
  }elsif(@_ >= 1 and $_[0] =~ /^(-r)$/){
    shift;
    my @cmd = @_;
    sshRevtun $config, @cmd;
  }elsif(@_ == 1 and $_[0] =~ /^(-i)$/){
    while(my $line = <STDIN>){
      my $torrent = $line;
      chomp $torrent;
      if(handleTorrent $config, $torrent){
        system "alarm", "-s", "success";
      }else{
        system "alarm", "-s", "failure";
      }
    }
  }else{
    for my $torrent(@_){
      if(not handleTorrent $config, $torrent){
        die $usage;
      }
    }
  }
}

sub handleTorrent($$){
  my ($config, $torrent) = @_;
  my $torrentFile;
  if($torrent =~ /\.torrent$/ and -f $torrent){
    $torrentFile = $torrent;
  }elsif($torrent =~ /^[0-9a-f]{40}$/){
    $torrentFile = magnetToTorrent "magnet:?xt=urn:btih:$torrent";
  }elsif($torrent =~ /^magnet:\?xt=urn:btih:/){
    $torrentFile = magnetToTorrent $torrent;
  }

  if(defined $torrentFile){
    my $statusOk = scpTo $config, $torrentFile, "$remoteTorrentDir/";
    if($statusOk){
      print "\ncopied to '$remoteTorrentDir'\n";
      return 1;
    }else{
      print STDERR "\nWARN: scp failed for: $torrent\n";
      return 0;
    }
  }else{
    print STDERR "\nWARN: could not make torrent file from: $torrent\n";
    return 0;
  }
}

sub ftpCommand($@){
  my ($config, @cmds) = @_;
  my $ftp = $$config{'ftp.protocol'};
  my $port = $$config{'ftp.port'};
  my $url = "$ftp://$$config{server}:$port";
  my ($auth, $fakeAuth);
  if(defined $$config{password}){
    $auth = "$$config{username},$$config{password}";
    $fakeAuth = "$$config{username},PASSWORD";
  }else{
    $auth = "$$config{username}";
    $fakeAuth = "$$config{username}";
  }
  my @lftpCmd = ("lftp", "-u", $auth, $url);
  my @fakeCmd = ("lftp", "-u", $fakeAuth, $url);

  my @initCmds;
  if($ftp eq "ftp"){
    @initCmds = @initCmdsFTP;
  }elsif($ftp eq "ftps"){
    @initCmds = @initCmdsFTPS;
  }elsif($ftp eq "sftp"){
    @initCmds = @initCmdsSFTP;
  }else{
    die "ERROR: unknown ftp protocol: $ftp\n";
  }

  print "running:\n";
  print "  @fakeCmd\n";
  print "  $_\n" foreach @initCmds;
  print "  $_\n" foreach @cmds;
  print "\n";

  open FH, "|-", @lftpCmd;
  my $fh = select FH;
  $| = 1;
  select $fh;
  print FH "$_\n" foreach @initCmds;

  if(@cmds == 0){
    print "waiting for ftp commands via STDIN\n";
    my $line;
    while($line = <STDIN>){
      print FH $line or die "lftp is closed\n";
    }
  }else{
    for my $cmd(@cmds){
      print "running: $cmd\n";
      print FH "$cmd\nexit\n";
      close FH;
    }
  }
}

sub rsyncRevtun($$$$@){
  my ($config, $src, $dest, $direction, @rsyncOpts) = @_;

  my $sbUser = $$config{"username"};
  my $sbServer = $$config{"server"};
  my $revtunUsername = $$config{"revtun.username"};
  my $revtunPortFile = $$config{"revtun.portfile"};

  my @revtunPortCmd = (
    "ssh", @revtunRemoteOpts, "$sbUser\@$sbServer", "cat", $revtunPortFile);

  print "fetching revtun port\n";
  print "@revtunPortCmd\n";

  my $revtunPort = `@revtunPortCmd`;
  $revtunPort =~ s/[\n\r]+$//;
  if($revtunPort !~ /^\d+$/){
    die "Error fetching revtun port with cmd \"@revtunPortCmd\"\n";
  }

  my $rsyncProxyCmd;

  #test local ssh for 'ssh -W' netcat mode feature, if not present use netcat directly
  my $sshUsage = `ssh 2>&1`;
  if($sshUsage =~ /-W/){
    $rsyncProxyCmd = "ssh @revtunRemoteOpts $sbUser\@$sbServer -W localhost:$revtunPort";
  }else{
    $rsyncProxyCmd = "ssh @revtunRemoteOpts $sbUser\@$sbServer nc localhost $revtunPort";
  }

  my $remoteHost = "$revtunUsername\@$sbServer";


  my @rsyncCmd = ("rsync", @rsyncOpts,
    "-e", "ssh @revtunRemoteOpts -o ProxyCommand='$rsyncProxyCmd'",
    ($direction eq "from" ? "$remoteHost:$src" : "$src"),
    ($direction eq "to" ? "$remoteHost:$dest" : "$dest"),
  );

  print "\n\n@rsyncCmd\n";
  exec @rsyncCmd;
}

sub rsyncFetch($){
  my $config = shift;

  my @rsyncCmd = ("rsync", "-avP",
    "$$config{username}\@$$config{server}:$remoteDownloads/",
    $localDownloads,
    );
  print "@rsyncCmd\n";
  exec @rsyncCmd;
}

sub ssh($;\@){
  my ($config, $cmd) = @_;

  my @sshCmd = ("ssh", "$$config{username}\@$$config{server}", @$cmd);
  print STDERR "@sshCmd\n";
  exec @sshCmd;
}

sub scpTo($$$){
  my ($config, $srcLocalFile, $destRemoteFile) = @_;

  my @scpCmd = ("scp", $srcLocalFile, "$$config{username}\@$$config{server}:$destRemoteFile");
  print STDERR "@scpCmd\n";
  system @scpCmd;

  if($? == 0){
    return 1;
  }else{
    return 0;
  }
}
sub scpFrom($$$){
  my ($config, $srcRemoteFile, $destLocalFile) = @_;

  my @scpCmd = ("scp", "$$config{username}\@$$config{server}:$srcRemoteFile", $destLocalFile);
  print STDERR "@scpCmd\n";
  system @scpCmd;
}

sub readCmd($$){
  my ($config, $cmd) = @_;
  $cmd =~ s/'/'\\''/g;
  my $res = `ssh $$config{username}\@$$config{server} '$cmd'`;
  return $res;
}

sub sshRevtun($;\@){
  my ($config, $cmd) = @_;

  my $revtunUsername = $$config{"revtun.username"};
  my $revtunPortFile = $$config{"revtun.portfile"};
  my $revtunSshCmd = "ssh"
    . " @revtunRemoteOpts"
    . " $revtunUsername\@localhost"
    . " -p `cat $revtunPortFile`"
    . " @$cmd"
    ;
  my @sshCmd = ("ssh", @revtunLocalOpts, "$$config{username}\@$$config{server}");
  @sshCmd = (@sshCmd, $revtunSshCmd);
  print STDERR "@sshCmd\n";
  exec @sshCmd;
}

sub magnetToTorrent($){
  my $magnet = shift;
  chomp $magnet;
  my $tmpFile = "/tmp/seedbox-magnet-" . time . ".torrent";
  my $len = length $magnet;
  open FH, "> $tmpFile" or die "Could not write $tmpFile\n";
  print FH "d10:magnet-uri${len}:${magnet}e\n";
  close FH;
  return $tmpFile;
}

sub fetchMtime($){
  my $config = shift;
  my $mtime = readCmd($config, "stat -c%Y $remoteDownloads");
  chomp $mtime;
  die "error geting mtime\n" if $mtime !~ /^\d+$/;
  return $mtime;
}
sub readMtime(){
  return undef if not -f $mtimeFile;
  open FH, "< $mtimeFile" or die "Could not read $mtimeFile\n";
  my $mtime = join '', <FH>;
  close FH;
  chomp $mtime;
  die "Invalid stored mtime: $mtime\n" if $mtime !~ /^\d+$/;
  return $mtime;
}
sub writeMtime($){
  my $mtime = shift;
  open FH, "> $mtimeFile" or die "Could not write $mtimeFile\n";
  print FH "$mtime\n";
  close FH;
}
sub clearMtime(){
  system "rm", "-f", $mtimeFile;
}

sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @configKeys;
  for my $line(@lines){
    if($line =~ /^seedbox\.($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort keys %$cfg){
    if(defined $encryptedConfigKeys{$key}){
      $$cfg{$key} = decrypt $$cfg{$key};
    }
  }
  for my $key(sort @configKeys){
    if(not defined $$cfg{$key} and not defined $optionalKeys{$key}){
      die "Missing config '$key' in $secretsFile\n";
    }
  }
  return $cfg;
}

sub decrypt($){
  my ($s) = @_;
  open GPG, "-|", "gpg-sym", $s or die "could not run gpg-sym\n";
  my @contents = <GPG>;
  close GPG;
  die "error running gpg-sym\n$!\n" if $? != 0;
  my $value = join '', @contents;
  chomp $value;
  return $value;
}

&main(@ARGV);
