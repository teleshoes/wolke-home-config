#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename dirname);
use Cwd qw(abs_path);
use Encode qw(encode decode);
use Unicode::Normalize qw(NFKD);

sub calculateRenameCommandInfo($$$);
sub formatCmd(@);

my $PERLEXPR_LC = '$_=lc';
my $PERLEXPR_UC = '$_=uc';
my $PERLEXPR_REPLACE_SPECIAL_CHARS = ''
  . '; s/\\\'//g'              #remove apostrophes without replacement
  . '; s/&/ and /g'            #replace ampersand with ' and '
;
my $PERLEXPR_STRIP_NONWORD_PLUS_EXT = ''
  . '; s/\.(?!\w+$)/_/g'       #replace '.' chars with '_', keeping '.' before file ext
  . '; s/[^a-zA-Z0-9_.]/_/g'   #replace non-word chars except '.' with '_'
;
my $PERLEXPR_CLEANUP_UNDERSCORES = ''
  . '; s/_+/_/g'               #join multiple '_' chars into a single '_'
  . '; s/_+(?=\.\w+$)//g'      #remove '_' chars before file ext
  . '; s/^_+|_+$//g'           #remove leading/trailing '_' chars
;
my $PERLEXPR_STRIP_DIACRITICS = ''
  . '; $_=decode("UTF-8", $_)' #decode unicode string to utf8 bytes
  . '; $_=NFKD($_)'            #split accented characters into letters + diacritics
  . '; s/\p{NonspacingMark}//g'#remove diacritics
  . '; encode("UTF-8", $_)'    #re-encode utf8 bytes to unicode string
;
my $PERLEXPR_WORD = ''
  . $PERLEXPR_STRIP_DIACRITICS
  . $PERLEXPR_REPLACE_SPECIAL_CHARS
  . $PERLEXPR_STRIP_NONWORD_PLUS_EXT
  . $PERLEXPR_CLEANUP_UNDERSCORES
;

my $PERLEXPR_END_SUFFIX_SUB = sub{
  my $suffix = shift @_;
  return 's/^(.*?)((?:\.[^\.]*)?)$/$1_' . $suffix . '$2/';
};

my $EXEC = basename $0;

my $USAGE = "USAGE:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] PERLEXPR FILE [FILE ...]
    similar to `file-rename` command from File::Rename
    for each file:
      -run PERLEXPR to generate a new filename,
      -generate a `mv` command to rename the file
      -print the `mv` command, formatting with quotes for shell interpolation
      -run the `mv` command (as a direct system call without shell interpolation)
    e.g.:  > $EXEC s/a/b/  a.txt aa.txt
           mv a.txt b.txt
           mv aa.txt ba.txt
    NOTE: arguments are NOT actually positional, and can be given in any order
            -`$EXEC -n file1 s/a/b/` is the same as `$EXEC s/a/b/ file1 -n`
            -PERLEXPR cannot be an existing file on the filesystem
            -neither FILE nor PERLEXPR can be one of the valid OPTS

  $EXEC [OPTS] lc|--lc FILE [FILE ...]
    lower-case file names
    same as: $EXEC OPTS '$PERLEXPR_LC' FILE FILE ...
  $EXEC [OPTS] uc|--uc FILE [FILE ...]
    upper-case file names
    same as: $EXEC OPTS '$PERLEXPR_UC' FILE FILE ...

  $EXEC [OPTS] -w|--word FILE [FILE ...]
    generate clean, word-only filenames, with single dot for ext
      -remove accents/etc as in --strip-diacritics
      -replace symbols/etc as in --replace-special-chars
      -remove any remaining non-word chars as in --strip-nonword
      -clean separators as in --cleanup-underscores
    e.g.: $EXEC --word \".a.F1le náméd%%%boing's_...jP3g\"
          mv \".a.F1le named%%%boing's_...jP3g\" a_F1le_named_boings.jP3g
    same as: $EXEC OPTS '$PERLEXPR_WORD' FILE FILE ...

  $EXEC [OPTS] --replace-special-chars FILE [FILE ...]
    perform some special character replacements
      -replace '&' with ' and '
      -remove apostrophes without any replacement
    same as: $EXEC OPTS '$PERLEXPR_REPLACE_SPECIAL_CHARS' FILE FILE ...

  $EXEC [OPTS] --strip-nonword FILE [FILE ...]
    allow only letters, numbers, underscores, and a single dot before file ext
      -replace '.' chars with '_', keeping '.' before file ext
      -replace non-word chars except '.' with '_'
    same as: $EXEC OPTS '$PERLEXPR_STRIP_NONWORD_PLUS_EXT' FILE FILE ...

  $EXEC [OPTS] --cleanup-underscores FILE [FILE ...]
    allow only single underscores, and not at the start/end
      -join multiple '_' chars into a single '_'
      -remove '_' chars before file ext
      -remove leading/trailing '_' chars
    same as: $EXEC OPTS '$PERLEXPR_CLEANUP_UNDERSCORES' FILE FILE ...

  $EXEC [OPTS] --strip-diacritics FILE [FILE ...]
    remove diacritics (accents, cedilla, etc) from characters
      -decode FILE from utf8 bytes to unicode string
      -normalize into NFKD (separates letters proper and diacritics)
      -remove non-spacing-characters like diacritics
      -re-encode to utf8 byte string
    e.g.:
      touch 'zzz_ãáàâäéèêíìïõóöúùüçćčğñšśşžżź'
      $EXEC --strip-diacritics zzz_*
      # mv --no-clobber zzz_ãáàâäéèêíìïõóöúùüçćčğñšśşžżź zzz_aaaaaeeeiiiooouuucccgnssszzz
    same as: $EXEC OPTS '$PERLEXPR_STRIP_DIACRITICS' FILE FILE ...

  $EXEC [OPTS] -e|--end SUFFIX FILE [FILE ...]
    append \"_SUFFIX\" to the end of the base file name, but before file ext if present
      -remove leading _s from SUFFIX
      -prepend the extension with \"_SUFFIX\"
      e.g.: $EXEC -e foobar file1 file2.txt file3.x.y.z.txt
               => file1_foobar file2_foobar.txt file3.x.y.z_foobar.txt
    same as: $EXEC OPTS '" . &$PERLEXPR_END_SUFFIX_SUB('SUFFIX'). "' FILE FILE ...

  PERLEXPR
    -any perl expression, passed directly and unsanitized to eval()
      -the value of '\$_' at the start of the eval is the basename of the file or dir
      -the value of '\$_' at the end of the eval is the new filename
    -cannot be an existing file on the filesystem
    -cannot be one of the valid OPTS

    WARNING: like in File::Rename, eval() of this expression can have side effects
             e.g.: > `$EXEC 'system(\"rm file2\"); \$_=\"file2\"' file1`
                   will delete file2 first, then rename file1 to file2
                   similar to: $EXEC --clobber s/file1/file2/ file1

  FILE
    -any existing file, directory or symlink (valid or broken)
    -cannot be one of the valid OPTS

  OPTS
    -n | -s | --dry-run | --simulate | --no-act
      do not rename files
      print `mv` commands, prepended with `#`, but do not run the commands

      WARNING: like `file-rename -n`, PERLEXPR is still run, which may have side effects
        e.g.: > $EXEC --simulate 'system(\"rm file2\"); \$_=\"file2\"' file1
              will still delete file2, but it will not rename file1
    --no-simulate
      actually run `mv` commands
      (this is the default)

    --clobber
      allow overwriting files, also pass '--update=all' to mv
    --no-clobber
      do not run ANY `mv` commands, if ANY destination file already exists
      also, pass '--no-clobber' to mv
      (this is the default)

    --dirs
      allow parent directory of file/dir to be changed
        note: this is just about parent directory.
              directories passed in directly can always be renamed within their parent,
                e.g.: > $EXEC s/A/B/ directoryA/
      set '\$_' equal to the full path of each file
      does NOT create any directories, fails if the target dir does not exist
        e.g.: > $EXEC --dirs  s/apple/banana/ ./apple/a.txt
              mv ./apple/a.txt ./banana/a.txt
    --no-dirs
      do not allow parent directory to change
      set '\$_' equal to the basename (last path component) of each file
      (this is the default)
";

sub main(@){
  my $perlExpr = undef;
  my @files;
  my $opts = {
    simulate => 0,
    clobber  => 0,
    dirs     => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-n|-s|--dry-run|--simulate|--no-act)$/){
      $$opts{simulate} = 1;
    }elsif($arg =~ /^(--no-simulate)$/){
      $$opts{simulate} = 0;
    }elsif($arg =~ /^(--clobber)$/){
      $$opts{clobber} = 1;
    }elsif($arg =~ /^(--no-clobber)$/){
      $$opts{clobber} = 0;
    }elsif($arg =~ /^(--dirs)$/){
      $$opts{dirs} = 1;
    }elsif($arg =~ /^(--no-dirs)$/){
      $$opts{dirs} = 0;
    }elsif(-e $arg or -l $arg){
      push @files, $arg;
    }elsif($arg =~ /^(lc|--lc)$/){
      $perlExpr = $PERLEXPR_LC;
    }elsif($arg =~ /^(uc|--uc)$/){
      $perlExpr = $PERLEXPR_UC;
    }elsif($arg =~ /^(-w|--word)$/){
      $perlExpr = $PERLEXPR_WORD;
    }elsif($arg =~ /^(--replace-special-chars)$/){
      $perlExpr = $PERLEXPR_REPLACE_SPECIAL_CHARS;
    }elsif($arg =~ /^(--strip-nonword)$/){
      $perlExpr = $PERLEXPR_STRIP_NONWORD_PLUS_EXT;
    }elsif($arg =~ /^(--cleanup-underscores)$/){
      $perlExpr = $PERLEXPR_CLEANUP_UNDERSCORES;
    }elsif($arg =~ /^(--strip-diacritics)$/){
      $perlExpr = $PERLEXPR_STRIP_DIACRITICS;
    }elsif($arg =~ /^(-e|--end)$/ and @_ > 0){
      my $suffix = shift @_;
      $suffix =~ s/^_//g;
      $perlExpr = &$PERLEXPR_END_SUFFIX_SUB($suffix);
    }elsif(not defined $perlExpr){
      $perlExpr = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: missing FILE\n" if @files == 0;
  die "$USAGE\nERROR: missing PERLEXPR\n" if not defined $perlExpr;

  my @renameCommandInfos;
  for my $file(@files){
    push @renameCommandInfos, calculateRenameCommandInfo($opts, $perlExpr, $file);
  }

  #skip identical, unchanged files
  #  skip commands like 'mv file file'
  @renameCommandInfos = grep {$$_{src} ne $$_{dest}} @renameCommandInfos;

  #skip equivalent, non-symlink files
  #  skip commands like 'mv file ./file', but allow moving a symlink
  @renameCommandInfos = grep {-l $$_{src} or $$_{absSrc} ne $$_{absDest}} @renameCommandInfos;

  if(not $$opts{clobber}){
    for my $cmdInfo(@renameCommandInfos){
      if(-e $$cmdInfo{dest} or -l $$cmdInfo{dest}){
        die "ERROR: $$cmdInfo{dest} already exists, not running *ANY* renames\n";
      }
      if(-e $$cmdInfo{absDest} or -l $$cmdInfo{absDest}){
        die "ERROR: $$cmdInfo{absDest} already exists, not running *ANY* renames\n";
      }
    }

    my %seenDestFiles;
    for my $cmdInfo(@renameCommandInfos){
      if(defined $seenDestFiles{$$cmdInfo{dest}} or defined $seenDestFiles{$$cmdInfo{absDest}}){
        die "ERROR: cannot rename multiple files to $$cmdInfo{dest}\n";
      }
      $seenDestFiles{$$cmdInfo{dest}} = 1;
      $seenDestFiles{$$cmdInfo{absDest}} = 1;
    }
  }

  for my $cmdInfo(@renameCommandInfos){
    my ($src, $dest) = ($$cmdInfo{src}, $$cmdInfo{dest});
    if(-d $src and -d "$src/"){
      #always have a trailing slash for src directories
      $src =~ s/\/+$//;
      $src = "$src/";
      if(not -d $dest and not -d "$dest/"){
        #add trailing slashes only for dest directories that do not exist
        $dest =~ s/\/+$//;
        $dest = "$dest/";
      }
    }

    my @cmd = ("mv");
    push @cmd, "--update=all" if $$opts{clobber};
    push @cmd, "--no-clobber" if not $$opts{clobber};
    push @cmd, $src;
    push @cmd, $dest;

    my $cmdFmt = formatCmd(@cmd);
    $cmdFmt = "#$cmdFmt" if $$opts{simulate};
    print "$cmdFmt\n";

    if(not $$opts{simulate}){
      system @cmd;
    }
  }
}

sub calculateRenameCommandInfo($$$){
  my ($opts, $perlExpr, $file) = @_;

  $file =~ s/\/+$//;

  my ($dir, $baseName);
  if($file =~ /^(.*\/)([^\/]*)$/){
    ($dir, $baseName) = ($1, $2);
  }else{
    ($dir, $baseName) = ("", $file);
  }

  $_ = $$opts{dirs} ? $file : $baseName;
  eval $perlExpr;
  my $result = $_;

  my ($src, $dest);
  if($$opts{dirs}){
    $src = $file;
    $dest = $result;
  }else{
    if($result =~ /\//){
      die "ERROR: must use --dirs to change directory $baseName => $result\n";
    }
    $src = "$dir$baseName";
    $dest = "$dir$result";
  }

  my $dirSrc = dirname $src;
  my $dirDest = dirname $dest;

  if(not -d $dirDest){
    die "ERROR: dest dir '$dirDest' does not exist for $src => $dest\n";
  }

  my $absSrc = abs_path($src);
  my $absDest = abs_path($dest);

  if(0
    or (not defined $absSrc)
    or (not defined $absDest)
    or (not -d $dirSrc)
    or (not -d $dirDest)
    or (not -e $src and not -l $src)
    or (not -l $src and not -e $absSrc) #allow broken symlinks as src
  ){
    die "ERROR: fatal error parsing paths for $file\n";
  }

  return {
    src     => $src,
    dest    => $dest,
    dirSrc  => $dirSrc,
    dirDest => $dirDest,
    absSrc  => abs_path($src),
    absDest => abs_path($dest),
  };
}

sub formatCmd(@){
  my @cmd = @_;
  my @cmdFmt;
  for my $arg(@cmd){
    #shell meta: |&;<>()$`\'"\n \t
    #plus !
    if($arg =~ /[|&;<>\$`\\'"\n \t!]/){
      #if arg contains shell meta, wrap in single quotes with replacements
      $arg =~ s/'/'\\''/g;
      $arg = "'$arg'";
    }
    push @cmdFmt, $arg;
  }
  return join(" ", @cmdFmt);
}

&main(@ARGV);
