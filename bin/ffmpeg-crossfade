#!/usr/bin/perl
use strict;
use warnings;

use File::Basename qw(basename);
use List::Util qw(sum);

my $EXEC = basename $0;

my $DEFAULT_FADE_LEN = "2.00";

my $USAGE = "Usage:
  take a bunch of videos and concatenate them with ffmpeg,
    using xfade+acrossfade,
    with a fade transition lasting FADE_LEN_SECONDS (${DEFAULT_FADE_LEN}s)
  input videos must all have the exact same codecs,
    filetypes, bitrates, etc
  input videos must be the same resolution,
    OR use --scale to first perform 'scale' in filter_complex
  input videos must all be at least FADE_LEN_SECONDS in duration

  $EXEC -h|--help
    show this message

  $EXEC [OPTS] INPUT_VID INPUT_VID [INPUT_VID ..]
    -combine the video stream of each file, using filter_complex with xfade
      -for the first file, use video stream as-is for VIDEO_RESULT
      -for each subsequent file, use xfade to create VIDEO_RESULT:
        -use previous VIDEO_RESULT for XFADE_FIRST_ARG
        -if --scale is given:
          -scale video stream and use result as XFADE_SECOND_ARG
        -otherwise:
          -use video stream as-is for XFADE_SECOND_ARG
        -calculate XFADE_OFFSET
          XFADE_OFFSET = PREVIOUS_TOTAL_DURATION - (FADE_LEN_SECONDS * PREVIOUS_VIDEO_COUNT)
            where to start the fade transition
          PREVIOUS_TOTAL_DURATION
            the duration of all previous videos
          PREVIOUS_DURATION
            the number of previous videos
        -add xfade filter to filters
            [XFADE_FIRST_ARG][XFADE_SECOND_ARG]
            xfade=transition=fade:duration=FADE_LEN_SECONDS:offset=XFADE_OFFSET
            [VIDEO_RESULT]
    -combine the audio stream of each file, using filter_complex with acrossfade
      -for the first file, use audio stream as-is for AUDIO_RESULT
      -for each subsequent file, use acrossfade to create AUDIO_RESULT:
        -use previous AUDIO_RESULT for ACROSSFADE_FIRST_ARG
        -use audio stream as-is for ACROSSFADE_SECOND_ARG
        -add acrossfade to filters
            [ACROSSFADE_FIRST_ARG][ACROSSFADE_SECOND_ARG]
            acrossfade=d=FADE_LEN
            [AUDIO_RESULT]
    -run ffmpeg, writing output to OUTPUT_VID_FILE
      -extract <EXT> from first INPUT_VID_FILE (alphanumeric chars after final dot char)
      -use EXT=mp4 if no <EXT> is present
      -use out.<EXT> for OUTPUT_VID_FILE, unless --output given

  OPTS
    -o OUTPUT_VID_FILE | --output OUTPUT_VID_FILE | --output=OUTPUT_VID_FILE
      default is out.<EXT>

    --len FADE_LEN_SECONDS | --fade-len FADE_LEN_SECONDS
    --len=FADE_LEN_SECONDS | --fade-len=FADE_LEN_SECONDS
      make the duration of the crossfade FADE_LEN_SECONDS (default is 2.00)

    --resolution WIDTHxHEIGHT | --res WIDTHxHEIGHT | --scale WIDTHxHEIGHT
    --resolution=WIDTHxHEIGHT | --res=WIDTHxHEIGHT | --scale=WIDTHxHEIGHT
      add scale=WIDTHxHEIGHT to filter_complex chain

    --test-trim | --test | --trim
      test the fade results quickly by using only the first and last 3s of each input
        -before fading, split each INPUT_VID into two parts, the first 3s and the last 3s
        -omit the first part of the first INPUT_VID
        -omit the last part of the second INPUT_VID
        -fade each part into each other

    -an | --an | --no-audio | --audio-null
      remove audio channel (do not map any audio)
";

sub crossfadeVideo($$@);
sub dur($);
sub shellEscape($);

sub main(@){
  my @inputVideos;
  my $outputVideo;
  my $opts = {
    fadeLen         => $DEFAULT_FADE_LEN,
    forceResolution => undef,
    audioNull       => 0,
    testTrim        => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^--output=(.+)$/){
      $outputVideo = $1;
    }elsif($arg =~ /^(-o|--output)$/ and @_ > 0){
      $outputVideo = shift;
    }elsif($arg =~ /^(--len|--fade-len)=(\d+|\d*\.\d+)$/){
      $$opts{fadeLen} = $2;
    }elsif($arg =~ /^(--len|--fade-len)$/ and @_ > 0 and $_[0] =~ /^(\d+|\d*\.\d+)$/){
      $$opts{fadeLen} = shift;
    }elsif($arg =~ /^(--resolution|--res|--scale)=(\d+x\d+)$/){
      $$opts{forceResolution} = $2;
    }elsif($arg =~ /^(--resolution|--res|--scale)$/ and @_ > 0 and $_[0] =~ /^(\d+x\d+)$/){
      $$opts{forceResolution} = shift;
    }elsif($arg =~ /^(--test-trim|--test|--trim)$/){
      $$opts{testTrim} = 1;
    }elsif($arg =~ /^(-an|--an|--no-audio|--audio-null)$/){
      $$opts{audioNull} = 1;
    }else{
      push @inputVideos, $arg;
    }
  }
  die "$USAGE\nERROR: must specify at least two INPUT_VID_FILEs\n" if @inputVideos < 2;

  my $ext = ".mp4";
  $ext = $1 if $inputVideos[0] =~ /\.([a-z0-9]+)$/;

  $outputVideo = "out.$ext" if not defined $outputVideo;

  die "ERROR: output video $outputVideo exists\n" if defined $outputVideo and -e $outputVideo;
  for my $inputVideo(@inputVideos){
    die "ERROR: input video $inputVideo is not a file\n" if not -f $inputVideo;
  }

  if($$opts{testTrim}){
    my $trimLen = 3;
    my @newInputVideos;
    for(my $i=0; $i<@inputVideos; $i++){
      my $vid = $inputVideos[$i];
      my $ext;
      if($vid =~ /\.(\w+)$/){
        $ext = $1;
      }else{
        die "ERROR: could not parse ext for --test-trim in $vid\n";
      }

      my $startVid = "tmp-trim-input-$i-a-start.$ext";
      my $endVid = "tmp-trim-input-$i-b-end.$ext";
      my $trimVid = "tmp-trim-input-$i-trim.$ext";

      system "ffmpeg", "-i", $vid, "-c", "copy", "-t", $trimLen, $startVid;
      system "ffmpeg", "-sseof", "-$trimLen", "-i", $vid, "-c", "copy", $endVid;

      my $concatFile = "tmp-concat.txt";
      open my $fh, "> $concatFile" or die "ERROR: could not write $concatFile\n$!\n";
      print $fh "file '$startVid'\nfile '$endVid'\n";
      close $fh;
      system "ffmpeg", "-f", "concat", "-i", $concatFile, "-c", "copy", $trimVid;

      if($i == 0){
        push @newInputVideos, $endVid;
      }elsif($i == $#inputVideos){
        push @newInputVideos, $startVid;
      }else{
        push @newInputVideos, $trimVid;
      }
    }
    @inputVideos = @newInputVideos;
  }

  crossfadeVideo($opts, $outputVideo, @inputVideos);
}

sub crossfadeVideo($$@){
  my ($opts, $output, @inputs) = @_;

  my $fadeLen = $$opts{fadeLen};

  my @durs = map {dur $_} @inputs;

  my @filters;

  #apply xfade with previously combined inputs to each input
  my $idVidPrev = undef;
  for(my $i=0; $i<@inputs; $i++){
    my $idVidCur = "$i:v";

    if(defined $$opts{forceResolution}){
      my $idVidScale = "scaleVid$i";
      push @filters, ''
        . "[$idVidCur]"
        . "scale=$$opts{forceResolution}"
        . "[$idVidScale]"
        ;
      $idVidCur = $idVidScale;
    }

    if(defined $idVidPrev){
      #combine the previously combined inputs with this input
      my $idVidFade = "fadeVid$i";

      my $previousTotalDuration = $i == 0 ? 0 : sum(@durs[0..$i-1]);
      my $previousCount = $i;
      my $fadeOffset = $previousTotalDuration - ($fadeLen * $previousCount);

      push @filters, ""
        . "[$idVidPrev][$idVidCur]"
        . "xfade=transition=fade:duration=$fadeLen:offset=$fadeOffset"
        . "[$idVidFade]"
        ;
      $idVidCur = $idVidFade;
    }

    $idVidPrev = $idVidCur;
  }
  my $idVidFinal = $idVidPrev;



  #apply acrossfade with previously combined inputs to each input
  my $idAudPrev = undef;
  for(my $i=0; $i<@inputs; $i++){
    next if $$opts{audioNull};
    my $idAudCur = "$i:a";

    if(defined $idAudPrev){
      #combine the previously combined inputs with this input
      my $idAudFade = "fadeAud$i";
      push @filters, ""
        . "[$idAudPrev][$idAudCur]"
        . "acrossfade=d=$fadeLen"
        . "[$idAudFade]"
        ;
      $idAudCur = $idAudFade;
    }

    $idAudPrev = $idAudCur;
  }
  my $idAudFinal = $idAudPrev;



  my @cmd = ();
  @cmd = (@cmd, "ffmpeg");
  @cmd = (@cmd, map {("-i", $_)} @inputs);
  @cmd = (@cmd, "-filter_complex", join(";", @filters));
  @cmd = (@cmd, "-map", "[$idVidFinal]");
  @cmd = (@cmd, "-map", "[$idAudFinal]") unless $$opts{audioNull};
  @cmd = (@cmd, $output);

  my $msg = ""
    . "\n\n\n"
    . "===== COMMAND (shell-escaped):\n"
    . (join " ", map {shellEscape($_)} @cmd) . "\n"
    . "===== FILTERS (one per line):\n"
    . (join "", map {"$_\n"} @filters)
    . "=====\n"
    . "\n\n\n"
  ;

  print $msg;
  system @cmd;
  print $msg;
}

sub dur($){
  my ($file) = @_;
  my @durCmd = ("duration", "-n", "-s", $file);
  open CMD, "-|", @durCmd or die "could not run @durCmd\n$!\n";
  my $duration = join '', <CMD>;
  close CMD;
  chomp $duration;
  if($duration !~ /^(\d+|\d*\.\d+)$/){
    die "invalid duration for $file: $duration\n";
  }
  return $duration;
}

sub shellEscape($){
  my $s = shift;
  my $allowedChars = join '', qw(
    a-z   A-Z   0-9
    :    =   @   _   %
    \+   \-   \.   \/
    ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ
  );
  my $specialChars = "[^$allowedChars]";

  if($s =~ /$specialChars/){
    $s =~ s/'/'\\''/g;
    $s = "'$s'";
  }
  return $s;
}

&main(@ARGV);
