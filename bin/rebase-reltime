#!/usr/bin/perl
use strict;
use warnings;
use Date::Parse qw(str2time);
use Date::Format qw(time2str);

my $dateRange = int(20 * 365 * 24 * 60 * 60);

sub runFilterBranch($@);
sub readFilterCommitsFile($);
sub writeFilterCommitsFile($$);
sub getFilterScript($$);
sub checkTime($);
sub getTime($);
sub absTime($);
sub formatTime($);
sub run(@);
sub maybeRun(@);

my $dateDisplayFormat = "%Y-%m-%d %H:%M:%S";
my $dateDisplayFormatRegex = "\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}";

my $usage = "Usage:
  $0 [OPTS] TARGET_COMMIT
    -fetch commits with `git rev-list <TARGET_COMMIT>..HEAD`
      (does not modify <TARGET_COMMIT>, modifies HEAD)
    -change datetimes
      -if --range=<START_DATE>-<END_DATE>:
        -make earliest commit START_DATE and latest commit END_DATE
        -scale all other commits between (keeping their relative relationships)
      -if --edit: (default)
        -display git commit datetimes for changing using a tmp file in `editor`
        -apply the git commit datetimes from the tmp file after `editor` exits
    -prints a warning to STDERR if commits are now out of chronological order
    -apply the new datetimes with `git filter-branch`

  OPTS
    -f
      pass -f to git filter-branch command
    -s | -n | --simulate | --no-act | --check
      do not run `git filter-branch`
    --range=START_DATE-END_DATE
      set commit date/times without user interaction to values in the range
    -e | --edit  (default)
      allow user to edit datetimes interactively (using `editor`),
      immediately before running `git filter-branch`
    --no-edit
      do NOT show an editor
    --timezone=TZ
      use TZ for timezone instead of `timedatectl show -p Timezone --value`

  START_DATE
  END_DATE
    -unix timestamp {seconds since epoch}
    -relative past time of the form: \"X UNITs ago\"
     UNIT can be days, hours, minutes, or seconds
    -\"now\" for right now
    -\"start\" for the oldest date in the commits
    -\"end\" for the newest date in the commits
";

sub main(@){
  my $skipRebase = 0;
  my $force = 0;
  my $rangeStart = undef;
  my $rangeEnd = undef;
  my $edit = 1;
  my $timezone = undef;

  while (@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-f)$/){
      $force = 1;
    }elsif($arg =~ /^(-s|-n|--simulate|--no-act|--check)$/){
      $skipRebase = 1;
    }elsif($arg =~ /^--range=(.+)-(.+)$/){
      ($rangeStart, $rangeEnd) = ($1, $2);
    }elsif($arg =~ /^(-e|--edit)$/){
      $edit = 1;
    }elsif($arg =~ /^(--no-edit)$/){
      $edit = 0;
    }elsif($arg =~ /^--timezone=(.+)$/){
      $timezone = $1;
    }else{
      die $usage;
    }
  }

  my $targetCommit;
  if(@_ == 1){
    $targetCommit = $_[0];
  }else{
    die $usage;
  }

  my $targetCommitHash = `git rev-parse $targetCommit`;
  chomp $targetCommitHash;
  die "did not understand $targetCommit\n" if $targetCommitHash !~ /^[0-9a-f]{40}$/;

  my @commits = `git rev-list $targetCommitHash..HEAD`;
  chomp foreach @commits;

  my ($oldest, $newest);
  for my $c(@commits){
    my $t = `git show -s --format=%at $c`;
    chomp $t;
    die "Invalid commit date: $t\n" if not checkTime $t;
    $oldest = $t if not defined $oldest or $t < $oldest;
    $newest = $t if not defined $newest or $t > $newest;
  }
  die "no commits\n" if not defined $oldest or not defined $newest;

  my $rangeStartTime;
  if(defined $rangeStart){
    if($rangeStart =~ /^(start)$/){
      $rangeStartTime = $oldest;
    }elsif($rangeStart =~ /^(end)$/){
      $rangeStartTime = $newest;
    }else{
      $rangeStartTime = getTime $rangeStart;
    }
  }

  my $rangeEndTime;
  if(defined $rangeEnd){
    if($rangeEnd =~ /^(start)$/){
      $rangeEndTime = $oldest;
    }elsif($rangeEnd =~ /^(end)$/){
      $rangeEndTime = $newest;
    }else{
      $rangeEndTime = getTime $rangeEnd;
    }
  }

  printf "old range: %s => %s\n", formatTime($oldest), formatTime($newest);
  if(not defined $rangeStartTime or not defined $rangeEndTime){
    print "(not scaling to a new range)\n";
  }else{
    printf "new range: %s => %s\n", formatTime($rangeStartTime), formatTime($rangeEndTime);
  }
  print "\n";

  my $filterCommits = [];
  my %originalDates;
  for my $c(@commits){
    my $t = `git show -s --format=%at $c`;
    chomp $t;

    my $newDate;
    if(defined $rangeStartTime and defined $rangeEndTime){
      my $offsetRatio;
      if($newest == $oldest){
        $offsetRatio = 0;
      }else{
        $offsetRatio = ($t-$oldest) / ($newest-$oldest);
      }
      my $offset = $offsetRatio * ($rangeEndTime - $rangeStartTime);
      $newDate = $rangeStartTime + $offset;
    }else{
      $newDate = $t;
    }

    $originalDates{$c} = $t;
    push @$filterCommits, [$c, $newDate];
  }

  if($edit){
    my $tmpFile = "/tmp/rebase-reltime-" . time;
    writeFilterCommitsFile $tmpFile, $filterCommits;
    run "editor", $tmpFile;
    $filterCommits = readFilterCommitsFile $tmpFile;
    print "\n";
  }

  if(not $skipRebase){
    print "Changing the following commits:\n";
  }else{
    print "Rebase is disabled, NOT changing the following commits:\n";
  }
  for my $commitDate(@$filterCommits){
    my ($commit, $newDate) = @$commitDate;
    my $originalDate = $originalDates{$commit};
    printf "%s %s => %s\n",
      substr($commit, 0, 7), formatTime($originalDate), formatTime($newDate);
  }
  my $lastDate = 0;
  for my $commitDate(reverse @$filterCommits){
    my ($commit, $newDate) = @$commitDate;
    if($newDate < $lastDate){
      print STDERR "\nWARNING: time for $commit is before parent\n";
    }
    $lastDate = $newDate;
  }
  print "\n";

  if($skipRebase){
    print "actual rebase is disabled, exiting\n";
    exit 0;
  }

  print "proceed? [y/N]";
  my $response = <STDIN>;
  die "aborted\n" unless $response eq "y\n";

  if(not defined $timezone){
    $timezone = `timedatectl show -p Timezone --value`;
    chomp $timezone;
  }

  my $filterScript = getFilterScript $filterCommits, $timezone;
  my @args = ("--env-filter", $filterScript, "$targetCommitHash..HEAD");
  my $success = runFilterBranch $force, @args;
  if(not $force and not $success){
    print "rerun with -f? [y/N]";
    $response = <STDIN>;
    die "aborted\n" unless $response eq "y\n";
    $success = runFilterBranch 1, @args;
    if(not $success){
      die "FAILED\n";
    }
  }
}

sub runFilterBranch($@){
  my ($force, @args) = @_;
  $ENV{FILTER_BRANCH_SQUELCH_WARNING}=1;
  my @cmd = ("git", "filter-branch");
  @cmd = (@cmd, "-f") if $force;
  @cmd = (@cmd, @args);
  maybeRun @cmd;
  return $? == 0;
}

sub readFilterCommitsFile($){
  my ($file) = @_;
  my $filterCommits = [];
  open FH, "< $file" or die "Could not read $file\n";
  my @lines = <FH>;
  close FH;
  for my $line(@lines){
    my $parsedLine = $line;
    chomp $parsedLine;
    $parsedLine =~ s/#.*//;
    $parsedLine =~ s/^\s+//;
    $parsedLine =~ s/\s+$//;
    next if $parsedLine =~ /^\s*$/;
    if($parsedLine =~ /^([a-f0-9]{40}|[a-f0-9]{7}) ($dateDisplayFormatRegex)$/){
      my ($commit, $t) = ($1, $2);
      $commit = `git rev-parse $commit`;
      chomp $commit;
      push @$filterCommits, [$commit, getTime($t)];
    }else{
      die "Malformed line: $line";
    }
  }
  return $filterCommits;
}
sub writeFilterCommitsFile($$){
  my ($file, $filterCommits) = @_;
  open FH, "> $file" or die "Could not write $file\n";
  print FH ''
    . "# edit the dates below\n"
    . "# each commit is one per line\n"
    . "# format is \"COMMIT_SHA1 $dateDisplayFormat #LOG_SUMMARY\"\n"
    . "# leading/trailing whitespace on lines is ignored\n"
    . "# removing a line will cause that commit not to be modified\n"
    . "# anything following a # on a line is a comment and is ignored\n"
    . "\n"
    ;
  for my $commitDate(@$filterCommits){
    my ($commit, $t) = @$commitDate;
    my $info = `git show --format='%s {old: %ci}' -s $commit`;
    chomp $info;
    printf FH "%s %s       #$info\n", substr($commit, 0, 7), formatTime($t);
  }
  close FH;
}

sub getFilterScript($$){
  my ($filterCommits, $timezone) = @_;
  my $script = '';
  for my $commitDate(@$filterCommits){
    my ($commit, $t) = @$commitDate;
    my $date = "$t $timezone";
    $script .= ""
      . "  if [ \$GIT_COMMIT = $commit ]\n"
      . "  then\n"
      . "    export GIT_AUTHOR_DATE=\"$date\"\n"
      . "    export GIT_COMMITTER_DATE=\"$date\"\n"
      . "  fi\n"
      ;
  }
  return $script;
}

sub checkTime($){
  my ($t) = @_;
  my $now = time;
  return $t =~ /^\d+$/
    && ($now - $dateRange) < $t && $t < ($now + $dateRange);
}

sub getTime($){
  my ($date) = @_;

  my $t;
  if(checkTime $date){
    $t = $date;
  }elsif($date =~ /^([0-9.]+) seconds ago$/){
    $t = absTime int($1);
  }elsif($date =~ /^([0-9.]+) minutes ago$/){
    $t = absTime int($1*60);
  }elsif($date =~ /^([0-9.]+) hours ago$/){
    $t = absTime int($1*60*60);
  }elsif($date =~ /^([0-9.]+) days ago$/){
    $t = absTime int($1*24*60*60);
  }elsif($date =~ /^now$/){
    $t = absTime 0;
  }else{
    $t = str2time $date;
  }

  die "Invalid date: $date\n" if not checkTime $t;
  return $t;
}

sub absTime($){
  my ($secAgo) = @_;
  my $t = `date --date="$secAgo seconds ago" +%s`;
  chomp $t;
  return $t;
}

sub formatTime($){
  my ($t) = @_;
  return time2str $dateDisplayFormat, $t;
}

sub run(@){
  maybeRun @_;
  die "Error running '@_'\n" if $? != 0;
}
sub maybeRun(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
