#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep time);

sub getIdleMillis();
sub turnOn();
sub turnOff();
sub disable();
sub enable();
sub check();
sub readState();
sub readElapsedActiveMillis();
sub maybeReadFile($);
sub writeFile($$);
sub nowMillis();
sub run(@);

my $FILE_ACTIVE_EPOCH_MILLIS = "/tmp/screensaver-active-epoch-millis";
my $FILE_LAST_CHECKED_IDLE_MILLIS = "/tmp/screensaver-last-checked-idle-millis";
my $FILE_STATE = "/tmp/screensaver-state";

my $SCREENSAVER_BRIGHTNESS = 25;

my $LOOP_DELAY_MILLIS = 1000;                    #1s
my $DEFAULT_IDLE_TIMEOUT_MILLIS = 600 * 1000;    #10min
my $ACTIVE_BUFFER_MILLIS = 2 * 1000;             #2s

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
  $EXEC --info | info
    print STATE

  $EXEC --on | on
    turn screensaver on
      -write 'ON' to $FILE_STATE
      -write NOW_EPOCH_MILLIS to $FILE_ACTIVE_EPOCH_MILLIS
      -remove $FILE_LAST_CHECKED_IDLE_MILLIS
      -run: brightness $SCREENSAVER_BRIGHTNESS

  $EXEC --off | off
    turn screensaver off
      -write 'OFF' to $FILE_STATE
      -remove $FILE_ACTIVE_EPOCH_MILLIS
      -remove $FILE_LAST_CHECKED_IDLE_MILLIS
      -run: brightness 100

  $EXEC --disable | disable
    prevent enabling/disabling screensaver with --check
      -same as: $EXEC --off
      -write 'DISABLED' to $FILE_STATE

  $EXEC --enable | enable
    remove state so next --check may enable screensaver
      -remove $FILE_STATE
      -remove $FILE_ACTIVE_EPOCH_MILLIS
      -remove $FILE_LAST_CHECKED_IDLE_MILLIS

  $EXEC --check | check
    turn screensaver on/off based on X11 idle time
      turn screensaver on if idle for more than ${DEFAULT_IDLE_TIMEOUT_MILLIS}ms
      turn screensaver off if idle time is less than the previous idle time checked
        NOTE: screensaver stays on for at least ${ACTIVE_BUFFER_MILLIS}ms

      -if STATE is 'DISABLED':
        -do nothing
      -if STATE is 'ON':
        -if CURRENT_IDLE_MILLIS < LAST_CHECKED_IDLE_MILLIS:
          -if ELAPSED_ACTIVE_MILLIS < $ACTIVE_BUFFER_MILLIS
            -do nothing (keep active for at least ${ACTIVE_BUFFER_MILLIS}ms)
          -otherwise:
            -same as: $EXEC --off
        -otherwise:
          -write CURRENT_IDLE_MILLIS to $FILE_LAST_CHECKED_IDLE_MILLIS
      -if STATE is 'OFF' (default value if empty/invalid):
        -if CURRENT_IDLE_MILLIS > $DEFAULT_IDLE_TIMEOUT_MILLIS:
          -same as: $EXEC --on

  $EXEC --check-daemon | --daemon | daemon
  $EXEC --check-loop | --loop | loop
    run '$EXEC --check' every ${LOOP_DELAY_MILLIS}ms


  CURRENT_IDLE_MILLIS
    idle time in X11
      -obtained using `xprintidle`

  STATE
    screensaver state
      -stored in: $FILE_STATE
      -one of 'ON', 'OFF', or 'DISABLED'
      -if file is missing or contains any other value, STATE is 'OFF'

  ACTIVE_EPOCH_MILLIS
    timestamp in milliseconds when screensaver was turned on
      -stored in: $FILE_ACTIVE_EPOCH_MILLIS
  NOW_EPOCH_MILLIS
    system time in milliseconds
  ELAPSED_ACTIVE_MILLIS
    number of milliseconds screensaver has been on
      -calculated as NOW_EPOCH_MILLIS - ACTIVE_EPOCH_MILLIS

  LAST_CHECKED_IDLE_MILLIS
    value of CURRENT_IDLE_MILLIS at most recent check
      -stored in $FILE_LAST_CHECKED_IDLE_MILLIS
      -set during: '$EXEC --check'
";

my $CMD_INFO = "info";
my $CMD_TURN_ON = "turn-on";
my $CMD_TURN_OFF = "turn-off";
my $CMD_DISABLE = "disable";
my $CMD_ENABLE = "enable";
my $CMD_CHECK = "check";
my $CMD_CHECK_DAEMON = "check-daemon";

my $STATE_ON = "on";
my $STATE_OFF = "off";
my $STATE_DISABLED = "disabled";

sub main(@){
  my $cmd = $CMD_INFO;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--info|info)$/){
      $cmd = $CMD_INFO;
    }elsif($arg =~ /^(--on|on)$/){
      $cmd = $CMD_TURN_ON;
    }elsif($arg =~ /^(--off|off)$/){
      $cmd = $CMD_TURN_OFF;
    }elsif($arg =~ /^(--disable|disable)$/){
      $cmd = $CMD_DISABLE;
    }elsif($arg =~ /^(--enable|enable)$/){
      $cmd = $CMD_ENABLE;
    }elsif($arg =~ /^(--check|check)$/){
      $cmd = $CMD_CHECK;
    }elsif($arg =~ /^(--check-daemon|--daemon|daemon|--check-loop|--loop|loop)$/){
      $cmd = $CMD_CHECK_DAEMON;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_INFO){
    print readState() . "\n";
  }elsif($cmd eq $CMD_TURN_ON){
    turnOn();
  }elsif($cmd eq $CMD_TURN_OFF){
    turnOff();
  }elsif($cmd eq $CMD_DISABLE){
    disable();
  }elsif($cmd eq $CMD_ENABLE){
    enable();
  }elsif($cmd eq $CMD_CHECK){
    check();
  }elsif($cmd eq $CMD_CHECK_DAEMON){
    while(1){
      check();
      sleep($LOOP_DELAY_MILLIS/1000.0);
    }
  }else{
    die "$USAGE\nERROR: unknown cmd $cmd\n";
  }
}

sub getIdleMillis(){
  my $val = `xprintidle`;
  chomp $val;
  if($val !~ /^\d+$/){
    die "ERROR: could not parse value of `xprintidle`\n";
  }
  return $val;
}

sub turnOn(){
  my $nowMillis = nowMillis();

  writeFile $FILE_STATE, "ON\n";
  writeFile $FILE_ACTIVE_EPOCH_MILLIS, $nowMillis;
  run "rm", "-f", $FILE_LAST_CHECKED_IDLE_MILLIS;

  run "brightness", $SCREENSAVER_BRIGHTNESS;
}

sub turnOff(){
  writeFile $FILE_STATE, "OFF\n";
  run "rm", "-f", $FILE_ACTIVE_EPOCH_MILLIS;
  run "rm", "-f", $FILE_LAST_CHECKED_IDLE_MILLIS;

  run "brightness", 100;
}

sub disable(){
  turnOff();
  writeFile $FILE_STATE, "DISABLED\n";
}

sub enable(){
  run "rm", "-f", $FILE_STATE;
  run "rm", "-f", $FILE_ACTIVE_EPOCH_MILLIS;
  run "rm", "-f", $FILE_LAST_CHECKED_IDLE_MILLIS;
}

sub check(){
  my $state = readState();
  my $idleMillis = getIdleMillis();
  if($state eq $STATE_DISABLED){
    return;
  }elsif($state eq $STATE_ON){
    my $lastCheckedIdleMillis = maybeReadFile($FILE_LAST_CHECKED_IDLE_MILLIS);
    $lastCheckedIdleMillis = 0 if not defined $lastCheckedIdleMillis;
    if($idleMillis < $lastCheckedIdleMillis){
      my $elapsedActiveMillis = readElapsedActiveMillis();
      if($elapsedActiveMillis < $ACTIVE_BUFFER_MILLIS){
        return;
      }else{
        turnOff();
      }
    }else{
      writeFile($FILE_LAST_CHECKED_IDLE_MILLIS, $idleMillis);
    }
  }elsif($state eq $STATE_OFF){
    if($idleMillis > $DEFAULT_IDLE_TIMEOUT_MILLIS){
      turnOn();
    }
  }else{
    die "ERROR: invalid state $state\n";
  }
}

sub readState(){
  my $val = maybeReadFile($FILE_STATE);
  $val = "" if not defined $val;

  if($val =~ /^ON/i){
    return $STATE_ON;
  }elsif($val =~ /^DISABLED/i){
    return $STATE_DISABLED;
  }else{
    return $STATE_OFF;
  }
}

sub readElapsedActiveMillis(){
  my $val = maybeReadFile($FILE_ACTIVE_EPOCH_MILLIS);
  if(defined $val and $val =~ /^(\d+)$/){
    my $activeEpochMillis = $1;
    my $nowMillis = nowMillis();
    return $nowMillis - $activeEpochMillis;
  }else{
    return 0;
  }
}

sub maybeReadFile($){
  my ($file) = @_;
  if(-f $file){
    open my $fh, "< $file" or die "ERROR: could not read $file\n$!\n";
    my $val = join '', <$fh>;
    close $fh;
    return $val;
  }else{
    return undef;
  }
}

sub writeFile($$){
  my ($file, $contents) = @_;
  open my $fh, "> $file" or die "ERROR: could not write $file\n$!\n";
  print $fh $contents;
  close $fh;
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
