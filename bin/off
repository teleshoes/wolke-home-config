#!/usr/bin/env python
import sys
import os

PYTHON2 = sys.version_info < (3, 0)
PYTHON3 = sys.version_info >= (3, 0)

GTK_MOD = None
KEY_ESCAPE = None
WIN_POS_CENTER = None

try:
  if PYTHON2:
    import gtk
    GTK_MOD = gtk
    KEY_ESCAPE = gtk.keysyms.Escape
    WIN_POS_CENTER = gtk.WIN_POS_CENTER
  if PYTHON3:
    import gi
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk, Gdk
    GTK_MOD = Gtk
    KEY_ESCAPE = Gdk.KEY_Escape
    WIN_POS_CENTER = Gtk.WindowPosition.CENTER
except ImportError:
  GTK_MOD = None

gui = None

def getActions():
  return filter(None, [ None
    , Action("Shutdown",  "s",  True,
        [cmd("mnt -u"), cmd("off-cmd -s")])
    , Action("Reboot",    "r",  True,
        [cmd("mnt -u"), cmd("off-cmd -r")])
    , Action("Sleep",     "l",  True,
        [cmd("off-cmd -l"), fun(micEq), fun(xconfig), fun(wauto)])
    , Action("Hibernate", "h",  True,
        [cmd("off-cmd -h"), fun(micEq), fun(xconfig), fun(wauto)])
    , Action("Cancel",    None, True,  [])
    , Action("Gui",       "g",  False, [fun(showGui)])
  ])
def cmd(cmdString):
  return (cmdString, lambda: runRootCommand(cmdString))
def fun(function):
  return (function.__name__, function)


def main(args):
  if len(args) == 2:
    for a in filter(lambda a: a.key, getActions()):
      if args[1].lower() == a.key.lower():
        a.run()
        sys.exit(0)
  sys.stderr.write(usage() + "\n")
  sys.exit(1)


def runRootCommand(cmdString):
  if gui != None:
    cmdString = "term -e --wait 'sudo " + cmdString + "'"
  else:
    cmdString = "sudo " + cmdString
  os.system(cmdString)

def showGui():
  global gui
  if GTK_MOD != None:
    if gui == None:
      gui = ActionGui(list(filter((lambda a: a.showInGui), getActions())))
    gui.show()
  else:
    print("ERROR: cannot start gui without GTK module")
def hideGui():
  global gui
  if gui != None: gui.hide()

def wauto():
  wstatus = os.popen('wstatus').read()
  if wstatus == "none\n":
    os.system("wauto")
  else:
    print("no wauto necessary\n")

def xconfig():
  os.system("xconfig")

def micEq():
  os.system("pulse-vol mic equal")

def usage():
  u = "Usage: " + sys.argv[0] + " ARG"
  maxActLen, maxKeyLen, maxCmdLen, maxFunLen = [0,0,0,0]
  for a in filter(lambda a: a.key, getActions()):
    (act, key, cmd) = a.getFormattedAtts()
    maxActLen = max(len(act), maxActLen)
    maxKeyLen = max(len(key), maxKeyLen)
    maxCmdLen = max(len(cmd), maxCmdLen)
  for a in filter(lambda a: a.key, getActions()):
    (act, key, cmd) = a.getFormattedAtts()
    u += (""
      + "\n  " + key.ljust(maxKeyLen)
      + " => " + act.ljust(maxActLen)
      + "    " + cmd.ljust(maxCmdLen)
    )
  return u

class Action():
  def __init__(self, name, key, showInGui, cmds):
    self.name = name
    self.key = key
    self.showInGui = showInGui
    self.cmds = map(lambda c: c[1], cmds)
    self.cmdNames = map(lambda c: c[0], cmds)
    self.labelText = name
    if self.key != None:
      self.labelText += " (" + self.key + ")"
  def getFormattedAtts(self):
    return [ self.name and self.name or ""
           , self.key and self.key or ""
           , ', '.join(self.cmdNames)
           ]
  def run(self):
    for c in self.cmds:
      c()

if GTK_MOD != None:
  class ActionButton(GTK_MOD.Button):
    def __init__(self, actionGui, action):
      GTK_MOD.Button.__init__(self, action.labelText)
      self.connect("clicked", lambda widget: actionGui.runAction(action))
else:
  class ActionButton():
    def __init__(self, actionGui, action):
      pass

class ActionGui():
  def __init__(self, actions):
    self.actions = actions
    self.box = GTK_MOD.VBox()
    self.box.add(GTK_MOD.Label(""
      + "escape cancels\n"
      + "up/down/enter to select\n"
      + "or press shortcut key"
    ))
    for a in self.actions:
      self.box.add(ActionButton(self, a))

    self.window = GTK_MOD.Window()
    self.window.set_default_size(300, 500)
    self.window.set_position(WIN_POS_CENTER)
    self.window.set_title("Off")
    self.window.add(self.box)

    self.window.connect("key_press_event", self.keyPress)
  def show(self):
    self.window.show_all()
    GTK_MOD.main()
  def hide(self):
    self.window.hide()
    while GTK_MOD.events_pending():
      GTK_MOD.main_iteration()
  def keyPress(self, widget, event):
    #note: up/down/enter keys are already handled
    if event.keyval == KEY_ESCAPE:
      sys.exit()
    elif event.keyval < 256:
      keyChar = chr(event.keyval).lower()
      for action in filter(lambda action: action.key, self.actions):
        if action.key.lower() == keyChar:
          self.runAction(action)
  def runAction(self, a):
    hideGui()
    a.run()
    sys.exit(0)

if __name__ == "__main__":
  main(sys.argv)
