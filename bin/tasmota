#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
my $FORKMGR_LIB = eval {require Parallel::ForkManager};

my $DEFAULT_DEVICE = "outlet1";
my $DEFAULT_COMMAND = "POWER TOGGLE";

my $DEVICES = {
  bulb1   => "192.168.11.93",
  bulb2   => "192.168.11.94",
  bulb3   => "192.168.11.95",
  outlet1 => "192.168.11.96",
  outlet2 => "192.168.11.97",
  outlet3 => "192.168.11.98",
};

my $DEVICES_REGEX = join "|", sort keys %$DEVICES;

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC DEVICE [DEVICE ..] COMMAND
    use curl to send <COMMAND> to each named <DEVICE>
    DEVICE = $DEVICES_REGEX

  $EXEC
    same as: $EXEC $DEFAULT_DEVICE '$DEFAULT_COMMAND'

  $EXEC DEVICE [DEVICE]
    same as: $EXEC <DEVICE> <DEVICE> .. '$DEFAULT_COMMAND'

  $EXEC -b | --bulbs | b
    same as:
      $EXEC bulb1 '$DEFAULT_COMMAND'
      $EXEC bulb2 '$DEFAULT_COMMAND'
      $EXEC bulb3 '$DEFAULT_COMMAND'
";

sub runCommandOnDevices($@);
sub cmd($$);

sub main(@){
  my (@devices, $cmd);
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^($DEVICES_REGEX)$/){
      push @devices, $arg;
    }elsif($arg =~ /^(-b|--bulbs|b)$/){
      push @devices, "bulb1";
      push @devices, "bulb2";
      push @devices, "bulb3";
    }elsif(not defined $cmd and @_ == 0){
      $cmd = $arg;
    }else{
      die $USAGE;
    }
  }

  push @devices, $DEFAULT_DEVICE if @devices == 0;
  $cmd = $DEFAULT_COMMAND if not defined $cmd;
  runCommandOnDevices($cmd, @devices);
}

sub runCommandOnDevices($@){
  my ($cmd, @devices) = @_;
  if($FORKMGR_LIB){
    my $tmpDir = "/tmp/$EXEC-perl-storable";
    $ENV{TMPDIR} = $tmpDir;
    system "mkdir", "-p", "/tmp/$EXEC-perl-storable";

    my $pm = Parallel::ForkManager->new(10, $tmpDir);
    $pm->set_waitpid_blocking_sleep(0);  #enable true blocking calls

    my %outputByDevice;
    $pm->run_on_finish(
      sub {
        my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
        $outputByDevice{$ident} = $$data_structure_reference;
      }
    );

    for my $device(@devices){
      my $pid = $pm->start($device);
      next if $pid;

      my $out = cmd $device, $cmd;
      $pm->finish(0, \$out);
    }
    $pm->wait_all_children();
    for my $device(@devices){
      print "$device - $outputByDevice{$device}\n";
    }
  }else{
    for my $device(@devices){
      my $out = cmd $device, $cmd;
      print "$device - $out\n";
    }
  }
}

sub cmd($$){
  my ($device, $cmd) = @_;
  $cmd =~ s/ /%20/g;
  my $out = `curl -s http://$$DEVICES{$device}/cm?cmnd=$cmd`;
  return $out;
}

&main(@ARGV);
