#!/usr/bin/perl
use strict;
use warnings;

my $SHOWS_DIR = "$ENV{HOME}/Music/sheet_music/shows";
my @OTHER_DIRS = (
  "$ENV{HOME}/Music/sheet_music/trumpet",
);

my $LAST_USED_FILE = "$ENV{HOME}/.cache/last-used-sheetmusic";

sub getAllEntries();
sub getShowNames();
sub getShowEntrs();
sub getDirEntries($);
sub dirPathToName($);
sub readProcLines(@);
sub readLastUsedFile();
sub writeLastUsedFile($$);
sub bashComplete($$);

my $typeSyns = {
  double    => "double",
  d         => "double",
  dbl       => "double",

  single    => "single",
  sgl       => "single",
  s         => "single",

  jpeg      => "jpeg",
  jpg       => "jpeg",
  j         => "jpeg",

  image     => "image",
  png       => "image",
  feh       => "image",
  f         => "image",

  pdf       => "pdf",
  p         => "pdf",
  evince    => "pdf",
  e         => "pdf",

  musescore => "musescore",
  m         => "musescore",
  mscz      => "musescore",
};

my $usage = "Usage:
   $0 -h|--help
     Show this message

   $0 NAME [TYPE]
     open sheetmusic for NAME with type TYPE
     (also, write NAME and TYPE to $LAST_USED_FILE)

   $0
     if $LAST_USED_FILE exists, read NAME and TYPE from it
     run like: $0 NAME TYPE

   $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    die $usage;
  }elsif(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my ($name, $typeArg);
  if(@_ == 1){
    $name = $_[0];
  }elsif(@_ == 2){
    ($name, $typeArg) = ($_[0], $_[1]);
  }elsif(@_ == 0){
    ($name, $typeArg) = readLastUsedFile();
    if(not defined $name){
      die "$usage\nERROR: could not read NAME from $LAST_USED_FILE\n";
    }
  }else{
    die $usage;
  }

  if(defined $typeArg){
    if(not defined $$typeSyns{$typeArg}){
      die "invalid type arg: $typeArg\n";
    }
    $typeArg = $$typeSyns{$typeArg};
  }

  my $entries = getAllEntries();
  if(not defined $$entries{$name}){
    die "could not find sheet music for $name\n";
  }

  my $types = $$entries{$name}{types};
  die "no types found for $name\n" if @$types == 0;
  my $firstType = $$types[0];

  my $typeName;
  if(defined $typeArg){
    $typeName = $typeArg;
  }else{
    $typeName = $$firstType{typeName};
  }

  my $files = $$firstType{files};
  for my $type(@$types){
    if($typeName eq $$type{typeName}){
      $files = $$type{files};
      last;
    }
  }

  writeLastUsedFile $name, $typeArg;

  if($typeName =~ /^(double)$/){
    system "feh-page", "--double", @$files;
  }elsif($typeName =~ /^(single)$/){
    system "feh-page", @$files;
  }elsif($typeName =~ /^(jpeg|image)$/){
    system "feh-page", "--double", @$files;
  }elsif($typeName =~ /^(pdf)$/){
    system "evince", @$files;
  }elsif($typeName =~ /^(musescore)$/){
    system "musescore", @$files;
  }
  system "stty", "sane";
}

sub getAllEntries(){
  my $entries = {};
  for my $dir(@OTHER_DIRS){
    my $dirEntries = getDirEntries $dir;
    $entries = {%$entries, %$dirEntries};
  }
  my $showEntries = getShowEntries();
  $entries = {%$entries, %$showEntries};
  return $entries;
}

sub getShowNames(){
  return map {dirPathToName $_} glob "$SHOWS_DIR/sheet_double/*/";
}

sub getShowEntries(){
  my $entries = {};
  my @names = getShowNames();
  for my $name(@names){
    my $entry = {
      name => $name,
      types => [
        { typeName => "double",
          files => [glob "$SHOWS_DIR/sheet_double/$name/*.jpg"],
        },
        { typeName => "single",
          files => [glob "$SHOWS_DIR/sheet_single/$name/*.jpg"],
        },
      ]
    };
    $$entries{"$name"} = $entry;
    $$entries{"show-$name"} = $entry;
  }
  return $entries;
}

#return all files in a dir before children of that dir
sub sortBreadthFirst($$){
  my ($a, $b) = @_;
  my $aDir = $a;
  $aDir =~ s/\/+$//;
  $aDir =~ s/\/+[^\/]+$//;

  my $bDir = $b;
  $bDir =~ s/\/+$//;
  $bDir =~ s/\/+[^\/]+$//;

  if($aDir eq $bDir){
    return $a cmp $b;
  }elsif($aDir =~ /^\Q$bDir\E/){
    return -1;
  }elsif($bDir =~ /^\Q$aDir\E/){
    return 1;
  }else{
    return $a cmp $b;
  }
}

sub getDirEntries($){
  my ($dir) = @_;
  my $parentDirName = dirPathToName $dir;

  my $entries = {};
  for my $subDir(glob "$dir/*/"){
    my $name = dirPathToName $subDir;
    my @files = readProcLines "find", $subDir, "-type", "f";
    chomp foreach @files;
    @files = sort {sortBreadthFirst($a, $b)} @files;

    my @types;
    my @jpeg = grep {/\.(jpg|jpeg)$/} @files;
    my @imgs = grep {/\.(jpg|jpeg|png|gif|tiff|bmp)$/} @files;
    my @pdfs = grep {/\.(pdf|ps)$/} @files;
    my @mscz = grep {/\.(mscz)$/} @files;
    if(@jpeg > 0){
      push @types, {
        typeName => "jpeg",
        files => [@jpeg],
      };
    }
    if(@imgs > 0){
      push @types, {
        typeName => "image",
        files => [@imgs],
      };
    }
    if(@pdfs > 0){
      push @types, {
        typeName => "pdf",
        files => [@pdfs],
      };
    }
    if(@mscz > 0){
      push @types, {
        typeName => "musescore",
        files => [@mscz],
      };
    }
    my $entry = {
      name => $name,
      types => [@types],
    };

    $$entries{$name} = $entry;
    $$entries{"$parentDirName-$name"} = $entry;
  }
  return $entries;
}

sub dirPathToName($){
  my ($dirPath) = @_;
  die "could not find dir: $dirPath\n" if not -d $dirPath;

  my $name = $dirPath;
  $name = "" if not defined $name;
  $name =~ s/^.*\/([^\/]+)\/?$/$1/;
  if($name =~ /\/|\r|\n|\0/){
    die "could not process dir path: $dirPath\n"
  }elsif($name =~ /\s|"|'/){
    die "name cannot have spaces or quotes: \"$name\"\n"
  }elsif($name =~ /^$/){
    die "name cannot be empty: \"$name\n";
  }elsif($name !~ /^[a-zA-Z0-9_\-]+$/){
    die "name can contain only letters/numbers/underscores/hyphens: \"$name\"\n"
  }

  return $name;
}

sub readProcLines(@){
  open CMD, "-|", @_ or die "could not run \"@_\"\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return @lines;
}

sub readLastUsedFile(){
  if(-f $LAST_USED_FILE){
    open FH, "< $LAST_USED_FILE" or die "could not read $LAST_USED_FILE\n$!\n";
    my $contents = join '', <FH>;
    close FH;
    if($contents =~ /^(\w+),(\w*)$/){
      my ($name, $typeArg) = ($1, $2);
      if(defined $name and $name eq ""){
        $name = undef;
      }
      if(defined $typeArg and $typeArg eq ""){
        $typeArg = undef;
      }
      return ($name, $typeArg);
    }
  }
  return (undef, undef);
}
sub writeLastUsedFile($$){
  my ($name, $typeArg) = @_;
  $name = "" if not defined $name;
  $typeArg = "" if not defined $typeArg;

  open FH, "> $LAST_USED_FILE";
  print FH "$name,$typeArg\n";
  close FH;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  while(@words > 0 and $words[0] =~ /^-/){
    shift @words;
  }

  my @names;
  my $entries = getAllEntries();
  for my $key(sort keys %$entries){
    push @names, $key;
  }

  if(@words == 0){
    return ("-h", "--help", "--bash-complete", @names);
  }

  if(@words == 1){
    my @okTypes;
    my $entry = $$entries{$words[0]};
    if(defined $entry){
      for my $type(@{$$entry{types}}){
        push @okTypes, $$type{typeName};
      }
    }
    return @okTypes;
  }

  return ();
}

&main(@ARGV);
