#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
     print this message

  $EXEC [OPTS] COMMAND
     run 'COMMAND' with shell interpolation repeatedly

  $EXEC [OPTS] EXEC [ARG ARG ..]
     run 'EXEC ARG ARG ..' without interpolation repeatedly
     note that normal shell interpolation still happens when running $EXEC

    e.g.:
      > $EXEC 'ls *.txt'
        #the glob '*' is interpolated each time, and new text files will appear
        #similar to:
        while [ 1 ]; do
          sh -c 'ls *.txt';
          sleep 1;
        done
      > $EXEC ls *.txt
        #the glob '*' is interpolated once at the start, and new text files will NOT appear
        #similar to:
        files=\$(echo *.txt);
        while [ 1 ]; do
          sh -c \"ls \$files\";
          sleep 1;
        done

  OPTS
    --delay=DELAY | --delay DELAY
       how long to sleep between commands, in (fractional) seconds
         non-negative real number, e.g.: '30', '0.001', '2.5', '0'
         '0' means do not sleep
         default is '1'

    DELAY
      same as --delay=DELAY

    -d|--date
      run 'date' before each invokation

    -s|--success
      run until success
      do not rerun 'command' after a zero exit code
    -f|--failure
      run until failure
      do not rerun 'command' after a non-zero exit code

    -a|--alarm
      run alarm command after exiting with --success|--failure
      run 'alarm -s success' before terminating with --success
      run 'alarm -s failure' before terminating with --failure
    --alarm-success
      run 'alarm -s success' after each zero exit code
    --alarm-failure
      run 'alarm -s failure' after each non-zero exit code
";

sub runOrDie(@);

sub main(@){
  my $delay = 1;
  my $printDate = 0;
  my $untilSuccess = 0;
  my $untilFailure = 0;
  my $alarmOnExit = 0;
  my $alarmSuccess = 0;
  my $alarmFailure = 0;
  while(@_ > 0 and ($_[0] =~ /^-/ or $_[0] =~ /^(\d+|\d*\.\d+)$/)){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^--delay=(\d+|\d*\.\d+)$/){
      $delay = $1;
    }elsif($arg =~ /^--delay$/ and @_ > 0 and $_[0] =~ /^(\d+|\d*\.\d+)$/){
      $delay = shift;
    }elsif($arg =~ /^(\d+|\d*\.\d+)$/){
      $delay = $arg;
    }elsif($arg =~ /^(-d|--date)$/){
      $printDate = 1;
    }elsif($arg =~ /^(-s|--success)$/){
      $untilSuccess = 1;
    }elsif($arg =~ /^(-f|--failure)$/){
      $untilFailure = 1;
    }elsif($arg =~ /^(-a|--alarm)$/){
      $alarmOnExit = 1;
    }elsif($arg =~ /^(--alarm-success)$/){
      $alarmSuccess = 1;
    }elsif($arg =~ /^(--alarm-failure)$/){
      $alarmFailure = 1;
    }else{
      die $USAGE;
    }
  }

  die $USAGE if @_ == 0;

  while(1){
    runOrDie "date" if $printDate;

    system @_;

    my $exitCode = $?;
    if($exitCode == 0){
      if($alarmSuccess or ($alarmOnExit and $untilSuccess)){
        system "alarm -s success";
      }
      exit $exitCode if $untilSuccess;
    }else{
      if($alarmFailure or ($alarmOnExit and $untilFailure)){
        system "alarm -s failure";
      }
      exit $exitCode if $untilFailure;
    }

    runOrDie "sleep", $delay if $delay > 0;
  }
}

sub runOrDie(@){
  system @_;
  exit $? if $? != 0;
}

&main(@ARGV);
