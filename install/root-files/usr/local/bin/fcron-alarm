#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);

sub reloadFcron();
sub formatFcrontabLine($$);
sub parseAlarmTime($);
sub parseTimeSpecAbs($);
sub parseTimeSpecRel($);
sub parseTimeSpecMinutes($);
sub appendAlarmLine($);
sub removeAlarmName($);
sub readFcronLines();
sub writeFcronLines($);
sub run(@);
sub wrap($);

my $FCRON_ALARM_EXEC = abs_path $0;

my $FCRONTAB_ALARM = "$ENV{HOME}/.fcrontab-alarm";
my $DEFAULT_ALARM_NAME = 'XX';

my $MODE_ADD = "add";
my $MODE_REMOVE = "remove";
my $MODE_RELOAD = "reload";
my $MODE_RUN = "run";

my $REGEX_ALARM_NAME = '(?:[A-Z][0-9A-Z])';
my $REGEX_TIMESPEC_ABS = '(?:\d+:\d+|\d+:\d+(?:am|pm)|\d+(?:am|pm))';
my $REGEX_TIMESPEC_REL = '(?:(?:\d+[dhms])+)';
my $REGEX_TIMESPEC_MINUTES = '(?:\d+)';
my $REGEX_TIMESPEC = "$REGEX_TIMESPEC_ABS|$REGEX_TIMESPEC_REL|$REGEX_TIMESPEC_MINUTES";

my $USAGE = "Usage:
  Update $FCRONTAB_ALARM, and reload as current user's fcrontab.

  $0 -h|--help
    print this message

  $0 [ALARM_NAME] ALARM_TIME
  $0 --add [ALARM_NAME] ALARM_TIME
    first deletes the alarm, as in '$0 --remove ALARM_NAME'
    then adds a new fcrontab line: '<FCRON_SCHEDULE> <alarm_cmd> #ALARM_NAME'
      FCRON_SCHEDULE: calculated from ALARM_TIME, either relative or absolute
      alarm_cmd: '$0 --run ALARM_NAME'

    e.g.:   '$0 14:45'   => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '14:45') . "'
            '$0 5pm'     => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '5pm') . "'
            '$0 12:30am' => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '12:30am') . "'

            '$0 30s'     => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '30s') . "'
            '$0 5'       => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '5') . "'
            '$0 1m30s'   => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '1m30s') . "'
            '$0 2d12h3m  => '" . formatFcrontabLine($DEFAULT_ALARM_NAME, '2d12h3m') . "'

  $0 --remove [ALARM_NAME]
    delete any existing fcrontab lines ending in #ALARM_NAME

  $0 --reload
    -run: fcrontab $FCRONTAB_ALARM

  $0 --run [ALARM_NAME]
    first deletes the alarm, as in '$0 --remove ALARM_NAME'
    then runs: 'alarm -g ALARM_NAME'

  ALARM_NAME
    exactly two characters, the first is alpha-only, and the second is alphanumeric
    defaults to '$DEFAULT_ALARM_NAME' if not given

  ALARM_TIME = <TIMESPEC_ABS> | <TIMESPEC_REL> | <TIMESPEC_MINUTES>
    absolute time (hours+minutes) or relative time
    converted to <FCRON_SCHEDULE> before appending to fcrontab

      TIMESPEC_ABS = H24:MI | H12:MIam | H12am
        wall-clock time in 24h hours+minutes, 12h hours+minutes, or 12h hours with 0 minutes
          e.g.: 15:30
        <FCRON_SCHEDULE>: '<MINUTES> <HOURS> * * *'

      TIMESPEC_REL = <VALUE><TIME_UNIT> | <VALUE><TIME_UNIT><TIMESPEC_REL>
        a list of pairs of non-negative integers and time units, joined with no space
          e.g.: 1d1h5m30s
        <FCRON_SCHEDULE>: '@ <DAYS>d<HOURS>h<SECONDS>s<MINUTES>'
          NOTE: in <MINUTES> is last and has no unit

        units are case insensitive. allowed units:
          d:    days    (24 hours)
          h:    hours   (60 minutes)
          m:    minutes (60 seconds) !NOT MONTHS!
          s:    seconds

      TIMESPEC_MINUTES = <MINUTES>
        number of relative minutes, as a single non-negative integer
          e.g.: 5
        <FCRON_SCHEDULE>: '@ <MINUTES>'

      FCRON_SCHEDULE
        converted from alarm time as either:
          '<MINUTES> <HOURS> * * *'   or   '@ <DAYS>d<HOURS>h<SECONDS>s<MINUTES>'

        e.g.:  ALARM_TIME     => ALARM_TIME_SYN  => FCRON_SCHEDULE
               15:30          => 15:30           => '30 15 * * *'
               3:30pm         => 15:30           => '30 15 * * *'
               3pm            => 15:30           => '0 15 * * *'
               5m             => 5m              => '@ 5'
               1m30s          => 1m30s           => '@ 30s1'
               90s            => 1m30s           => '@ 30s1'
               10s            => 10s             => '@ 10s'
               1d6h30m20s     => 1d6h30m20s      => '@ 1d6h20s30'
               5m1h1h1h20s    => 3h5m20s         => '@ 3h20s5'
";

sub main(@){
  my $mode = $MODE_ADD;
  my $alarmName = undef;
  my $alarmTime = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--add)$/){
      $mode = $MODE_ADD;
    }elsif($arg =~ /^(--remove)$/){
      $mode = $MODE_REMOVE;
    }elsif($arg =~ /^(--reload)$/){
      $mode = $MODE_RELOAD;
    }elsif($arg =~ /^(--run)$/){
      $mode = $MODE_RUN;
    }elsif($arg =~ /^$REGEX_ALARM_NAME$/i and not defined $alarmName){
      $alarmName = $arg;
    }elsif($arg =~ /^($REGEX_TIMESPEC)$/i and not defined $alarmTime){
      $alarmTime = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(`whoami` =~ /^root$/){
    die "ERROR: cannot run $0 as root\n";
  }

  if($mode eq $MODE_ADD){
    $alarmName = $DEFAULT_ALARM_NAME if not defined $alarmName;
    die "$USAGE\nERROR: missing ALARM_TIME for mode=$mode\n" if not defined $alarmTime;

    removeAlarmName $alarmName;
    reloadFcron();
    appendAlarmLine formatFcrontabLine($alarmName, $alarmTime);
    reloadFcron();
  }elsif($mode eq $MODE_REMOVE){
    $alarmName = $DEFAULT_ALARM_NAME if not defined $alarmName;
    die "$USAGE\nERROR: cannot give ALARM_TIME for mode=$mode\n" if defined $alarmTime;

    if(not removeAlarmName $alarmName){
      die "Alarm $alarmName not found\n";
    }
    reloadFcron();
  }elsif($mode eq $MODE_RELOAD){
    die "$USAGE\nERROR: cannot give ALARM_NAME for mode=$mode\n" if defined $alarmName;
    die "$USAGE\nERROR: cannot give ALARM_TIME for mode=$mode\n" if defined $alarmTime;

    reloadFcron();
  }elsif($mode eq $MODE_RUN){
    $alarmName = $DEFAULT_ALARM_NAME if not defined $alarmName;
    die "$USAGE\nERROR: cannot give ALARM_TIME for mode=$mode\n" if defined $alarmTime;

    removeAlarmName $alarmName;
    reloadFcron();
    exec "alarm", "-g", $alarmName;
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub reloadFcron(){
  system "fcrontab", $FCRONTAB_ALARM;
}

sub formatFcrontabLine($$){
  my ($alarmName, $time) = @_;
  my $alarmTime = parseAlarmTime $time;
  my $cmd = "$FCRON_ALARM_EXEC --run $alarmName";
  return "$alarmTime $cmd #$alarmName";
}


sub parseAlarmTime($){
  my ($alarmTime) = @_;
  if($alarmTime =~ /^($REGEX_TIMESPEC_ABS)$/i){
    return parseTimeSpecAbs($alarmTime);
  }elsif($alarmTime =~ /^($REGEX_TIMESPEC_REL)$/i){
    return parseTimeSpecRel($alarmTime);
  }elsif($alarmTime =~ /^($REGEX_TIMESPEC_MINUTES)$/i){
    return parseTimeSpecMinutes($alarmTime);
  }else{
    die "ERROR: malformed ALARM_TIME $alarmTime\n";
  }
}

sub parseTimeSpecAbs($){
  my ($timeSpecAbs) = @_;
  my ($h, $m, $am);
  if($timeSpecAbs =~ /^(\d+):(\d+)$/){
    ($h, $m, $am) = ($1, $2, undef);
  }elsif($timeSpecAbs =~ /^(\d+):(\d+)(am|pm)$/i){
    ($h, $m, $am) = ($1, $2, $3);
  }elsif($timeSpecAbs =~ /^(\d+)(am|pm)$/i){
    ($h, $m, $am) = ($1, 0, $2);
  }
  $h = 0+$h;
  $m = 0+$m;

  if(defined $am){
    $h = 0 if $h == 12;
    $h += 12 if lc $am eq "pm";
  }

  if($h > 24 or $m > 59){
    die "ERROR: malformed absolute time $timeSpecAbs\n";
  }

  return "$m $h * * *";
}

sub parseTimeSpecRel($){
  my ($timeSpecRel) = @_;
  my $seconds = 0;
  while($timeSpecRel =~ s/^(\d+)([dhmsDHMS])//){
    my ($val, $unit) = ($1, $2);
    $seconds += $val if $unit =~ /[sS]/;
    $seconds += $val * 60 if $unit =~ /[mM]/;
    $seconds += $val * 60 * 60 if $unit =~ /[hH]/;
    $seconds += $val * 60 * 60 * 24 if $unit =~ /[dD]/;
  }
  die "error parsing RELTIME: $timeSpecRel\n" if length($timeSpecRel) != 0;
  my $s = int($seconds)       % 60;
  my $m = int($seconds/60)    % 60;
  my $h = int($seconds/60/60) % 24;
  my $d = int($seconds/60/60/24);
  my $fmt = "";
  $fmt .= "${d}d" if $d > 0;
  $fmt .= "${h}h" if $h > 0;
  $fmt .= "${s}s" if $s > 0;
  $fmt .= "${m}" if $m > 0;

  return "@ $fmt";
}

sub parseTimeSpecMinutes($){
  my ($timeSpecMinutes) = @_;
  if($timeSpecMinutes !~ /^\d+$/){
    die "ERROR: malformed TIMESPEC_MINUTES $timeSpecMinutes\n";
  }
  return "@ $timeSpecMinutes";
}

sub appendAlarmLine($){
  my $line = shift;
  chomp $line;
  $line .= "\n";
  print "appending:\n$line";
  my @lines = (readFcronLines(), $line);
  writeFcronLines \@lines;
}

sub removeAlarmName($){
  my $alarmName = shift;

  my $modified = 0;
  my @lines = readFcronLines();
  for my $line(@lines){
    if($line =~ /#$alarmName\s*$/){
      $line = "";
      $modified = 1;
    }
  }
  if($modified){
    writeFcronLines(\@lines);
  }
  return $modified;
}

sub readFcronLines(){
  if(not -e $FCRONTAB_ALARM){
    return ();
  }
  open FH, "< $FCRONTAB_ALARM" or die "Could not read $FCRONTAB_ALARM\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}
sub writeFcronLines($){
  my @lines = @{shift()};
  open FH, "> $FCRONTAB_ALARM" or die "Could not write $FCRONTAB_ALARM\n";
  print FH @lines;
  close FH;
}

sub run(@){
  print "@_\n";
  system @_;
  die "Error running @_\n" if $? != 0;
}
sub wrap($){
  my $s = shift;
  $s =~ s/"/\\"/g;
  return $s;
}

&main(@ARGV);
