#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $BT_DEV = '/proc/acpi/ibm/bluetooth';

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
    same as: $EXEC --get

  $EXEC CMD [CMD ..]
    run each CMD in order

  CMD
  -g | --get | g | get
    read $BT_DEV
    print 'on' if 'enabled', print 'off' if 'disabled'

  --on | on
    echo 'enable' to $BT_DEV

  --off | off
    echo 'enable' to $BT_DEV

  -t | --toggle | t | toggle
    read $BT_DEV
    if 'enabled': echo 'disable' to $BT_DEV
    if 'disabled': echo 'enable' to $BT_DEV

  -b | --block | b | block
    run: rfkill block bluetooth

  -u | --unblock | u | unblock
    run: rfkill unblock bluetooth

  --start | start
    run: systemctl start bluetooth
  --stop | stop
    run: systemctl stop bluetooth
  --restart | restart
    run: systemctl restart bluetooth

  -m | --module-reload | m | module-reload | --reload | reload
    run: modprobe -r btusb; modprobe btusb
";

sub get();
sub set($);
sub run(@);

my $CMD_GET = "get";
my $CMD_ON = "on";
my $CMD_OFF = "off";
my $CMD_TOGGLE = "toggle";
my $CMD_BLOCK = "block";
my $CMD_UNBLOCK = "unblock";
my $CMD_START = "start";
my $CMD_STOP = "stop";
my $CMD_RESTART = "restart";
my $CMD_MODULE_RELOAD = "module-reload";

sub main(@){
  my @cmds;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get|g|get)$/){
      push @cmds, $CMD_GET;
    }elsif($arg =~ /^(--on|on)$/){
      push @cmds, $CMD_ON;
    }elsif($arg =~ /^(--off|off)$/){
      push @cmds, $CMD_OFF;
    }elsif($arg =~ /^(-t|--toggle|t|toggle)$/){
      push @cmds, $CMD_TOGGLE;
    }elsif($arg =~ /^(-b|--block|b|block)$/){
      push @cmds, $CMD_BLOCK;
    }elsif($arg =~ /^(-u|--unblock|u|unblock)$/){
      push @cmds, $CMD_UNBLOCK;
    }elsif($arg =~ /^(--start|start)$/){
      push @cmds, $CMD_START;
    }elsif($arg =~ /^(--stop|stop)$/){
      push @cmds, $CMD_STOP;
    }elsif($arg =~ /^(--restart|restart)$/){
      push @cmds, $CMD_RESTART;
    }elsif($arg =~ /^(-m|--module-reload|m|module-reload|--reload|reload)$/){
      push @cmds, $CMD_MODULE_RELOAD;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  @cmds = ($CMD_GET) if @cmds == 0;

  for my $cmd(@cmds){
    if($cmd eq $CMD_GET){
      print get() ? "on\n" : "off\n";
    }elsif($cmd eq $CMD_ON){
      set(1);
    }elsif($cmd eq $CMD_OFF){
      set(0);
    }elsif($cmd eq $CMD_TOGGLE){
      set(get() ? 0 : 1);
    }elsif($cmd eq $CMD_BLOCK){
      run "rfkill block bluetooth";
    }elsif($cmd eq $CMD_UNBLOCK){
      run "rfkill unblock bluetooth";
    }elsif($cmd eq $CMD_START){
      run "systemctl start bluetooth";
    }elsif($cmd eq $CMD_STOP){
      run "systemctl stop bluetooth";
    }elsif($cmd eq $CMD_RESTART){
      run "systemctl restart bluetooth";
    }elsif($cmd eq $CMD_MODULE_RELOAD){
      run "modprobe -r btusb";
      run "modprobe btusb";
    }else{
      die "ERROR: unknown command $cmd\n";
    }
  }
}

sub get(){
  my $status = `cat $BT_DEV`;
  if($status =~ /enabled/){
    return 1;
  }elsif($status =~ /disabled/){
    return 0;
  }else{
    die "Unknown bluetooth status: $status\n";
  }
}

sub set($){
  my $status = shift;
  my $cmd = $status ? 'enable' : 'disable';
  run "echo $cmd > $BT_DEV";
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
