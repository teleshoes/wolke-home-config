#!/usr/bin/perl
use strict;
use warnings;

my $tab = "/etc/fcrontab";
my $defJob = 'XX';

sub reloadFcron();
sub getDefaultJobLine($$);
sub parseJobTime($);
sub appendJobLine($);
sub listNamedJobs();
sub setJobState($$$);
sub readFcronLines();
sub writeFcronLines($);
sub modifyLine($$);
sub ensureRoot();
sub run(@);
sub runUser(@);
sub wrap($);

my @commands = qw(on off toggle del);
my $okCmds = join "|", @commands;

my $jobRe = "^[a-zA-Z][a-zA-Z0-9]\$";

my $h12Re = "(?:0?[0-9]|1[0-2])";
my $h24Re = "(?:0?[0-9]|1[0-9]|2[0-4])";
my $minRe = "(?:[0-5][0-9])";
my $amRe = "(?:[aApP][mM])";
my $absTimeRe = "^(?:$h24Re:$minRe|$h12Re:$minRe$amRe|$h12Re$amRe)\$";

my $valUnitRe = "(?:[0-9]+[dhmsDHMS])";
my $relTimeRe = "^(?:[0-9]+|$valUnitRe+)\$";

my $usage = "Usage:
  Update $tab programmatically and safely, and reload fcrontab.
  Re-runs with sudo if not run as root.
  After any job changes, 'fcron-tool --load' is called.
  If SUDO_USER is set, also runs 'fcron-tool --get' as SUDO_USER.

  $0 -h|--help
    print this message

  $0
    list all named jobs

  $0 [JOBNAME] CMD
    comment, uncomment, or delete an existing fcrontab line ending in #JOBNAME

    e.g.: '$0 UP on'  => ensure job 'UP' is uncommented
          '$0 UP'     => toggle job 'UP'
          '$0 x2 del' => completely remove job 'x2'


  $0 [JOBNAME] TIME
    first deletes the job, as in '$0 JOBNAME del'
    then adds a new fcrontab line: '<jobtime> <jobcmd> #JOBNAME'
      jobtime: calculated from TIME, either relative or absolute
      jobcmd: 'alarm-fcron JOBNAME del'

    e.g.:   '$0 14:45'   => '" . getDefaultJobLine($defJob, '14:45') . "'
            '$0 5pm'     => '" . getDefaultJobLine($defJob, '5pm') . "'
            '$0 12:30am' => '" . getDefaultJobLine($defJob, '12:30am') . "'

            '$0 30s'     => '" . getDefaultJobLine($defJob, '30s') . "'
            '$0 5'       => '" . getDefaultJobLine($defJob, '5') . "'
            '$0 1m30s'   => '" . getDefaultJobLine($defJob, '1m30s') . "'
            '$0 2d12h3m  => '" . getDefaultJobLine($defJob, '2d12h3m') . "'

    JOBNAME
      exactly 2 characters, first must be alpha, second must be alphanumeric
      default='$defJob'

    CMD
      on:        ensure uncommented
      off:       ensure commented
      toggle:    toggle comment
      del:       completed remove JOBNAME line, even if commented

    TIME
      either absolute (hours and minutes) or relative
      absolute: next wall clock time, added as 'MM HH * * *'
        HH24:MM       00-23hr 00-59min            e.g.: 15:30  => '30 15 * * *'
        HH12:MMa      1-12hr  00-59min  AM or PM  e.g.: 3:30pm => '30 15 * * *'
        HH12a         1-12hr            AM or PM  e.g.: 3pm    => '0 15 * * *'

      relative: elapsed time, re-formatted to an fcron relative time:
        '@ <DAYS>d<HOURS>h<SECONDS>s<MINUTES>'

      time is a list of numbers followed by units (e.g.: 2d4h30m20s)
        OR just a single integer for minutes (e.g.: 30)
      all values are added together, and reformatted as day-hr-sec-min

      units are case insensitive. allowed units:
        d:    days    (24 hours)
        h:    hours   (60 minutes)
        m:    minutes (60 seconds) !NOT MONTHS!
        s:    seconds

      e.g.:
        5              =>  5m             => '@ 5'
        10s            =>  10s            => '@ 10s'
        1m30s          =>  1m 30s         => '@ 30s1'
        1d6h30m20s     =>  1d 6h 30m 20s  => '@ 1d6h20s30'
        5m1h1h1h20s    =>  3h 5m 20s      => '@ 3h20s5'
";

sub main(@){
  die $usage if @_ > 0 and $_[0] =~ /^(-h|--help)$/;
  ensureRoot();

  my ($jobName, $action);
  if(@_ == 0){
    $jobName = undef;
    $action = "listNamedJobs";
  }elsif(@_ == 1){
    $jobName = $defJob;
    $action = $_[0];
  }elsif(@_ == 2 and $_[0] =~ /$jobRe/){
    $jobName = $_[0];
    $action = $_[1];
  }else{
    die $usage;
  }

  if($action =~ /^(listNamedJobs)$/){
    listNamedJobs();
  }elsif($action =~ /^($okCmds)/){
    my $cmd = $action;
    setJobState $jobName, $cmd, 0;
    reloadFcron();
  }elsif($action =~ /$absTimeRe/ or $action =~ /$relTimeRe/){
    my $time = $action;
    setJobState $jobName, 'del', 1;
    appendJobLine getDefaultJobLine($jobName, $time);
    reloadFcron();
  }else{
    die $usage;
  }
}

sub reloadFcron(){
  system "fcron-tool", "--load";
  runUser "fcron-tool", "--get";
}

sub getDefaultJobLine($$){
  my ($jobName, $time) = @_;
  my $jobTime = parseJobTime $time;
  my $cmd = "alarm-fcron $jobName del";
  return "$jobTime $cmd #$jobName";
}
sub parseJobTime($){
  my $time = shift;
  if($time =~ /$absTimeRe/){
    my ($h, $m, $am);
    if($time =~ /^($h24Re):($minRe)$/){
      ($h, $m, $am) = ($1, $2, undef);
    }elsif($time =~ /^($h12Re):($minRe)($amRe)$/){
      ($h, $m, $am) = ($1, $2, $3);
    }elsif($time =~ /^($h12Re)($amRe)$/){
      ($h, $m, $am) = ($1, 0, $2);
    }
    if(defined $am){
      $h %= 12;
      $h += 12 if lc $am eq "pm";
    }
    return "$m $h * * *";
  }elsif($time =~ /$relTimeRe/){
    my $seconds = 0;
    if($time =~ /^(\d+)$/){
      $seconds = $time * 60;
    }else{
      while($time =~ s/^(\d+)([dhmsDHMS])//){
        my ($val, $unit) = ($1, $2);
        $seconds += $val if $unit =~ /[sS]/;
        $seconds += $val * 60 if $unit =~ /[mM]/;
        $seconds += $val * 60 * 60 if $unit =~ /[hH]/;
        $seconds += $val * 60 * 60 * 24 if $unit =~ /[dD]/;
      }
      die "error parsing RELTIME: $time\n" if length($time) != 0;
    }
    my $s = int($seconds)       % 60;
    my $m = int($seconds/60)    % 60;
    my $h = int($seconds/60/60) % 24;
    my $d = int($seconds/60/60/24);
    my $fmt = "";
    $fmt .= "${d}d" if $d > 0;
    $fmt .= "${h}h" if $h > 0;
    $fmt .= "${s}s" if $s > 0;
    $fmt .= "${m}" if $m > 0;

    return "@ $fmt";
  }else{
    die "malformed time: $time\n";
  }
}
sub appendJobLine($){
  my $line = shift;
  chomp $line;
  $line .= "\n";
  print "appending:\n$line";
  my @lines = (readFcronLines(), $line);
  writeFcronLines \@lines;
}

sub setJobState($$$){
  my $jobName = shift;
  my $state = shift;
  my $force = shift;

  my $modified = 0;
  my @lines = readFcronLines();
  for my $line(@lines){
    if($line =~ /^\s*(?!##).*#$jobName\s*$/){
      $line = modifyLine $line, $state;
      $modified = 1;
      last if not $force;
    }
  }
  if($modified){
    writeFcronLines(\@lines);
  }else{
    die "Job $jobName not found\n" if not $force;
  }
}

sub listNamedJobs(){
  my(@active, @inactive);
  for my $line(readFcronLines){
    if($line =~ /^\s*(?!##).*#([0-9A-Za-z]{2})$/){
      my $name = $1;
      if($line =~ /^\s*#[^#]/){
        push @inactive, "$name => $line";
      }else{
        push @active, "$name => $line";
      }
    }
  }
  print @active;
  print "\ninactive:\n  " . join "  ", @inactive;
}

sub readFcronLines(){
  open FH, "< $tab" or die "Could not read $tab\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}
sub writeFcronLines($){
  my @lines = @{shift()};
  open FH, "> $tab" or die "Could not write $tab\n";
  print FH @lines;
  close FH;
}

sub modifyLine($$){
  my $line = shift;
  my $state = shift;

  print "OLD: $line";
  if($state eq 'del'){
    $line = '';
    print "<deleted>\n";
  }else{
    my $commented = ($line =~ s/^\s*#([^#])/$1/);
    if($state eq 'off' or ($state eq 'toggle' and not $commented)){
      $line = "#$line";
    }
    print "NEW: $line";
  }
  return $line;
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    print "rerunning as root\n";
    exec "sudo", $0, @ARGV;
  }
}

sub run(@){
  print "@_\n";
  system @_;
  die "Error running @_\n" if $? != 0;
}
sub runUser(@){
  if(`whoami` eq "root\n"){
    if(defined $ENV{SUDO_USER}){
      my @args = map {wrap $_} @_;
      print "run as root, rerunning as $ENV{SUDO_USER}\n";
      run "su", $ENV{SUDO_USER}, "sh", "-c", "@args";
    }else{
      die "Error: should not run '@_' as root\n";
    }
  }else{
    run @_;
  }
}
sub wrap($){
  my $s = shift;
  $s =~ s/"/\\"/g;
  return $s;
}

&main(@ARGV);
