#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

sub mountAndBackup($$$);
sub backup($$$;$);
sub backupSymlink($$$);
sub sendReceive($$$$$);
sub test($@);
sub getSyncedSnapshot($$$);
sub makeSnapshot($$);
sub getSubvolumes($);
sub getSubvolumePaths($);
sub getSubvolumeQuotaInfo($);
sub formatSubvolumeQuotaInfo($$$);
sub isQuotaEnabled($);
sub getSnapshots($$);
sub getLastSnapshot($$$);
sub cleanupSnapshots($$$);
sub deleteSnapshots($@);
sub getBtrfsMountDev($$);
sub isMountPoint($);
sub monitorPvLog();
sub latestPvLogFile();
sub guessPrefixes($);
sub guessSubvolNames($);
sub readBackupConf($);
sub bashComplete($$);

sub sync();
sub getIpmagicCmd($);
sub run(@);
sub tryrun(@);
sub ensureRoot();

my $logDir = "/var/log/backup";

my $subvolContainer = "SUBVOL";
my $dateTimeFormat = "%Y-%m-%d_%H-%M-%S";
my $dateTimeRegex = "\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}";
my $millisRegex = "\\d{13}";

my $mntDir = "/media";
my $backupConf = "$ENV{HOME}/.config/backup.conf";
my $backups = readBackupConf($backupConf);

my $okNames = join "|", sort keys %$backups;
my @mntPoints = map {$$_[0]} values %$backups;
my @backupMntNames = map {$$_[1]} values %$backups;

my $okSortBy = join "|", qw(id path size);
my $defaultSortBy = 'size';

my $usage = "Usage:
  $0 -h|--help
    Print this message

  $0 [$okNames] [--ipmagic=IPMAGIC]
    Perform backup specified in $backupConf
      {default is to perform all}
    $backupConf contains one backup per line, formatted like this:
      NAME: SRC_MOUNT_POINT => DEST_MNT_NAME
      {e.g.: \"home: /home => /media/HOME_BAK\"}
    Performs these operations to run backup:
      -use specified SRC {e.g.: '/home'}
      -use specified DEST {e.g.: '$mntDir/HOME_BAK'}
      -use mnt to (re)mount DEST
      -find the last sync-ed snapshot in SRC and DEST
      -make a new snapshot in SRC
      -send the difference between the old SRC and new SRC to DEST
      -use mnt to unmount DEST
    If IPMAGIC is given, assumes that DEST is located at that ipmagic host
      -runs 'btrfs receive', 'mnt', etc using 'ipmagic IPMAGIC'

  $0 SRC DEST [--ipmagic=IPMAGIC]
    Perform an incremental backup between two btrfs filesystems
      -find the last agreed upon snapshot in SRC and DEST
      -make a new snapshot in SRC
      -send the difference between the old SRC and new SRC to DEST
    If IPMAGIC is given, assumes that DEST is located at that ipmagic host
      -runs 'btrfs receive' and all DEST commands using 'ipmagic IPMAGIC'

  $0 --sendreceive SRC DEST SNAPSHOT [PARENT_SNAPSHOT] [--ipmagic=IPMAGIC]
    Call send/receive to send a btrfs image.
    Roughly equivalent to:
      btrfs send -p SRC/PARENT_SNAPSHOT SRC/SNAPSHOT | btrfs receive DEST/SDIR
      # SDIR is SNAPSHOT with the last path name removed
    If PARENT_SNAPSHOT is omitted, no -p argument is given
    If IPMAGIC is given, assumes that DEST is located at that ipmagic host
      -roughly equivalent to: ipmagic IPMAGIC btrfs receive DEST

  $0 --seed SRC DEST [--ipmagic=IPMAGIC]
    Make a BACKUP snapshot on SRC, and call send/receive
    roughly equivalent to:
      backup --snapshot \$SRC BACKUP --allow-backup
      last=`backup --lastsnapshot \$SRC BACKUP`
      backup --sendreceive SRC DEST \$last --ipmagic=IPMAGIC

  $0 --lastsnapshot MOUNT_POINT [PREFIX]
    Print the last snapshot of the given prefix

  $0 --snapshot MOUNT_POINT [PREFIX] [--allow-backup]
    make a read-only snapshot of MOUNT_POINT named:
      $subvolContainer/<PREFIX>/<PREFIX>_<$dateTimeFormat>_<MILLIS>
    PREFIX defaults to \"SNAPSHOT\",
    PREFIX cannot be \"BACKUP\" unless you specify --allow-backup

  $0 --cleanup=INSTANCES MOUNT_POINT PREFIX
    remove snapshots named $subvolContainer/<PREFIX>/<PREFIX>_*,
      ensuring that the there are at least INSTANCES left {the last ones}
    INSTANCES is a positive integer, or 'all' to leave 0 instances.

  $0 --remove
    for each MOUNT_POINT in (" . join(", ", @mntPoints) . "), run:
      $0 --cleanup=1 /media/MOUNT_POINT \"BACKUP\"
    for each MOUNTNAME in (" . join(", ", @backupMntNames) . "), run:
      mnt -m MOUNTNAME
      $0 --cleanup=1 /media/MOUNTNAME \"BACKUP\"

  $0 --delete MOUNT_POINT SUBVOLUME_NAME [SUBVOLUME_NAME...]
    similar to:
    'cd MOUNT_POINT; btrfs subvol delete SUBVOLUME_NAME SUBVOLUME_NAME ..'
    also cleans up qgroups if quota is enabled

  $0 --monitor
    tail the latest pv log, switching to the latest when a new one is created

  $0 --info [--quick] [--sort-by=[$okSortBy] MOUNT_POINT
    show all subvolumes and data usage
    if --quick is not specified, (re-)enable quotas and rescan first
    --sort-by is the sort order of the subvols (default is $defaultSortBy)
      id:   subvol id, smallest first
      path: subvol path, lexicographically
      size: bytes used exclusively by subvol, largest first

   $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  die $usage if @_ > 0 and $_[0] =~ /^(-h|--help)$/;
  ensureRoot();

  my $ipmagic;
  if(@_ > 0 and $_[-1] =~ /^--ipmagic=(.*)/){
    pop;
    $ipmagic = $1;
  }elsif(@_ > 0 and $_[0] =~ /^--ipmagic=(.*)/){
    shift;
    $ipmagic = $1;
  }

  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^($okNames)$/)){
    my $name = shift;
    for my $backupName(sort keys %$backups){
      next unless not defined $name or $name eq $backupName;
      my ($srcDir, $mntName) = @{$$backups{$backupName}};
      mountAndBackup $srcDir, $mntName, $ipmagic;
      print "\n\n";
    }
  }elsif((@_ == 4 or @_ == 5) and $_[0] =~ /^--sendreceive$/){
    shift;
    my ($srcDir, $destDir, $snapshot, $parentSnapshot) = @_;
    sendReceive $srcDir, $destDir, $snapshot, $parentSnapshot, $ipmagic;
  }elsif(@_ == 3 and $_[0] =~ /^--seed$/){
    shift;
    my ($srcDir, $destDir) = @_;
    backup $srcDir, $destDir, $ipmagic, 1;
  }elsif((@_ == 2 or @_ == 3 or @_ == 4) and $_[0] =~ /^--snapshot$/){
    die $usage if defined $ipmagic;
    shift;
    my $allowBackup = pop if @_ > 0 and $_[-1] eq "--allow-backup";
    my $mountPoint = shift;
    my $prefix = shift;
    $prefix = "SNAPSHOT" if not defined $prefix;
    die $usage if @_ != 0;

    die "prefix must be a word i.e.: /\\w+/: $prefix\n" if $prefix !~ /^\w+$/;
    if($prefix eq "BACKUP" and not defined $allowBackup){
      die "PREFIX cannot be 'BACKUP' unless --allow-backup is given\n";
    }

    makeSnapshot $mountPoint, $prefix;
    sync();
  }elsif((@_ == 2 or @_ == 3) and $_[0] =~ /^--lastsnapshot$/){
    die $usage if defined $ipmagic;
    shift;
    my ($mountPoint, $prefix) = @_;
    $prefix = "SNAPSHOT" if not defined $prefix;
    $mountPoint =~ s/\/$//;
    die "not a dir: $mountPoint\n" if not -d $mountPoint;

    die "prefix must be a word i.e.: /\\w+/: $prefix\n" if $prefix !~ /^\w+$/;

    die $usage if not defined $mountPoint or @_ > 2;
    my $snapshot = getLastSnapshot $mountPoint, $prefix, undef;
    print "$snapshot\n";
  }elsif(@_ == 3 and $_[0] =~ /^--cleanup=(\d+|all)$/){
    die $usage if defined $ipmagic;
    my ($mountPoint, $prefix, $instances) = ($_[1], $_[2], $1);
    die "INSTANCES must be > 0 {use 'all' for 0}\n" if $instances ne 'all' and $instances <= 0;
    cleanupSnapshots $mountPoint, $prefix, $instances;
  }elsif(@_ >= 3 and $_[0] =~ /^--delete$/){
    die $usage if defined $ipmagic;
    my $mountPoint = $_[1];
    my @toDelete = @_[2..$#_];
    deleteSnapshots $mountPoint, @toDelete;
  }elsif(@_ == 1 and $_[0] =~ /^--remove$/){
    die $usage if defined $ipmagic;
    for my $name(sort keys %$backups){
      my ($srcMntPoint, $destMntName) = @{$$backups{$name}};
      my $destMntPoint = "/media/$destMntName";
      tryrun "mnt", "-m", $destMntName;

      my $oldBackup = getSyncedSnapshot($srcMntPoint, $destMntPoint, undef);
      cleanupSnapshots $srcMntPoint, "BACKUP", 1;
      cleanupSnapshots $destMntPoint, "BACKUP", 1;
      my $newBackup = getSyncedSnapshot($srcMntPoint, $destMntPoint, undef);
      if($oldBackup ne $newBackup){
        die "FATAL ERROR: latest backup is missing- $oldBackup\n";
      }
      run "mnt", "-u", $destMntName;
    }
  }elsif(@_ == 1 and $_[0] =~ /^--monitor$/){
    die $usage if defined $ipmagic;
    monitorPvLog();
  }elsif(@_ >= 2 and $_[0] =~ /^--info$/){
    die $usage if defined $ipmagic;
    shift;
    my $quick = 0;
    if($_[0] =~ /^(--quick)$/){
      $quick = 1;
      shift;
    }

    my $sortBy = $defaultSortBy;
    if($_[0] =~ /^--sort-by=($okSortBy)$/){
      $sortBy = $1;
      shift;
    }

    my $mnt = shift;
    die $usage if not defined $mnt or @_ > 0;

    my $fsSize = `df -B1 --output=size "$mnt" | tail -1`;
    chomp $fsSize;
    die "could not df $mnt\n" if $fsSize !~ /^\d+$/ or $fsSize == 0;

    if(not $quick){
      print "(re-)enabling quota and rescanning:\n";
      run "btrfs quota disable \"$mnt\"";
      run "btrfs quota enable \"$mnt\"";
      run "btrfs quota rescan -w \"$mnt\"";
    }
    if(not isQuotaEnabled($mnt)){
      die "quota is not enabled\n";
    }

    my $info = getSubvolumeQuotaInfo $mnt;

    print formatSubvolumeQuotaInfo($fsSize, $info, $sortBy);
  }elsif(@_ == 2){
    my ($srcDir, $destDir) = @_;
    backup $srcDir, $destDir, $ipmagic;
  }else{
    die $usage;
  }
}

sub mountAndBackup($$$){
  my ($srcDir, $mntName, $ipmagic) = @_;
  my $destDir = "$mntDir/$mntName";

  die "dir not found: $srcDir\n" if not -d $srcDir;

  my @ipmagicCmd = getIpmagicCmd $ipmagic;

  my $wasMounted = test $ipmagic, "-e", $destDir;
  run @ipmagicCmd, "mnt", "-u", $mntName if $wasMounted;
  die "$destDir exists already\n" if test $ipmagic, "-e", $destDir;

  run @ipmagicCmd, "mnt", "-l", $mntName;

  backup $srcDir, $destDir, $ipmagic;

  run @ipmagicCmd, "mnt", "-u", $mntName;
  run @ipmagicCmd, "mnt", "-m", $mntName if $wasMounted;
}

sub backup($$$;$){
  my ($srcDir, $destDir, $remoteDestIpmagic, $seed) = @_;
  $srcDir =~ s/\/$//;
  $destDir =~ s/\/$//;

  if(not defined getBtrfsMountDev $srcDir, undef){
    die "$srcDir is not btrfs\n";
  }elsif(not defined getBtrfsMountDev $destDir, $remoteDestIpmagic){
    die "$destDir is not btrfs\n";
  }

  my $syncedSnapshot;
  if(defined $seed and $seed){
    $syncedSnapshot = undef;
  }else{
    $syncedSnapshot = getSyncedSnapshot $srcDir, $destDir, $remoteDestIpmagic;
  }

  my $newSnapshot = makeSnapshot $srcDir, "BACKUP";

  sync();

  sendReceive $srcDir, $destDir,
    $newSnapshot, $syncedSnapshot,
    $remoteDestIpmagic;

  backupSymlink $destDir, $newSnapshot, $remoteDestIpmagic;
}

sub backupSymlink($$$){
  my ($dir, $snapshotName, $remoteIpmagic) = @_;

  my @ipmagicCmd = getIpmagicCmd $remoteIpmagic;

  if(test $remoteIpmagic, "-h", "$dir/backup"){
    run @ipmagicCmd, "rm", "$dir/backup";
  }

  if(not test $remoteIpmagic, "-e", "$dir/backup"){
    run @ipmagicCmd, "ln", "-s", $snapshotName, "$dir/backup";
  }else{
    print STDERR "$dir/backup exists, not creating symlink\n";
  }
}

sub sendReceive($$$$$){
  my ($sendDir, $receiveDir,
      $snapshotName, $parentSnapshotName,
      $remoteDestIpmagic) = @_;

  my $snapshotBaseName = $snapshotName;
  $snapshotBaseName =~ s/^.*\///;

  my $destDir = $snapshotName;
  $destDir =~ s/([^\/]*)$//;
  $destDir = "$receiveDir/$destDir";

  my $parent = '';
  if(defined $parentSnapshotName){
    $parent = "-p \"$sendDir/$parentSnapshotName\"";
  }

  if(not test $remoteDestIpmagic, "-d", "$receiveDir"){
    die "dir does not exist on dest: $receiveDir\n";
  }
  if(test $remoteDestIpmagic, "-e", "$receiveDir/$snapshotName"){
    die "snapshot exists on dest already: $receiveDir/$snapshotName\n";
  }

  my $ipmagicCmd = getIpmagicCmd($remoteDestIpmagic);

  run "$ipmagicCmd mkdir -p $destDir";

  run "mkdir -p $logDir";
  my $pvLog = "$logDir/$snapshotBaseName-pv.log";
  my $rcvLog = "$logDir/$snapshotBaseName-btrfs-rcv.log";
  print "\nLOGS: $pvLog $rcvLog\n";

  print "\n";
  run "bash", "-c", "time ( "
    . " btrfs send $parent \"$sendDir/$snapshotName\""
    . " | "
    . " pv -r -a -t -b -f 2> >(tee $pvLog 1>&2)"
    . " | "
    . " $ipmagicCmd btrfs receive -v -v \"$destDir\" 2> >(tee $rcvLog 1>&2)"
    . " )"
    ;

  print "\nLOGS: $pvLog $rcvLog\n";
  print "\n";
  run "cat", $pvLog;
  print "\n";

  if(not test $remoteDestIpmagic, "-d", "$receiveDir/$snapshotName"){
    die "snapshot send/receive failed: $receiveDir/$snapshotName\n";
  }
}

sub test($@){
  my $remoteIpmagic = shift;
  my @test = (getIpmagicCmd($remoteIpmagic), "test", @_);
  tryrun @test;
  return $? == 0 ? 1 : 0;
}

sub getSyncedSnapshot($$$){
  my ($srcDir, $destDir, $remoteDestIpmagic) = @_;
  $srcDir =~ s/\/$//;
  $destDir =~ s/\/$//;

  my $lastSrc = getLastSnapshot $srcDir, "BACKUP", undef;
  my $lastDest = getLastSnapshot $destDir, "BACKUP", $remoteDestIpmagic;

  if($lastSrc ne $lastDest){
    die "Mismatched last snapshot:\n$srcDir/$lastSrc\n$destDir/$lastDest\n";
  }
  return $lastSrc;
}

sub makeSnapshot($$){
  my ($mountPoint, $prefix) = @_;
  my $millis = int(time * 1000);
  my $dateTime = `date +$dateTimeFormat`;
  chomp $dateTime;

  $mountPoint =~ s/\/+$//;
  die "not a dir: $mountPoint\n" if not -d $mountPoint;
  die "not a mountpoint: $mountPoint\n" if not isMountPoint($mountPoint);

  my $parentDir = "$subvolContainer/$prefix";
  run "mkdir", "-p", "$mountPoint/$parentDir";

  my $snapshotName = "${prefix}_${dateTime}_${millis}";

  my $snapshot = "$parentDir/$snapshotName";
  my $snapshotDir = "$mountPoint/$snapshot";

  die "$snapshotDir already exists!\n" if -e $snapshotDir;
  run "btrfs", "subvolume", "snapshot", "-r", $mountPoint, $snapshotDir;

  my $latestSymlink = "$mountPoint/$parentDir/latest";

  run "rm", "-f", $latestSymlink;
  run "ln", "-s", $snapshotName, $latestSymlink;

  if($snapshot ne getLastSnapshot $mountPoint, $prefix, undef){
    die "snapshot failed\n";
  }

  return $snapshot;
}

sub getSubvolumes($){
  my $mnt = shift;
  my @subLines = `btrfs subvolume list "$mnt"`;
  my $subs = {};
  for my $subLine(@subLines){
    if($subLine =~ /ID (\d+) gen (\d+) top level (\d+) path (.*)$/){
      my ($id, $gen, $level, $path) = ($1, $2, $3, $4);
      $$subs{$id} = $path;
    }else{
      die "malformed subvolume line: $subLine\n";
    }
  }
  return $subs;
}
sub getSubvolumePaths($){
  my $mnt = shift;
  my $subs = getSubvolumes($mnt);
  my $paths = [];
  for my $id(sort {$a <=> $b} keys %$subs){
    push @$paths, $$subs{$id};
  }
  return $paths;
}

sub getSubvolumeQuotaInfo($){
  my $mnt = shift;
  my @qgroupLines = `btrfs qgroup show --raw \"$mnt\"`;
  die "invalid output from qgroup show on $mnt" if 0
    or @qgroupLines < 3
    or $qgroupLines[0] !~ /^\s*qgroupid\s*rfer\s*excl\s*$/
    or $qgroupLines[1] !~ /^\s*-+\s*-+\s*-+\s*$/
    ;
  shift @qgroupLines;
  shift @qgroupLines;

  my $subs = getSubvolumes($mnt);
  my $root = undef;

  my $info = {};
  for my $qgroup(@qgroupLines){
    if($qgroup !~ /^\s*0\/(\d+)\s*(-?\d+)\s*(\d+)/){
      die "Malformed qgroup: $qgroup\n";
    }
    my($subId, $total, $excl) = ($1, $2, $3);
    if(not defined $root and not defined $$subs{$subId}){
      $root = $subId;
      $$subs{$subId} = "root";
    }

    if(not defined $$subs{$subId}){
      print STDERR "WARNING: unknown subvolume $subId\n";
      next;
    }
    die "duplicated subvolume: $subId\n" if defined $$info{$subId};

    $$info{$subId} = {
      path  => $$subs{$subId},
      total => $total,
      excl  => $excl,
    };
  }

  for my $subId(sort keys %$subs){
    if(not defined $$info{$subId}){
      print STDERR "WARNING: missing qgroup for $subId {maybe deleted?)\n";
    }
  }

  return $info;
}

sub formatSubvolumeQuotaInfo($$$){
  my ($fsSize, $info, $sortBy) = @_;
  my $s = '';

  my $sortFcts = {
    id   => sub($$){$_[0] <=> $_[1]},
    size => sub($$){$$info{$_[1]}{excl} <=> $$info{$_[0]}{excl}},
    path => sub($$){$$info{$_[0]}{path} cmp $$info{$_[1]}{path}},
  };

  my $sortFct = $$sortFcts{$sortBy};
  die "unknown sort function: $sortBy\n" if not defined $sortFct;

  for my $subId(sort $sortFct (keys %$info)){
    my $path = $$info{$subId}{path};
    $path = sprintf '%-32s', $path;

    my $size = $$info{$subId}{excl};
    $size /= 1024;
    $size = sprintf '%10d', $size;

    my $pct = 100 * ($$info{$subId}{excl} / $fsSize);
    $pct = sprintf '%7.3f', $pct;

    $s .= "$path ${size}KiB $pct\%\n";
  }

  return $s;
}

sub isQuotaEnabled($){
  my $mnt = shift;
  system "btrfs qgroup show \"$mnt\" >/dev/null 2>/dev/null";
  return $? == 0;
}

sub getSnapshots($$){
  my ($dir, $prefix) = @_;
  my @subs = @{getSubvolumePaths($dir)};
  @subs = grep {/^${subvolContainer}\/${prefix}\/${prefix}_${dateTimeRegex}_${millisRegex}$/} @subs;

  my @sortedSubs = sort @subs;
  for(my $i=0; $i<@subs; $i++){
    if($subs[$i] ne $sortedSubs[$i]){
      die "snapshots are out of order {ID versus date}\n";
    }
  }

  for my $sub(@subs){
    die "$dir/$sub is not a dir\n" if not -d "$dir/$sub";
  }

  return @subs;
}

sub getLastSnapshot($$$){
  my ($dir, $prefix, $remoteIpmagic) = @_;
  my $sub;
  if(defined $remoteIpmagic){
    my $ipmagicCmd = getIpmagicCmd $remoteIpmagic;
    $sub = `$ipmagicCmd $0 --lastsnapshot "$dir" "$prefix"`;
    die "Failed to fetch subvol $prefix from $remoteIpmagic" if $? != 0;
    chomp $sub;
  }else{
    die "not a dir: $dir\n" if not -d $dir;

    my @subs = getSnapshots $dir, $prefix;
    die "no '$prefix' snapshot found for $dir\n" if @subs == 0;
    $sub = $subs[-1];
  }
  die "Malformed snapshot: $sub\n" if $sub !~ /^${subvolContainer}\/${prefix}\/${prefix}_${dateTimeRegex}_${millisRegex}$/;
  return $sub;
}

sub cleanupSnapshots($$$){
  my ($mountPoint, $prefix, $instances) = @_;
  my @subs = getSnapshots $mountPoint, $prefix;

  if($instances eq 'all' and $prefix =~ /BACKUP/i){
    die "NOT deleting all your backups, do that by hand if you like\n";
  }

  my @toKeep;
  my @toDelete;
  if($instances eq 'all'){
    @toKeep = ();
    @toDelete = @subs;
  }else{
    my @revsubs = reverse sort @subs;
    @toKeep = grep {defined} reverse @revsubs[0 .. $instances-1];
    @toDelete = grep {defined} reverse @revsubs[$instances .. $#revsubs];
  }

  print "to keep (" . scalar(@toKeep) . "):\n ";
  print join "\n ", @toKeep;
  print "\n\n";
  print "to delete (" . scalar(@toDelete) . "):\n ";
  print join "\n ", @toDelete;
  print "\n\n";

  if($instances eq 'all'){
    print "DELETING ALL THESE SNAPSHOTS\n";
    print "ok? [Y/n] ";
    my $ok = <STDIN>;
    if($ok =~ /n/i){
      die "user cancelled\n";
    }
  }else{
    die "ERROR: no snapshots would remain\n" if @toKeep == 0;
  }

  if(@toDelete > 0){
    deleteSnapshots $mountPoint, @toDelete;
  }
}

sub deleteSnapshots($@){
  my ($mountPoint, @toDelete) = @_;

  @toDelete = map {s/\/$//; $_} @toDelete;

  my $subvolumes = getSubvolumes $mountPoint;
  my %subIds = map {$$subvolumes{$_} => $_} keys %$subvolumes;

  for my $sub(@toDelete){
    die "MISSING SNAPSHOT: $sub\n" if not -d "$mountPoint/$sub";
    die "SUBVOLUME ID NOT FOUND: $sub\n" if not defined $subIds{$sub};
  }

  my @pathsToDelete = map {"$mountPoint/$_"} @toDelete;
  my @qgroupsToDelete = map {"0/$subIds{$_}"} @toDelete;
  run "btrfs", "subvolume", "delete", @pathsToDelete;
  if(isQuotaEnabled($mountPoint)){
    for my $qgroupId(@qgroupsToDelete){
      tryrun "btrfs", "qgroup", "destroy", $qgroupId, $mountPoint;
    }
  }
  print "deleted " . scalar(@toDelete) . " subvolumes\n";
  sync();
}

sub getBtrfsMountDev($$){
  my ($dir, $ipmagic) = @_;
  my $ipmagicCmd = getIpmagicCmd($ipmagic);
  my @mountLines = `$ipmagicCmd mount`;
  for my $line(@mountLines){
    if($line =~ m/^([_a-zA-Z0-9\/\-]+) on $dir type btrfs /){
      return $1;
    }
  }
  return undef;
}

sub isMountPoint($){
  my ($dir) = @_;
  open CMD, "-|", "mountpoint", $dir
    or die "could not run mountpoint\n$!\n";
  my $out = <CMD>;
  close CMD;
  if($out =~ /is a mountpoint$/){
    return 1;
  }elsif($out =~ /is not a mountpoint$/){
    return 0;
  }else{
    die "malformed output of 'mountpoint' command: $out\n";
  }
}

sub guessPrefixes($){
  my $mountPoint = shift;
  my @subs = guessSubvolNames $mountPoint;
  my @prefixWords = map { /^$subvolContainer\/(\w+)/; $1} @subs;
  my %uniqPrefixWords = map { $_ => 1} @prefixWords;
  return sort keys %uniqPrefixWords;
}
sub guessSubvolNames($){
  my $mountPoint = shift;
  $mountPoint =~ s/'/'\\''/g;
  my @subs = `ls -d '$mountPoint'/$subvolContainer/*/* 2>/dev/null`;
  my %subvolNames;
  for my $sub(@subs){
    if($sub =~ /^(?:.*\/)?(${subvolContainer}\/\w+\/\w+_${dateTimeRegex}_${millisRegex})$/){
      $subvolNames{$1} = 1;
    }
  }
  return sort keys %subvolNames;
}

sub readBackupConf($){
  my $file = shift;
  my $backups = {};
  if(-f $file){
    my @lines = `cat "$file"`;
    for my $line(@lines){
      chomp $line;
      next if $line =~ /^\s*(#.*)?$/;
      if($line =~ /^\s*(\w+)\s*:\s*(.+?)\s*=>\s*(.+?)\s*$/){
        my ($name, $srcDir, $destName) = ($1, $2, $3);
        $$backups{$name} = [$srcDir, $destName];
      }else{
        print STDERR "warning: malformed config line: $line\n";
      }
    }
  }else{
    print STDERR "warning: $file does not exist\n";
  }
  return $backups;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  my @backupNames = sort keys %$backups;

  my @cmds = qw(
    -h --help
    --sendreceive
    --seed
    --lastsnapshot
    --snapshot
    --cleanup=1 --cleanup=30 --cleanup=all
    --remove
    --delete
    --monitor
    --info
    --bash-complete
  );

  my @opts = qw(
    --ipmagic=
  );

  if(@words == 0){
    return (@backupNames, @mntPoints, @cmds, @opts);
  }

  if($words[0] =~ /^(--sendreceive)/){
    if(@words == 1 or @words == 2){
      return @mntPoints;
    }elsif(@words == 3){
      my $src = $words[1];
      return guessSubvolNames $src;
    }elsif(@words == 4){
      my $src = $words[1];
      return (@opts, guessSubvolNames $src);
    }elsif(@words == 5){
      return @opts;
    }
  }

  if($words[0] =~ /^(--seed)/){
    if(@words == 1 or @words == 2){
      return @mntPoints;
    }elsif(@words == 3){
      return @opts;
    }
  }

  if($words[0] =~ /^(--snapshot|--lastsnapshot|--cleanup.*)/){
    if(@words == 1){
      return @mntPoints;
    }elsif(@words == 2){
      my $mnt = $words[1];
      my @prefixes = guessPrefixes $mnt;
      push @prefixes, "SNAPSHOT" if $words[0] =~ /^(--snapshot)$/;
      return @prefixes;
    }elsif(@words == 3){
      return ("--allow-backup");
    }
  }

  if($words[0] =~ /^(--delete)$/){
    if(@words == 1){
      return @mntPoints;
    }elsif(@words > 1){
      my $mnt = $words[1];
      return guessSubvolNames $mnt;
    }
  }

  if($words[0] =~ /^(--info)$/){
    my @quick = qw(--quick);
    my @sortBy = qw(--sort-by=id --sort-by=path --sort-by=size);
    if(@words == 1){
      return (@quick, @sortBy, @mntPoints);
    }elsif(@words == 2 and $words[1] =~ /^(--quick)$/){
      return (@sortBy, @mntPoints);
    }elsif(@words == 3 and $words[2] =~ /^(--sort-by.*)$/){
      return (@mntPoints);
    }
  }

  if($words[0] =~ /^($okNames)/){
    return @opts;
  }

  if(@words == 1){
    return @mntPoints;
  }elsif(@words == 2){
    return @opts;
  }

  return ();
}

sub sync(){
  run "sync";
}

sub monitorPvLog(){
  my $latest = undef;
  my $pid = undef;
  while(1){
    my $prev = $latest;
    $latest = latestPvLogFile();

    if(defined $latest and (not defined $prev or $prev ne $latest)){
      print "\n\nLOG FILE: $latest\n";
      kill $pid if defined $pid;
      $pid = fork;
      if(not $pid){
        exec "tail", "-F", $latest;
      }
    }

    sleep 0.5;
  }
}

sub latestPvLogFile(){
  my @pvLogs = `ls $logDir/BACKUP_*-pv.log 2>/dev/null`;
  chomp foreach @pvLogs;
  @pvLogs = sort grep {/^$logDir\/BACKUP_${dateTimeRegex}_${millisRegex}-pv\.log$/} @pvLogs;
  return @pvLogs == 0 ? undef : $pvLogs[-1];
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    print STDERR "rerunning as root\n";
    exec "sudo", $0, @ARGV;
  }
}

sub getIpmagicCmd($){
  my $ipmagic = shift;
  my @cmd;
  if(defined $ipmagic){
    @cmd = (@cmd, "sudo", "-u", "$ENV{SUDO_USER}") if defined $ENV{SUDO_USER};
    @cmd = (@cmd, "ipmagic", $ipmagic, "-u", "root");
  }

  if(wantarray){
    return @cmd;
  }else{
    return "@cmd";
  }
}

sub run(@){
  print "@_\n";
  system @_;
  die "FAILED: @_\n" if $? != 0;
}
sub tryrun(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
