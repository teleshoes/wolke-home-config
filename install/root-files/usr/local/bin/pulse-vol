#!/usr/bin/perl
use strict;
use warnings;

my $PATOOL_PACMD = "pacmd";
my $PATOOL_PACTL = "pactl";
my $PATOOL = $PATOOL_PACTL;

my $baseVol = 65537; #100%
my $sinkSyns = "speaker|spkr|sink";
my $sourceSyns = "microphone|mic|source";

my $muteSinkCmd = '';
my $unmuteSinkCmd = '';
my $muteSourceCmd = 'led mute_mic off';
my $unmuteSourceCmd = 'led mute_mic on';

my %cmds = (
  "get-volume" =>    [qw(-g --get-volume    get-volume)],
  "get-mute" =>      [qw(-m --get-mute      get-mute)],
  "update-volume" => [qw(-u --update-volume update-volume)],
);
my %okCmds = map {$_ => join "|", @{$cmds{$_}}} keys %cmds;
my $allOkCmds = join "|", values %okCmds;

my $name = `basename $0`;
chomp $name;
my $usage = "Usage:
  $name [DEVTYPE]
    prints the volume and mute status
  $name [DEVTYPE] $okCmds{'get-volume'}
    prints the volume
  $name [DEVTYPE] $okCmds{'get-mute'}
    prints the mute status 'muted', 'unmuted', or 'unknown'
  $name [DEVTYPE] $okCmds{'update-volume'}
    sets the volume to what '$0 --get-volume' returns
  $name [DEVTYPE] VOLUME-ABS
    sets the absolute volume
  $name [DEVTYPE] VOLUME-REL [MAX]
    increase or decreases the volume
  $name [DEVTYPE] MUTE-STATUS
    mutes or unmutes
    also runs the following commands when:
    mute sinks    : '$muteSinkCmd'
    unmute sinks  : '$unmuteSinkCmd'
    mute sources  : '$muteSourceCmd'
    unmute sources: '$unmuteSourceCmd'

  DEVTYPE: [$sinkSyns] or [$sourceSyns]
    synonym for either 'sink' or 'source'. default is 'sink'

  VOLUME-ABS: [INT]
    integer percentage of $baseVol {rounded down}
    use caution when setting above 100

  VOLUME-REL: [+INT|-INT]
    plus or minus integer percentage of $baseVol {rounded down}
    '+6', '-6', etc
    changes all sinks or sources to the same value, using their average

  MAX: [INT]
    integer percentage of $baseVol {rounded down}
    caps relative volume changes {plus or minus}
    if the resultant volume after the relative change is higher than max,
    max is set instead.
    100 is the default; above this usually means amplifying the signal
    note that sometimes the max level without amp is much lower
    {i.e. the default can blow your speakers if they suck}

  MUTE-STATUS:  [mute|unmute|toggle|equal]
    [un]mutes all sinks or all sources
    mute: mutes all
    unmute: unmutes all
    toggle: if all are muted, unmutes all, otherwise mutes all
    equal: if any are muted, mutes all, otherwise unmutes all
           {ensures all devices are the same and runs the mute command}

  e.g.:
    $0 100
    $0 -6
    $0 sink +6 150
    $0 sink unmute
    $0 source mute
";

sub setVolPercent($$$);
sub getAverageVolPercent($);
sub anyMutedUnmuted($);
sub anyMuted($);
sub getMuteStatus($);

sub main(@){
  system "pulse-enable", "-q", "get";
  die "pulse not enabled according to pulse-enable\n" if $? != 0;

  my $dev = shift if @_ > 0 and $_[0] =~ /^($sinkSyns|$sourceSyns)$/;
  $dev = 'sink' if not defined $dev;
  $dev = 'sink' if $dev =~ /^($sinkSyns)$/;
  $dev = 'source' if $dev =~ /^($sourceSyns)$/;

  my ($absVol, $relVol, $maxVol, $muteStatus, $cmd);
  if(@_ > 0 and $_[0] =~ /^(\d+)$/){
    $absVol = shift;
  }elsif(@_ > 0 and $_[0] =~ /^(\+|-)?(\d+)$/){
    $relVol = shift;
    $maxVol = shift if @_ > 0 and $_[0] =~ /^\d+$/;
    $maxVol = 100 if not defined $maxVol;
  }elsif(@_ > 0 and $_[0] =~ /^(mute|unmute|toggle|equal)$/){
    $muteStatus = shift;
  }elsif(@_ == 1 and $_[0] =~ /^($allOkCmds)$/){
    $cmd = shift;
  }
  die $usage if @_ > 0;
  $cmd = '' if not defined $cmd;

  my $paDevList;
  my @indices;
  if($PATOOL eq $PATOOL_PACMD){
    $paDevList = `$PATOOL list-${dev}s`;
    @indices = ($paDevList =~ /^  [ *] index: (\d+)$/gsm);
  }elsif($PATOOL eq $PATOOL_PACTL){
    $paDevList = `$PATOOL list ${dev}s`;
    @indices = ($paDevList =~ /^$dev #(\d+)$/igsm);
  }else{
    die "ERROR: unknown tool $PATOOL\n";
  }

  my $curVol = getAverageVolPercent $paDevList;

  if(defined $absVol){
    print "$curVol => $absVol\n";
    setVolPercent $dev, $_, $absVol foreach @indices;
  }elsif(defined $relVol){
    my $vol = $curVol;
    $relVol =~ /(\+|-)(\d+)/;
    $vol += $2 if $1 eq '+';
    $vol -= $2 if $1 eq '-';
    $vol = $maxVol if $vol > $maxVol;
    $vol = 0 if $vol < 0;
    print "$curVol => $vol\n";
    setVolPercent $dev, $_, $vol foreach @indices;
  }elsif(defined $muteStatus){
    my $muteVal;
    if($muteStatus eq 'mute'){
      $muteVal = 1;
    }elsif($muteStatus eq 'unmute'){
      $muteVal = 0;
    }elsif($muteStatus eq 'toggle'){
      $muteVal = getMuteStatus($paDevList) eq 'muted' ? '0' : '1';
    }elsif($muteStatus eq 'equal'){
      $muteVal = anyMuted($paDevList) ? '1' : '0';
    }
    setMuteStatus($dev, $_, $muteVal) foreach @indices;
    system $muteSinkCmd if $muteVal eq 1 and $dev eq 'sink';
    system $unmuteSinkCmd if $muteVal eq 0 and $dev eq 'sink';
    system $muteSourceCmd if $muteVal eq 1 and $dev eq 'source';
    system $unmuteSourceCmd if $muteVal eq 0 and $dev eq 'source';
  }elsif($cmd =~ /^($okCmds{'get-volume'})$/){
    print getAverageVolPercent($paDevList) . "\n";
  }elsif($cmd =~ /^($okCmds{'get-mute'})$/){
    print getMuteStatus($paDevList) . "\n";
  }elsif($cmd =~ /^($okCmds{'update-volume'})$/){
    my $absVol = getAverageVolPercent($paDevList);
    setVolPercent $dev, $_, $absVol foreach @indices;
  }else{
    print getAverageVolPercent($paDevList);
    print " (" . getMuteStatus($paDevList) . ")";
    print "\n";
  }

}

sub setMuteStatus($$){
  my ($dev, $index, $muteVal) = @_;
  system $PATOOL, "set-$dev-mute", $index, $muteVal;
}

#percent of hard-coded base vol, not device base vol
sub setVolPercent($$$){
  my ($dev, $index, $value) = @_;
  system $PATOOL, "set-$dev-volume", $index, int($value/100.0*$baseVol);
}

#percent of hard-coded base vol, not device base vol
sub getAverageVolPercent($){
  my $paDevList = shift;
  my $count = 0;
  my $total = 0;
  for my $line(split /\n/, $paDevList){
    if($line =~ /^\tvolume:/i){
      while($line =~ /\s+(\d+)%/g){
        $count++;
        $total += $1;
      }
    }
  }
  die "Could not parse volume\n" if $count == 0;
  return $total/$count;
}

sub anyMutedUnmuted($){
  my $paDevList = shift;
  my $anyMuted = 0;
  my $anyUnmuted = 0;
  for my $line(split /\n/, $paDevList){
    $anyMuted = 1 if $line =~ /^\tMute(?:d)?: yes/i;
    $anyUnmuted = 1 if $line =~ /^\tMute(?:d)?: no/i;
  }
  return ($anyMuted, $anyUnmuted);
}

sub anyMuted($){
  my $paDevList = shift;
  my ($anyMuted, $anyUnmuted) = anyMutedUnmuted $paDevList;
  return $anyMuted;
}

sub getMuteStatus($){
  my $paDevList = shift;
  my ($anyMuted, $anyUnmuted) = anyMutedUnmuted $paDevList;
  if($anyMuted and not $anyUnmuted){
    return 'muted';
  }elsif(not $anyMuted and $anyUnmuted){
    return 'unmuted';
  }else{
    return 'unknown';
  }
}

&main(@ARGV);
