#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray :config bundling);
use Cwd 'abs_path';

my @exts = qw(mp3 flac ogg m4a wma wav);

sub selectAlarmFile($);
sub listFiles($);
sub getPulseEnvVars();
sub pulseExec(@);
sub bashComplete($$);

my $alarmsDir = '/usr/share/alarms';
my $soundsDir = '/usr/share/sounds/custom';
die "$alarmsDir/ doesnt exist or isnt a dir\n" if not -d $alarmsDir;

my @alarms = listFiles $alarmsDir;
my @sounds = listFiles $soundsDir;
die "$alarmsDir is empty\n" if @alarms == 0;

my $validAlarms = join '|', @alarms;
my $validSounds = join '|', @sounds;

my $usage = "Usage:
  $0 [OPTS] [ALARM_NAME|SOUND_NAME]
    Runs 'term mpv $alarmsDir/ALARM_NAME -loop 0'.
      or 'term gst-play $alarmsDir/ALARM_NAME --loop' (if no mpv and file ends in .wav)
      or 'term qtcmdplayer $alarmsDir/ALARM_NAME --loop' (if no mpv otherwise)
    If run as root, reruns as the user running pulseaudio.

  $0 --print-alarms
    Print files in $alarmsDir

  $0 --print-sounds
    Print files in $soundsDir

  $0 --bash-complete COMP_LINE COMP_POINT
    print a list of words for bash completion, one per line
    COMP_LINE:  the full cmdline as a string
    COMP_POINT: the cursor position in the cmdline

    ALARM_NAME:
      File name under $alarmsDir
      Optional; default is 'default'
      Valid values: $validAlarms

    SOUND_NAME:
      File name under $soundsDir
      Valid values: $validSounds

    OPTS:
      -h | --help
         Show this message
      -n | --norerun
         Do not rerun as pulse user
      -o | --once
        Do not repeat alarm, i.e.: don't pass '-loop 0' to mpv
                                     or '--loop' to gst-play
                                     or '--loop' to qtcmdplayer
      -g | --guess
        If alarm does not match, use 'default' instead of failing
      -v N | --vol N | --volume N
        Pass '-volume N' to mpv (e.g.: -v 50, -v 300)
          or '--volume=N' to gst-play
          or '--volume N' to qtcmdplayer
      --unmute
        Attempt to unmute and set system volume to 100% using pulse-vol
      -b|--background
        Run in background (useless without --noterm)
      -t|--noterm
        Do not run in term
      -s|--sound
        Same as '--once --noterm --background'
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }elsif(@_ == 1 and $_[0] =~ /^--print-alarms$/){
    print map {"$_\n"} @alarms;
    exit 0;
  }elsif(@_ == 1 and $_[0] =~ /^--print-sounds$/){
    print map {"$_\n"} @sounds;
    exit 0;
  }

  my ($help, $norerun, $once, $guess, $vol, $unmute, $background, $noterm, $sound);
  my $ok = GetOptionsFromArray(\@_,
    "h|help"            => \$help,
    "n|norerun"         => \$norerun,
    "o|once"            => \$once,
    "g|guess"           => \$guess,
    "v|vol|volume=i"    => \$vol,
    "unmute"            => \$unmute,
    "b|background"      => \$background,
    "t|noterm"          => \$noterm,
    "s|sound"           => \$sound,
  );

  $once = 1 if $sound;
  $noterm = 1 if $sound;
  $background = 1 if $sound;

  my $defaultFile = "$alarmsDir/default";

  my $name = shift() || 'default';
  my $file;
  $file = selectAlarmFile $name if not defined $file;
  for my $ext(@exts){
    $file = selectAlarmFile "$name.$ext" if not defined $file;
  }

  if(not defined $file and defined $guess and -e $defaultFile){
    print "Could not find '$name'; using '$defaultFile'\n";
    $file = $defaultFile;
  }

  die $usage if not $ok or @_ > 0
    or defined $help
    or not defined $file
    or (defined $vol and $vol !~ /^\d+$/)
    ;

  pulseExec $0, @ARGV unless defined $norerun;

  my $absFile = -l $file ? abs_path $file : $file;
  die "Missing alarm file $file\n" if not -f $absFile;

  if($unmute){
    system "pulse-vol", "unmute";
    system "pulse-vol", 100;
  }

  my $exec;
  if(`which mpv 2>/dev/null` =~ /mpv/){
    $exec = "mpv";
  }elsif($absFile =~ /\.wav$/i and `which gst-play 2>/dev/null` =~ /gst-play/){
    $exec = "gst-play";
  }elsif(`which qtcmdplayer 2>/dev/null` =~ /qtcmdplayer/){
    $exec = "qtcmdplayer";
  }

  my @cmd;
  @cmd = (@cmd, "term") unless $noterm;
  if($exec eq "mpv"){
    @cmd = (@cmd, $exec, $file);
    @cmd = (@cmd, "-volume", $vol) if defined $vol;
    @cmd = (@cmd, "-loop", "0") unless $once;
  }elsif($exec eq "gst-play"){
    @cmd = (@cmd, $exec, $file);
    @cmd = (@cmd, "--volume=$vol") if defined $vol;
    @cmd = (@cmd, "--loop",) unless $once;
  }elsif($exec eq "qtcmdplayer"){
    @cmd = (@cmd, $exec, $file);
    @cmd = (@cmd, "--daemon");
    @cmd = (@cmd, "--volume", $vol) if defined $vol;
    @cmd = (@cmd, "--loop") unless $once;
  }else{
    die "ERROR: no exec found to play alarm\n";
  }

  #copy certain environment variables from pulseaudio process
  my %pulseEnvVars = getPulseEnvVars();
  for my $key(sort keys %pulseEnvVars){
    my $val = $pulseEnvVars{$key};
    $ENV{$key} = $val;
  }

  if(not $background){
    exec @cmd;
  }else{
    if(not fork){
      open STDOUT, "> /dev/null";
      open STDERR, "> /dev/null";
      exec @cmd;
    }
  }
}

sub selectAlarmFile($){
  my $name = shift;
  if($name =~ /^($validAlarms)$/){
    return "$alarmsDir/$name";
  }elsif($name =~ /^($validSounds)$/){
    return "$soundsDir/$name";
  }else{
    return undef;
  }
}

sub listFiles($){
  my $dir = shift;
  my @files = `find $dir/ -type f -o -type l`;
  for my $file(@files){
    $file =~ s/^$dir\///;
    chomp $file;
  }
  return sort @files;
}

sub getPulseEnvVars(){
  my $pulseCmd = `ps e --no-heading -o cmd -C pulseaudio 2>/dev/null`;
  my %pulseEnvVars;

  #only get these environment variables
  my %okEnvVars = map {$_ => 1} qw(
    XDG_RUNTIME_DIR
  );

  my @pulseCmdWords = split / /, $pulseCmd;
  for my $word(@pulseCmdWords){
    if($word =~ /^(\w+)=(.+)$/){
      my ($key, $val) = ($1, $2);
      if(defined $okEnvVars{$key}){
        $pulseEnvVars{$key} = $val;
      }
    }
  }

  return %pulseEnvVars;
}

sub pulseExec(@){
  my @command = @_;

  my $user = `whoami`;
  chomp $user;

  if($user eq 'root'){
    my $pulseUser = `ps --no-heading -o user -C pulseaudio 2>/dev/null | head -1`;
    chomp $pulseUser;

    if($pulseUser ne 'root' and length($pulseUser) > 0){
      print "rerunning as pulse user $pulseUser\n";
      exec "su", $pulseUser, "-c", "@command";
    }
  }
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my @cmds = qw(
    --print-alarms
    --print-sounds
  );
  my @opts = qw(
    -h --help
    -n --norerun
    -o --once
    -g --guess
    -v --vol --volume
    --unmute
    -b --background
    -s --sound
  );
  return (@cmds, @opts, @alarms, @sounds);
}

&main(@ARGV);
