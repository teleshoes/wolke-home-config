#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub sudoInitConfHosts($$$);
sub determineConfIP($$$);
sub absolutePath($);
sub assertBool($);
sub assertIP($);
sub assertMac($);
sub fingerprint($$);
sub ensureFingerprint($$);
sub getIpmagicNameFromConfFile($);
sub getConfFilesSymlinksLast();
sub getLocalIpmagicName();
sub parseConfig($);
sub hostsMarker($);
sub readHostsIP($);
sub setHostsIP($$);
sub sudoSetHostsIP($$);
sub getTmpFile($);
sub readTmpFile($);
sub writeTmpFile($$);
sub quickPingable($);
sub ifup($$);
sub sudoIfup($$);
sub getDefaultGatewayMac();
sub usb($$);
sub wifi($$);
sub guess($$);
sub getUsbNetworkDevices();
sub isEqual($$);
sub iwParseDevInfo();
sub whichExec($$);
sub chunkArr($@);

my $EXEC_IFCONFIG = whichExec("ifconfig", ["/sbin/ifconfig"]);
my $EXEC_IW = whichExec("iw", ["/sbin/iw", "/usr/sbin/iw"]);
my $EXEC_UDEVADM = whichExec("udevadm", ["/usr/bin/udevadm"]);
my $EXEC_HOSTNAME = whichExec("hostname", ["/bin/hostname"]);

my $REGEX_FORMAT_IPMAGIC_NAME = '[a-zA-Z0-9][a-zA-Z0-9_\-]*';

my $CONF_DIR = "$ENV{HOME}/.config/ipmagic";
my @CONF_FILES = sort grep {-e $_} glob "$CONF_DIR/*.conf";

my @IPMAGIC_NAMES = sort
  map {/^$CONF_DIR\/($REGEX_FORMAT_IPMAGIC_NAME)\.conf$/; $1}
  @CONF_FILES;

my $REGEX_EXISTING_IPMAGIC_NAMES = join("|", @IPMAGIC_NAMES);

my $DEFAULT_SSH_ARGS = "-o StrictHostKeyChecking=no";

my $DEFAULT_SSH_EXEC = "ssh";

my $DEFAULT_PRE_BASH_COMMAND = '[ -f ~/.bashrc ] && . ~/.bashrc';

my $METHOD_TMP = "tmp";
my $METHOD_USB = "usb";
my $METHOD_WIFI = "wifi";
my $METHOD_GUESS = "guess";

my @DEFAULT_METHODS = ($METHOD_TMP, $METHOD_USB, $METHOD_WIFI, $METHOD_GUESS);

my $REGEX_BYTE = "[0-9a-fA-F]{2}";
my $REGEX_MAC = join ":", ($REGEX_BYTE) x 6;
my $REGEX_IP = "\\d+\\.\\d+\\.\\d+\\.\\d+";

my $DEFAULT_RETRIES = 2;

my $SOCKS_PORT = 9090;

my $EXEC = basename $0;

my $USAGE = "Usage:
    $EXEC -h|--help
      print this usage

    $EXEC --set-hosts HOSTNAME IP
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"
      add the following to /etc/hosts: \"<IP>\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $EXEC --remove-hosts HOSTNAME
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $EXEC --ensure-fingerprint HOSTNAME IP
      -get the FINGERPRINT_HOSTNAME for HOSTNAME as in
         FINGERPRINT_HOSTNAME=`ssh-keygen -l -F <HOSTNAME>`
      -get the FINGERPRINT_IP for IP as in
         FINGERPRINT_IP=`ssh-keygen -l -F <IP>`
      -if FINGERRPINT_HOSTNAME and FINGERPRINT_IP do not match, run:
         ssh-keygen -R <IP>

    $EXEC --ifup DEV IP
      ifup the DEV with the IP

    $EXEC --list
      -print all valid <IPMAGIC_NAME>s, one per line
        -list all <CONF> files in $CONF_DIR
        -sort <CONF> files: regular files before symlinks, and shallow symlinks before deep:
          -get symlink-depth (number of paths in walk to non-symlink file)
            e.g.: regular files are symlink-depth=0
                  symlinks to regular files are symlink-depth=1
                  symlinks to symlinks to regular files are symlink-depth=2
          -sort <CONF> files by symlink-depth (ascending),
            then lexicographically (ascending)
        -extract <IPMAGIC_NAME> from filename and print it

    $EXEC --get-ipmagic-name
      -get local <HOSTNAME> with: `$EXEC_HOSTNAME`
      -get all <CONF> files, sorted regular-file-first, as in:
        $EXEC --list
      -find the first sorted <CONF> file with 'hostname' that exactly matches <HOSTNAME>:
        print <IPMAGIC_NAME>
      -if no matching <CONF> file is found:
        fail and exit with an error code

    $EXEC IPMAGIC_NAME [OPTS] --host
      print the CONF hostname and exit, doing nothing else

    $EXEC IPMAGIC_NAME [OPTS] --vnc-default-args
      print the CONF vncDefaultArgs and exit, doing nothing else

    $EXEC IPMAGIC_NAME [OPTS] --default-user
      print the CONF defaultUser and exit, doing nothing else

    $EXEC IPMAGIC_NAME [OPTS] --ip-guess
      print each CONF ipGuess, one per line, and exit, doing nothing else

    $EXEC IPMAGIC_NAME [OPTS] --ip
      -get IP_ADDRESS using the following methods, in order, until an IP is obtained:
        -method=$METHOD_TMP
          -if TMP_FILE set by '$EXEC --tmp IP' exists:
            -use IP_ADDRESS=`cat TMP_FILE`
        -method=$METHOD_USB
          -if USB_LOCAL_IP and USB_REMOTE_IP are both set in conf:
            -list network interfaces with udev ID_BUS=usb
            -select the first USB_DEV
            -if USB_DEV exists:
              -if network IP address is not set or is not USB_LOCAL_IP:
                -run: sudo $EXEC --ifup USB_DEV USB_LOCAL_IP
              -use IP_ADDRESS=USB_REMOTE_IP
        -method=$METHOD_WIFI
          -fetch the current SSID and WIFI_MAC using `$EXEC_IW dev`
            -if WIFI_MAC is not found:
              -get GATEWAY for 0.0.0.0 using `route -n`
              -get HW_ADDRESS for GATEWAY using `arp -n GATEWAY`
              -use WIFI_MAC=HW_ADDRESS
          -check all MAC_IP_ENTRY_MAC::MAC_IP_ENTRY_IP entries:
            -if an entry exists with MAC_IP_ENTRY_MAC matching WIFI_MAC:
              -use IP_ADDRESS=MAC_IP_ENTRY_IP
          -check all SSID_IP_ENTRY_SSID::SSID_IP_ENTRY_IP entries:
            -if an entry exists with SSID_IP_ENTRY_SSID matching SSID, case-insensitive:
              -use IP_ADDRESS=SSID_IP_ENTRY_IP
        -method=$METHOD_GUESS
          -fetch all IP_GUESS_ENTRIES
          -if HOSTNAME has been set as in --set-hosts or --init:
            -add current hosts IP address for HOSTNAME to list of IP_GUESS_ENTRIES
          -for each IP_GUESS in IP_GUESS_ENTRIES:
            -attempt to ping each IP_GUESS (skip if --no-guess-ping)
            -if ping is successful or skipped:
              -use IP_ADDRESS=IP_GUESS
      -if no IP_ADDRESS is found, sleep for 1s and repeat, up to RETRIES times
        (default=$DEFAULT_RETRIES)
      -print IP_ADDRESS (do not set up hosts)

    $EXEC IPMAGIC_NAME -k|--key-remove|--keygen-remove|--ssh-keygen-remove
      remove keys from known_hosts for HOSTNAME and IP
      roughly equivalent to:
        ssh-keygen -R `$EXEC IPMAGIC_NAME --host`
        ssh-keygen -R `$EXEC IPMAGIC_NAME --ip`

    $EXEC IPMAGIC_NAME [OPTS] -t|--tmp [IP]
      write IP to a tmp file, or if IP is not given, remove tmp file.
      the tmp file is read first while setting up the hosts file,
        and overrides all other methods of finding an ip
      tmp file is: /tmp/ipmagic_<CONFIG_FILE_FMT>.tmp
        where CONFIG_FILE_FMT is the abs path to the config file,
          with forward slashes \"/\" replaced with underscores \"_\"
          e.g.: /tmp/ipmagic_home_user_raspberrypi.conf.tmp

    $EXEC IPMAGIC_NAME [OPTS]
    $EXEC IPMAGIC_NAME [OPTS] --init
      -get the HOSTNAME as in:
        $EXEC IPMAGIC_NAME --host
      -generate the IP and ensure pingable as in:
        $EXEC IPMAGIC_NAME --ip
      -if IP is not found and pingable, fail and exit with an error code
      -set hostname as in:
        sudo $EXEC --set-hosts HOSTNAME IP
      -ensure fingerprints match as in:
        $EXEC --ensure-fingerprint HOSTNAME IP
      -print hostname

    $EXEC IPMAGIC_NAME [OPTS] CMD [ARG ARG..]
      same as: $EXEC IPMAGIC_NAME [OPTS] -b CMD [ARG ARG..]

    $EXEC IPMAGIC_NAME [OPTS] -s [CMD [ARG ARG..]]
      -init IP/hosts/etc as in:
        $EXEC IPMAGIC_NAME --init
      -ssh to host
        if \"CMD ARG ARG..\" is specified, it is passed to ssh
        otherwise, if DEFAULT_SSH_COMMAND is specified, it is passed to ssh
        otherwise, no command is passed to ssh

        default SSH_ARGS (passed to `ssh`): '$DEFAULT_SSH_ARGS'
        this can be overridden in the config file: 'sshArgs=SSH_ARGS'
        additional args can be given on the cmdline: '--ssh-args SSH_ARGS'

    $EXEC IPMAGIC_NAME [OPTS] --rsync [ARG ARG..]
      -init IP/hosts/etc as in:
        $EXEC IPMAGIC_NAME --init
      -run rsync, replacing ':REMOTE_FILE' with 'USER\@HOST:REMOTE_FILE'
        copy files to/from remote server with rsync
          -find the first ARG that starts with a ':' (if none, fail)
          -prefix this ARG with 'USER\@HOST'
          -run: `rsync -e \"ssh SSH_ARGS\" ARG ARG..
        e.g.:
          $EXEC dev1 --rsync -avP /tmp/abc :/tmp/
          =>
          rsync -e 'ssh $DEFAULT_SSH_ARGS' /tmp/abc user\@dev1:/tmp/

    $EXEC IPMAGIC_NAME [OPTS] --scp [ARG ARG..]
      -init IP/hosts/etc as in:
        $EXEC IPMAGIC_NAME --init
      -run rsync, replacing ':REMOTE_FILE' with 'USER\@HOST:REMOTE_FILE'
        copy files to/from remote server with scp
          -find the first ARG that starts with a ':' (if none, fail)
          -prefix this ARG with 'USER\@HOST'
          -run: `scp SSH_ARGS ... ARG ARG..
        e.g.:
          $EXEC lab3 -u root --scp :/tmp/abc /opt/
          =>
          scp $DEFAULT_SSH_ARGS root\@lab3:/tmp/abc /opt/

    $EXEC IPMAGIC_NAME [OPTS] -p|--proxy|--socks
      -same as: $EXEC IPMAGIC_NAME [OPTS] -s -N -D SOCKS_PORT
        run ssh with `-N -D $SOCKS_PORT` to act as a SOCKS server on port $SOCKS_PORT

    $EXEC IPMAGIC_NAME [OPTS] -b CMD [ARG ARG..]
      -init IP/hosts/etc as in:
        $EXEC IPMAGIC_NAME --init
      -run ssh, wrapping the command with `bash -c`
        runs the command:
          bash -c \"PRE_BASH_COMMAND; CMD ARG ARG\"

        double quotes in the CMD or ARGs are escaped

        PRE_BASH_COMMAND can be set in the config file:
        preBashCommand=PRE_BASH_COMMAND
          -default is $DEFAULT_PRE_BASH_COMMAND
          -skip setting PRE_BASH_COMMAND with empty 'preBashCommand='

        default SSH_ARGS (passed to `ssh`): '$DEFAULT_SSH_ARGS'
        this can be overridden in the config file: 'sshArgs=SSH_ARGS'
        additional args can be given on the cmdline: '--ssh-args SSH_ARGS'

    $EXEC IPMAGIC_NAME [OPTS] -b CMD [ARG ARG..]
      -init IP/hosts/etc as in:
        $EXEC IPMAGIC_NAME --init
      -run `vnc` or <vncCommand>
        -if vncCommand is present:
          run: `<vncCommand> <vncDefaultArgs> <VNC_ARGS>`
        -otherwise:
          run: `vnc IPMAGIC_NAME -u USER <vncDefaultArgs> <VNC_ARGS>`
        e.g.: `$EXEC sx -vnc --landscape --scale 0.5 --cache`

      SSH_ARGS
        default args passed to `ssh`: '$DEFAULT_SSH_ARGS'
        this can be overridden in the config file: 'sshArgs=SSH_ARGS'
        additional args can be given on the cmdline: '--ssh-args SSH_ARGS'
        additional args are appended

      DEFAULT_SSH_COMMAND
        used when no arg is given for '-s'
        specified in the config file:
          defaultSSHCommand=DEFAULT_SSH_COMMAND

      PRE_BASH_COMMAND
        -run before the argument to '-b'
        -specified in the config file:
          preBashCommand=PRE_BASH_COMMAND
        -default is $DEFAULT_PRE_BASH_COMMAND
        -skip setting PRE_BASH_COMMAND with empty 'preBashCommand='

      IPMAGIC_NAME
        -ipmagic config file identifier
          -must start with a letter or number
          -must consist only of letters, numbers, underscores, and hypens
        -one of:"
          . join('',
              map {"\n          " . join(" ", @$_)}
              chunkArr(5, @IPMAGIC_NAMES)
            )
          . "
        -use CONF_FILE:
            \"$CONF_DIR/<IPMAGIC_NAME>.conf\"

      OPTS:
        -v|--verbose        print every little thing that springs to our mouths
        -u|--user USER      ssh user
        -m|--method METHODS ordered CSV list of method for obtaining IP
                            each entry must be one of: @DEFAULT_METHODS
                            {default is '" . join(",", @DEFAULT_METHODS) . "'}
        -n|--no-guess-ping  do not check guess IP, assume success
        -g|--guess          same as '--method guess --no-guess-ping'
        -r|--retry RETRIES  retry up to <RETRIES> times when no IP found
                            (number of total attempts is 1+<RETRIES>)
                            {default is $DEFAULT_RETRIES}
        --ssh-exec SSH_EXEC use SSH_EXEC instead of `$DEFAULT_SSH_EXEC`
        --sshc              same as: --ssh-exec sshc
        --ssh-args SSH_ARGS extra SSH args for -s and -b
                            can be given multiple times, values are joined with ' '
                            e.g.:
                              --ssh-args '-L 80:localhost:81'
                              --ssh-args -L --ssh-args 80:localhost:81
        --pty               force pseudo-terminal allocation in ssh
                            same as: --ssh-args '-t -t'
";

my $CMD_SET_HOSTS = "set-hosts";
my $CMD_REMOVE_HOSTS = "remove-hosts";
my $CMD_ENSURE_FINGERPRINT = "ensure-fingeprint";
my $CMD_IFUP = "ifup";
my $CMD_LIST = "list";
my $CMD_GET_IPMAGIC_NAME = "get-ipmagic-name";
my $CMD_GET_HOST = "get-host";
my $CMD_GET_VNC_DEFAULT_ARGS = "get-vnc-default-args";
my $CMD_GET_DEFAULT_USER = "get-default-user";
my $CMD_GET_IP_GUESS = "get-ip-guess";
my $CMD_GET_IP = "get-ip";
my $CMD_KEY_REMOVE = "key-remove";
my $CMD_SET_TMP = "set-tmp";
my $CMD_INIT = "init";
my $CMD_SSH = "ssh";
my $CMD_VNC = "vnc";
my $CMD_SYNC = "sync";

my @CMDS_WITH_NO_CONF = (
  $CMD_SET_HOSTS, $CMD_REMOVE_HOSTS, $CMD_ENSURE_FINGERPRINT,
  $CMD_IFUP, $CMD_LIST, $CMD_GET_IPMAGIC_NAME,
);

my $SYNC_CMD_RSYNC = "rsync";
my $SYNC_CMD_SCP = "scp";

sub main(@){
  my %opts = (
    cmd           => undef,
    ipmagicName   => undef,
    hostname      => undef,
    ip            => undef,
    dev           => undef,
    sshCmdArgs    => [],
    syncArgs      => [],
    vncArgs       => [],
    syncCmd       => $SYNC_CMD_RSYNC,
    wrapBashCmd   => 0,
    verbose       => 0,
    user          => undef,
    methods       => [@DEFAULT_METHODS],
    no_guess_ping => 0,
    retries       => $DEFAULT_RETRIES,
    sshExec       => $DEFAULT_SSH_EXEC,
    extraSSHArgs  => [],
  );
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--set-hosts)$/ and @_ >= 2){
      $opts{cmd} = $CMD_SET_HOSTS;
      $opts{hostname} = shift @_;
      $opts{ip} = shift @_;
    }elsif($arg =~ /^(--remove-hosts)$/ and @_ >= 1){
      $opts{cmd} = $CMD_REMOVE_HOSTS;
      $opts{hostname} = shift @_;
    }elsif($arg =~ /^(--ensure-fingerprint)$/ and @_ >= 2){
      $opts{cmd} = $CMD_ENSURE_FINGERPRINT;
      $opts{hostname} = shift @_;
      $opts{ip} = shift @_;
    }elsif($arg =~ /^(--ifup)$/ and @_ >= 2){
      $opts{cmd} = $CMD_IFUP;
      $opts{dev} = shift @_;
      $opts{ip} = shift @_;
    }elsif($arg =~ /^(--list)$/){
      $opts{cmd} = $CMD_LIST;
    }elsif($arg =~ /^(--get-ipmagic-name)$/){
      $opts{cmd} = $CMD_GET_IPMAGIC_NAME;
    }elsif($arg =~ /^($REGEX_EXISTING_IPMAGIC_NAMES)$/){
      die "$USAGE\nERROR: IPAMGIC_NAME already defined\n" if defined $opts{ipmagicName};
      $opts{ipmagicName} = $arg;
    }elsif($arg =~ /^(--init)$/){
      $opts{cmd} = $CMD_INIT;
    }elsif($arg =~ /^(--host)$/){
      $opts{cmd} = $CMD_GET_HOST;
    }elsif($arg =~ /^(--vnc-default-args)$/){
      $opts{cmd} = $CMD_GET_VNC_DEFAULT_ARGS;
    }elsif($arg =~ /^(--default-user)$/){
      $opts{cmd} = $CMD_GET_DEFAULT_USER;
    }elsif($arg =~ /^(--ip-guess)$/){
      $opts{cmd} = $CMD_GET_IP_GUESS;
    }elsif($arg =~ /^(--ip)$/){
      $opts{cmd} = $CMD_GET_IP;
    }elsif($arg =~ /^(-k|--key-remove|--keygen-remove|--ssh-keygen-remove)$/){
      $opts{cmd} = $CMD_KEY_REMOVE;
    }elsif($arg =~ /^(-t|--tmp)$/){
      $opts{cmd} = $CMD_SET_TMP;
      if(@_ >= 1){
        $opts{ip} = shift @_;
      }
    }elsif($arg =~ /^(-s)$/){
      $opts{cmd} = $CMD_SSH;
      $opts{sshCmdArgs} = [@_];
      @_ = ();
    }elsif($arg =~ /^(--rsync)$/){
      $opts{cmd} = $CMD_SYNC;
      $opts{syncCmd} = $SYNC_CMD_RSYNC;
      $opts{syncArgs} = [@_];
      @_ = ();
    }elsif($arg =~ /^(--scp)$/){
      $opts{cmd} = $CMD_SYNC;
      $opts{syncCmd} = $SYNC_CMD_SCP;
      $opts{syncArgs} = [@_];
      @_ = ();
    }elsif($arg =~ /^(-p|--proxy|--socks)$/ and @_ == 0){
      $opts{cmd} = $CMD_SSH;
      $opts{sshCmdArgs} = ["-N", "-D", $SOCKS_PORT];
    }elsif($arg =~ /^(-b)$/){
      $opts{cmd} = $CMD_SSH;
      $opts{wrapBashCmd} = 1;
      $opts{sshCmdArgs} = [@_];
      @_ = ();
    }elsif($arg =~ /^(-vnc)$/){
      $opts{cmd} = $CMD_VNC;
      $opts{vncArgs} = [@_];
      @_ = ();
    }elsif($arg =~ /^(-v|--verbose)$/){
      $opts{verbose} = 1;
    }elsif($arg =~ /^(-u|--user)$/ and @_ >= 1){
      $opts{user} = shift @_;
    }elsif($arg =~ /^(-m|--method)$/ and @_ >= 1){
      my $methodCsv = shift @_;
      $opts{methods} = [split(",", $methodCsv)];
    }elsif($arg =~ /^(-n|--no-guess-ping)$/){
      $opts{no_guess_ping} = 1;
    }elsif($arg =~ /^(-g|--guess)$/){
      $opts{methods} = [$METHOD_GUESS];
      $opts{no_guess_ping} = 1;
    }elsif($arg =~ /^(-r|--retry)$/ and @_ >= 1 and $_[0] =~ /^\d+$/){
      $opts{retries} = shift @_;
    }elsif($arg =~ /^(--ssh-exec)$/ and @_ >= 1){
      $opts{sshExec} = shift @_;
    }elsif($arg =~ /^(--sshc)$/){
      $opts{sshExec} = "sshc";
    }elsif($arg =~ /^(--ssh-args)$/ and @_ >= 1){
      my $sshArgsStr = shift @_;
      $opts{extraSSHArgs} = [@{$opts{extraSSHArgs}}, split /\s+/, $sshArgsStr];
    }elsif($arg =~ /^(--pty)$/){
      $opts{extraSSHArgs} = [@{$opts{extraSSHArgs}}, "-t", "-t"];
    }elsif(defined $opts{ipmagicName} and not defined $opts{cmd}){
      $opts{cmd} = $CMD_SSH;
      $opts{wrapBashCmd} = 1;
      $opts{sshCmdArgs} = [$arg, @_];
      @_ = ();
    }else{
      die "ERROR: unknown arg $arg\n";
    }
  }

  $opts{cmd} = $CMD_INIT if not defined $opts{cmd};

  my $regexNoConfCmds = join("|", @CMDS_WITH_NO_CONF);

  my $ipmagicName;
  my $confFile;
  my %config;
  if(defined $opts{ipmagicName}){
    if($opts{cmd} =~ /^($regexNoConfCmds)$/){
      die "ERROR: cannot specify IPMAGIC_NAME for $opts{cmd}\n";
    }

    $ipmagicName = $opts{ipmagicName};
    if($ipmagicName !~ /^($REGEX_FORMAT_IPMAGIC_NAME)$/){
      die "$USAGE\nERROR: unknown IPMAGIC_NAME '$ipmagicName'\n"
        . "  one of: $REGEX_EXISTING_IPMAGIC_NAMES\n";
    }
    $confFile = absolutePath "$CONF_DIR/$ipmagicName.conf";

    die "$USAGE\nERROR: Could not parse IPMAGIC_NAME $ipmagicName\n" if not defined $confFile;
    die "$USAGE\nERROR: \"$confFile\" is not a file\n" if not -f $confFile;

    %config = %{parseConfig $confFile};

    die "ERROR: hostname not defined in $confFile\n" if not defined $config{hostname};

    if(not defined $opts{user}){
      $opts{user} = defined $config{defaultUser} ? $config{defaultUser} : 'root';
    }
  }else{
    if($opts{cmd} !~ /^($regexNoConfCmds)$/){
      die "ERROR: must specify IPMAGIC_NAME for $opts{cmd}\n";
    }
  }

  if($opts{cmd} eq $CMD_SET_HOSTS){
    setHostsIP $opts{hostname}, $opts{ip};
  }elsif($opts{cmd} eq $CMD_REMOVE_HOSTS){
    setHostsIP $opts{hostname}, undef;
  }elsif($opts{cmd} eq $CMD_ENSURE_FINGERPRINT){
    ensureFingerprint($opts{hostname}, $opts{ip});
  }elsif($opts{cmd} eq $CMD_IFUP){
    ifup $opts{dev}, $opts{ip};
  }elsif($opts{cmd} eq $CMD_LIST){
    my @ipmagicNames = map {getIpmagicNameFromConfFile($_)} getConfFilesSymlinksLast();
    print "$_\n" foreach @ipmagicNames;
  }elsif($opts{cmd} eq $CMD_GET_IPMAGIC_NAME){
    my $ipmagicName = getLocalIpmagicName();
    if(defined $ipmagicName){
      print "$ipmagicName\n";
    }else{
      die "ERROR: could not find matching CONF file\n";
    }
  }elsif($opts{cmd} eq $CMD_GET_HOST){
    print "$config{hostname}\n";
  }elsif($opts{cmd} eq $CMD_GET_VNC_DEFAULT_ARGS){
    if(defined $config{vncDefaultArgs}){
      print "$config{vncDefaultArgs}\n";
    }
  }elsif($opts{cmd} eq $CMD_GET_DEFAULT_USER){
    print "$config{defaultUser}\n" if defined $config{defaultUser};
    exit 0;
  }elsif($opts{cmd} eq $CMD_GET_IP_GUESS){
    my @ipGuessList = @{$config{ipGuessList}} if defined $config{ipGuessList};
    print "$_\n" foreach @ipGuessList;
    exit 0;
  }elsif($opts{cmd} eq $CMD_GET_IP){
    my $ip = determineConfIP(\%config, \%opts, $confFile);
    if(defined $ip){
      print "$ip\n";
      exit(0);
    }else{
      exit(1);
    }
  }elsif($opts{cmd} eq $CMD_KEY_REMOVE){
    print "removing key for $config{hostname}\n";
    system "ssh-keygen", "-R", $config{hostname};
    print "fetching IP for $config{hostname}\n";
    my $ip = `$0 $ipmagicName --ip`;
    chomp $ip;
    if($ip =~ /^$REGEX_IP$/){
      print "removing key for $ip\n";
      system "ssh-keygen", "-R", $ip;
    }else{
      die "failed to fetch IP\n";
    }
  }elsif($opts{cmd} eq $CMD_SET_TMP){
    my $ip = undef;
    $ip = $opts{ip} if defined $opts{ip};
    writeTmpFile $confFile, $ip;
  }elsif($opts{cmd} eq $CMD_INIT){
    my $ip = sudoInitConfHosts(\%config, \%opts, $confFile);

    print "$config{hostname}\n";
  }elsif($opts{cmd} eq $CMD_SSH){
    my $ip = sudoInitConfHosts(\%config, \%opts, $confFile);

    my @sshCmdArgs = @{$opts{sshCmdArgs}};
    if(@sshCmdArgs == 0 and defined $config{defaultSSHCommand}){
      @sshCmdArgs = ($config{defaultSSHCommand});
    }

    if($opts{wrapBashCmd}){
      if(@sshCmdArgs == 0){
        die "$USAGE\nERROR: must specify CMD for -b\n";
      }
      my $cmdStr = "@sshCmdArgs";
      $cmdStr =~ s/"/\\"/g;

      my $preBashCmd = $config{preBashCommand};
      $preBashCmd = $DEFAULT_PRE_BASH_COMMAND if not defined $preBashCmd;

      if(length $preBashCmd > 0){
        $cmdStr = "bash -c \"$preBashCmd; $cmdStr\"";
      }else{
        $cmdStr = "bash -c \"$cmdStr\"";
      }
      @sshCmdArgs = ($cmdStr);
    }


    my @sshCmd = ($opts{sshExec});
    if(defined $config{sshArgs}){
      @sshCmd = (@sshCmd, split /\s+/, $config{sshArgs});
    }else{
      @sshCmd = (@sshCmd, split /\s+/, $DEFAULT_SSH_ARGS);
    }

    @sshCmd = (@sshCmd, @{$opts{extraSSHArgs}});

    push @sshCmd, "$opts{user}\@$config{hostname}";

    @sshCmd = (@sshCmd, @sshCmdArgs);
    print "@sshCmd\n" if $opts{verbose};
    exec @sshCmd;
  }elsif($opts{cmd} eq $CMD_VNC){
    my $ip = sudoInitConfHosts(\%config, \%opts, $confFile);

    my $vncCmd;
    if(defined $config{vncCommand}){
      $vncCmd = $config{vncCommand};
    }else{
      $vncCmd = "vnc $ipmagicName -u $opts{user}";
    }
    if(defined $config{vncDefaultArgs}){
      $vncCmd .= " $config{vncDefaultArgs}";
    }
    $vncCmd .= join(" ", @{$opts{vncArgs}});

    print "$vncCmd\n" if $opts{verbose};
    exec $vncCmd;
  }elsif($opts{cmd} eq $CMD_SYNC){
    my $ip = sudoInitConfHosts(\%config, \%opts, $confFile);

    my @sshArgs;
    if(defined $config{sshArgs}){
      @sshArgs = (@sshArgs, split /\s+/, $config{sshArgs});
    }else{
      @sshArgs = (@sshArgs, split /\s+/, $DEFAULT_SSH_ARGS);
    }

    @sshArgs = (@sshArgs, @{$opts{extraSSHArgs}});

    my @cmd;
    if($opts{syncCmd} eq $SYNC_CMD_RSYNC){
      @cmd = ("rsync", "-e", "$opts{sshExec} @sshArgs");
    }elsif($opts{syncCmd} eq $SYNC_CMD_SCP){
      @cmd = ("scp", @sshArgs);
    }else{
      die "ERROR: unknown sync cmd \"$opts{syncCmd}\"\n";
    }

    my @syncArgs = @{$opts{syncArgs}};

    my $remoteFileFound = 0;
    for my $arg(@syncArgs){
      if(not $remoteFileFound and $arg =~ /^:/){
        push @cmd, "$opts{user}\@$config{hostname}$arg";
        $remoteFileFound = 1;
      }else{
        push @cmd, $arg;
      }
    }
    if(not $remoteFileFound){
      die "ERROR: no remote file found in rsync/scp args \"@syncArgs\"\n";
    }

    print "@cmd\n" if $opts{verbose};
    exec @cmd;
  }else{
    die "ERROR: unknown command $opts{cmd}\n";
  }
}

sub sudoInitConfHosts($$$){
  my ($config, $opts, $confFile) = @_;

  my $ip = determineConfIP($config, $opts, $confFile);
  sudoSetHostsIP $$config{hostname}, $ip;
  die "ERROR: no IP found\n" if not defined $ip;
  ensureFingerprint($$config{hostname}, $ip);

  return $ip;
}

sub determineConfIP($$$){
  my ($config, $opts, $confFile) = @_;

  print STDERR "WARNING: no ifconfig exec found\n" if not defined $EXEC_IFCONFIG;
  print STDERR "WARNING: no iw exec found\n" if not defined $EXEC_IW;

  my $attempts = 1 + $$opts{retries};

  my $ip;
  while(not defined $ip and $attempts > 0){
    for my $method(@{$$opts{methods}}){
      if($method eq $METHOD_TMP){
        $ip = readTmpFile($confFile);
      }elsif($method eq $METHOD_USB){
        $ip = usb($config, $opts);
      }elsif($method eq $METHOD_WIFI){
        $ip = wifi($config, $opts);
      }elsif($method eq $METHOD_GUESS){
        $ip = guess($config, $opts);
      }else{
        die "ERROR: unknown method $method\n";
      }

      if(defined $ip){
        last;
      }
    }

    $attempts--;
    if(not defined $ip and $attempts > 0){
      my $msg = "No IP found, retrying after 1s ($attempts attempts left)\n";
      print STDERR $msg;
      sleep 1;
    }
  }

  return $ip;
}

sub absolutePath($){
  my $relPath = shift;
  $relPath =~ s/"/""/g;

  my $absPath;

  $absPath = `readlink -m "$relPath" 2>/dev/null`;
  chomp $absPath;
  $absPath = undef if $absPath =~ /^\s*$/;

  if(not defined $absPath){
    # this readlink probably doesnt support -m
    $absPath = `readlink -f "$relPath"`;
    chomp $absPath;
    $absPath = undef if $absPath =~ /^\s*$/;
  }

  return $absPath;
}

sub assertBool($){
  my $bool = shift;
  if($bool !~ /^(true|false)$/i){
    die "'$bool' is not 'true' or 'false'\n"
  }
}

sub assertIP($){
  my $ip = shift;
  if($ip !~ /^$REGEX_IP$/){
    die "'$ip' is not an ip4 address\n"
  }
}

sub assertMac($){
  my $mac = shift;
  if($mac !~ /^$REGEX_MAC$/i){
    die "'$mac' is not a mac address\n"
  }
}

sub fingerprint($$){
  my ($host, $algorithm) = @_;
  my $key = `ssh-keygen -l -E sha256 -F $host`;
  if($key =~ /^$host $algorithm SHA256:(.+)$/m){
    return $1;
  }else{
    return undef;
  }
}

sub ensureFingerprint($$){
  my ($hostname, $ip) = @_;
  for my $algorithm(qw(ED25519 ECDSA RSA)){
    my $hnFp = fingerprint $hostname, $algorithm;
    my $ipFp = fingerprint $ip, $algorithm;
    if(defined $ipFp and (not defined $hnFp or $hnFp ne $ipFp)){
      print "WARNING: $algorithm fingerprints differ for $hostname and $ip\n";
      print "removing known_hosts entry for $ip\n";
      system "ssh-keygen", "-R", $ip;
    }
  }
}

sub getConfFilesSymlinksLast(){
  my %symlinkDepth;
  for my $confFile(@CONF_FILES){
    $symlinkDepth{$confFile} = 0;
    my $f = $confFile;
    while(-l $f){
      $symlinkDepth{$confFile}++;
      last if $symlinkDepth{$confFile} >= 40;
      $f = readlink $f;
      if($f !~ /^\//){
        $f = "$CONF_DIR/$f";
      }
    }
  }

  my @sortedConfFiles = sort {
    $symlinkDepth{$a} <=> $symlinkDepth{$b} #regular files first, deepest symlinks last
    or $a cmp $b                            #lexicographically otherwise
  } @CONF_FILES;

  return @sortedConfFiles;
}

sub getIpmagicNameFromConfFile($){
  my ($confFile) = @_;
  if($confFile =~ /^(?:.*\/)?($REGEX_FORMAT_IPMAGIC_NAME)\.conf$/){
    return $1;
  }else{
    die "ERROR: malformed CONF file $confFile\n";
  }
}

sub getLocalIpmagicName(){
  my @CONF_FILES = getConfFilesSymlinksLast();

  my $hostname = `$EXEC_HOSTNAME`;
  chomp $hostname;

  if($hostname !~ /\w/){
    die "ERROR: could not get hostname with `$EXEC_HOSTNAME`\n";
  }

  my $matchingIpmagicName = undef;
  for my $confFile(@CONF_FILES){
    my $ipmagicName = getIpmagicNameFromConfFile($confFile);
    my $config = parseConfig $confFile;
    if($$config{hostname} eq $hostname){
      $matchingIpmagicName = $ipmagicName;
      last;
    }
  }

  return $matchingIpmagicName;
}

sub parseConfig($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open conf $file\n";
  my @lines = <FH>;
  close FH;

  my %mapKeys = map {$_ => 1} qw(macIp ssidIp);
  my %listKeys = map {$_ => 1} qw(mac ipGuess);
  my %singleKeys = map {$_ => 1} qw(
    hostname vncCommand vncDefaultArgs defaultUser
    usbLocalIp usbRemoteIp sshArgs defaultSSHCommand preBashCommand
  );
  my %assertBool = map {$_ => 1} qw();
  my %assertIp = map {$_ => 1} qw(ipGuess usbLocalIp usbRemoteIp);
  my %assertMac = map {$_ => 1} qw(mac);
  my %assertIpLeft = map {$_ => 1} qw();
  my %assertMacLeft = map {$_ => 1} qw(macIp);
  my %assertIpRight = map {$_ => 1} qw(macIp ssidIp);
  my %assertMacRight = map {$_ => 1} qw();

  my %config;
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    die "Malformed conf: $line\n" if $line !~ /^\s*([a-z]+)\s*=\s*(.*?)\s*$/i;
    my ($key, $val) = ($1, $2);

    if(defined $mapKeys{$key}){
      if($val !~ /^ \s* (\S* | "[^"]*" ) \s* :: \s* (\S* | "[^"]*") \s*$/x){
        die "Malformed map conf entry $key = $val\n";
      }
      my ($valLeft, $valRight) = ($1, $2);
      assertIP $valLeft if defined $assertIpLeft{$key};
      assertMac $valLeft if defined $assertMacLeft{$key};
      assertIP $valRight if defined $assertIpRight{$key};
      assertMac $valRight if defined $assertMacRight{$key};

      $key .= "Map";
      $config{$key} = {} if not defined $config{$key};
      ${$config{$key}}{$valLeft} = $valRight;
    }elsif(defined $listKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      $key .= "List";
      $config{$key} = [] if not defined $config{$key};
      push @{$config{$key}}, $val;
    }elsif(defined $singleKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      die "Duplicate single conf entry $key\n" if defined $config{$key};
      $config{$key} = $val;
    }else{
      die "Unknown conf entry: $key\n";
    }
  }

  return \%config;
}

sub hostsMarker($){
  my $hostname = shift;
  return "ipmagic:$hostname";
}

sub readHostsIP($){
  my $hostname = shift;
  my $hostsMarker = hostsMarker $hostname;
  for my $line(`cat /etc/hosts`){
    if($line =~ /^($REGEX_IP)\s*$hostname\s*#$hostsMarker$/){
      return $1;
    }
  }
  return undef;
}

sub setHostsIP($$){
  my ($hostname, $ip) = @_;
  my $hostsMarker = hostsMarker $hostname;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  my $newFmt = defined $ip ? $ip : "[NONE]";
  my $oldFmt = defined $oldIP ? $oldIP : "[NONE]";
  my $action = defined $ip ? "updating" : "deleting";
  print STDERR "$action $hostname in /etc/hosts $oldFmt=>$newFmt\n";

  my @lines = `cat /etc/hosts`;
  for my $line(@lines){
    if($line =~ /^($REGEX_IP)\s*$hostname\s*#$hostsMarker$/){
      $line = '';
    }
  }
  if(defined $ip){
    if($ip =~ /^$REGEX_IP$/){
      push @lines, "$ip\t$hostname#$hostsMarker\n";
    }else{
      die "malformed ip: $ip\n";
    }
  }

  open FH, "> /etc/hosts" or die "Couldnt open /etc/hosts for writing\n";
  print FH @lines;
  close FH;
}
sub sudoSetHostsIP($$){
  my ($hostname, $ip) = @_;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  if(defined $ip){
    system "sudo", $0, "--set-hosts", $hostname, $ip;
  }else{
    system "sudo", $0, "--remove-hosts", $hostname;
  }
}

sub getTmpFile($){
  my $confFile = shift;
  my $tmpFile = $confFile;
  $tmpFile =~ tr/\//_/;
  $tmpFile = "/tmp/ipmagic$tmpFile.tmp";
  return $tmpFile;
}
sub readTmpFile($){
  my $confFile = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not -e $tmpFile){
    return undef;
  }else{
    open FH, "< $tmpFile" or die "Couldnt read $tmpFile\n";
    my $val = join '', <FH>;
    close FH;
    chomp $val;
    return $val;
  }
}
sub writeTmpFile($$){
  my $confFile = shift;
  my $val = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not defined $val){
    if(-e $tmpFile){
      system "rm", $tmpFile;
      die "Couldnt remove $tmpFile\n" if $? != 0;
    }
  }else{
    open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
    print FH "$val\n";
    close FH;
  }
}

sub quickPingable($){
  system "ping $_[0] -c 1 -w 1 >/dev/null 2>/dev/null";
  return $? == 0;
}

sub ifup($$){
  my ($dev, $ip) = @_;
  system "$EXEC_IFCONFIG"
    . " $dev $ip netmask 255.255.255.0 up"
    . " > /dev/null"
    ;
}
sub sudoIfup($$){
  my ($dev, $ip) = @_;
  system "sudo", $0, "--ifup", $dev, $ip;
}

sub getDefaultGatewayMac(){
  my $route = `route -n`;
  if($route =~ /^0\.0\.0\.0\s*($REGEX_IP)/m){
    my $ip = $1;
    my $arp = `arp -n $ip`;
    if($arp =~ /^$ip\s*[a-zA-Z0-9_]+\s*($REGEX_MAC)/m){
      return $1;
    }
  }
  return undef;
}

sub usb($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{usbLocalIp} or not defined $config{usbRemoteIp}){
    return undef;
  }
  print "Trying usb\n" if $opts{verbose};
  my $localIp = $config{usbLocalIp};
  my $remoteIp = $config{usbRemoteIp};

  my @usbNetworkDevices = getUsbNetworkDevices();

  #use the first usb network interface device
  my $dev = $usbNetworkDevices[0] if @usbNetworkDevices > 0;

  if(defined $dev){
    my $ifconfig = `$EXEC_IFCONFIG $dev`;
    if($ifconfig !~ /inet (addr:)?$localIp/){
      print STDERR "USB DEVICE UP\n";
      sudoIfup $dev, $localIp;
    }
    print "  using USB device $dev\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $remoteIp;
  }

  return undef;
}

sub wifi($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{macIpMap} and not defined $config{ssidIpMap}){
    return undef;
  }

  my %macIpMap = %{$config{macIpMap}} if defined $config{macIpMap};
  my %ssidIpMap = %{$config{ssidIpMap}} if defined $config{ssidIpMap};

  my $iwDevs = iwParseDevInfo();
  my $mac = "<none>";
  my $ssid = "<none>";
  if(@$iwDevs > 0){
    my $iwDev = $$iwDevs[0];
    $mac = $$iwDev{addr} if defined $$iwDev{addr};
    $ssid = $$iwDev{ssid} if defined $$iwDev{ssid};
  }

  print "Trying wifi  {mac: $mac   ssid: $ssid}\n" if $opts{verbose};

  if($mac eq '<none>'){
    my $gwMac = getDefaultGatewayMac();
    $mac = $gwMac if defined $gwMac;
  }

  my $macIp;
  for my $macConfig(sort keys %macIpMap){
    if(lc $mac eq lc $macConfig){
      $macIp = $macIpMap{$macConfig};
      last;
    }
  }

  my $ssidIp;
  for my $ssidConfig(sort keys %ssidIpMap){
    if(lc $ssid eq lc $ssidConfig){
      $ssidIp = $ssidIpMap{$ssidConfig};
      last;
    }
  }

  if(defined $macIp){
    print "  chose IP $macIp by mac\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $macIp;
  }elsif(defined $ssidIp){
    print "  chose IP $ssidIp by ssid\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $ssidIp;
  }

  return undef;
}

sub guess($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  my $hostname = $config{hostname};
  if(defined $config{ipGuessList}){
    print "Trying guesses\n" if $opts{verbose};
    for my $ip(@{$config{ipGuessList}}){
      print "  guess $ip\n" if $opts{verbose};
      if($opts{no_guess_ping}){
        print "  success (skipped ping)\n" if $opts{verbose};
        return $ip;
      }elsif(quickPingable $ip){
        print "  success!\n" if $opts{verbose};
        return $ip;
      }
    }
  }

  my $oldIP = readHostsIP $config{hostname};
  if(defined $oldIP){
    print "  guess $oldIP (old hosts IP)\n" if $opts{verbose};
    if($opts{no_guess_ping}){
      print "  success (skipped ping)\n" if $opts{verbose};
      return $oldIP;
    }elsif(quickPingable $oldIP){
      print "  success!\n" if $opts{verbose};
      return $oldIP;
    }
  }

  return undef;
}

sub getUsbNetworkDevices(){
  my $ifconfig = `$EXEC_IFCONFIG -a`;
  my @devs = $ifconfig =~ /^(\w+):/mg;
  my @usbNetworkDevices;
  for my $dev(@devs){
    my $udevInfo = `$EXEC_UDEVADM info /sys/class/net/$dev`;
    if($udevInfo =~ /ID_BUS=usb/){
      push @usbNetworkDevices, $dev;
    }
  }
  return @usbNetworkDevices;
}

sub isEqual($$){
  if(not defined $_[0] and not defined $_[1]){
    return 1;
  }elsif(not defined $_[0] or not defined $_[1]){
    return 0;
  }else{
    return $_[0] eq $_[1] ? 1 : 0;
  }
}

sub iwParseDevInfo(){
  my $devs = [];
  if(defined $EXEC_IW){
    my @lines = `$EXEC_IW dev`;
    my $curDev = undef;
    for my $line(@lines){
      if($line =~ /^\s*Interface\s*(wl\w+)$/){
        my ($devName) = $1;

        $curDev = {};
        push @$devs, $curDev;

        $$curDev{devName} = $devName;
      }elsif($line =~ /^\s*(ssid|addr|type|channel)\s*(.+)$/ and defined $curDev){
        my ($att, $val) = ($1, $2);
        $$curDev{$att} = $val;
      }
    }
  }

  return $devs;
}

sub whichExec($$){
  my ($execName, $execPathGuesses) = @_;

  for my $exec(@$execPathGuesses){
    if(-x $exec){
      return $exec;
    }
  }

  my $exec = `which $execName 2>/dev/null`;
  chomp $exec;
  if(-x $exec){
    return $exec;
  }else{
    return undef;
  }
}

sub chunkArr($@){
  my ($chunkSize, @items) = @_;
  die "ERROR: invalid chunk size $chunkSize\n" if $chunkSize < 1;
  my @arrs;
  my $curArr;
  for my $item(@items){
    if(not defined $curArr){
      $curArr = [];
      push @arrs, $curArr;
    }
    push @$curArr, $item;
    if(@$curArr >= $chunkSize){
      $curArr = undef;
    }
  }
  return @arrs;
}

&main(@ARGV);
