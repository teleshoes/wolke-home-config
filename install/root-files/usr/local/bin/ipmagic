#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub absolutePath($);
sub assertBool($);
sub assertIP($);
sub assertMac($);
sub fingerprint($);
sub ensureFingerprint($$);
sub getConfNameFromConfFile($);
sub getConfFilesSymlinksLast();
sub getLocalIpmagicName();
sub parseConfig($);
sub hostsMarker($);
sub readHostsIP($);
sub setHostsIP($$);
sub sudoSetHostsIP($$);
sub getTmpFile($);
sub readTmpFile($);
sub writeTmpFile($$);
sub quickPingable($);
sub ifup($$);
sub sudoIfup($$);
sub getDefaultGatewayMac();
sub usb($$);
sub wifi($$);
sub guess($$);
sub isEqual($$);
sub iwParseDevInfo();
sub whichExec($$);

my $EXEC_IFCONFIG = whichExec("ifconfig", ["/sbin/ifconfig"]);
my $EXEC_IW = whichExec("iw", ["/sbin/iw", "/usr/sbin/iw"]);
my $EXEC_HOSTNAME = whichExec("hostname", ["/bin/hostname"]);

my $CONF_DIR = "$ENV{HOME}/.config/ipmagic";
my @CONF_FILES = sort grep {-e $_} glob "$CONF_DIR/*.conf";
my @CONF_NAMES = sort map {/^$CONF_DIR\/([^\/]+)\.conf$/; $1} @CONF_FILES;

my $DEFAULT_SSH_ARGS = "-o StrictHostKeyChecking=no";

my $DEFAULT_SSH_EXEC = "ssh";

my $DEFAULT_PRE_BASH_COMMAND = '[ -f ~/.bashrc ] && . ~/.bashrc';

my $OK_METHODS = join "|", qw(any tmp usb wifi guess);

my $REGEX_BYTE = "[0-9a-fA-F]{2}";
my $REGEX_MAC = join ":", ($REGEX_BYTE) x 6;
my $REGEX_IP = "\\d+\\.\\d+\\.\\d+\\.\\d+";

my $DEFAULT_RETRIES = 2;

my $SOCKS_PORT = 9090;

my $EXEC = basename $0;

my $USAGE = "Usage:
    $EXEC -h|--help
      print this usage

    $EXEC --set-hosts HOSTNAME IP
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"
      add the following to /etc/hosts: \"<IP>\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $EXEC --remove-hosts HOSTNAME
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $EXEC --ifup DEV IP
      ifup the DEV with the IP

    $EXEC --list
      -list all <CONF> files
      -extract CONF from filename

    $EXEC --get-ipmagic-name
      get local <HOSTNAME> with: `$EXEC_HOSTNAME`
      get all <CONF> files that match: \"$CONF_DIR/<CONFNAME>.conf\"
      sort <CONF> files: regular files before symlinks, and shallow symlinks before deep:
          get symlink-depth (number of paths in walk to non-symlink file)
            e.g.: regular files are symlink-depth=0
                  symlinks to regular files are symlink-depth=1
                  symlinks to symlinks to regular files are symlink-depth=2
          sort <CONF> files by symlink-depth (ascending),
            then lexicographically (ascending)
      find the first sorted <CONF> file with 'hostname' that exactly matches <HOSTNAME>
        print <CONFNAME>
      if no matching <CONF> file is found, fail and exit with an error code

    $EXEC CONF [OPTS]
      generate the IP, ensure its ping-able, setup hosts file, init devices
      if IP is found, print the hostname and exit normally
      if IP is NOT found, fail and exit with an error code

    $EXEC CONF [OPTS] --host
      print the CONF hostname and exit, doing nothing else

    $EXEC CONF [OPTS] --vnc-default-args
      print the CONF vncDefaultArgs and exit, doing nothing else

    $EXEC CONF [OPTS] --default-user
      print the CONF defaultUser and exit, doing nothing else

    $EXEC CONF [OPTS] --ip-guess
      print each CONF ipGuess, one per line, and exit, doing nothing else

    $EXEC CONF [OPTS] --ip
      setup method, print the IP, and exit {dont set up hosts}

    $EXEC CONF -k|--key-remove|--keygen-remove|--ssh-keygen-remove
      remove keys from known_hosts for HOSTNAME and IP
      roughly equivalent to:
        ssh-keygen -R `$EXEC CONF --host`
        ssh-keygen -R `$EXEC CONF --ip`

    $EXEC CONF [OPTS] -t|--tmp [IP]
      write IP to a tmp file, or if IP is not given, remove tmp file.
      the tmp file is read first while setting up the hosts file,
        and overrides all other methods of finding an ip
      tmp file is: /tmp/ipmagicCONFIG_FILE.tmp
        where CONFIG_FILE is the abs path to the config file,
          with forward slashes \"/\" replaced with underscores \"_\"
          e.g.: /tmp/ipmagic_home_user_raspberrypi.conf.tmp

    $EXEC CONF [OPTS] [ACTION]
      setup hosts file, init devices, and optionally perform an action
      ACTIONS:
        CMD [ARG ARG..]     same as: -b CMD [ARG ARG..]

        -s [CMD ARG ARG..]  ssh to host
                            if \"CMD ARG ARG..\" is specified, it is passed to ssh
                            otherwise, if DEFAULT_SSH_COMMAND is specified, it is passed to ssh
                            otherwise, no command is passed to ssh

                            default SSH_ARGS (passed to `ssh`): '$DEFAULT_SSH_ARGS'
                            this can be overridden in the config file: 'sshArgs=SSH_ARGS'
                            additional args can be given on the cmdline: '--ssh-args SSH_ARGS'

        --rsync [ARG ARG..] copy files to/from remote server with rsync
                              -find the first ARG that starts with a ':' (if none, fail)
                              -prefix this ARG with 'USER\@HOST'
                              -run: `rsync -e \"ssh SSH_ARGS\" ARG ARG..
                            e.g.:
                              $EXEC dev1 --rsync -avP /tmp/abc :/tmp/
                              =>
                              rsync -e 'ssh $DEFAULT_SSH_ARGS' /tmp/abc user\@dev1:/tmp/

        --scp [ARG ARG..] copy files to/from remote server with scp
                              -find the first ARG that starts with a ':' (if none, fail)
                              -prefix this ARG with 'USER\@HOST'
                              -run: `scp SSH_ARGS ... ARG ARG..
                            e.g.:
                              $EXEC lab3 -u root --scp :/tmp/abc /opt/
                              =>
                              scp $DEFAULT_SSH_ARGS root\@lab3:/tmp/abc /opt/

        -p|--proxy|--socks  run ssh with `-N -D $SOCKS_PORT` to act as a SOCKS server
                            on port $SOCKS_PORT

        -b CMD [ARG ARG..]  if IGNORE_BASH_COMMAND is 'true', runs this command:
                              bash -c \"CMD ARG ARG\"
                            otherwise, runs the command:
                              bash -c \"PRE_BASH_COMMAND; CMD ARG ARG\"

                            double quotes in the CMD or ARGs are escaped

                            IGNORE_BASH_COMMAND is 'true' or 'false, and
                            can be set in the config file:
                            ignoreBashCommand=IGNORE_BASH_COMMAND
                            {default is 'true'}

                            PRE_BASH_COMMAND can be set in the config file:
                            preBashCommand=PRE_BASH_COMMAND
                            {default is $DEFAULT_PRE_BASH_COMMAND}

                            default SSH_ARGS (passed to `ssh`): '$DEFAULT_SSH_ARGS'
                            this can be overridden in the config file: 'sshArgs=SSH_ARGS'
                            additional args can be given on the cmdline: '--ssh-args SSH_ARGS'

        -vnc [VNC_ARGS]     -if vncCommand is present:
                              run: `<vncCommand> <vncDefaultArgs> <VNC_ARGS>`
                            -otherwise:
                              run: `vnc CONF -u USER <vncDefaultArgs> <VNC_ARGS>`
                            e.g.: `$EXEC sx -vnc --landscape --scale 0.5 --cache`

        SSH_ARGS
          default args passed to `ssh`: '$DEFAULT_SSH_ARGS'
          this can be overridden in the config file: 'sshArgs=SSH_ARGS'
          additional args can be given on the cmdline: '--ssh-args SSH_ARGS'
          additional args are appended

        DEFAULT_SSH_COMMAND
          used when no arg is given for '-s'
          specified in the config file:
            defaultSSHCommand=DEFAULT_SSH_COMMAND

        PRE_BASH_COMMAND
          run before the argument to '-b'
          specified in the config file:
            preBashCommand=PRE_BASH_COMMAND

      CONF:
        ipmagic config file
          -can be either a full path to a file, or a <CONFNAME>
          -<CONFNAME> must start with a letter or number,
             and consist only of letters, numbers, underscores, and hypens
          -if <CONFNAME> is given, use:
            \"$CONF_DIR/<CONFNAME>.conf\"
          -valid <CONFNAMES>:
            @CONF_NAMES

      OPTS:
        -v|--verbose        print every little thing that springs to our mouths
        -u|--user USER      ssh user
        -m|--method METHOD  method of obtaining IP
                            one of [$OK_METHODS]  {default is 'any'}
        -n|--no-guess-ping  do not check guess IP, assume success
        -g|--guess          same as '--method guess --no-guess-ping'
        -r|--retry RETRIES  retry up to <RETRIES> times when no IP found
                            (number of total attempts is 1+<RETRIES>)
                            {default is $DEFAULT_RETRIES}
        --ssh-exec SSH_EXEC use SSH_EXEC instead of `$DEFAULT_SSH_EXEC`
        --sshc              same as: --ssh-exec sshc
        --ssh-args SSH_ARGS extra SSH args for -s and -b
                            can be given multiple times, values are joined with ' '
                            e.g.:
                              --ssh-args '-L 80:localhost:81'
                              --ssh-args -L --ssh-args 80:localhost:81
        --pty               force pseudo-terminal allocation in ssh
                            same as: --ssh-args '-t -t'
";

sub main(@){
  if(@_ > 0 and $_[0] =~ /^-/){
    my $cmd = shift;
    if($cmd =~ /^(-h|--help)$/ and @_ == 0){
      print $USAGE;
    }elsif($cmd =~ /^(--set-hosts)$/ and @_ == 2){
      my ($hostname, $ip) = @_;
      setHostsIP $hostname, $ip;
    }elsif($cmd =~ /^(--remove-hosts)$/ and @_ == 1){
      my ($hostname) = @_;
      setHostsIP $hostname, undef;
    }elsif($cmd =~ /^(--ifup)$/ and @_ == 2){
      my ($dev, $ip) = @_;
      ifup $dev, $ip;
    }elsif($cmd =~ /^(--get-ipmagic-name)$/ and @_ == 0){
      my $ipmagicName = getLocalIpmagicName();
      if(defined $ipmagicName){
        print "$ipmagicName\n";
      }else{
        die "ERROR: could not find matching CONF file\n";
      }
    }elsif($cmd =~ /^(--list)$/ and @_ == 0){
      my @CONF_NAMES = map {getConfNameFromConfFile($_)} getConfFilesSymlinksLast();
      print "$_\n" foreach @CONF_NAMES;
    }else{
      die $USAGE;
    }

    exit 0;
  }

  die $USAGE if @_ == 0;

  my $conf = shift;
  my $confFile;
  if($conf =~ /^[a-zA-Z0-9][a-zA-Z0-9_\-]*$/){
    $confFile = absolutePath "$CONF_DIR/$conf.conf";
  }else{
    $confFile = absolutePath $conf;
  }

  die "$USAGE\nERROR: Could not parse conf $conf\n" if not defined $confFile;
  die "$USAGE\nERROR: \"$confFile\" is not a file\n" if not -f $confFile;

  my %config = %{parseConfig $confFile};

  die "hostname not defined in conf\n" if not defined $config{hostname};

  my $optRegex = join "|", qw(
    -v --verbose -u --user -m --method -r --retries --ssh-exec --sshc --ssh-args --pty
    -n --no-guess-ping -g --guess
  );

  my %opts = (
    verbose       => 0,
    user          => (defined $config{defaultUser} ? $config{defaultUser} : 'root'),
    method        => 'any',
    no_guess_ping => 0,
    retries       => $DEFAULT_RETRIES,
    sshExec       => $DEFAULT_SSH_EXEC,
    extraSSHArgs  => [],
  );
  while(@_ > 0 and $_[0] =~ /^($optRegex)$/){
    my $arg = shift;
    if($arg =~ /^(-v|--verbose)$/){
      $opts{verbose} = 1;
    }elsif(@_ > 0 and $arg =~ /^(-u|--user)$/){
      $opts{user} = shift;
    }elsif(@_ > 0 and $arg =~ /^(-m|--method)$/){
      $opts{method} = shift;
      die "ERROR: invalid method=$opts{method}\n" if $opts{method} !~ /^($OK_METHODS)$/;
    }elsif($arg =~ /^(-n|--no-guess-ping)$/){
      $opts{no_guess_ping} = 1;
    }elsif($arg =~ /^(-g|--guess)$/){
      $opts{method} = "guess";
      $opts{no_guess_ping} = 1;
    }elsif(@_ > 0 and $arg =~ /^(-r|--retries)$/){
      $opts{retries} = shift;
    }elsif(@_ > 0 and $arg =~ /^(--ssh-exec)$/){
      $opts{sshExec} = shift;
    }elsif($arg =~ /^(--sshc)$/){
      $opts{sshExec} = "sshc";
    }elsif(@_ > 0 and $arg =~ /^(--ssh-args)$/){
      my $sshArgsStr = shift @_;
      $opts{extraSSHArgs} = [@{$opts{extraSSHArgs}}, split /\s+/, $sshArgsStr];
    }elsif($arg =~ /^(--pty)$/){
      $opts{extraSSHArgs} = [@{$opts{extraSSHArgs}}, "-t", "-t"];
    }else{
      die $USAGE;
    }
  }

  my $ipOnly = 0;

  if(@_ == 1 and $_[0] eq '--host'){
    print "$config{hostname}\n";
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '--vnc-default-args'){
    if(defined $config{vncDefaultArgs}){
      print "$config{vncDefaultArgs}\n";
    }
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '--default-user'){
    print "$config{defaultUser}\n" if defined $config{defaultUser};
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '--ip-guess'){
    my @ipGuessList = @{$config{ipGuessList}} if defined $config{ipGuessList};
    print "$_\n" foreach @ipGuessList;
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '--ip'){
    $ipOnly = 1;
  }elsif((@_ == 1 or @_ == 2) and $_[0] =~ /^(-t|--tmp)$/){
    my $ip = $_[1] if @_ == 2;
    writeTmpFile $confFile, $ip;
    exit 0;
  }elsif(@_ == 1 and $_[0] =~ /^(-k|--key-remove|--keygen-remove|--ssh-keygen-remove)$/){
    print "removing key for $config{hostname}\n";
    system "ssh-keygen", "-R", $config{hostname};
    print "fetching IP for $config{hostname}\n";
    my $ip = `$0 $conf --ip`;
    chomp $ip;
    if($ip =~ /^$REGEX_IP$/){
      print "removing key for $ip\n";
      system "ssh-keygen", "-R", $ip;
    }else{
      die "failed to fetch IP\n";
    }
    exit 0;
  }

  my ($isVnc, $isSsh, $isRsync, $isScp) = (0, 0, 0, 0);
  my $vncCmd;
  my @sshCmd;
  my @rsyncScpArgs;
  if(@_ > 0 and $_[0] eq '-vnc'){
    $isVnc = shift;
    if(defined $config{vncCommand}){
      $vncCmd = $config{vncCommand};
    }else{
      $vncCmd = "vnc $conf -u $opts{user}";
    }
    if(defined $config{vncDefaultArgs}){
      $vncCmd .= " $config{vncDefaultArgs}";
    }
    if(@_ > 0){
      $vncCmd .= " @_";
    }
  }elsif(@_ > 0 and $_[0] eq '-s'){
    shift;
    $isSsh = 1;
    @sshCmd = @_;
    if(@sshCmd == 0 and defined $config{defaultSSHCommand}){
      @sshCmd = ($config{defaultSSHCommand});
    }
  }elsif(@_ == 1 and $_[0] =~ /^(-p|--proxy|--socks)$/){
    $isSsh = 1;
    @sshCmd = ("-N", "-D", $SOCKS_PORT);
  }elsif(@_ > 0 and $_[0] eq '--rsync'){
    shift;
    $isRsync = 1;
    @rsyncScpArgs = @_;
  }elsif(@_ > 0 and $_[0] eq '--scp'){
    shift;
    $isScp = 1;
    @rsyncScpArgs = @_;
  }elsif(@_ > 0){
    shift if $_[0] eq '-b';
    $isSsh = 1;
    die "-b missing command\n" if @_ == 0;
    my $c = "@_";
    $c =~ s/"/\\"/g;

    my $preBashCmd = $config{preBashCommand};
    $preBashCmd = $DEFAULT_PRE_BASH_COMMAND if not defined $preBashCmd;
    my $ignoreBashCmd = $config{ignorePreBashCommand};
    $ignoreBashCmd = 'false' if not defined $ignoreBashCmd;

    if($ignoreBashCmd !~ /^(true)$/i){
      $c = "bash -c \"$preBashCmd; $c\"";
    }else{
      $c = "bash -c \"$c\"";
    }
    @sshCmd = ($c);
  }

  print STDERR "WARNING: no ifconfig exec found\n" if not defined $EXEC_IFCONFIG;
  print STDERR "WARNING: no iw exec found\n" if not defined $EXEC_IW;

  my $attempts = 1 + $opts{retries};

  my ($ip, $method);
  while(not defined $ip and $attempts > 0){
    if(not defined $ip and $opts{method} =~ /^(any|tmp)$/){
      ($ip, $method) = (readTmpFile($confFile), 'tmp');
    }
    if(not defined $ip and $opts{method} =~ /^(any|usb)$/){
      ($ip, $method) = (usb(\%config, \%opts), 'usb');
    }
    if(not defined $ip and $opts{method} =~ /^(any|wifi)$/){
      ($ip, $method) = (wifi(\%config, \%opts), 'wifi');
    }
    if(not defined $ip and $opts{method} =~ /^(any|guess)$/){
      ($ip, $method) = (guess(\%config, \%opts), 'guess');
    }
    $method = undef if not defined $ip;

    $attempts--;
    if(not defined $ip and $attempts > 0){
      my $msg = "No IP found, retrying after 1s ($attempts attempts left)\n";
      print STDERR $msg;
      sleep 1;
    }
  }

  if($ipOnly){
    print "$ip\n" if defined $ip;
    exit (defined $ip ? 0 : 1);
  }

  sudoSetHostsIP $config{hostname}, $ip;

  if(not defined $ip){
    die "ERROR: no IP found\n";
  }

  if($isVnc){
    print "$vncCmd\n" if $opts{verbose};
    exec $vncCmd;
  }elsif($isSsh){
    ensureFingerprint $config{hostname}, $ip if defined $ip;

    my $sshArgs = defined $config{sshArgs} ? $config{sshArgs} : $DEFAULT_SSH_ARGS;
    my @sshCmdOpts = split /\s+/, $sshArgs;
    @sshCmdOpts = (@sshCmdOpts, @{$opts{extraSSHArgs}});

    my @cmd = ($opts{sshExec}, @sshCmdOpts, "$opts{user}\@$config{hostname}", @sshCmd);
    print "@cmd\n" if $opts{verbose};
    exec @cmd;
  }elsif($isRsync or $isScp){
    ensureFingerprint $config{hostname}, $ip if defined $ip;

    my $sshArgs = defined $config{sshArgs} ? $config{sshArgs} : $DEFAULT_SSH_ARGS;
    my @sshCmdOpts = split /\s+/, $sshArgs;
    if(defined $opts{extraSSHArgs}){
      @sshCmdOpts = (@sshCmdOpts, @{$opts{extraSSHArgs}});
    }

    my @cmd;
    if($isRsync){
      @cmd = ("rsync", "-e", "$opts{sshExec} @sshCmdOpts");
    }elsif($isScp){
      @cmd = ("scp", @sshCmdOpts);
    }

    my $remoteFileFound = 0;
    for my $arg(@rsyncScpArgs){
      if(not $remoteFileFound and $arg =~ /^:/){
        push @cmd, "$opts{user}\@$config{hostname}$arg";
        $remoteFileFound = 1;
      }else{
        push @cmd, $arg;
      }
    }
    if(not $remoteFileFound){
      die "ERROR: no remote file found in rsync/scp args \"@rsyncScpArgs\"\n";
    }

    print "@cmd\n" if $opts{verbose};
    exec @cmd;
  }else{
    print "$config{hostname}\n";
  }
}

sub absolutePath($){
  my $relPath = shift;
  $relPath =~ s/"/""/g;

  my $absPath;

  $absPath = `readlink -m "$relPath" 2>/dev/null`;
  chomp $absPath;
  $absPath = undef if $absPath =~ /^\s*$/;

  if(not defined $absPath){
    # this readlink probably doesnt support -m
    $absPath = `readlink -f "$relPath"`;
    chomp $absPath;
    $absPath = undef if $absPath =~ /^\s*$/;
  }

  return $absPath;
}

sub assertBool($){
  my $bool = shift;
  if($bool !~ /^(true|false)$/i){
    die "'$bool' is not 'true' or 'false'\n"
  }
}

sub assertIP($){
  my $ip = shift;
  if($ip !~ /^$REGEX_IP$/){
    die "'$ip' is not an ip4 address\n"
  }
}

sub assertMac($){
  my $mac = shift;
  if($mac !~ /^$REGEX_MAC$/i){
    die "'$mac' is not a mac address\n"
  }
}

sub fingerprint($){
  my $host = shift;
  my $key = `ssh-keygen -l -F $host`;
  if($key =~ /# Host $host found: line \d+ type \w+\n\d+ ([0-9a-f:]+)/s){
    return $1;
  }else{
    return undef;
  }
}

sub ensureFingerprint($$){
  my ($hostname, $ip) = @_;
  my $hnFp = fingerprint $hostname;
  my $ipFp = fingerprint $ip;
  if(defined $ipFp and (not defined $hnFp or $hnFp ne $ipFp)){
    print "WARNING: Fingerprints differ for $hostname and $ip\n";
    print "removing known_hosts entry for $ip\n";
    system "ssh-keygen", "-R", $ip;
  }
}

sub getConfFilesSymlinksLast(){
  my %symlinkDepth;
  for my $confFile(@CONF_FILES){
    $symlinkDepth{$confFile} = 0;
    my $f = $confFile;
    while(-l $f){
      $symlinkDepth{$confFile}++;
      last if $symlinkDepth{$confFile} >= 40;
      $f = readlink $f;
      if($f !~ /^\//){
        $f = "$CONF_DIR/$f";
      }
    }
  }

  my @sortedConfFiles = sort {
    $symlinkDepth{$a} <=> $symlinkDepth{$b} #regular files first, deepest symlinks last
    or $a cmp $b                            #lexicographically otherwise
  } @CONF_FILES;

  return @sortedConfFiles;
}

sub getConfNameFromConfFile($){
  my ($confFile) = @_;
  if($confFile !~ /^(?:.*\/)?([a-zA-Z0-9_\-]+)\.conf$/){
    die "ERROR: malformed CONF file $confFile\n";
  }
  return $1;
}

sub getLocalIpmagicName(){
  my @CONF_FILES = getConfFilesSymlinksLast();

  my $hostname = `$EXEC_HOSTNAME`;
  chomp $hostname;

  if($hostname !~ /\w/){
    die "ERROR: could not get hostname with `$EXEC_HOSTNAME`\n";
  }

  my $matchingConfName = undef;
  for my $confFile(@CONF_FILES){
    my $confName = getConfNameFromConfFile($confFile);
    my $config = parseConfig $confFile;
    if($$config{hostname} eq $hostname){
      $matchingConfName = $confName;
      last;
    }
  }

  return $matchingConfName;
}

sub parseConfig($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open conf $file\n";
  my @lines = <FH>;
  close FH;

  my %mapKeys = map {$_ => 1} qw(macIp ssidIp);
  my %listKeys = map {$_ => 1} qw(mac ipGuess);
  my %singleKeys = map {$_ => 1} qw(
    hostname vncCommand vncDefaultArgs defaultUser
    usbLocalIp usbRemoteIp sshArgs defaultSSHCommand preBashCommand ignorePreBashCommand
  );
  my %assertBool = map {$_ => 1} qw(ignorePreBashCommand);
  my %assertIp = map {$_ => 1} qw(ipGuess usbLocalIp usbRemoteIp);
  my %assertMac = map {$_ => 1} qw(mac);
  my %assertIpLeft = map {$_ => 1} qw();
  my %assertMacLeft = map {$_ => 1} qw(macIp);
  my %assertIpRight = map {$_ => 1} qw(macIp ssidIp);
  my %assertMacRight = map {$_ => 1} qw();

  my %config;
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    die "Malformed conf: $line\n" if $line !~ /^\s*([a-z]+)\s*=\s*(.+?)\s*$/i;
    my ($key, $val) = ($1, $2);

    if(defined $mapKeys{$key}){
      if($val !~ /^ \s* (\S* | "[^"]*" ) \s* :: \s* (\S* | "[^"]*") \s*$/x){
        die "Malformed map conf entry $key = $val\n";
      }
      my ($valLeft, $valRight) = ($1, $2);
      assertIP $valLeft if defined $assertIpLeft{$key};
      assertMac $valLeft if defined $assertMacLeft{$key};
      assertIP $valRight if defined $assertIpRight{$key};
      assertMac $valRight if defined $assertMacRight{$key};

      $key .= "Map";
      $config{$key} = {} if not defined $config{$key};
      ${$config{$key}}{$valLeft} = $valRight;
    }elsif(defined $listKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      $key .= "List";
      $config{$key} = [] if not defined $config{$key};
      push @{$config{$key}}, $val;
    }elsif(defined $singleKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      die "Duplicate single conf entry $key\n" if defined $config{$key};
      $config{$key} = $val;
    }else{
      die "Unknown conf entry: $key\n";
    }
  }

  return \%config;
}

sub hostsMarker($){
  my $hostname = shift;
  return "ipmagic:$hostname";
}

sub readHostsIP($){
  my $hostname = shift;
  my $hostsMarker = hostsMarker $hostname;
  for my $line(`cat /etc/hosts`){
    if($line =~ /^($REGEX_IP)\s*$hostname\s*#$hostsMarker$/){
      return $1;
    }
  }
  return undef;
}

sub setHostsIP($$){
  my ($hostname, $ip) = @_;
  my $hostsMarker = hostsMarker $hostname;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  my $newFmt = defined $ip ? $ip : "[NONE]";
  my $oldFmt = defined $oldIP ? $oldIP : "[NONE]";
  my $action = defined $ip ? "updating" : "deleting";
  print STDERR "$action $hostname in /etc/hosts $oldFmt=>$newFmt\n";

  my @lines = `cat /etc/hosts`;
  for my $line(@lines){
    if($line =~ /^($REGEX_IP)\s*$hostname\s*#$hostsMarker$/){
      $line = '';
    }
  }
  if(defined $ip){
    if($ip =~ /^$REGEX_IP$/){
      push @lines, "$ip\t$hostname#$hostsMarker\n";
    }else{
      die "malformed ip: $ip\n";
    }
  }

  open FH, "> /etc/hosts" or die "Couldnt open /etc/hosts for writing\n";
  print FH @lines;
  close FH;
}
sub sudoSetHostsIP($$){
  my ($hostname, $ip) = @_;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  if(defined $ip){
    system "sudo", $0, "--set-hosts", $hostname, $ip;
  }else{
    system "sudo", $0, "--remove-hosts", $hostname;
  }
}

sub getTmpFile($){
  my $confFile = shift;
  my $tmpFile = $confFile;
  $tmpFile =~ tr/\//_/;
  $tmpFile = "/tmp/ipmagic$tmpFile.tmp";
  return $tmpFile;
}
sub readTmpFile($){
  my $confFile = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not -e $tmpFile){
    return undef;
  }else{
    open FH, "< $tmpFile" or die "Couldnt read $tmpFile\n";
    my $val = join '', <FH>;
    close FH;
    chomp $val;
    return $val;
  }
}
sub writeTmpFile($$){
  my $confFile = shift;
  my $val = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not defined $val){
    if(-e $tmpFile){
      system "rm", $tmpFile;
      die "Couldnt remove $tmpFile\n" if $? != 0;
    }
  }else{
    open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
    print FH "$val\n";
    close FH;
  }
}

sub quickPingable($){
  system "ping $_[0] -c 1 -w 1 >/dev/null 2>/dev/null";
  return $? == 0;
}

sub ifup($$){
  my ($dev, $ip) = @_;
  system "$EXEC_IFCONFIG"
    . " $dev $ip netmask 255.255.255.0 up"
    . " > /dev/null"
    ;
}
sub sudoIfup($$){
  my ($dev, $ip) = @_;
  system "sudo", $0, "--ifup", $dev, $ip;
}

sub getDefaultGatewayMac(){
  my $route = `route -n`;
  if($route =~ /^0\.0\.0\.0\s*($REGEX_IP)/m){
    my $ip = $1;
    my $arp = `arp -n $ip`;
    if($arp =~ /^$ip\s*[a-zA-Z0-9_]+\s*($REGEX_MAC)/m){
      return $1;
    }
  }
  return undef;
}

sub usb($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{usbLocalIp} or not defined $config{usbRemoteIp}){
    return undef;
  }
  print "Trying usb\n" if $opts{verbose};
  my $localIp = $config{usbLocalIp};
  my $remoteIp = $config{usbRemoteIp};


  my $ifconfig = `$EXEC_IFCONFIG -a`;
  if($ifconfig =~ /^(usb\d+):/m){
    my $dev = $1;
    $ifconfig = `$EXEC_IFCONFIG $dev`;
    if($ifconfig !~ /inet (addr:)?$localIp/){
      print STDERR "USB DEVICE UP\n";
      sudoIfup $dev, $localIp;
    }
    print "  using USB device $dev\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $remoteIp;
  }

  return undef;
}

sub wifi($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{macIpMap} and not defined $config{ssidIpMap}){
    return undef;
  }

  my %macIpMap = %{$config{macIpMap}} if defined $config{macIpMap};
  my %ssidIpMap = %{$config{ssidIpMap}} if defined $config{ssidIpMap};

  my $iwDevs = iwParseDevInfo();
  my $mac = "<none>";
  my $ssid = "<none>";
  if(@$iwDevs > 0){
    my $iwDev = $$iwDevs[0];
    $mac = $$iwDev{addr} if defined $$iwDev{addr};
    $ssid = $$iwDev{ssid} if defined $$iwDev{ssid};
  }

  print "Trying wifi  {mac: $mac   ssid: $ssid}\n" if $opts{verbose};

  if($mac eq '<none>'){
    my $gwMac = getDefaultGatewayMac();
    $mac = $gwMac if defined $gwMac;
  }

  my $macIp;
  for my $macConfig(sort keys %macIpMap){
    if(lc $mac eq lc $macConfig){
      $macIp = $macIpMap{$macConfig};
      last;
    }
  }

  my $ssidIp;
  for my $ssidConfig(sort keys %ssidIpMap){
    if(lc $ssid eq lc $ssidConfig){
      $ssidIp = $ssidIpMap{$ssidConfig};
      last;
    }
  }

  if(defined $macIp){
    print "  chose IP $macIp by mac\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $macIp;
  }elsif(defined $ssidIp){
    print "  chose IP $ssidIp by ssid\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $ssidIp;
  }

  return undef;
}

sub guess($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  my $hostname = $config{hostname};
  if(defined $config{ipGuessList}){
    print "Trying guesses\n" if $opts{verbose};
    for my $ip(@{$config{ipGuessList}}){
      print "  guess $ip\n" if $opts{verbose};
      if($opts{no_guess_ping}){
        print "  success (skipped ping)\n" if $opts{verbose};
        return $ip;
      }elsif(quickPingable $ip){
        print "  success!\n" if $opts{verbose};
        return $ip;
      }
    }
  }

  my $oldIP = readHostsIP $config{hostname};
  if(defined $oldIP){
    print "  guess $oldIP (old hosts IP)\n" if $opts{verbose};
    if($opts{no_guess_ping}){
      print "  success (skipped ping)\n" if $opts{verbose};
      return $oldIP;
    }elsif(quickPingable $oldIP){
      print "  success!\n" if $opts{verbose};
      return $oldIP;
    }
  }

  return undef;
}

sub isEqual($$){
  if(not defined $_[0] and not defined $_[1]){
    return 1;
  }elsif(not defined $_[0] or not defined $_[1]){
    return 0;
  }else{
    return $_[0] eq $_[1] ? 1 : 0;
  }
}

sub iwParseDevInfo(){
  my $devs = [];
  if(defined $EXEC_IW){
    my @lines = `$EXEC_IW dev`;
    my $curDev = undef;
    for my $line(@lines){
      if($line =~ /^\s*Interface\s*(wl\w+)$/){
        my ($devName) = $1;

        $curDev = {};
        push @$devs, $curDev;

        $$curDev{devName} = $devName;
      }elsif($line =~ /^\s*(ssid|addr|type|channel)\s*(.+)$/ and defined $curDev){
        my ($att, $val) = ($1, $2);
        $$curDev{$att} = $val;
      }
    }
  }

  return $devs;
}

sub whichExec($$){
  my ($execName, $execPathGuesses) = @_;

  for my $exec(@$execPathGuesses){
    if(-x $exec){
      return $exec;
    }
  }

  my $exec = `which $execName 2>/dev/null`;
  chomp $exec;
  if(-x $exec){
    return $exec;
  }else{
    return undef;
  }
}

&main(@ARGV);
