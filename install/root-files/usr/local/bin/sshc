#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;
my $CONTROL_PATH_DIR = "$ENV{HOME}/.ssh/control-paths";

my $usage = "Usage:
  Create an SSH master session before running SSH inside it, reusing it for future runs.

  $EXEC -h | --help
    show this message

  $EXEC [SECONDARY_SSH_OPTS] DEST [COMMAND]
    -ensure SSH master session, like: `$EXEC --open <DESTINATION>`
      (note that <SECONDARY_SSH_OPTS> are not passed into the master session)
    -run: `ssh <SSH_OPTS> -S <CONTROL_PATH> <DEST> <COMMAND>`

  $EXEC --open DEST
    -if CONTROL_PATH does not exist:
      -run: ssh -n -N -F -o ControlMaster=yes -o ControlPath=<CONTROL_PATH> <DEST>

  $EXEC --close DEST
    -if CONTROL_PATH exists and is active (using `ssh -O check`):
      -run: ssh -O exit -o ControlPath=<CONTROL_PATH> <DEST>
    -if CONTROL_PATH exists and is NOT active:
      -run: rm <CONTROL_PATH>

  $EXEC --close-all
    -for all <CONTROL_PATH>s in $CONTROL_PATH_DIR/*
      -run: ssh -O exit -o ControlPath=<CONTROL_PATH> <DEST>

  $EXEC --rsync RSYNC_ARGS
  $EXEC rsync RSYNC_ARGS
    -find the first arg in <RSYNC_ARGS> that contains a ':'
    -treat everything before the first colon in that arg as <REMOTE>
    -use: CONTROL_PATH=$CONTROL_PATH_DIR/<REMOTE>
    -ensure SSH master session, like: `$EXEC --open <REMOTE>`
    -run: `rsync -e \"ssh -o ControlPath=CONTROL_PATH\" <RSYNC_ARGS>

  DEST
    SSH destination (e.g.: HOSTNAME or USER\@HOSTNAME)
  CONTROL_PATH
    $CONTROL_PATH_DIR/<DEST>
  SECONDARY_SSH_OPTS
    these options are passed to the secondary SSH command
      (after opening the master without these options)
    any args that you can pass to SSH:
         [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address]
         [-c cipher_spec] [-D [bind_address:]port] [-E log_file]
         [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file]
         [-J destination] [-L address] [-l login_name] [-m mac_spec]
         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]
         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]
  COMMAND
    any command that you can pass to SSH
";

my $SSH_OPTS_ARGS_REGEX = "-[BbcDEeFIiJLlmOopQRSWw]";
my $SSH_OPTS_NOARGS_REGEX = "-([46AaCfGgKkMNnqsTtVvXxYy])+";

sub ensureSSHOpen($);
sub ensureSSHClosed($);
sub runSSH($$$);

my $MODE_SSH = "ssh";
my $MODE_OPEN = "open";
my $MODE_CLOSE = "close";
my $MODE_CLOSE_ALL = "close-all";
my $MODE_RSYNC = "rsync";

sub main(@){
  my $mode = $MODE_SSH;
  my $sshOpts = [];
  my @args;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--open)$/){
      $mode = $MODE_OPEN;
    }elsif($arg =~ /^(--close)$/){
      $mode = $MODE_CLOSE;
    }elsif($arg =~ /^(--close-all)$/){
      $mode = $MODE_CLOSE_ALL;
    }elsif($arg =~ /^(--rsync|rsync)$/){
      $mode = $MODE_RSYNC;
    }elsif($arg =~ /^($SSH_OPTS_NOARGS_REGEX)$/){
      my $sshOpt = $arg;
      push @$sshOpts, $sshOpt;
    }elsif($arg =~ /^($SSH_OPTS_ARGS_REGEX)$/){
      my $sshOpt = $arg;
      my $sshOptArg = shift @_;
      die "$usage\nERROR: missing arg to SSH opt $sshOpt\n" if not defined $sshOptArg;
      push @$sshOpts, $sshOpt;
      push @$sshOpts, $sshOptArg;
    }else{
      @args = ($arg, @_);
      last;
    }
  }

  if($mode eq $MODE_SSH){
    die "$usage\nERROR: missing DEST\n" if @args == 0;
    my $dest = shift @args;
    my $command = [@args];

    ensureSSHOpen($dest);
    runSSH($dest, $sshOpts, $command);
  }elsif($mode eq $MODE_OPEN){
    die "$usage\nERROR: missing DEST\n" if @args == 0;
    die "$usage\nERROR: unknown args \"@args\"\n" if @args > 1;
    my $dest = shift @args;

    ensureSSHOpen($dest);
  }elsif($mode eq $MODE_CLOSE){
    die "$usage\nERROR: missing DEST\n" if @args == 0;
    die "$usage\nERROR: unknown args \"@_\"\n" if @args > 1;
    my $dest = shift @args;

    ensureSSHClosed($dest);
  }elsif($mode eq $MODE_CLOSE_ALL){
    die "$usage\nERROR: unknown args \"@args\"\n" if @args > 0;

    my @controlPaths = glob "$CONTROL_PATH_DIR/*";
    my @dests = map {$_ =~ s/^.*\///; $_} @controlPaths;
    ensureSSHClosed($_) foreach @dests;
  }elsif($mode eq $MODE_RSYNC){
    my $remote;
    for my $arg(@args){
      if($arg =~ /^([^:]+):/){
        $remote = $1;
        last;
      }
    }
    if(not defined $remote){
      die "$usage\nERROR: could not find rsync remote src/dest in \"@args\"\n";
    }
    my $controlPath = "$CONTROL_PATH_DIR/$remote";

    ensureSSHOpen($remote);
    system "rsync", "-e", "ssh -o ControlPath=$controlPath", @args;
  }
}

sub ensureSSHOpen($){
  my ($dest) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  system "mkdir", "-p", $CONTROL_PATH_DIR if not -d $CONTROL_PATH_DIR;
  if(not -e $controlPath){
    my @cmd = ("ssh",
      "-n", "-N", "-f",
      "-o", "ControlMaster=yes",
      "-o", "ControlPath=$controlPath",
      $dest,
    );
    system @cmd;
    if(not -e $controlPath){
      die "ERROR: @cmd failed\n";
    }
  }
}

sub ensureSSHClosed($){
  my ($dest) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  if(-e $controlPath){
    system "ssh -o ControlPath=$controlPath -O check thisArgIsIgnoredSSHBug";
    if($? != 0){
      print "WARNING: control path \"$controlPath\" was not active, removing file\n";
      system "rm", $controlPath;
    }else{
      my @cmd = ("ssh",
        "-O", "exit",
        "-o", "ControlPath=$controlPath",
        $dest,
      );
      system @cmd;
    }

    if(-f $controlPath){
      die "ERROR: control path \"$controlPath\" still exists\n";
    }
  }
}

sub runSSH($$$){
  my ($dest, $sshOpts, $command) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  my @cmd = ("ssh", @$sshOpts, "-S", $controlPath, $dest, @$command);
  system @cmd;
}

&main(@ARGV);
