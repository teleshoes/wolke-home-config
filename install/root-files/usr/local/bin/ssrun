#!/usr/bin/perl
use strict;
use warnings;

sub globFirstFile($);

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] SCRIPT_NAME ARGS
    run: ~/install/bin/SCRIPT_NAME ARGS'

  OPTS
    -s | -n | --simulate | --dry-run
      set SS_SIMULATE=true env var before running SCRIPT_NAME
";

sub main(@){
  my $simulate = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-s|-n|--simulate|--dry-run)$/){
      $simulate = 1;
    }else{
      die $USAGE;
    }
  }
  my ($scriptName, @args) = @_;
  die "$USAGE\nERROR: missing SCRIPT_NAME\n" if not defined $scriptName;

  my $user = defined $ENV{SUDO_USER} ? $ENV{SUDO_USER} : $ENV{USER};
  my @ptrns = (
    "$ENV{HOME}/install/bin/$scriptName",
    "/home/$user/install/bin/$scriptName",
    "/home/*/install/bin/$scriptName",
  );

  my $scriptExec;
  for my $ptrn(@ptrns){
    $scriptExec = globFirstFile $ptrn;
    last if defined $scriptExec;
  }

  if(not defined $scriptExec){
    die "ERROR: could not find ~/install/bin/$scriptName\n";
  }

  $ENV{SS_SIMULATE} = "true" if $simulate;
  exec $scriptExec, @args;
}

sub globFirstFile($){
  my @files = grep {-f $_} glob $_[0];
  return @files > 0 ? $files[0] : undef;
}

&main(@ARGV);
