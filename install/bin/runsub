#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $USAGE = "Usage:
  $0
  $0 -h|--help
    show this message

  $0 SUB_NAME [ARG ARG ..]
    run '&SUB_NAME(ARG, ARG)' and print the returned value
      -if returned value is: an array-ref, a multi-value-array, or a hash-literal
          extract a list of values, and print them separated by ' '
      -if returned value is a hash-ref
          extract a list of 'key => val' values, and print them separated by ', '
      -if returned value is: a scalar, a scalar-ref, a single-value-array, or an empty array
          extract a single (possiby undef) value, and print it if defined
";

sub main(@){
  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^(-h|--help)$/)){
    print $USAGE;
    exit 0;
  }

  my $sub = shift;
  my $subRef;
  eval{ $subRef = \&{$sub} };
  if(not defined $subRef){
    die "ERROR: unknown sub $sub\n";
  }

  my @valArr = &{$subRef}(@_);
  my $val = undef;
  if(@valArr > 1){
    $val = \@valArr;
  }elsif(@valArr == 1){
    $val = $valArr[0];
  }

  if(defined $val){
    if(ref($val) eq 'ARRAY'){
      my @arr = @$val;
      print join(" ", @arr) . "\n";
    }elsif(ref($val) eq 'HASH'){
      my %hash = %$val;
      print join(", ", map {"$_ => $hash{$_}"} sort keys %hash) . "\n";
    }elsif(ref($val) eq 'SCALAR'){
      print $$val . "\n";
    }else{
      chomp $val;
      print "$val\n";
    }
  }
}
&main(@ARGV);
