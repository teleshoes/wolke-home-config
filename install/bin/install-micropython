#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;
use File::Basename qw(basename);

sub handleGitInstallMicroPython($);
sub flashFirmware();

my $EXEC = basename $0;
my $GIT_URL_MICROPYTHON = "https://github.com/teleshoes/micropython";
my $GIT_URL_PICO_LCD = "https://github.com/teleshoes/pico-lcd";

my $DIR_FIRMWARE_IMG = "/media/stuff/Images/micropython/RPI_PICO_W";
my $LATEST_FIRMWARE_SYMLINK = "$DIR_FIRMWARE_IMG/latest.uf2";

my $BOOTLOADER_DISK_LABEL = "RPI-RP2";
my $BOOTLOADER_DISK_SIZE_BYTES = 134217216;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC -b | uf2 | firmware | build | --uf2 | --firmware | --build
    -build micropython RPI_PICO_W firmware and install mpy-cross
      from $GIT_URL_MICROPYTHON
    -copy built image to $DIR_FIRMWARE_IMG
    -create/replace symlink $DIR_FIRMWARE_IMG/latest.uf2

  $EXEC -f | flash | --flash
    -run `mpremote bootloader`
    -wait until device shows up
    -look for device /dev/disk/by-label/$BOOTLOADER_DISK_LABEL
    -check device size in bytes
      -ensure exactly matches $BOOTLOADER_DISK_SIZE_BYTES bytes
    -confirm interactively before running dd
    -run: dd \\
            if=$LATEST_FIRMWARE_SYMLINK \\
            of=/dev/disk/by-label/$BOOTLOADER_DISK_LABEL \\
            status=progress \\
            bs=1M \\
          ;

  $EXEC
  $EXEC -p | msg | lcd-msg | pico-lcd-msg | --msg | --lcd-msg | --pico-lcd-msg
    -install pico-lcd-msg tool
      from $GIT_URL_PICO_LCD
";

my $MODE_BUILD_FIRMWARE = "build-firmware";
my $MODE_FLASH_FIRMWARE = "flash-firmware";
my $MODE_LCD_MSG = "lcd-msg";

sub main(@) {
  my $mode = $MODE_LCD_MSG;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-b|((--)?(uf2|firmware|build)))$/){
      $mode = $MODE_BUILD_FIRMWARE;
    }elsif($arg =~ /^(-f|((--)?(flash|--flash)))$/){
      $mode = $MODE_FLASH_FIRMWARE;
    }elsif($arg =~ /^(-p|((--)?(msg|lcd-msg|pico-lcd-msg)))$/){
      $mode = $MODE_LCD_MSG;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($mode eq $MODE_BUILD_FIRMWARE){
    installFromGit $GIT_URL_MICROPYTHON, \&handleGitInstallMicroPython;
  }elsif($mode eq $MODE_FLASH_FIRMWARE){
    flashFirmware();
  }elsif($mode eq $MODE_LCD_MSG){
    #copy pico-lcd-msg tool out of pico-lcd
    installFromGit $GIT_URL_PICO_LCD, sub{
      my ($dir) = @_;
      runSudo "cd '$dir' && ./install-pico-lcd-msg.sh";
    };
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub handleGitInstallMicroPython($){
  my ($dir) = @_;
  runUser "git", "-C", $dir, "submodule", "init";
  runUser "git", "-C", $dir, "submodule", "update";

  if(-e "$dir/firmware.uf2"){
    runUser "rm", "$dir/firmware.uf2";
  }
  if(-e "$dir/mpy-cross/build/mpy-cross"){
    runUser "rm", "$dir/mpy-cross/build/mpy-cross";
  }

  if(-e "$dir/firmware.uf2"){
    die "ERROR: RPI_PICO_W firmware exists\n";
  }
  if(-e "$dir/mpy-cross/build/mpy-cross"){
    die "ERROR: mpy-cross exists\n";
  }

  runUser "cd '$dir' && ./build-pico-w.sh";

  if(not -e "$dir/firmware.uf2"){
    die "ERROR: RPI_PICO_W firmware does not exist\n";
  }
  my $gitCommit = procUserChomp "git", "-C", $dir, "show", "-s", "--format=%h";
  my $gitEpoch = procUserChomp "git", "-C", $dir, "show", "-s", "--format=%at";
  my $gitDtm = procUserChomp "date", "--date=\@$gitEpoch", "+%Y-%m-%d_%H%M%S";
  my $nowMillis = nowMillis();

  my $fileName = "firmware_rpi_pico_w_${gitDtm}_${gitCommit}_${nowMillis}.uf2";
  runUser "mkdir", "-p", "$DIR_FIRMWARE_IMG/";
  runUser "cp", "$dir/firmware.uf2", "$DIR_FIRMWARE_IMG/$fileName";

  symlinkFile $fileName, $LATEST_FIRMWARE_SYMLINK;

  if(not -e "$dir/mpy-cross/build/mpy-cross"){
    die "ERROR: mpy-cross does not exist\n";
  }
  runSudo "cp", "-a", "$dir/mpy-cross/build/mpy-cross", "/usr/local/bin/";
}

sub flashFirmware(){
  if(not -f $LATEST_FIRMWARE_SYMLINK){
    die "ERROR: missing firmware file to flash $LATEST_FIRMWARE_SYMLINK\n";
  }

  my $dev = "/dev/disk/by-label/$BOOTLOADER_DISK_LABEL";
  if(not -e $dev){
    print "$dev not found, running mpremote bootloader\n";
    system "mpremote", "bootloader";
    my $maxAttempts = 10;
    my $attempts = 1;
    while(not -e $dev){
      print "$dev not found, waiting 1s and retrying $attempts/$maxAttempts\n";
      sleep 1;
      $attempts++;
    }
  }
  if(not -e $dev){
    die "ERROR: $dev not found\n";
  }
  my $devSize = procChomp "lsblk", $dev, "-o", "SIZE", "--bytes", "--noheadings";
  die "ERROR: could not fetch device size with lsblk\n" if $devSize !~ /^\d+$/;
  print "$dev size: $devSize\n";

  if($devSize ne $BOOTLOADER_DISK_SIZE_BYTES){
    die "ERROR: aborting, unexpected size in bytes of bootloader dev $dev\n";
  }

  print "\n";
  system "lsblk", "--fs";

  my $symlinkTarget = readlink $LATEST_FIRMWARE_SYMLINK;
  print "\n\nusing: $LATEST_FIRMWARE_SYMLINK\n -> $symlinkTarget\n\n";

  my @ddCmd = ("dd",
    "if=$LATEST_FIRMWARE_SYMLINK",
    "of=$dev",
    "status=progress",
    "bs=1M",
  );
  print "RUNNING THIS COMMAND AS ROOT:\n@ddCmd\n";
  print "proceed? [y/N]\n";
  my $val = <STDIN>;
  if($val =~ /^(y|Y)$/){
    runSudo @ddCmd;
  }else{
    print "  aborted\n";
  }
}

&main(@ARGV);
