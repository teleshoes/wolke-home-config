#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $kodiDir = getHome() . "/.kodi";

my $pulse = 0;

my $card = $pulse ? "PULSE:Default" : "ALSA:hdmi:CARD=HDMI,DEV=0";

my $addonsDb = "$kodiDir/userdata/Database/Addons27.db";
my $guisettingsFile = "$kodiDir/userdata/guisettings.xml";
my $cecConfigFile = globOne "$kodiDir/userdata/peripheral_data/usb*CEC_Adapter.xml";
my $keyboardConfigFile = "$kodiDir/userdata/keymaps/keyboard.xml";

my $bgDir = getHome() . "/.cache/backgrounds/fhd";

my $skinName = "skin.confluence";
my $skinSettingsFile = "$kodiDir/userdata/addon_data/$skinName/settings.xml";

my $skinSettings = {
  "UseCustomBackground" => "true",
  "CustomBackgroundPath" => "$bgDir/ghibli/nausicaa.jpg",
};

my $guisettings = {
  showhidden => "true",
  audiodevice => $card,
  channels => $pulse ? 1 : 8, #2.0 or 5.1
  passthrough => $pulse ? "false" : "true",
  passthroughdevice => $pulse ? "default" : $card,
  streamsilence => "-1", #keep audio device alive
  enablerssfeeds => "false",
  skin => "$skinName",
};

my @disabledAddonIds = qw(
  service.xbmc.versioncheck
  metadata.musicvideos.theaudiodb.com
);

my $cecConfig = {
  enabled => 0,
};

my $keyConfigGlobal = [
  ["f", undef, "toggleFullScreen"],
];
my $keyConfigVideo = [
  ["left",         undef, "Seek(-10)"],
  ["right",        undef, "Seek(10)"],
  ["period",       undef, "Seek(-30)"],
  ["forwardslash", undef, "Seek(30)"],
  ["down",         undef, "Seek(-60)"],
  ["up",           undef, "Seek(60)"],
  ["pageup",       undef, "BigStepBack"],
  ["pagedown",     undef, "BigStepForward"],
];

sub formatKeyEntryXml($$$);

sub main(@) {
  getRoot @_;

  for my $addonId(@disabledAddonIds){
    my $intId = `sqlite3 $addonsDb "select id from addons where addonId='$addonId'"`;
    chomp $intId;
    die "error getting integer id for addonId=$addonId\n" if $intId !~ /^\d+$/;
    print "disabling $addonId(id=$intId) in addons database\n";
    my $sql = "
      delete from blacklist where id=$intId or addonID='$addonId';
      insert into blacklist(id, addonID) values($intId, '$addonId');
    ";
    system "sqlite3", $addonsDb, $sql;
  }

  editFile $skinSettingsFile, undef, sub {
    my $c = shift;
    for my $key(sort keys %$skinSettings){
      my $val = $$skinSettings{$key};
      my $type = $val =~ /^(true|false)$/ ? "bool" : "string";

      my $idAtt = "id=\"$key\"";
      my $typeAtt = "type=\"$type\"";

      my $prefix = "\\s*<setting\\s*$idAtt\\s*$typeAtt>";
      my $line = "    <setting $idAtt $typeAtt>$val</setting>";

      if(not replaceLine $c, $prefix, $line){
        die "could not update skin setting $key = $val\n";
      }
    }
    return $c;
  };

  editFile $guisettingsFile, undef, sub {
    my $c = shift;
    for my $key(sort keys %$guisettings){
      my $val = $$guisettings{$key};
      my $prefix = "\\s*<$key( [^>]*)?";
      my $line = "        <$key>$val</$key>";
      if(not replaceLine $c, $prefix, $line){
        die "could not update gui setting $key = $val\n";
      }
    }
    return $c;
  };

  if(defined $cecConfigFile){
    editFile $cecConfigFile, undef, sub {
      my $c = shift;
      for my $key(sort keys %$cecConfig){
        my $val = $$cecConfig{$key};
        $c =~ s/^(\s*)<setting\s*id="$key".*$/$1<setting id="$key" value="$val" \/\>/m;
      }
      return $c;
    };
  }

  my $keymapXml = "";
  $keymapXml .= "<keymap>\n";

  $keymapXml .= "  <global>\n";
  $keymapXml .= "    <keyboard>\n";
  for my $keyEntry(@$keyConfigGlobal){
    my ($key, $mod, $action) = @$keyEntry;
    $keymapXml .= formatKeyEntryXml $key, $mod, $action;
  }
  $keymapXml .= "    </keyboard>\n";
  $keymapXml .= "  </global>\n";

  $keymapXml .= "  <FullscreenVideo>\n";
  $keymapXml .= "    <keyboard>\n";
  for my $keyEntry(@$keyConfigVideo){
    my ($key, $mod, $action) = @$keyEntry;
    $keymapXml .= formatKeyEntryXml $key, $mod, $action;
  }
  $keymapXml .= "    </keyboard>\n";
  $keymapXml .= "  </FullscreenVideo>\n";

  $keymapXml .= "</keymap>\n";
  writeFile $keyboardConfigFile, $keymapXml;
  run "chown", getUsername() . ".", $keyboardConfigFile;
}

sub formatKeyEntryXml($$$){
  my ($key, $mod, $action) = @_;
  my $modFmt = defined $mod ? " mod=\"$mod\"" : "";
  return "      <$key$modFmt>$action</$key>\n";
}

&main(@ARGV);
