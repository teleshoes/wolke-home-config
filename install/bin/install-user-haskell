#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $GHC_VERSION = "7.6.3";
my $HP_VERSION  = "2013.2.0.0";

my $IMG_DIR = "/media/stuff/Images/haskell";

my $SRC_CACHE_DIR = "$ENV{HOME}/.src-cache";

my $GHC_INSTALL_DIR = "$SRC_CACHE_DIR/ghc-$GHC_VERSION";
my $HP_INSTALL_DIR = "$ENV{HOME}/.src-cache/haskell-platform-$HP_VERSION";

sub ensureDownloadFile($$$);

sub main(@) {
  my $prefix = "$ENV{HOME}/.ghc-$GHC_VERSION";

  run "mkdir", "-p", $IMG_DIR;

  run "mkdir", $SRC_CACHE_DIR unless -e $SRC_CACHE_DIR;

  if(not -d $GHC_INSTALL_DIR){
    my $ghcTar = ensureDownloadFile(
      "http://www.haskell.org/ghc/dist/$GHC_VERSION/"
        . "ghc-$GHC_VERSION-x86_64-unknown-linux.tar.bz2",
      $IMG_DIR,
      "ghc-$GHC_VERSION*.tar*",
    );
    run "tar", "--one-top-level=$SRC_CACHE_DIR", "-x", "-f", $ghcTar;
  }

  run "cd '$GHC_INSTALL_DIR' && ./configure --prefix='$prefix'";
  run "make", "-C", $GHC_INSTALL_DIR;
  run "make", "-C", $GHC_INSTALL_DIR, "install";

  if(not -d $HP_INSTALL_DIR) {
    my $hpTar = ensureDownloadFile(
      "https://downloads.haskell.org/platform/$HP_VERSION/"
        . "haskell-platform-$HP_VERSION.tar.gz",
      $IMG_DIR,
      "haskell-platform-$HP_VERSION.tar.gz",
    );
    run "tar", "--one-top-level=$SRC_CACHE_DIR", "-x", "-f", $hpTar;
  }

  $ENV{PATH} = "$prefix:$ENV{PATH}" unless $ENV{PATH} =~ /\Q.ghc-$GHC_VERSION\E/;

  run "cd '$HP_INSTALL_DIR' && ./configure --prefix='$prefix'";
  run "make", "-C", $HP_INSTALL_DIR;
  run "make", "-C", $HP_INSTALL_DIR, "install";

  my $config = "$ENV{HOME}/.cabal/config";
  run "mv", "$config", "$config-def" unless -e "$config-def";
  unless(-e "$config-$GHC_VERSION") {
    run "cp", "$config-def", "$config-$GHC_VERSION";
    editFile "$config-$GHC_VERSION", sub {
      my $config = shift;
      replaceLine $config, "world-file",
        "world-file: $ENV{HOME}/.cabal/world-$GHC_VERSION";
      replaceLine $config, "library-profiling",
        "library-profiling: True";
      replaceLine $config, "documentation",
        "documentation: True";
      replaceLine $config, " prefix:",
        "  prefix: $ENV{HOME}/.cabal-$GHC_VERSION";
      $config
    };
  }
}

sub ensureDownloadFile($$$){
  my ($url, $destDir, $ptrn) = @_;
  my $file = globOne("$destDir/$ptrn");
  if(not defined $file or not -f $file){
    run "wget", "-P", $destDir, $url;
    $file = globOne("$destDir/$ptrn");
  }
  if(not defined $file or not -f $file){
    die "ERROR: could not download '$url' to $destDir/$ptrn\n";
  }
  return $file;
}

&main(@ARGV);
