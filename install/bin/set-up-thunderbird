#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $prefs = {
  "mail.check_all_imap_folders_for_new" => "true",
  "mail.imap.use_status_for_biff" => "false",
  "mail.server.serverX.autosync_offline_stores" => "true",
};

my $folderUris = {
  lille => 'imap://elliot.wolk%40lillegroup.com@imap.gmail.com/INBOX',
  google => 'imap://elliot.wolk%40gmail.com@imap.gmail.com/INBOX',
};
my $folderAlerts = {
  lille  => ['msg', 'snd:ff7-menuselect'],
  google => ['msg', 'snd:ff7-menuselect'],
};

my $mbaExt = "extensions.mailboxalert";

my $msgDur = '3';
my $msgPos = 'bottom-right';
my $msgText = '%subject';
my $msgHeader = '%sendername on %originalfolder';
my $alarmExec = procChomp("which", "alarm");

sub msgAlertPrefs($);
sub soundAlertPrefs($$);
sub fmtAlerts($@);

sub main(@){
  print "DO THIS:\n";
  print "mail.imap.use_status_for_biff=false\n";
  print "gmail=> server: IDLE=>false\n";
  print "gmail=> max connections: 5=>1\n";
  print "\n";
  print "mail.server.default.check_all_folders_for_new=true\n";
  print "OR\n";
  print "make sure at least two folders are checked every time\n";
  print "\n\n";
  print "manual about:config settings:\n";
  print "$_ => $$prefs{$_}\n" foreach keys %$prefs;
  print "\n\n\n!!!!!!!\nSET THE ABOVE MANUALLY\n!!!!!!!\n\n\n";

  my $home = getHome();
  my $prefsJs = globOne "$home/.thunderbird/*.default/prefs.js";
  die "Could not find prefs file\n" if not -f $prefsJs;
  my %alertIds;

  my @alerts;
  push @alerts, msgAlertPrefs "msg";
  my @sounds = procChomp $alarmExec, "--print-sounds";
  for my $sound(@sounds){
    my $name = $sound;
    $name =~ s/.*\///;
    $name =~ s/\.wav$//;
    $name = "snd:$name";
    push @alerts, soundAlertPrefs $name, $sound;
  }

  my $alertIds = {};

  my $curId = 1;
  for my $alert(@alerts){
    $$alertIds{$$alert{name}} = $curId++;
  }

  my @lines = readFile($prefsJs);
  my @newLines;
  for my $line(@lines){
    if($line =~ /$mbaExt.prefsversion/){
      push @newLines, fmtAlerts $alertIds, @alerts;
    }elsif($line =~ /$mbaExt/){
      next;
    }
    push @newLines, $line;
  }

  open FH, "> $prefsJs" or die "Could not write to $prefsJs\n";
  print FH @newLines;
  close FH;
}

sub msgAlertPrefs($){
  return {
    name => $_[0],
    show_message => "true",
    show_message_duration => $msgDur,
    show_message_effect => "none",
    show_message_message => $msgText,
    show_message_position => $msgPos,
    show_message_subject => $msgHeader,
  };
}

sub soundAlertPrefs($$){
  return {
    name => $_[0],
    command => "$alarmExec -s $_[1]",
    execute_command => "true",
  };
}

sub fmtAlerts($@){
  my $ids = shift;
  my $s = '';
  for my $alert(@_){
    my $id = $$ids{$$alert{name}};
    die "Missing alert id\n" if not defined $id;
    for my $pref(sort keys %$alert){
      my $val = $$alert{$pref};
      $val = "\"$val\"" unless $val =~ /^(\d+|true|false)$/;
      $s .= "user_pref(\"$mbaExt.alerts.$id.$pref\", $val);\n";
    }
  }

  for my $folder(sort keys %$folderUris){
    die "No alerts for: $folder\n" if not defined $$folderAlerts{$folder};
    my $uri = $$folderUris{$folder};
    my @alertIds;
    for my $alertName(@{$$folderAlerts{$folder}}){
      die "Unknonw alert: $alertName\n" if not defined $$ids{$alertName};
      push @alertIds, $$ids{$alertName};
    }
    my $fmtIds = join ",", @alertIds;
    $s .= "user_pref(\"$mbaExt.folders.$uri.alerts\", \"$fmtIds\");\n";
  }
  return $s;
}

&main(@ARGV);
