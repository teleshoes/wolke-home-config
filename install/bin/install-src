#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub install($);

my @installs = (
  'git-filter-repo' => ["https://github.com/newren/git-filter-repo", ''
      . " sudo cp git-filter-repo /usr/local/bin"
      ],

  'lenovo-throttling-fix' => ["https://github.com/erpalma/lenovo-throttling-fix.git", ''
      . " sudo ./install.sh;"
      . " sudo systemctl stop lenovo_fix;"
      . " sudo systemctl disable lenovo_fix;"
      ],

  'pidgin-hide-chat-on-join' => ["https://github.com/kgraefe/pidgin-hide-chat-on-join", ''
      . " sudo apt-get install pidgin-dev intltool;"
      . " ./autogen.sh;"
      . " ./configure --prefix=/usr;"
      . " make;"
      . " sudo make install;"
      ],

  'purple-matrix' => ["https://github.com/teleshoes/purple-matrix.git", ''
      . " sudo apt-get install"
      . "    libpurple-dev libjson-glib-dev libglib2.0-dev libhttp-parser-dev"
      . "    libsqlite3-dev libolm-dev libgcrypt20-dev"
      . " ;"
      . " make clean && make -j8 && sudo make install;"
      ],

  'chatpop-pidgin' => ["https://github.com/teleshoes/chatpop-pidgin", ''
      . " ./install.sh"
      ],

  qtemail => ["https://github.com/teleshoes/qtemail.git", ''
      . " ./dependencies-install.pl;"
      . " ./encodings-install.sh;"
      . " ./install.sh;"
      ],

  mhonarc => ["https://github.com/sympa-community/MHonArc", ''
      . " perl Makefile.PL"
      . " && make"
      . " && sudo make install"
      ],

  feh => ["https://github.com/derf/feh.git", ''
      . " sudo apt-get install libexif-dev libimlib2-dev libcurl4-openssl-dev;"
      . " make clean && make -j all PREFIX=/usr exif=1 && sudo make install PREFIX=/usr;"
      ],

  'ddwrt-nvram-tools' => ["https://github.com/tknarr/ddwrt-nvram-tools.git", ''
      . " make && sudo cp nvram_build nvram_dump /usr/bin/;"
      ],

  iguanair => ["https://github.com/iguanaworks/iguanair.git", ''
      . " sudo apt-get install libusb-1.0-0-dev swig;"
      . " cd software/usb_ir;"
      . " cmake .;"
      . " make -j8;"
      . " sudo make install;"
      ],

  hexahopscoredump => ["https://github.com/teleshoes/hex-a-hop.git", ''
      . " git checkout scoredump;"
      . " sudo apt-get install hex-a-hop libsdl-pango-dev libsdl-ttf2.0-dev libsdl-mixer1.2-dev libsdl-image1.2-dev;"
      . " ./autogen.sh && ./configure && make -j2;"
      . " sudo cp src/hex-a-hop-scoredump /usr/bin"
      ],

  tvchan => ["https://github.com/teleshoes/tvchan.git"],

  net => ["https://github.com/teleshoes/net.git"],

  klomp => ["https://github.com/teleshoes/klomp.git", ''
      . " ./dependency-install.pl;"
      . " ./install.pl;"
      ],

  qtbtn => ["https://github.com/teleshoes/qtbtn.git"],

  qtbigtext => ["https://github.com/teleshoes/qtbigtext.git"],

  twip => ["https://github.com/teleshoes/twip.git"],

  #kitchensink => ["https://github.com/bacchanalia/KitchenSink.git"],

  hhpc => ["https://github.com/aktau/hhpc.git", ''
      . " make;"
      . " sudo cp hhpc /usr/local/bin;"
      ],
);

my @installOrder = @installs[ grep { ! ($_ % 2) } 0 .. $#installs ];
my %gitInstalls = @installs;

sub main(@) {
  if(@_ == 1 and $_[0] =~ /^(--list)$/){
    print map {"$_\n"} @installOrder;
    exit 0;
  }

  my @installs = @_;
  @installs = @installOrder if @installs == 0;

  for my $install(@installs){
    install $install;
  }
}

sub install($){
  my $install = shift;
  my $arr = $gitInstalls{$install};
  die "Unknown install '$install'\n" if not defined $arr;

  my $url = shift @$arr;
  my $cmd = shift @$arr;
  installFromGit $url, $cmd;
}

&main(@ARGV);
