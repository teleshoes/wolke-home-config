#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub install($);

my @INSTALLS_ARR = (
  ['arduino-cli' => "https://github.com/arduino/arduino-cli" => ''
      . " rm -f ~/.cache/go-build/trim.txt; "
      . " go build && sudo GOBIN=/usr/local/bin go install; "
  ],

  ['git-filter-repo' => "https://github.com/newren/git-filter-repo" => ''
      . " sudo cp git-filter-repo /usr/local/bin"
  ],

  ['coolreader' => "https://github.com/teleshoes/coolreader" => ''
      . " sudo apt install build-essential git cmake curl pkg-config zlib1g-dev libpng-dev"
      . "   libjpeg-dev libfreetype6-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev"
      . "   libunibreak-dev libzstd-dev libutf8proc-dev"
      . " ;"
      . " sudo apt install qtbase5-dev qttools5-dev;"
      . " mkdir qtbuild;"
      . " cmake"
      . "   -B qtbuild"
      . "   -D GUI=QT5"
      . "   -D CMAKE_BUILD_TYPE=Release"
      . "   -D MAX_IMAGE_SCALE_MUL=2"
      . "   -D DOC_DATA_COMPRESSION_LEVEL=3"
      . "   -D DOC_BUFFER_SIZE=0x1400000"
      . "   -D CMAKE_INSTALL_PREFIX=/usr"
      . "   ."
      . " &&"
      . " make -C qtbuild && sudo make -C qtbuild install"
  ],

  ['pico-lcd-msg' => "https://github.com/teleshoes/pico-lcd" => ''
      . " sudo ./install-pico-lcd-msg.sh;"
  ],

  ['wm-class-tool' => "https://github.com/teleshoes/wm-class-tool" => undef],

  ['lazygit' => "https://github.com/jesseduffield/lazygit" => undef],

  ['lenovo-throttling-fix' => "https://github.com/erpalma/lenovo-throttling-fix" => ''
      . " sudo ./install.sh;"
      . " sudo systemctl stop lenovo_fix || echo ok;"
      . " sudo systemctl disable lenovo_fix || echo ok;"
  ],

  ['pidgin-hide-chat-on-join' => "https://github.com/kgraefe/pidgin-hide-chat-on-join" => ''
      . " sudo apt-get install pidgin-dev intltool;"
      . " ./autogen.sh;"
      . " ./configure --prefix=/usr;"
      . " make;"
      . " sudo make install;"
  ],

  ['pidgin-pipe-status' => "https://github.com/teleshoes/pidgin-pipe-status" => ''
      . " ./install.sh;"
  ],

  ['purple-matrix' => "https://github.com/teleshoes/purple-matrix" => ''
      . " sudo apt-get install"
      . "    libpurple-dev libjson-glib-dev libglib2.0-dev libhttp-parser-dev"
      . "    libsqlite3-dev libolm-dev libgcrypt20-dev"
      . " ;"
      . " make clean && make -j8 && sudo make install;"
  ],

  ['gqlplus' => "https://github.com/teleshoes/gqlplus" => ''
      . " ./configure && make && sudo cp gqlplus /usr/bin"
  ],

  ['chatpop-pidgin' => "https://github.com/teleshoes/chatpop-pidgin" => ''
      . " ./install.sh"
  ],

  ['qtemail' => "https://github.com/teleshoes/qtemail" => ''
      . " ./dependencies-install.pl;"
      . " ./encodings-install.sh;"
      . " ./install.sh;"
  ],

  ['mhonarc' => "https://github.com/sympa-community/MHonArc" => ''
      . " perl Makefile.PL"
      . " && make"
      . " && sudo make install"
  ],

  ['feh' => "https://github.com/derf/feh" => ''
      . " sudo apt-get install libexif-dev libimlib2-dev libcurl4-openssl-dev;"
      . " make clean && make -j all PREFIX=/usr exif=1 && sudo make install PREFIX=/usr;"
  ],

  ['ddwrt-nvram-tools' => "https://github.com/tknarr/ddwrt-nvram-tools" => ''
      . " make && sudo cp nvram_build nvram_dump /usr/bin/;"
  ],

  ['pyeconet' => "https://github.com/teleshoes/pyeconet" => ''
      . "pip install --break-system-packages ."
  ],

  ['midea-beautiful-air' => "https://github.com/teleshoes/midea-beautiful-air" => ''
      . "pip install --break-system-packages ."
  ],

  ['iguanair' => "https://github.com/iguanaworks/iguanair" => ''
      . " sudo apt-get install libusb-1.0-0-dev swig;"
      . " cd software/usb_ir;"
      . " cmake .;"
      . " make -j8;"
      . " sudo make install;"
  ],

  ['hexahopscoredump' => "https://github.com/teleshoes/hex-a-hop" => ''
      . " git checkout scoredump;"
      . " sudo apt-get install hex-a-hop libsdl-pango-dev libsdl-ttf2.0-dev libsdl-mixer1.2-dev libsdl-image1.2-dev;"
      . " ./autogen.sh && ./configure && make -j2;"
      . " sudo cp src/hex-a-hop-scoredump /usr/bin"
  ],

  ['tvchan' => "https://github.com/teleshoes/tvchan" => undef],

  ['net' => "https://github.com/teleshoes/net" => undef],

  ['klomp' => "https://github.com/teleshoes/klomp" => ''
      . " ./dependency-install.pl;"
      . " ./install.pl;"
  ],

  ['qtbtn' => "https://github.com/teleshoes/qtbtn" => undef],

  ['qtbigtext' => "https://github.com/teleshoes/qtbigtext" => undef],

  ['hhpc' => "https://github.com/aktau/hhpc" => ''
      . " make;"
      . " sudo cp hhpc /usr/local/bin;"
  ],
);

my @INSTALL_NAMES = map {$$_[0]} @INSTALLS_ARR;
my %INSTALL_URLS = map {$$_[0] => $$_[1]} @INSTALLS_ARR;
my %INSTALL_ACTIONS = map {$$_[0] => $$_[2]} @INSTALLS_ARR;

sub main(@) {
  if(@_ == 1 and $_[0] =~ /^(--list)$/){
    my $fmt = join '', map {"$_\n"} @INSTALL_NAMES;
    print $fmt;
    exit 0;
  }

  my @targetInstallNames = @_;
  if(@targetInstallNames == 0){
    @targetInstallNames = @INSTALL_NAMES;
  }

  for my $name(@targetInstallNames){
    install $name;
  }
}

sub install($){
  my ($installName) = @_;
  my $url = $INSTALL_URLS{$installName};
  my $actionSubOrCmd = $INSTALL_ACTIONS{$installName};
  if(not defined $url){
    die "ERROR: unknown install '$installName'\n";
  }

  print "\n\nINSTALLING: $url\n";
  installFromGit $url, $actionSubOrCmd;
}

&main(@ARGV);
