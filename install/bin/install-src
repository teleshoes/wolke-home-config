#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub install($);

my %SYNONYMS = (
  'lenovo-throttling-fix' => "throttled",
);

my @INSTALLS_ARR = (
  ['arduino-cli' => "https://github.com/arduino/arduino-cli" => sub{
    my ($dir) = @_;
    runUser "rm", "-f", getHome() . "/.cache/go-build/trim.txt";
    runUser "go", "build", "-C", $dir;
    runSudo "GOBIN=/usr/local/bin go install -C '$dir'";
  }],

  ['git-filter-repo' => "https://github.com/newren/git-filter-repo" => sub{
    my ($dir) = @_;
    runSudo "cp", "$dir/git-filter-repo", "/usr/local/bin";
  }],

  ['coolreader' => "https://github.com/teleshoes/coolreader" => sub{
    my ($dir) = @_;
    runAptGet "install", qw(
      build-essential git cmake curl pkg-config zlib1g-dev libpng-dev
      libjpeg-dev libfreetype6-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev
      libunibreak-dev libzstd-dev libutf8proc-dev);
    runAptGet "install", "qtbase5-dev", "qttools5-dev";
    runUser "mkdir", "-p", "$dir/qtbuild";
    runUser "cmake",
      "-B", "$dir/qtbuild",
      "-D", "GUI=QT5",
      "-D", "CMAKE_BUILD_TYPE=Release",
      "-D", "MAX_IMAGE_SCALE_MUL=2",
      "-D", "DOC_DATA_COMPRESSION_LEVEL=3",
      "-D", "DOC_BUFFER_SIZE=0x1400000",
      "-D", "CMAKE_INSTALL_PREFIX=/usr",
      "$dir";
    runUser "make", "-C", "$dir/qtbuild";
    runSudo "make", "-C", "$dir/qtbuild", "install";
  }],

  ['wm-class-tool' => "https://github.com/teleshoes/wm-class-tool" => undef],

  ['lazygit' => "https://github.com/jesseduffield/lazygit" => undef],

  ['throttled' => "https://github.com/erpalma/throttled" => sub{
    my ($dir) = @_;
    runSudo "cd $dir && ./install.sh";
    print "\n\nattempting disable systemctl\n";
    tryrunSudo "systemctl", "stop", "throttled";
    tryrunSudo "systemctl", "disable", "throttled";
    print "ok\n";
  }],

  ['pidgin-hide-chat-on-join' => "https://github.com/kgraefe/pidgin-hide-chat-on-join" => sub{
    my ($dir) = @_;
    runAptGet "install", "pidgin-dev", "intltool";
    runUser "cd $dir && ./autogen.sh";
    runUser "cd $dir && ./configure --prefix=/usr";
    runUser "make", "-C", $dir;
    runSudo "make", "-C", $dir, "install";
  }],

  ['pidgin-pipe-status' => "https://github.com/teleshoes/pidgin-pipe-status" => undef],

  ['purple-matrix' => "https://github.com/teleshoes/purple-matrix" => sub{
    my ($dir) = @_;
    runAptGet "install", qw(
      libpurple-dev libjson-glib-dev libglib2.0-dev libhttp-parser-dev
      libsqlite3-dev libolm-dev libgcrypt20-dev
    );
    runUser "make", "-C", $dir, "clean";
    runUser "make", "-C", $dir, "-j", "8";
    runSudo "make", "-C", $dir, "install";
  }],

  ['gqlplus' => "https://github.com/teleshoes/gqlplus" => sub{
    my ($dir) = @_;
    runUser "cd $dir && ./configure";
    runUser "make", "-C", $dir;
    runSudo "cp", "$dir/gqlplus", "/usr/bin";
  }],

  ['chatpop-pidgin' => "https://github.com/teleshoes/chatpop-pidgin" => undef],

  ['qtemail' => "https://github.com/teleshoes/qtemail" => sub{
    my ($dir) = @_;
    runUserNoPty "cd $dir && ./dependencies-install.pl";
    runUserNoPty "cd $dir && ./encodings-install.sh";
    runUserNoPty "cd $dir && ./install.sh";
  }],

  ['mhonarc' => "https://github.com/sympa-community/MHonArc" => sub{
    my ($dir) = @_;
    runUser "cd $dir && perl Makefile.PL";
    runUser "make", "-C", $dir;
    runSudo "make", "-C", $dir, "install";
  }],

  ['feh' => "https://github.com/derf/feh" => sub{
    my ($dir) = @_;
    runAptGet "install", qw(libexif-dev libimlib2-dev libcurl4-openssl-dev);
    runUser "make", "-C", $dir, "clean";
    runUser "make", "-C", $dir, "-j", "all", "PREFIX=/usr", "exif=1";
    runSudo "make", "-C", $dir, "install", "PREFIX=/usr";
  }],

  ['ddwrt-nvram-tools' => "https://github.com/tknarr/ddwrt-nvram-tools" => sub{
    my ($dir) = @_;
    runUser "make", "-C", $dir;
    runSudo "cp", "$dir/nvram_build", "$dir/nvram_dump", "/usr/bin/";
  }],

  ['pyeconet' => "https://github.com/teleshoes/pyeconet" => sub{
    my ($dir) = @_;
    runUser "pip", "install", "--break-system-packages", $dir;
  }],

  ['midea-beautiful-air' => "https://github.com/teleshoes/midea-beautiful-air" => sub{
    my ($dir) = @_;
    runUser "pip", "install", "--break-system-packages", $dir;
  }],

  ['iguanair' => "https://github.com/iguanaworks/iguanair" => sub{
    my ($dir) = @_;
    runAptGet "install", "libusb-1.0-0-dev", "swig";
    my $usbIRDir = "$dir/software/usb_ir";
    runUser "cmake",
      "-B", $usbIRDir,
      $usbIRDir;

    #concurrent build fails sometimes with:
    #  iguanair/software/usb_ir/logging.c:16:10: fatal error: version.h:
    #    No such file or directory
    runUser "make", "-C", $usbIRDir, "-j", 1;

    runSudo "make", "-C", $usbIRDir, "install";
  }],

  ['hex-a-hop' => "https://github.com/teleshoes/hex-a-hop" => sub{
    my ($dir) = @_;
    runAptGet "install", qw(
      hex-a-hop libsdl-pango-dev libsdl-ttf2.0-dev libsdl-mixer1.2-dev libsdl-image1.2-dev
    );
    runUser "git", "-C", $dir, "checkout", "scoredump";
    runUser "cd $dir && ./autogen.sh";
    runUser "cd $dir && ./configure";

    #concurrent build fails sometimes
    runUser "make", "-C", $dir, "-j", 1;

    runSudo "make", "-C", $dir, "install";
  }],

  ['tvchan' => "https://github.com/teleshoes/tvchan" => undef],

  ['net' => "https://github.com/teleshoes/net" => undef],

  ['klomp' => "https://github.com/teleshoes/klomp" => sub{
    my ($dir) = @_;
    runUserNoPty "cd $dir && ./dependency-install.pl";
    runUserNoPty "cd $dir && ./install.pl";
  }],

  ['qtbtn' => "https://github.com/teleshoes/qtbtn" => undef],

  ['qtbigtext' => "https://github.com/teleshoes/qtbigtext" => undef],

  ['hhpc' => "https://github.com/aktau/hhpc" => sub{
    my ($dir) = @_;
    runUser "make", "-C", $dir;
    runSudo "cp", "$dir/hhpc", "/usr/local/bin";
  }],
);

my @INSTALL_NAMES = map {$$_[0]} @INSTALLS_ARR;
my %INSTALL_URLS = map {$$_[0] => $$_[1]} @INSTALLS_ARR;
my %INSTALL_ACTIONS = map {$$_[0] => $$_[2]} @INSTALLS_ARR;

sub main(@) {
  if(@_ == 1 and $_[0] =~ /^(--list)$/){
    my $fmt = join '', map {"$_\n"} (@INSTALL_NAMES, sort keys %SYNONYMS);
    print $fmt;
    exit 0;
  }

  my @targetInstallNames = @_;
  if(@targetInstallNames == 0){
    @targetInstallNames = @INSTALL_NAMES;
  }

  for my $name(@targetInstallNames){
    if(defined $SYNONYMS{$name}){
      print "$name => $SYNONYMS{$name}\n";
      $name = $SYNONYMS{$name};
    }
    install $name;
  }
}

sub install($){
  my ($installName) = @_;
  my $url = $INSTALL_URLS{$installName};
  my $actionSub = $INSTALL_ACTIONS{$installName};
  if(not defined $url){
    die "ERROR: unknown install '$installName'\n";
  }

  print "\n\nINSTALLING: $url\n";
  installFromGit $url, $actionSub;
}

&main(@ARGV);
