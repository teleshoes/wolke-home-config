#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub removeSFDKDocker();

my $SAILFISH_SDK_IMG_DIR = "/media/stuff/Images/sailfish-sdk";
my $SSL_1_1_DEB = "$SAILFISH_SDK_IMG_DIR/libssl1.1_1.1.1o-1_amd64.deb";

my $SAILFISH_OS_DIR = getHome() . "/SailfishOS";

sub main(@){
  runScript "install-docker";

  #sailfish SDK requires obsolete libssl1.1
  runSudo "dpkg", "-i", $SSL_1_1_DEB;

  removeSFDKDocker();

  print "\n\n";
  if(-e $SAILFISH_OS_DIR){
    my $bakDir = "$SAILFISH_OS_DIR.bak." . nowMillis();
    runUser "mv", $SAILFISH_OS_DIR, $bakDir;
  }

  if(-e $SAILFISH_OS_DIR){
    die "ERROR: $SAILFISH_OS_DIR already exists\n";
  }

  my @bakDirs = globDirs "$SAILFISH_OS_DIR.bak.*";
  if(@bakDirs > 0){
    print "\n\n";
    print "WARNING: backup dirs exist: @bakDirs\n";
    print "test build, and then manually do:\n rm -rf @bakDirs\n";
  }
}

sub removeSFDKDocker(){
  #remove docker container
  my $containerName = "sailfish-sdk-build-engine_" . getUsername();
  tryrunSudo "docker", "stop", $containerName;
  tryrunSudo "docker", "rm", $containerName;

  #remove docker images
  my @dockerImgs = procSudoChomp(
    "docker", "images", "-q", "--filter", "label=SharedInstall=$SAILFISH_OS_DIR",
  );
  if(@dockerImgs > 0){
    runSudo "docker", "rmi", @dockerImgs;
  }

  #remove docker network
  my $networkName = "sailfish-sdk:" . getUsername();
  tryrunSudo "docker", "network", "rm", $networkName;
}

&main(@ARGV);
