#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;
use Time::HiRes qw(sleep time);

sub killFirefox();
sub brieflyRunFirefox($);
sub installAddons();
sub greasemonkeySymlink();
sub setPrefs();
sub writeXulStore();
sub setupKeyboardShortcuts();
sub placesBackup();
sub placesRestore();
sub removeProfile();
sub getAddonXpiCache($);
sub putAddonXpiCache($$);
sub parseInstallRdf($);
sub ensureAddonsDownloaded();
sub extractXpiAddonsToProfile();
sub uninstallAllAddons();
sub enableAllAddons();
sub editMozillaPrefs($$$);
sub getUiCustomizationPref($);
sub getShortcutJson();
sub parseJsonKeyVals($);
sub modifyJsonKeyVals($$);
sub jsonMap($);
sub formatJsonCsv(@);
sub amoUrl($;$);
sub formatChunks($$@);

my $HOME = getHome();
my $PROFILE_DIR = "$HOME/.mozilla/firefox/profile";
my $DOWNLOAD_DIR = "$HOME/Downloads";
my $GREASEMONKEY_TARGET_DIR = "$HOME/greasemonkey";

my $FIREFOX_PROC_NAME = 'firefox-esr';
my $FIREFOX_EXEC_NAME = 'firefox';
my $FF_RUN_TIMEOUT_WITHOUT_EXTS_MILLIS = 8000;
my $FF_RUN_TIMEOUT_WITH_EXTS_MILLIS = 20000;

my $addons = {
  bookmarkfaviconchanger =>
    "https://github.com/teleshoes/firefox-addons/raw/master/bookmarkfaviconchanger-2.29.xpi",
  fbpurity =>
    "http://www.fbpurity.com/fbpurity.NINTNOH-R.xpi",

  dnsflusher                => amoUrl(7408),
  greasemonkey              => amoUrl(748),
  lazarus                   => amoUrl(6984, 'lazarus-form-recovery'),
  liveclick                 => amoUrl(2499),
  sessionmanager            => amoUrl(2324),
  textareacache             => amoUrl(5761),
  ublockorigin              => amoUrl(607454, 'ublock-origin'),
  useragentswitcher         => amoUrl(59),
  youtubehighdefinition     => amoUrl(328839),
};

my $shortcutJsonRelpath =
  "jetpack/keybinder\@fail.cl/simple-storage/store.json";

my $xulStoreJson = ""
  . "{\"chrome://browser/content/browser.xhtml\":"
  .   "{\"toolbar-menubar\":{\"autohide\":\"true\"}"        #hide menubar
  .   "}"
  . "}"
  ;

my %prefKeys = (
  dnsflusher            => "extensions.dnsFlusher",
  firebug               => "extensions.firebug",
  greasemonkey          => "extensions.greasemonkey",
  httpseverywhere       => "extensions.https_everywhere",
  liveclick             => "extensions.liveclick",
  noscript              => "noscript",
  sessionmanager        => "extensions.{1280606b-2510-4fe0-97ef-9b5a22eafe30}",
  stylish               => "extensions.stylish",
  youtubehighdefinition => "extensions.youtubehighdefinition",
);

my @zoomSteps = qw(.3 .5 .67 .8 .9 1 1.1 1.2 1.33 1.5 1.7 2 2.4 3 4 5);
my @zoomStepsPercents = map {sprintf "%d", $_*100} @zoomSteps;

my $prefs = {
  "dom.webnotifications.enabled"                                => "false", #fuck notifications
  "browser.customizemode.tip0.shown"                            => "true",  #firstrun hint
  "browser.download.dir"                                        => "\"$DOWNLOAD_DIR\"",
  "browser.download.folderList"                                 => "2",     #use download dir
  "browser.download.lastDir"                                    => "\"$DOWNLOAD_DIR\"", #save-as dir
  "browser.download.panel.shown"                                => "true",  #firstrun hint
  "browser.newtabpage.enabled"                                  => "false", #disable topsites blank page
  "browser.reader.detectedFirstArticle"                         => "true",  #firstrun hint
  "browser.startup.page"                                        => "0",     #show a blank page at startup
  "browser.urlbar.suggest.searches"                             => "false", #dont show suggs in urlbar
  "browser.urlbar.userMadeSearchSuggestionsChoice"              => "true",  #firstrun hint
  "browser.tabs.warnOnClose"                                    => "false", #closing multiple tabs warning

  "browser.toolbars.bookmarks.visibility"                       => "always",#always show bookmarks toolbar

  "toolkit.legacyUserProfileCustomizations.stylesheets"         => "true",  #enable theming user[Chrome|Content].css

  "media.autoplay.enabled"                                      => "true",  #autoplay HTML5 videos so YT works
  "datareporting.healthreport.uploadEnabled"                    => "false", #dont upload
  "datareporting.policy.dataSubmissionPolicyAcceptedVersion"    => "2",     #firstrun privacy prompt
  "datareporting.policy.dataSubmissionPolicyBypassNotification" => "true",  #firstrun privacy prompt
  "full-screen-api.approval-required"                           => "false", #allow fullscreen video
  "general.warnOnAboutConfig",                                  => "false", #firstrun hint
  "middlemouse.contentLoadURL"                                  => "false", #disable URL nav on middleclick
  "ui.key.menuAccessKeyFocuses"                                 => "false", #disable show-menu-bar on alt-press
  "ui.context_menus.after_mouseup"                              => "true",  #show context menu after right-click-up

  "zoom.maxPercent"                                             => "500",   #up from 300
  "toolkit.zoomManager.zoomValues"                              => join(",", @zoomSteps),

  "$prefKeys{httpseverywhere}._observatory.enabled"             => "false", #dont upload
  "$prefKeys{httpseverywhere}._observatory.popup_shown"         => "true",  #firstrun privacy prompt
  "$prefKeys{httpseverywhere}.toolbar_hint_shown"               => "true",  #firstrun hint
  "$prefKeys{dnsflusher}.reload-page"                           => "false",
  "$prefKeys{firebug}.showFirstRunPage"                         => "false", #firstrun relnotes
  "$prefKeys{greasemonkey}.stats.optedin"                       => "false", #dont upload
  "$prefKeys{greasemonkey}.stats.prompted"                      => "true",  #firstrun privacy prompt
  "$prefKeys{liveclick}.keepOpenOnMiddle"                       => "true",  #dont close rss feed
  "$prefKeys{noscript}.global"                                  => "true",  #disable noscript completely
  "$prefKeys{noscript}.ABE.enabled"                             => "false", #disable ABE
  "$prefKeys{noscript}.firstRunRedirection"                     => "false", #firstrun relnotes
  "$prefKeys{sessionmanager}.use_browser_crash_prompt"          => "true",  #single window on crash
  "$prefKeys{sessionmanager}.update_message"                    => "false", #firstrun relnotes
  "$prefKeys{stylish}.firstRun"                                 => "3",     #firstrun relnotes
  "$prefKeys{youtubehighdefinition}.currentvideoquality"        => "\"hd1080\"",
  "$prefKeys{youtubehighdefinition}.currentvideosize"           => "\"default\"",
  "$prefKeys{youtubehighdefinition}.enableannotationsoff"       => "true",
  "$prefKeys{youtubehighdefinition}.enablesuggestedautoplay"    => "false",
};
$$prefs{"browser.uiCustomization.state"} = getUiCustomizationPref({
  navBar => formatJsonCsv(qw(
    urlbar-container zoom-controls dnsflusher_toolbar_button
  )),
  hamburgerMenu => formatJsonCsv(qw(
    privatebrowsing-button preferences-button add-ons-button
    downloads-button history-panelmenu bookmarks-menu-button
    sessionmanager-toolbar ublock0-button textareaCacheButton
    youtubehighdefinition-toolbarbutton noscript-tbb panic-button
    useragentswitcher-button
  )),
  addonBar => formatJsonCsv(qw(addonbar-closebutton status-bar)),
  personalToolbar => formatJsonCsv(qw(personal-bookmarks)),
  tabsToolbar => formatJsonCsv(qw(tabbrowser-tabs new-tab-button alltabs-button)),
  toolbarMenu => formatJsonCsv(qw(menubar-items)),
  seen => formatJsonCsv(qw()),
  dirtyAreaCache => formatJsonCsv(qw()),
  currentVersion => 5,
  newElementCount => 0,
});

my $shortcutKeys = {
  key_fullZoomEnlarge => [  ["control","shift"], "VK_UP" ],
  key_fullZoomReduce  => [  ["control","shift"], "VK_DOWN" ],
};

my $resconfigScale = getResconfigScale();

my $browserExtensionDataPrefs = {
  'zoompage-we@DW-dev' => {
    "options-enablectrl789"     => "false",
    "options-enablerightwheel"  => "false",
    "options-defaultfulllevel"  => int(100 * $resconfigScale),
    "options-defaulttextlevel"  => int(100 * $resconfigScale),
    "options-defaultotherlevel" => int(100 * $resconfigScale),
    "options-zoomlevels"        => "[" . join(",", @zoomStepsPercents) . "]",
  },
};

my $usage = "Usage:
  $0
  $0 --safe
    same as:
      'greasemonkey prefs xulstore shortcuts'

  $0 --full
    same as:
      'placesbackup removeprofile addons greasemonkey prefs xulstore shortcuts placesrestore'

  $0 COMMAND [COMMAND COMMAND ..]
    perform the indicated command(s) to set up firefox addons/prefs/etc

  COMMANDS
    prefs
      selectively modify user.js and browser-extension-data files

    addons
      -download XPI files:" . formatChunks(5, "\n        ", sort keys %$addons) . "
      -kill firefox
      -uninstall all addons
      -start firefox, kill firefox, and uninstall again
      -extract XPI files to \"<profile>/extensions/\"
      -start firefox, kill firefox
      -enable addons in extensions.json
      -set all user.js + browser-extension-data prefs as in --prefs
      -start firefox, kill firefox

    greasemonkey
      replace gm_scripts dir with a symlink to $GREASEMONKEY_TARGET_DIR

    xulstore
      overwrite xulstore.json

    shortcuts
      overwrite shortcuts jetpack json file

    placesbackup
      copy 'places.sqlite*', 'permissions.sqlite*', 'logins.json' and 'key3.db' for use by 'placesrestore'

    placesrestore
      replace current 'places.sqlite*', 'permissions.sqlite*', 'logins.json' and 'key3.db' with last 'placesbackup'

    removeprofile
      move existing profile dir to a backup, create empty profile dir
";

sub main(@){
  if(not defined $PROFILE_DIR or not -d $PROFILE_DIR){
    die "ERROR: Could not find profile dir symlink $PROFILE_DIR";
  }

  my @commands;
  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--safe$)/)){
    @commands = qw(greasemonkey prefs xulstore shortcuts);
  }elsif(@_ == 1 and $_[0] =~ /^(--full$)/){
    @commands = qw(
      placesbackup
      removeprofile
      addons
      greasemonkey prefs xulstore shortcuts
      placesrestore
    );
  }else{
    @commands = @_;
  }

  for my $cmd(@commands){
    if($cmd =~ /^(addons)$/){
      installAddons();
    }elsif($cmd =~ /^(greasemonkey)$/){
      greasemonkeySymlink();
    }elsif($cmd =~ /^(prefs)$/){
      setPrefs();
    }elsif($cmd =~ /^(xulstore)$/){
      writeXulStore();
    }elsif($cmd =~ /^(shortcuts)$/){
      setupKeyboardShortcuts();
    }elsif($cmd =~ /^(placesbackup)$/){
      placesBackup();
    }elsif($cmd =~ /^(placesrestore)$/){
      placesRestore();
    }elsif($cmd =~ /^(removeprofile)$/){
      removeProfile();
    }else{
      die "$usage\nunknown command: $cmd\n";
    }
  }
}

sub killFirefox(){
  run "pkill", "-f", $FIREFOX_PROC_NAME;
}

sub brieflyRunFirefox($){
  my ($timeoutMillis) = @_;
  killFirefox();

  shell "$FIREFOX_EXEC_NAME &";

  print "waiting ${timeoutMillis}ms before killing firefox...\n";
  sleep ($timeoutMillis/1000);

  killFirefox();
}

sub installAddons(){
  print "\n\n\n##### ensuring addons downloaded\n";
  ensureAddonsDownloaded();

  killFirefox();

  print "\n\n\n##### forcibly uninstalling addons\n";
  uninstallAllAddons();
  brieflyRunFirefox($FF_RUN_TIMEOUT_WITHOUT_EXTS_MILLIS);
  uninstallAllAddons();

  print "\n\n\n##### installing addons\n";
  extractXpiAddonsToProfile();

  print "\n\n\n##### creating initial extensions.json and enabling addons\n";
  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  die "ERROR: $extJsonFile still exists\n" if -e $extJsonFile;
  brieflyRunFirefox($FF_RUN_TIMEOUT_WITHOUT_EXTS_MILLIS);
  die "ERROR: $extJsonFile does not exist\n" if not -f $extJsonFile;
  enableAllAddons();

  #setting prefs to prevent the firstrun pages of the addons with pref for it
  setPrefs();

  brieflyRunFirefox($FF_RUN_TIMEOUT_WITH_EXTS_MILLIS);
}

sub greasemonkeySymlink(){
  print "\n\n\n##### symlinking greasemonkey script dir\n";
  my $gmDir = "$PROFILE_DIR/gm_scripts";
  tryrun "rm", $gmDir;
  tryrun "rmdir", $gmDir;
  if(-d $gmDir){
    my $gmDirBak = "$PROFILE_DIR/gm_scripts-bak-" . int(time*1000);
    print "\n\nBACKING UP $gmDir =>\n$gmDirBak\n";
    run "mv", $gmDir, $gmDirBak;
  }
  die "Could not remove or backup $gmDir\n" if -e $gmDir;
  run "ln", "-s", $GREASEMONKEY_TARGET_DIR, $gmDir;
}

sub setPrefs(){
  print "\n\n\n##### editing user.js\n";
  my $userJs = "$PROFILE_DIR/user.js";
  system "touch", $userJs;
  die "Could not find user.js file\n" if not -f $userJs;
  editMozillaPrefs $userJs, "set-up-firefox", $prefs;

  for my $extension(sort keys %$browserExtensionDataPrefs){
    my $dir = "$PROFILE_DIR/browser-extension-data/$extension";
    my $storageJSFile = "$dir/storage.js";
    my $extensionPrefs = $$browserExtensionDataPrefs{$extension};
    run "mkdir", "-p", $dir;

    my $json = readFile $storageJSFile;
    my $jsonKeyVals = parseJsonKeyVals $json;
    modifyJsonKeyVals $jsonKeyVals, $extensionPrefs;
    $json = jsonMap $jsonKeyVals;
    writeFile $storageJSFile, $json;
  }
}

sub writeXulStore(){
  print "\n\n\n##### overwriting xulstore.json\n";
  my $xulStoreFile = "$PROFILE_DIR/xulstore.json";
  writeFile $xulStoreFile, $xulStoreJson;
}

sub setupKeyboardShortcuts(){
  print "\n\n\n##### editing keyboard shortcuts\n";
  my $shortcutsJson = "$PROFILE_DIR/$shortcutJsonRelpath";
  my $dir = $shortcutsJson;
  $dir =~ s/\/[^\/]*$//;
  system "mkdir", "-p", $dir;

  warn "warning: could not find shorcuts JSON file\n" if not -f $shortcutsJson;
  writeFile $shortcutsJson, getShortcutJson();
}

sub placesBackup(){
  print "\n\n\n##### backing up places/logins files\n";
  my @placesDbFiles = glob("$PROFILE_DIR/places.sqlite*");
  my @permsDbFiles = glob("$PROFILE_DIR/permissions.sqlite*");
  my $keyDb = "$PROFILE_DIR/key3.db";
  my $logins = "$PROFILE_DIR/logins.json";

  if(@placesDbFiles < 1 or @permsDbFiles < 1 or not -f $keyDb or not -f $logins){
    die "MISSING PLACES FILES TO BACKUP\n";
  }
  my @files = (@placesDbFiles, @permsDbFiles, $keyDb, $logins);

  my $backupDir = "$PROFILE_DIR/../places-backup/";
  run "rm", "-rf", $backupDir;
  run "mkdir", "-p", $backupDir;

  die "backup dir does not exist: $backupDir\n" if not -d $backupDir;
  run "cp", "-a", "--reflink=auto", @files, $backupDir;
}

sub placesRestore(){
  print "\n\n\n##### restoring places/logins files from backup\n";
  my @curPlacesDbFiles = glob("$PROFILE_DIR/places.sqlite*");
  my @curPermsDbFiles = glob("$PROFILE_DIR/permissions.sqlite*");
  my $curKeyDb = "$PROFILE_DIR/key3.db";
  my $curLogins = "$PROFILE_DIR/logins.json";

  my @curFiles = (@curPlacesDbFiles, @curPermsDbFiles);
  push @curFiles, $curKeyDb if -e $curKeyDb;
  push @curFiles, $curLogins if -e $curLogins;

  my @backupFiles = glob("$PROFILE_DIR/../places-backup/*");

  if(@backupFiles == 0){
    die "MISSING PLACES FILES TO RESTORE\n";
  }

  if(@curFiles > 0){
    my $tmpDir = "/tmp/places-restore-bak-" . int(time*1000);
    print "\nbacking up places-files that will be overwritten to:\n$tmpDir\n";
    run "mkdir", "-p", $tmpDir;
    run "mv", @curFiles, $tmpDir;
  }

  run "cp", "-a", "--reflink=auto", @backupFiles, $PROFILE_DIR;
}

sub removeProfile(){
  print "\n\n\n##### moving profile to backup and making empty profile\n";
  my $bakDir = "$PROFILE_DIR/../profile-bak-" . int(time*1000);
  run "mv", $PROFILE_DIR, $bakDir;
  run "mkdir", $PROFILE_DIR;
}

sub getAddonXpiCache($){
  my ($addon) = @_;
  my $addonCacheDir = "$HOME/.cache/firefox-addons";
  return globOne "$addonCacheDir/$addon-*.xpi";
}
sub putAddonXpiCache($$){
  my ($addon, $xpiFile) = @_;
  my $addonCacheDir = "$HOME/.cache/firefox-addons";
  run "mkdir", "-p", $addonCacheDir;

  my $addonInfo = parseInstallRdf $xpiFile;
  my $v = $$addonInfo{version};
  $v =~ s/[^0-9a-zA-Z_\-\.]/_/g;

  run "cp", "-a", $xpiFile, "$addonCacheDir/$addon-$v.xpi";
}

sub parseInstallRdf($){
  my ($xpiFile) = @_;
  open CMD, "-|", "unzip", "-p", $xpiFile, "install.rdf"
    or die "Could not extract install.rdf from $xpiFile: $!\n";
  my $installRdf = join '', <CMD>;
  close CMD;

  my $id = $1 if $installRdf =~ /<em:id>\s*(.+?)\s*<\/em:id>/;
  my $version = $1 if $installRdf =~ /<em:version>\s*(.+?)\s*<\/em:version>/;

  if(not defined $id or not defined $version){
    if($installRdf =~ /(<RDF:Description RDF:about="urn:mozilla:install-manifest"[^>]*>)/){
      my $rdfTag = $1;
      $id = $1 if $rdfTag =~ /em:id="([^"]+)"/;
      $version = $1 if $rdfTag =~ /em:version="([^"]+)"/;
    }
  }
  if(not defined $id or not defined $version){
    $id = $1 if $installRdf =~ /<id>\s*(.+?)\s*<\/id>/;
    $version = $1 if $installRdf =~ /<version>\s*(.+?)\s*<\/version>/;
  }


  if(not defined $id or not defined $version){
    die "Could not read id/version from $xpiFile install.rdf\n"
  }

  return {
    id => $id,
    version => $version,
  };
}

sub ensureAddonsDownloaded(){
  for my $addon(sort keys %$addons){
    if(not defined getAddonXpiCache($addon)){
      my $url = $$addons{$addon};
      my $urlFileBaseName = $1 if $url =~ /([^\/]+\.xpi)$/;
      my $dest = "/tmp/firefox-addon-tmp-" . int(time * 1000) . "-$urlFileBaseName";

      run "wget", "-O", $dest, $url;
      if(not -f $dest){
        die "addon $addon error: '$url' did not download correctly\n";
      }
      putAddonXpiCache $addon, $dest;
      run "rm", "-f", $dest;
    }
  }
}

sub extractXpiAddonsToProfile(){
  for my $addon(sort keys %$addons){
    my $xpiFile = getAddonXpiCache $addon;
    my $addonInfo = parseInstallRdf $xpiFile;
    my $destDir = "$PROFILE_DIR/extensions/$$addonInfo{id}";
    if(not -d $destDir){
      print "installing $addon\n";
      run "mkdir", "-p", $destDir;
      run "unzip", "-q", "-d", $destDir, $xpiFile;
    }
  }
}

sub uninstallAllAddons(){
  shell "rm", "-rf", "$PROFILE_DIR/extensions/*";
  shell "rm", "-rf", "$PROFILE_DIR/extensions.sqlite*";
  shell "rm", "-rf", "$PROFILE_DIR/extensions.json";
}

sub enableAllAddons(){
  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  my $contents = readFile $extJsonFile;
  $contents =~ s/,\"userDisabled\":true,/,\"userDisabled\":false,/g;
  writeFile $extJsonFile, $contents;
}

sub editMozillaPrefs($$$) {
  my ($name, $patchname, $config) = @_;

  #remove previous patch, keep patch file only as a record
  run "rm", "-f", "$name.$patchname.patch";

  editFile $name, $patchname, sub {
    my $cnts = shift;
    for my $key(sort keys %$config){
      my $re = "user_pref.*$key";
      $re =~ s/\{/\\\{/g;
      replaceOrAddLine $cnts, $re, "user_pref(\"$key\", $$config{$key});";
    }
    $cnts
  };
}

sub getUiCustomizationPref($){
  my ($uiState) = @_;
  my $json = ""
    . "{"
    . "\"placements\":{"
      . "\"PanelUI-contents\":[$$uiState{hamburgerMenu}],"
      . "\"addon-bar\":[$$uiState{addonBar}],"
      . "\"PersonalToolbar\":[$$uiState{personalToolbar}],"
      . "\"nav-bar\":[$$uiState{navBar}],"
      . "\"TabsToolbar\":[$$uiState{tabsToolbar}],"
      . "\"toolbar-menubar\":[$$uiState{toolbarMenu}]"
      . "},"
    . "\"seen\":[$$uiState{seen}],"
    . "\"dirtyAreaCache\":[$$uiState{dirtyAreaCache}],"
    . "\"currentVersion\":$$uiState{currentVersion},"
    . "\"newElementCount\":$$uiState{newElementCount}"
    . "}"
    ;
  $json =~ s/"/\\"/g;
  return "\"$json\"";
}

sub getShortcutJson(){
  my @overlays;
  for my $keyId(sort keys %$shortcutKeys){
    my ($mods, $keycode) = @{$$shortcutKeys{$keyId}};
    my $modArrStr = "[" . (join ",", map {"\"$_\""} @$mods) . "]";
    push @overlays, ''
      . '{'
        . '"_type":"overlay",'
        . '"key":'
        . '{'
          . '"_type":"key",'
          . '"id":"' . $keyId . '"'
        . '},'
        . '"shortcut":'
        . '{'
          . '"_type":"shortcut",'
          . '"keycode":"' . $keycode . '",'
          . '"modifiers":'
          . '{'
            . '"_type":"modifiers",'
            . '"modifiers":' . $modArrStr
          . '}'
        . '}'
      . '}'
    ;
  }
  return '{"overlays":[' . (join ",", @overlays) . ']}';
}

sub parseJsonKeyVals($){
  my ($json) = @_;
  my $ws = "[ \\t\\r\\n]";
  $json =~ s/^$ws*{$ws*(.+)$ws*}$ws*$/$1/s;
  my $jsonKeyVals = [];
  while($json =~ s/^$ws*"([^"]+)"$ws*:$ws*([^\[\{] [^,]* | \{[^\}]*\} | \[[^\]]*\])$ws*(?:,|$)//sx){
    push @$jsonKeyVals, $1;
    push @$jsonKeyVals, $2;
  }
  return $jsonKeyVals;
}

sub modifyJsonKeyVals($$){
  my ($jsonKeyVals, $changes) = @_;
  for my $key(sort keys %$changes){
    my $val = $$changes{$key};
    my $found = 0;
    for(my $i=0; $i<@$jsonKeyVals; $i+=2){
      if($$jsonKeyVals[$i] eq $key){
        $$jsonKeyVals[$i+1] = $val;
        $found = 1;
        last;
      }
    }
    if(not $found){
      push @$jsonKeyVals, $key;
      push @$jsonKeyVals, $val;
    }
  }
  return $jsonKeyVals;
}

sub jsonMap($){
  my ($jsonKeyVals) = @_;
  my @keyVals;
  for(my $i=0; $i<@$jsonKeyVals; $i+=2){
    my $key = $$jsonKeyVals[$i];
    my $val = $$jsonKeyVals[$i+1];
    push @keyVals, "\"$key\":$val";
  }
  my $json = "{" . join(",", @keyVals) . "}";
  return $json;
}

sub formatJsonCsv(@){
  return join ",", map {"\"$_\""} @_;
}

sub amoUrl($;$){
  my ($id, $name) = @_;
  $name = $id if not defined $name;
  return "https://addons.mozilla.org/firefox/downloads/latest/$name/addon-$id-latest.xpi";
}
sub formatChunks($$@){
  my ($chunkSize, $chunkPrefix, @items) = @_;
  my @chunks;
  my $chunk;
  for my $item(@items){
    if(not defined $chunk or @$chunk >= $chunkSize){
      $chunk = [];
      push @chunks, $chunk;
    }
    push @$chunk, $item;
  }
  return join '', map {"$chunkPrefix$_"} map {join " ", @$_} @chunks;
}

&main(@ARGV);
