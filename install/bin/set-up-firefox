#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;
use Time::HiRes qw(sleep time);

sub killFirefox();
sub brieflyRunFirefox($);
sub installAddons();
sub greasemonkeySymlink();
sub setPrefs();
sub writeXulStore();
sub setupKeyboardShortcuts();
sub placesBackup();
sub placesRestore();
sub removeProfile();
sub getAddonXpiCache($);
sub putAddonXpiCache($$);
sub extractXpiInfo($);
sub ensureAddonsDownloaded();
sub copyXpiAddonsToProfile();
sub uninstallAllAddons();
sub enableAllAddons();
sub editMozillaPrefs($$$);
sub getUiCustomizationPref($);
sub getShortcutJson();
sub parseJsonKeyVals($);
sub modifyJsonKeyVals($$);
sub jsonString($);
sub jsonArr($);
sub jsonStringArr($);
sub jsonMap($);
sub formatChunks($$@);

my $HOME = getHome();
my $PROFILE_DIR = "$HOME/.mozilla/firefox/profile";
my $DOWNLOAD_DIR = "$HOME/Downloads";
my $GREASEMONKEY_TARGET_DIR = "$HOME/greasemonkey";
my $ADDON_CUSTOM_XPI_DIR = "$HOME/.mozilla/custom-addons",
my $ADDON_CACHE_DIR = "$HOME/.cache/firefox-addons";

my $FIREFOX_PROC_NAME = 'firefox';
my $FIREFOX_EXEC_NAME = 'firefox';
my $FF_RUN_TIMEOUT_WITHOUT_EXTS_MILLIS = 8000;
my $FF_RUN_TIMEOUT_WITH_EXTS_MILLIS = 20000;

my $addons = {
  fbpurity                  => "file://$ADDON_CUSTOM_XPI_DIR/fbpurity-33.2.0.0.xpi",
  googlesearchlinkfix       => "file://$ADDON_CUSTOM_XPI_DIR/google-search-link-1.6.10.xpi",

  authenticator             => "https://addons.mozilla.org/firefox/downloads/file/3777718",
  disablehtml5autoplay      => "https://addons.mozilla.org/firefox/downloads/file/1097110",
  facebookcontainer         => "https://addons.mozilla.org/firefox/downloads/file/3818838",
  foxyproxy                 => "https://addons.mozilla.org/firefox/downloads/file/3616824",
  greasemonkey              => "https://addons.mozilla.org/firefox/downloads/file/3716451",
  livemarks                 => "https://addons.mozilla.org/firefox/downloads/file/3732574",
  textareacache             => "https://addons.mozilla.org/firefox/downloads/file/1698622",
  ublockorigin              => "https://addons.mozilla.org/firefox/downloads/file/3852058",
  useragentswitcher         => "https://addons.mozilla.org/firefox/downloads/file/3690660",
  videodownloadhelper       => "https://addons.mozilla.org/firefox/downloads/file/3804074",
  youtubehighdefinition     => "https://addons.mozilla.org/firefox/downloads/file/3719055",
};

my $shortcutJsonRelpath =
  "jetpack/keybinder\@fail.cl/simple-storage/store.json";

my $xulStoreJson = ""
  . "{\"chrome://browser/content/browser.xhtml\":"
  .   "{\"toolbar-menubar\":{\"autohide\":\"true\"}"        #hide menubar
  .   "}"
  . "}"
  ;

my %prefKeys = (
  firebug               => "extensions.firebug",
  greasemonkey          => "extensions.greasemonkey",
  httpseverywhere       => "extensions.https_everywhere",
  liveclick             => "extensions.liveclick",
  noscript              => "noscript",
  stylish               => "extensions.stylish",
  youtubehighdefinition => "extensions.youtubehighdefinition",
);

my @zoomSteps = qw(.3 .5 .67 .8 .9 1 1.1 1.2 1.33 1.5 1.7 2 2.4 3 4 5);
my @zoomStepsPercents = map {sprintf "%d", $_*100} @zoomSteps;

my $prefs = {
  "dom.webnotifications.enabled"                                => "false", #fuck notifications
  "browser.customizemode.tip0.shown"                            => "true",  #firstrun hint
  "browser.download.dir"                                        => "\"$DOWNLOAD_DIR\"",
  "browser.download.folderList"                                 => "2",     #use download dir
  "browser.download.lastDir"                                    => "\"$DOWNLOAD_DIR\"", #save-as dir
  "browser.download.panel.shown"                                => "true",  #firstrun hint
  "browser.newtabpage.enabled"                                  => "false", #disable topsites blank page
  "browser.reader.detectedFirstArticle"                         => "true",  #firstrun hint
  "browser.startup.page"                                        => "0",     #show a blank page at startup
  "browser.urlbar.suggest.searches"                             => "false", #dont show suggs in urlbar
  "browser.urlbar.userMadeSearchSuggestionsChoice"              => "true",  #firstrun hint
  "browser.tabs.warnOnClose"                                    => "false", #closing multiple tabs warning

  "browser.toolbars.bookmarks.visibility"                       => "always",#always show bookmarks toolbar

  "toolkit.legacyUserProfileCustomizations.stylesheets"         => "true",  #enable theming user[Chrome|Content].css

  "media.autoplay.enabled"                                      => "true",  #autoplay HTML5 videos so YT works
  "datareporting.healthreport.uploadEnabled"                    => "false", #dont upload
  "datareporting.policy.dataSubmissionPolicyAcceptedVersion"    => "2",     #firstrun privacy prompt
  "datareporting.policy.dataSubmissionPolicyBypassNotification" => "true",  #firstrun privacy prompt
  "full-screen-api.approval-required"                           => "false", #allow fullscreen video
  "general.warnOnAboutConfig",                                  => "false", #firstrun hint
  "middlemouse.contentLoadURL"                                  => "false", #disable URL nav on middleclick
  "ui.key.menuAccessKeyFocuses"                                 => "false", #disable show-menu-bar on alt-press
  "ui.context_menus.after_mouseup"                              => "true",  #show context menu after right-click-up

  "zoom.maxPercent"                                             => "500",   #up from 300
  "toolkit.zoomManager.zoomValues"                              => join(",", @zoomSteps),

  "$prefKeys{httpseverywhere}._observatory.enabled"             => "false", #dont upload
  "$prefKeys{httpseverywhere}._observatory.popup_shown"         => "true",  #firstrun privacy prompt
  "$prefKeys{httpseverywhere}.toolbar_hint_shown"               => "true",  #firstrun hint
  "$prefKeys{firebug}.showFirstRunPage"                         => "false", #firstrun relnotes
  "$prefKeys{greasemonkey}.stats.optedin"                       => "false", #dont upload
  "$prefKeys{greasemonkey}.stats.prompted"                      => "true",  #firstrun privacy prompt
  "$prefKeys{liveclick}.keepOpenOnMiddle"                       => "true",  #dont close rss feed
  "$prefKeys{noscript}.global"                                  => "true",  #disable noscript completely
  "$prefKeys{noscript}.ABE.enabled"                             => "false", #disable ABE
  "$prefKeys{noscript}.firstRunRedirection"                     => "false", #firstrun relnotes
  "$prefKeys{stylish}.firstRun"                                 => "3",     #firstrun relnotes
  "$prefKeys{youtubehighdefinition}.currentvideoquality"        => "\"hd1080\"",
  "$prefKeys{youtubehighdefinition}.currentvideosize"           => "\"default\"",
  "$prefKeys{youtubehighdefinition}.enableannotationsoff"       => "true",
  "$prefKeys{youtubehighdefinition}.enablesuggestedautoplay"    => "false",
};

$$prefs{"browser.uiCustomization.state"} = jsonString(jsonMap([
  "placements" => jsonMap([
    "nav-bar" => jsonStringArr([
      "back-button",
      "forward-button",
      "stop-reload-button",
      "urlbar-container",
      "zoom-controls",
      "authenticator_mymindstorm-browser-action",
      "foxyproxy_eric_h_jung-browser-action",
      "textarea-cache-lite_wildsky_cc-browser-action",
      "ublock0_raymondhill_net-browser-action",
      "user-agent-switcher_ninetailed_ninja-browser-action",
      "_7b1bf0b6-a1b9-42b0-b75d-252036438bdc_-browser-action", #youtube-high-def
      "_b9db16a4-6edc-47ec-a1f4-b86292ed211d_-browser-action", #video-download-helper
      "_e4a8a97b-f2ed-450b-b12d-ee082ba24781_-browser-action", #greasemonkey
    ]),
    "widget-overflow-fixed-list" => jsonStringArr([
      "privatebrowsing-button",
      "preferences-button",
      "add-ons-button",
      "downloads-button",
      "history-panelmenu",
      "bookmarks-menu-button",
      "panic-button",
    ]),
    "PersonalToolbar" => jsonStringArr([
      "personal-bookmarks",
    ]),
    "TabsToolbar" => jsonStringArr([
      "tabbrowser-tabs",
      "new-tab-button",
      "alltabs-button",
    ]),
    "toolbar-menubar" => jsonStringArr([
      "menubar-items",
    ]),
  ]),

  #prevent things that auto-insert themselves into nav bar
  "seen" => jsonStringArr([
  ]),

  "dirtyAreaCache"  => jsonArr([]),
  "currentVersion"  => "17",
  "newElementCount" => "0",
]));

my $shortcutKeys = {
  key_fullZoomEnlarge => [  ["control","shift"], "VK_UP" ],
  key_fullZoomReduce  => [  ["control","shift"], "VK_DOWN" ],
};

my $resconfigScale = getResconfigScale();

my $browserExtensionDataPrefs = {
  'zoompage-we@DW-dev' => {
    "options-enablectrl789"     => "false",
    "options-enablerightwheel"  => "false",
    "options-defaultfulllevel"  => int(100 * $resconfigScale),
    "options-defaulttextlevel"  => int(100 * $resconfigScale),
    "options-defaultotherlevel" => int(100 * $resconfigScale),
    "options-zoomlevels"        => "[" . join(",", @zoomStepsPercents) . "]",
  },
};

my $usage = "Usage:
  $0
  $0 --safe
    same as:
      'greasemonkey prefs xulstore shortcuts'

  $0 --full
    same as:
      'placesbackup removeprofile addons greasemonkey prefs xulstore shortcuts placesrestore'

  $0 COMMAND [COMMAND COMMAND ..]
    perform the indicated command(s) to set up firefox addons/prefs/etc

  COMMANDS
    prefs
      selectively modify user.js and browser-extension-data files

    addons
      -download XPI files:" . formatChunks(5, "\n        ", sort keys %$addons) . "
      -kill firefox
      -uninstall all addons
      -start firefox, kill firefox, and uninstall again
      -extract XPI files to \"<profile>/extensions/\"
      -start firefox, kill firefox
      -enable addons in extensions.json
      -set all user.js + browser-extension-data prefs as in --prefs
      -start firefox, kill firefox

    greasemonkey
      replace gm_scripts dir with a symlink to $GREASEMONKEY_TARGET_DIR

    xulstore
      overwrite xulstore.json

    shortcuts
      overwrite shortcuts jetpack json file

    placesbackup
      copy 'places.sqlite*', 'permissions.sqlite*', 'logins.json' and 'key3.db' for use by 'placesrestore'

    placesrestore
      replace current 'places.sqlite*', 'permissions.sqlite*', 'logins.json' and 'key3.db' with last 'placesbackup'

    removeprofile
      move existing profile dir to a backup, create empty profile dir
";

sub main(@){
  if(not defined $PROFILE_DIR or not -d $PROFILE_DIR){
    die "ERROR: Could not find profile dir symlink $PROFILE_DIR";
  }

  my @commands;
  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--safe$)/)){
    @commands = qw(greasemonkey prefs xulstore shortcuts);
  }elsif(@_ == 1 and $_[0] =~ /^(--full$)/){
    @commands = qw(
      placesbackup
      removeprofile
      addons
      greasemonkey prefs xulstore shortcuts
      placesrestore
    );
  }else{
    @commands = @_;
  }

  for my $cmd(@commands){
    if($cmd =~ /^(addons)$/){
      installAddons();
    }elsif($cmd =~ /^(greasemonkey)$/){
      greasemonkeySymlink();
    }elsif($cmd =~ /^(prefs)$/){
      setPrefs();
    }elsif($cmd =~ /^(xulstore)$/){
      writeXulStore();
    }elsif($cmd =~ /^(shortcuts)$/){
      setupKeyboardShortcuts();
    }elsif($cmd =~ /^(placesbackup)$/){
      placesBackup();
    }elsif($cmd =~ /^(placesrestore)$/){
      placesRestore();
    }elsif($cmd =~ /^(removeprofile)$/){
      removeProfile();
    }else{
      die "$usage\nunknown command: $cmd\n";
    }
  }
}

sub killFirefox(){
  tryrun "killall", $FIREFOX_PROC_NAME;
}

sub brieflyRunFirefox($){
  my ($timeoutMillis) = @_;
  killFirefox();

  shell "$FIREFOX_EXEC_NAME &";

  print "waiting ${timeoutMillis}ms before killing firefox...\n";
  sleep ($timeoutMillis/1000);

  killFirefox();
}

sub installAddons(){
  print "\n\n\n##### ensuring addons downloaded\n";
  ensureAddonsDownloaded();

  killFirefox();

  print "\n\n\n##### forcibly uninstalling addons\n";
  uninstallAllAddons();

  print "\n\n\n##### installing addons\n";
  copyXpiAddonsToProfile();

  print "\n\n\n##### start firefox to create extensions.json\n";
  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  die "ERROR: $extJsonFile still exists\n" if -e $extJsonFile;
  brieflyRunFirefox($FF_RUN_TIMEOUT_WITHOUT_EXTS_MILLIS);
  die "ERROR: $extJsonFile does not exist\n" if not -f $extJsonFile;

  print "\n\n\n##### enable addons and update prefs\n";
  enableAllAddons();

  #setting prefs to prevent the firstrun pages of the addons with pref for it
  setPrefs();
}

sub greasemonkeySymlink(){
  print "\n\n\n##### symlinking greasemonkey script dir\n";
  my $gmDir = "$PROFILE_DIR/gm_scripts";
  tryrun "rm", $gmDir;
  tryrun "rmdir", $gmDir;
  if(-d $gmDir){
    my $gmDirBak = "$PROFILE_DIR/gm_scripts-bak-" . int(time*1000);
    print "\n\nBACKING UP $gmDir =>\n$gmDirBak\n";
    run "mv", $gmDir, $gmDirBak;
  }
  die "Could not remove or backup $gmDir\n" if -e $gmDir;
  run "ln", "-s", $GREASEMONKEY_TARGET_DIR, $gmDir;
}

sub setPrefs(){
  print "\n\n\n##### editing user.js\n";
  my $userJs = "$PROFILE_DIR/user.js";
  system "touch", $userJs;
  die "Could not find user.js file\n" if not -f $userJs;
  editMozillaPrefs $userJs, "set-up-firefox", $prefs;

  for my $extension(sort keys %$browserExtensionDataPrefs){
    my $dir = "$PROFILE_DIR/browser-extension-data/$extension";
    my $storageJSFile = "$dir/storage.js";
    my $extensionPrefs = $$browserExtensionDataPrefs{$extension};
    run "mkdir", "-p", $dir;

    my $json = readFile $storageJSFile;
    my $jsonKeyVals = parseJsonKeyVals $json;
    modifyJsonKeyVals $jsonKeyVals, $extensionPrefs;
    $json = jsonMap $jsonKeyVals;
    writeFile $storageJSFile, $json;
  }
}

sub writeXulStore(){
  print "\n\n\n##### overwriting xulstore.json\n";
  my $xulStoreFile = "$PROFILE_DIR/xulstore.json";
  writeFile $xulStoreFile, $xulStoreJson;
}

sub setupKeyboardShortcuts(){
  print "\n\n\n##### editing keyboard shortcuts\n";
  my $shortcutsJson = "$PROFILE_DIR/$shortcutJsonRelpath";
  my $dir = $shortcutsJson;
  $dir =~ s/\/[^\/]*$//;
  system "mkdir", "-p", $dir;

  warn "warning: could not find shorcuts JSON file\n" if not -f $shortcutsJson;
  writeFile $shortcutsJson, getShortcutJson();
}

sub placesBackup(){
  print "\n\n\n##### backing up places/logins files\n";
  my @placesDbFiles = glob("$PROFILE_DIR/places.sqlite*");
  my @permsDbFiles = glob("$PROFILE_DIR/permissions.sqlite*");
  my $keyDb = "$PROFILE_DIR/key3.db";
  my $logins = "$PROFILE_DIR/logins.json";

  if(@placesDbFiles < 1 or @permsDbFiles < 1 or not -f $keyDb or not -f $logins){
    die "MISSING PLACES FILES TO BACKUP\n";
  }
  my @files = (@placesDbFiles, @permsDbFiles, $keyDb, $logins);

  my $backupDir = "$PROFILE_DIR/../places-backup/";
  run "rm", "-rf", $backupDir;
  run "mkdir", "-p", $backupDir;

  die "backup dir does not exist: $backupDir\n" if not -d $backupDir;
  run "cp", "-a", "--reflink=auto", @files, $backupDir;
}

sub placesRestore(){
  print "\n\n\n##### restoring places/logins files from backup\n";
  my @curPlacesDbFiles = glob("$PROFILE_DIR/places.sqlite*");
  my @curPermsDbFiles = glob("$PROFILE_DIR/permissions.sqlite*");
  my $curKeyDb = "$PROFILE_DIR/key3.db";
  my $curLogins = "$PROFILE_DIR/logins.json";

  my @curFiles = (@curPlacesDbFiles, @curPermsDbFiles);
  push @curFiles, $curKeyDb if -e $curKeyDb;
  push @curFiles, $curLogins if -e $curLogins;

  my @backupFiles = glob("$PROFILE_DIR/../places-backup/*");

  if(@backupFiles == 0){
    die "MISSING PLACES FILES TO RESTORE\n";
  }

  if(@curFiles > 0){
    my $tmpDir = "/tmp/places-restore-bak-" . int(time*1000);
    print "\nbacking up places-files that will be overwritten to:\n$tmpDir\n";
    run "mkdir", "-p", $tmpDir;
    run "mv", @curFiles, $tmpDir;
  }

  run "cp", "-a", "--reflink=auto", @backupFiles, $PROFILE_DIR;
}

sub removeProfile(){
  print "\n\n\n##### moving profile to backup and making empty profile\n";
  my $bakDir = "$PROFILE_DIR/../profile-bak-" . int(time*1000);
  run "mv", $PROFILE_DIR, $bakDir;
  run "mkdir", $PROFILE_DIR;
}

sub getAddonXpiCache($){
  my ($addonName) = @_;
  return globOne "$ADDON_CACHE_DIR/$addonName-*.xpi";
}
sub putAddonXpiCache($$){
  my ($addonName, $xpiFile) = @_;
  run "mkdir", "-p", $ADDON_CACHE_DIR;

  my $addonInfo = extractXpiInfo $xpiFile;
  my $version = $$addonInfo{version};
  $version =~ s/[^0-9a-zA-Z_\-\.]/_/g;
  if($version !~ /\d/){
    die "ERROR: $addonName version '$version' must contain at least one number\n";
  }

  run "cp", "-a", $xpiFile, "$ADDON_CACHE_DIR/$addonName-$version.xpi";
}

sub extractXpiInfo($){
  my ($xpiFile) = @_;
  open CMD, "-|", "unzip", "-p", $xpiFile, "manifest.json"
    or die "ERROR: could not extract manifest.json from $xpiFile\n$!\n";
  my $manifestJson = join '', <CMD>;
  close CMD;

  my $id;
  if($manifestJson =~ /"id":\s*"([^"]+)"/){
    $id = $1;
  }else{
    die "ERROR: could not read version from manifest.json inside $xpiFile\n";
  }

  my $version;
  if($manifestJson =~ /"version":\s*"([^"]+)"/){
    $version = $1;
  }else{
    die "ERROR: could not read version from manifest.json inside $xpiFile\n";
  }

  return {
    id => $id,
    version => $version,
  };
}

sub ensureAddonsDownloaded(){
  for my $addonName(sort keys %$addons){
    print "$addonName\n";
    if(not defined getAddonXpiCache($addonName)){
      my $url = $$addons{$addonName};
      my $xpiFile = "/tmp/firefox-addon-tmp-" . int(time * 1000) . ".xpi";

      run "curl", "-L", $url, "-o", $xpiFile;
      if(not -f $xpiFile){
        die "ERROR: failed to download $addonName XPI at $url\n";
      }
      putAddonXpiCache $addonName, $xpiFile;
      run "rm", "-f", $xpiFile;
      print "\n\n";
    }
  }
}

sub copyXpiAddonsToProfile(){
  for my $addon(sort keys %$addons){
    my $xpiFile = getAddonXpiCache $addon;
    my $addonInfo = extractXpiInfo $xpiFile;
    my $destXpi = "$PROFILE_DIR/extensions/$$addonInfo{id}.xpi";
    if(not -f $destXpi){
      print "installing $addon\n";
      run "cp", "-ar", $xpiFile, "$destXpi";
    }
  }
}

sub uninstallAllAddons(){
  shell "rm", "-rf", "$PROFILE_DIR/extensions/*";
  shell "rm", "-rf", "$PROFILE_DIR/extensions.sqlite*";
  shell "rm", "-rf", "$PROFILE_DIR/extensions.json";
}

sub enableAllAddons(){
  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  my $contents = readFile $extJsonFile;
  $contents =~ s/,\"userDisabled\":true,/,\"userDisabled\":false,/g;
  writeFile $extJsonFile, $contents;
}

sub editMozillaPrefs($$$) {
  my ($name, $patchname, $config) = @_;

  #remove previous patch, keep patch file only as a record
  run "rm", "-f", "$name.$patchname.patch";

  editFile $name, $patchname, sub {
    my $cnts = shift;
    for my $key(sort keys %$config){
      my $re = "user_pref.*$key";
      $re =~ s/\{/\\\{/g;
      replaceOrAddLine $cnts, $re, "user_pref(\"$key\", $$config{$key});";
    }
    $cnts
  };
}

sub getShortcutJson(){
  my @overlays;
  for my $keyId(sort keys %$shortcutKeys){
    my ($mods, $keycode) = @{$$shortcutKeys{$keyId}};
    my $modArrStr = "[" . (join ",", map {"\"$_\""} @$mods) . "]";
    push @overlays, ''
      . '{'
        . '"_type":"overlay",'
        . '"key":'
        . '{'
          . '"_type":"key",'
          . '"id":"' . $keyId . '"'
        . '},'
        . '"shortcut":'
        . '{'
          . '"_type":"shortcut",'
          . '"keycode":"' . $keycode . '",'
          . '"modifiers":'
          . '{'
            . '"_type":"modifiers",'
            . '"modifiers":' . $modArrStr
          . '}'
        . '}'
      . '}'
    ;
  }
  return '{"overlays":[' . (join ",", @overlays) . ']}';
}

sub parseJsonKeyVals($){
  my ($json) = @_;
  my $ws = "[ \\t\\r\\n]";
  $json =~ s/^$ws*{$ws*(.+)$ws*}$ws*$/$1/s;
  my $jsonKeyVals = [];
  while($json =~ s/^$ws*"([^"]+)"$ws*:$ws*([^\[\{] [^,]* | \{[^\}]*\} | \[[^\]]*\])$ws*(?:,|$)//sx){
    push @$jsonKeyVals, $1;
    push @$jsonKeyVals, $2;
  }
  return $jsonKeyVals;
}

sub modifyJsonKeyVals($$){
  my ($jsonKeyVals, $changes) = @_;
  for my $key(sort keys %$changes){
    my $val = $$changes{$key};
    my $found = 0;
    for(my $i=0; $i<@$jsonKeyVals; $i+=2){
      if($$jsonKeyVals[$i] eq $key){
        $$jsonKeyVals[$i+1] = $val;
        $found = 1;
        last;
      }
    }
    if(not $found){
      push @$jsonKeyVals, $key;
      push @$jsonKeyVals, $val;
    }
  }
  return $jsonKeyVals;
}

sub jsonString($){
  my ($str) = @_;
  $str =~ s/"/\\"/g;
  return "\"$str\"";
}
sub jsonArr($){
  my ($items) = @_;
  return "[" . join(",", @$items) . "]";
}
sub jsonStringArr($){
  my ($items) = @_;
  return jsonArr([map {jsonString $_} @$items]);
}
sub jsonMap($){
  my ($jsonKeyVals) = @_;
  my @keyVals;
  for(my $i=0; $i<@$jsonKeyVals; $i+=2){
    my $key = $$jsonKeyVals[$i];
    my $val = $$jsonKeyVals[$i+1];
    push @keyVals, "\"$key\":$val";
  }
  my $json = "{" . join(",", @keyVals) . "}";
  return $json;
}

sub formatChunks($$@){
  my ($chunkSize, $chunkPrefix, @items) = @_;
  my @chunks;
  my $chunk;
  for my $item(@items){
    if(not defined $chunk or @$chunk >= $chunkSize){
      $chunk = [];
      push @chunks, $chunk;
    }
    push @$chunk, $item;
  }
  return join '', map {"$chunkPrefix$_"} map {join " ", @$_} @chunks;
}

&main(@ARGV);
