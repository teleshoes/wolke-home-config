#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use Cwd qw(abs_path);
use ScriptScript;
use Time::HiRes qw(sleep time);

sub killFirefox();
sub brieflyRunFirefox($);
sub clearStartupCache();
sub installAddons();
sub greasemonkeySymlink();
sub setPrefs();
sub writeXulStore();
sub globOrFail($);
sub globMaybe($);
sub placesBackup();
sub placesRestore();
sub getAddonIds();
sub getAddonUUIDs();
sub addonBackup();
sub addonRestore();
sub removeProfile();
sub removeCache();
sub getAddonXpiCache($);
sub putAddonXpiCache($$);
sub extractXpiInfo($);
sub ensureAddonsDownloaded();
sub copyXpiAddonsToProfile();
sub uninstallAllAddons();
sub enableAllAddons();
sub editMozillaPrefs($$);
sub getUiCustomizationPref($);
sub jsonString($);
sub jsonArr($);
sub jsonStringArr($);
sub jsonMap($);
sub formatChunks($$@);

my $HOME = getHome();
my $PROFILE_DIR = "$HOME/.mozilla/firefox/profile";
my $FIREFOX_CACHE_DIR = "$HOME/.cache/mozilla/firefox/cache-profile";
my $DOWNLOAD_DIR = "$HOME/Downloads";
my $GREASEMONKEY_TARGET_DIR = "$HOME/greasemonkey";
my $ADDON_CUSTOM_XPI_DIR = "$HOME/.mozilla/custom-addons",
my $ADDON_CACHE_DIR = "$HOME/.cache/firefox-addons";

my $FIREFOX_PROC_NAME = 'firefox';
my $FIREFOX_EXEC_NAME = 'firefox';
my $FF_RUN_TIMEOUT_MILLIS = 10000;
my $FF_WINDOW_CLOSE_TIMEOUT_MILLIS = 500;

my $LEPTON_GITHUB_REPO = "https://github.com/teleshoes/Firefox-UI-Fix";

my @PLACES_PROFILE_FILE_PATTERNS = (
  "places.sqlite*",
  "permissions.sqlite*",
  "favicons.sqlite*",
  "key[34].db",
  "logins.json",
);

my $addons = {
  fbpurity                  => "file://$ADDON_CUSTOM_XPI_DIR/fbpurity-33.2.0.0.xpi",
  googlesearchlinkfix       => "file://$ADDON_CUSTOM_XPI_DIR/google-search-link-1.6.10.xpi",

  authenticator             => "https://addons.mozilla.org/firefox/downloads/file/3777718",
  disablehtml5autoplay      => "https://addons.mozilla.org/firefox/downloads/file/1097110",
  facebookcontainer         => "https://addons.mozilla.org/firefox/downloads/file/3818838",
  foxyproxy                 => "https://addons.mozilla.org/firefox/downloads/file/3616824",
  greasemonkey              => "https://addons.mozilla.org/firefox/downloads/file/3716451",
  livemarks                 => "https://addons.mozilla.org/firefox/downloads/file/3732574",
  textareacache             => "https://addons.mozilla.org/firefox/downloads/file/1698622",
  ublockorigin              => "https://addons.mozilla.org/firefox/downloads/file/3852058",
  useragentswitcher         => "https://addons.mozilla.org/firefox/downloads/file/3690660",
  videodownloadhelper       => "https://addons.mozilla.org/firefox/downloads/file/3804074",
  youtubehighdefinition     => "https://addons.mozilla.org/firefox/downloads/file/3719055",
  zoompagewe                => "https://addons.mozilla.org/firefox/downloads/file/3850992",
};

my $xulStoreJson = ""
  . "{\"chrome://browser/content/browser.xhtml\":"
  .   "{\"toolbar-menubar\":{\"autohide\":\"true\"}"        #hide menubar
  .   "}"
  . "}"
  ;

my @zoomSteps = qw(.3 .5 .67 .8 .9 1 1.1 1.2 1.33 1.5 1.7 2 2.4 3 4 5);
my @zoomStepsPercents = map {sprintf "%d", $_*100} @zoomSteps;

my $prefs = {
  "dom.webnotifications.enabled"                                => "false", #fuck notifications
  "dom.block_download_insecure"                                 => "false", #allow HTTP downloads
  "browser.customizemode.tip0.shown"                            => "true",  #firstrun hint
  "browser.download.dir"                                        => "\"$DOWNLOAD_DIR\"",
  "browser.download.folderList"                                 => "2",     #use download dir
  "browser.download.lastDir"                                    => "\"$DOWNLOAD_DIR\"", #save-as dir
  "browser.download.panel.shown"                                => "true",  #firstrun hint
  "browser.newtabpage.enabled"                                  => "false", #disable topsites blank page
  "browser.reader.detectedFirstArticle"                         => "true",  #firstrun hint
  "browser.startup.page"                                        => "0",     #show a blank page at startup
  "browser.urlbar.suggest.searches"                             => "false", #dont show suggs in urlbar
  "browser.urlbar.userMadeSearchSuggestionsChoice"              => "true",  #firstrun hint
  "browser.tabs.warnOnClose"                                    => "false", #closing multiple tabs warning

  "browser.tabs.firefox-view"                                   => "false", #disable annoying firefox-view button

  "widget.non-native-theme.enabled"                             => "true",  #true is default, used to need false
  "widget.non-native-theme.gtk.scrollbar.allow-buttons"         => "true",  #add scrollbar buttons if style=gtk
  "widget.non-native-theme.scrollbar.size.override"             => "20",    #scrollbar width in px
  "widget.non-native-theme.scrollbar.style"                     => "2",     #default=0, gtk=2, win10=4

  "browser.toolbars.bookmarks.visibility"                       => "\"always\"",#always show bookmarks toolbar

  "toolkit.legacyUserProfileCustomizations.stylesheets"         => "true",  #enable theming user[Chrome|Content].css

  "toolkit.telemetry.enabled"                                   => "false", #dont send telemetry
  "toolkit.telemetry.unified"                                   => "false", #dont record telemetry
  "toolkit.telemetry.archive.enabled"                           => "false", #dont archive telemetry

  "media.autoplay.enabled"                                      => "true",  #autoplay HTML5 videos so YT works
  "datareporting.healthreport.uploadEnabled"                    => "false", #dont upload
  "datareporting.policy.dataSubmissionEnabled"                  => "false", #disable policy submission
  "datareporting.policy.dataSubmissionPolicyAcceptedVersion"    => "2",     #firstrun privacy prompt
  "datareporting.policy.dataSubmissionPolicyBypassNotification" => "true",  #firstrun privacy prompt
  "full-screen-api.approval-required"                           => "false", #allow fullscreen video
  "general.warnOnAboutConfig",                                  => "false", #firstrun hint
  "middlemouse.contentLoadURL"                                  => "false", #disable URL nav on middleclick
  "ui.key.menuAccessKeyFocuses"                                 => "false", #disable show-menu-bar on alt-press
  "ui.context_menus.after_mouseup"                              => "true",  #show context menu after right-click-up

  "zoom.maxPercent"                                             => "500",   #up from 300
  "toolkit.zoomManager.zoomValues"                              => "\"" . join(",", @zoomSteps) . "\"",
};

$$prefs{"browser.uiCustomization.state"} = jsonString(jsonMap([
  "placements" => jsonMap([
    "nav-bar" => jsonStringArr([
      "back-button",
      "forward-button",
      "stop-reload-button",
      "urlbar-container",
      "zoom-controls",
      "authenticator_mymindstorm-browser-action",
      "foxyproxy_eric_h_jung-browser-action",
      "textarea-cache-lite_wildsky_cc-browser-action",
      "ublock0_raymondhill_net-browser-action",
      "user-agent-switcher_ninetailed_ninja-browser-action",
      "_7b1bf0b6-a1b9-42b0-b75d-252036438bdc_-browser-action", #youtube-high-def
      "_b9db16a4-6edc-47ec-a1f4-b86292ed211d_-browser-action", #video-download-helper
      "_e4a8a97b-f2ed-450b-b12d-ee082ba24781_-browser-action", #greasemonkey
    ]),
    "widget-overflow-fixed-list" => jsonStringArr([
    ]),
    "PersonalToolbar" => jsonStringArr([
      "personal-bookmarks",
    ]),
    "TabsToolbar" => jsonStringArr([
      "tabbrowser-tabs",
      "new-tab-button",
      "alltabs-button",
    ]),
    "toolbar-menubar" => jsonStringArr([
      "menubar-items",
    ]),
  ]),

  #prevent things that auto-insert themselves into nav bar
  "seen" => jsonStringArr([
    "disable-html5-autoplay_afnankhan-browser-action",
    "fbpelectrowebext_fbpurity_com-browser-action",
    "_contain-facebook-browser-action",
    "zoompage-we_dw-dev-browser-action",
  ]),

  "dirtyAreaCache"  => jsonArr([]),
  "currentVersion"  => "17",
  "newElementCount" => "0",
]));

my $resconfigScale = getResconfigScale();


my $usage = "Usage:
  $0
  $0 --safe
    same as:
      'greasemonkey prefs xulstore chrome'

  $0 --full
    same as:
      placesbackup
      addonbackup
      removeprofile
      removecache
      prefs
      chrome
      addons
      greasemonkey
      xulstore
      placesrestore
      addonrestore

  $0 COMMAND [COMMAND COMMAND ..]
    perform the indicated command(s) to set up firefox addons/prefs/etc

  COMMANDS
    prefs
      selectively modify user.js

    chrome
      setup chrome using $LEPTON_GITHUB_REPO

    addons
      -download+cache uncached XPI files:"
         . formatChunks(5, "\n        ", sort keys %$addons) . "
      -kill firefox
      -uninstall all addons
      -copy XPI files to \"<profile>/extensions/\" with appropriate filenames
      -remove CACHE_DIR/startupCache/ and PROFILE_DIR/addonStartup.json.lz4
      -run firefox for " . sprintf("%.1f", $FF_RUN_TIMEOUT_MILLIS/1000.0) . "
      -remove CACHE_DIR/startupCache/ and PROFILE_DIR/addonStartup.json.lz4
      -enable addons in extensions.json
      -run firefox for " . sprintf("%.1f", $FF_RUN_TIMEOUT_MILLIS/1000.0) . "
      -run firefox for " . sprintf("%.1f", $FF_RUN_TIMEOUT_MILLIS/1000.0) . "

    greasemonkey
      replace gm_scripts dir with a symlink to $GREASEMONKEY_TARGET_DIR

    xulstore
      overwrite xulstore.json

    placesbackup
      backup files from PROFILE_DIR/ to PROFILE_DIR/../places-backup/
        @PLACES_PROFILE_FILE_PATTERNS

    placesrestore
      restore files from PROFILE_DIR/../places-backup/ to PROFILE_DIR/
        @PLACES_PROFILE_FILE_PATTERNS

    removeprofile
      move existing profile dir to a backup, create empty profile dir

    removecache
      move existing cache dir to a backup, create empty cache dir
";

sub main(@){
  if(not -d $PROFILE_DIR){
    die "ERROR: Could not find profile dir symlink $PROFILE_DIR";
  }
  if(not -d $FIREFOX_CACHE_DIR){
    die "ERROR: Could not find firefox per-profile cache dir symlink $FIREFOX_CACHE_DIR";
  }

  my @commands;
  if(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--safe$)/)){
    @commands = qw(greasemonkey prefs xulstore chrome);
  }elsif(@_ == 1 and $_[0] =~ /^(--full$)/){
    @commands = qw(
      placesbackup
      removeprofile
      removecache
      prefs
      chrome
      addons
      greasemonkey
      xulstore
      placesrestore
    );
  }else{
    @commands = @_;
  }

  for my $cmd(@commands){
    if($cmd =~ /^(addons)$/){
      installAddons();
    }elsif($cmd =~ /^(greasemonkey)$/){
      greasemonkeySymlink();
    }elsif($cmd =~ /^(prefs)$/){
      setPrefs();
    }elsif($cmd =~ /^(chrome)$/){
      setupLeptonChrome();
    }elsif($cmd =~ /^(xulstore)$/){
      writeXulStore();
    }elsif($cmd =~ /^(placesbackup)$/){
      placesBackup();
    }elsif($cmd =~ /^(placesrestore)$/){
      placesRestore();
    }elsif($cmd =~ /^(addonbackup)$/){
      addonBackup();
    }elsif($cmd =~ /^(addonrestore)$/){
      addonRestore();
    }elsif($cmd =~ /^(removeprofile)$/){
      removeProfile();
    }elsif($cmd =~ /^(removecache)$/){
      removeCache();
    }else{
      die "$usage\nunknown command: $cmd\n";
    }
  }
}

sub killFirefox(){
  #try graceful window close first
  tryrun "wmctrl", "-x", "-c", $FIREFOX_PROC_NAME;
  sleep ($FF_WINDOW_CLOSE_TIMEOUT_MILLIS/1000);
  tryrun "killall", $FIREFOX_PROC_NAME;
}

sub brieflyRunFirefox($){
  my ($timeoutMillis) = @_;

  print "\nbriefly running firefox\n";
  killFirefox();

  my $tmpOut = "/tmp/firefox-output-" . int(time*1000);
  print "writing firefox output to $tmpOut\n";
  run "$FIREFOX_EXEC_NAME >$tmpOut 2>$tmpOut &";

  printf "waiting %.1fs before killing firefox...\n", $timeoutMillis/1000.0;
  sleep ($timeoutMillis/1000);

  killFirefox();
}

sub clearStartupCache(){
  run "rm", "-rf", "$FIREFOX_CACHE_DIR/startupCache";
  run "rm", "-f", "$PROFILE_DIR/addonStartup.json.lz4";
}

sub installAddons(){
  print "\n\n\n##### ensuring addons downloaded\n";
  ensureAddonsDownloaded();

  killFirefox();

  print "\n\n\n##### forcibly uninstalling addons\n";
  uninstallAllAddons();

  print "\n\n\n##### installing addons\n";
  copyXpiAddonsToProfile();

  print "\n\n\n##### start firefox to install addons + create extensions.json\n";
  clearStartupCache();
  brieflyRunFirefox($FF_RUN_TIMEOUT_MILLIS);
  clearStartupCache();

  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  die "ERROR: $extJsonFile does not exist\n" if not -f $extJsonFile;

  print "\n\n\n##### enable addons\n";
  enableAllAddons();

  brieflyRunFirefox($FF_RUN_TIMEOUT_MILLIS);

  brieflyRunFirefox($FF_RUN_TIMEOUT_MILLIS);
}

sub greasemonkeySymlink(){
  print "\n\n\n##### symlinking greasemonkey script dir\n";
  my $gmDir = "$PROFILE_DIR/gm_scripts";
  tryrun "rm", $gmDir;
  tryrun "rmdir", $gmDir;
  if(-d $gmDir){
    my $gmDirBak = "$PROFILE_DIR/gm_scripts-bak-" . int(time*1000);
    print "\n\nBACKING UP $gmDir =>\n$gmDirBak\n";
    run "mv", $gmDir, $gmDirBak;
  }
  die "Could not remove or backup $gmDir\n" if -e $gmDir;
  symlinkFile $GREASEMONKEY_TARGET_DIR, $gmDir;
}

sub setPrefs(){
  print "\n\n\n##### editing user.js\n";
  my $userJs = "$PROFILE_DIR/user.js";
  run "touch", $userJs;
  die "Could not find user.js file\n" if not -f $userJs;
  editMozillaPrefs $userJs, $prefs;
}

sub setupLeptonChrome(){
  installFromGit $LEPTON_GITHUB_REPO, "
    mkdir -p $PROFILE_DIR/chrome/
    rsync -avP userContent.css userChrome.css css icons $PROFILE_DIR/chrome/
  ";
}

sub writeXulStore(){
  print "\n\n\n##### overwriting xulstore.json\n";
  my $xulStoreFile = "$PROFILE_DIR/xulstore.json";
  writeFile $xulStoreFile, $xulStoreJson;
}

sub globOrFail($){
  my ($pattern) = @_;
  my @files = grep {-e $_} glob($pattern);
  if(@files == 0){
    die "ERROR: could not find files matching $pattern\n";
  }
  return @files;
}
sub globMaybe($){
  my ($pattern) = @_;
  my @files = glob($pattern);
  return grep {-e $_} @files;
}


sub placesBackup(){
  print "\n\n\n##### backing up places/logins files\n";
  my @files;
  for my $pattern(@PLACES_PROFILE_FILE_PATTERNS){
    @files = (@files, globOrFail("$PROFILE_DIR/$pattern"));
  }

  my $backupDir = "$PROFILE_DIR/../places-backup/";
  run "rm", "-rf", $backupDir;
  run "mkdir", "-p", $backupDir;

  die "backup dir does not exist: $backupDir\n" if not -d $backupDir;
  run "cp", "-a", "--reflink=auto", @files, $backupDir;
}

sub placesRestore(){
  print "\n\n\n##### restoring places/logins files from backup\n";
  my @curFiles;
  for my $pattern(@PLACES_PROFILE_FILE_PATTERNS){
    @curFiles = (@curFiles, globMaybe("$PROFILE_DIR/$pattern"));
  }

  my @backupFiles = glob("$PROFILE_DIR/../places-backup/*");

  if(@backupFiles == 0){
    die "MISSING PLACES FILES TO RESTORE\n";
  }

  if(@curFiles > 0){
    my $tmpDir = "/tmp/places-restore-bak-" . int(time*1000);
    print "\nbacking up places-files that will be overwritten to:\n$tmpDir\n";
    run "mkdir", "-p", $tmpDir;
    run "mv", @curFiles, $tmpDir;
  }

  run "cp", "-a", "--reflink=auto", @backupFiles, $PROFILE_DIR;
}

sub getAddonIds(){
  my $addonIds = {};
  for my $addonName(sort keys %$addons){
    my $xpiFile = getAddonXpiCache($addonName);
    die "ERROR: no XPI found for $addonName\n" if not defined $xpiFile;
    my $addonInfo = extractXpiInfo $xpiFile;
    $$addonIds{$addonName} = $$addonInfo{id};
  }
  return $addonIds;
}

sub getAddonUUIDs(){
  my $addonIds = getAddonIds();
  open FH, "< $PROFILE_DIR/prefs.js" or die "ERROR: could not read prefs.js\n$!\n";
  my $uuidJson;
  while(my $line = <FH>){
    if($line =~ /^
        \s* user_pref \s* \( \s*
        "extensions\.webextensions\.uuids"
        \s* , \s*
        "(.*)" \s* \) \s* ; \s*
    $/x){
      $uuidJson = $1;
      last;
    }
  }
  close FH;
  die "ERROR: could not find UUIDs in prefs.js\n" if not defined $uuidJson;
  $uuidJson =~ s/\\"/"/g;

  my $h4 = "[0-9a-f]{4}";
  my $uuidRegex = "$h4$h4-$h4-$h4-$h4-$h4$h4$h4";

  my $addonUUIDs = {};
  for my $addonName(sort keys %$addons){
    my $addonId = $$addonIds{$addonName};
    if($uuidJson =~ /"\Q$addonId\E":"($uuidRegex)"/){
      $$addonUUIDs{$addonName} = $1;
    }else{
      die "ERROR: could not UUID in prefs.js for $addonName ($addonId)\n";
    }
  }

  return $addonUUIDs;
}

sub addonBackup(){
  my $backupDir = "$PROFILE_DIR/../addons-backup";
  run "rm", "-rf", "$backupDir/";
  run "mkdir", "-p", "$backupDir/";

  my $addonUUIDs = getAddonUUIDs();
  for my $addonName(sort keys %$addonUUIDs){
    my $addonUUID = $$addonUUIDs{$addonName};
    my @localStorageDirs = glob "$PROFILE_DIR/storage/default/moz-extension+++$addonUUID*/";
    if(@localStorageDirs == 0){
      print "SKIPPING $addonName\n";
      next;
    }else{
      print "backing up $addonName local storage dirs\n";
    }

    for my $dir(@localStorageDirs){
      my $destName = $dir;
      $destName =~ s/\/*$//;
      $destName =~ s/^.*\///;

      if($destName !~ s/^moz-extension\+\+\+$addonUUID/=$addonName=/){
        die "ERROR: malformed $addonName local storage dir $dir\n";
      }
      run "cp", "-ar", "--reflink=auto", "$dir/", "$backupDir/$destName/";
    }
  }
}
sub addonRestore(){
  my $backupDir = "$PROFILE_DIR/../addons-backup";
  my $addonUUIDs = getAddonUUIDs();

  my $tmpDir = "/tmp/firefox-addons-restore-bak-" . int(time*1000);
  run "mkdir", "-p", $tmpDir;

  for my $backupDir(glob "$backupDir/*/"){
    if($backupDir =~ /\/=(\w+)=(.*)$/){
      my ($addonName, $suffix) = ($1, $2);
      my $addonUUID = $$addonUUIDs{$addonName};
      if(not defined $addonUUID){
        die "ERROR: unknown addonName $addonName (remove '$backupDir' to continue)\n";
      }
      my $destDir = "$PROFILE_DIR/storage/default/moz-extension+++$addonUUID$suffix";

      if(-e $destDir){
        run "mv", $destDir, "$tmpDir/";
      }
      run "cp", "-ar", "--reflink=auto", $backupDir, $destDir;
    }else{
      die "ERROR: malformed addon backup dir $backupDir\n";
    }
  }
}

sub removeProfile(){
  print "\n\n\n##### moving profile to backup and making empty profile\n";
  my $realProfileDir = abs_path $PROFILE_DIR;
  if(-l $realProfileDir or not -d $realProfileDir or $realProfileDir eq $PROFILE_DIR){
    die "ERROR: could not find real profile dir for symlink $PROFILE_DIR\n";
  }

  my $bakDir = "$realProfileDir/../profile-bak-" . int(time*1000);
  run "mv", $realProfileDir, $bakDir;
  run "mkdir", $realProfileDir;
}
sub removeCache(){
  print "\n\n\n##### moving cache dir to backup and making empty cache dir\n";
  my $realCacheDir = abs_path $FIREFOX_CACHE_DIR;
  if(-l $realCacheDir or not -d $realCacheDir or $realCacheDir eq $FIREFOX_CACHE_DIR){
    die "ERROR: could not find real cache dir for symlink $FIREFOX_CACHE_DIR\n";
  }

  my $bakDir = "$realCacheDir/../cache-bak-" . int(time*1000);
  run "mv", $realCacheDir, $bakDir;
  run "mkdir", $realCacheDir;
}

sub getAddonXpiCache($){
  my ($addonName) = @_;
  return globOne "$ADDON_CACHE_DIR/$addonName-*.xpi";
}
sub putAddonXpiCache($$){
  my ($addonName, $xpiFile) = @_;
  run "mkdir", "-p", $ADDON_CACHE_DIR;

  my $addonInfo = extractXpiInfo $xpiFile;
  my $version = $$addonInfo{version};
  $version =~ s/[^0-9a-zA-Z_\-\.]/_/g;
  if($version !~ /\d/){
    die "ERROR: $addonName version '$version' must contain at least one number\n";
  }

  run "cp", "-a", $xpiFile, "$ADDON_CACHE_DIR/$addonName-$version.xpi";
}

sub extractXpiInfo($){
  my ($xpiFile) = @_;
  open CMD, "-|", "unzip", "-p", $xpiFile, "manifest.json"
    or die "ERROR: could not extract manifest.json from $xpiFile\n$!\n";
  my $manifestJson = join '', <CMD>;
  close CMD;

  my $id;
  if($manifestJson =~ /"id":\s*"([^"]+)"/){
    $id = $1;
  }else{
    die "ERROR: could not read version from manifest.json inside $xpiFile\n";
  }

  my $version;
  if($manifestJson =~ /"version":\s*"([^"]+)"/){
    $version = $1;
  }else{
    die "ERROR: could not read version from manifest.json inside $xpiFile\n";
  }

  return {
    id => $id,
    version => $version,
  };
}

sub ensureAddonsDownloaded(){
  for my $addonName(sort keys %$addons){
    print "$addonName\n";
    if(not defined getAddonXpiCache($addonName)){
      my $url = $$addons{$addonName};
      my $xpiFile = "/tmp/firefox-addon-tmp-" . int(time * 1000) . ".xpi";

      run "curl", "-L", $url, "-o", $xpiFile;
      if(not -f $xpiFile){
        die "ERROR: failed to download $addonName XPI at $url\n";
      }
      putAddonXpiCache $addonName, $xpiFile;
      run "rm", "-f", $xpiFile;
      print "\n\n";
    }
  }
}

sub copyXpiAddonsToProfile(){
  run "mkdir", "-p", "$PROFILE_DIR/extensions/";
  for my $addon(sort keys %$addons){
    my $xpiFile = getAddonXpiCache $addon;
    my $addonInfo = extractXpiInfo $xpiFile;
    my $destXpi = "$PROFILE_DIR/extensions/$$addonInfo{id}.xpi";
    if(not -f $destXpi){
      print "installing $addon\n";
      run "cp", "-ar", $xpiFile, "$destXpi";
    }
  }
}

sub uninstallAllAddons(){
  run "rm -rf $PROFILE_DIR/extensions/*";
  run "rm -rf $PROFILE_DIR/extensions.sqlite*";
  run "rm -rf $PROFILE_DIR/extensions.json";
}

sub enableAllAddons(){
  my $extJsonFile = "$PROFILE_DIR/extensions.json";
  my $contents = readFile $extJsonFile;
  $contents =~ s/,\"userDisabled\":true,/,\"userDisabled\":false,/g;
  print "writing huge JSON to $extJsonFile\n";
  writeFile $extJsonFile, $contents;
}

sub editMozillaPrefs($$) {
  my ($name, $config) = @_;

  editFile $name, sub {
    my $cnts = shift;
    for my $key(sort keys %$config){
      my $re = "user_pref.*$key";
      $re =~ s/\{/\\\{/g;
      replaceOrAddLine $cnts, $re, "user_pref(\"$key\", $$config{$key});";
    }
    $cnts
  };
}

sub jsonString($){
  my ($str) = @_;
  $str =~ s/"/\\"/g;
  return "\"$str\"";
}
sub jsonArr($){
  my ($items) = @_;
  return "[" . join(",", @$items) . "]";
}
sub jsonStringArr($){
  my ($items) = @_;
  return jsonArr([map {jsonString $_} @$items]);
}
sub jsonMap($){
  my ($jsonKeyVals) = @_;
  my @keyVals;
  for(my $i=0; $i<@$jsonKeyVals; $i+=2){
    my $key = $$jsonKeyVals[$i];
    my $val = $$jsonKeyVals[$i+1];
    push @keyVals, "\"$key\":$val";
  }
  my $json = "{" . join(",", @keyVals) . "}";
  return $json;
}

sub formatChunks($$@){
  my ($chunkSize, $chunkPrefix, @items) = @_;
  my @chunks;
  my $chunk;
  for my $item(@items){
    if(not defined $chunk or @$chunk >= $chunkSize){
      $chunk = [];
      push @chunks, $chunk;
    }
    push @$chunk, $item;
  }
  return join '', map {"$chunkPrefix$_"} map {join " ", @$_} @chunks;
}

&main(@ARGV);
