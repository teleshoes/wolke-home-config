#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $dir = '/etc/bash_completion.d';

sub getFctImpls();
my %okFcts = map {$_ => 1} qw(_root_command);

my @autoCompleteCommands = qw(
  alarm alert backup bgset crashplan ddrname ddwrt igcmd
  led mnt mtest nes play-show psx pubkeys screen-daemon sheetmusic sm sms-search taffybar-run
  xmb xmonad-bindings
);

sub main(@) {
  getRoot @_;

  my $files = {
    'alarm' => complete("_alarm", qw(alarm)),
    'alert' => complete("_alert", qw(alert)),
    'backup' => complete("_backup", qw(backup)),
    'bgset' => complete("_bgset", qw(bgset)),
    'compsql' => complete ("_compsql", qw(compsql genibatis)),
    'crashplan' => complete("_crashplan", qw(crashplan cloud)),
    'ddrname' => complete("_ddrname", qw(ddrname)),
    'ddwrt' => complete("_ddwrt", qw(ddwrt)),
    'extra-rootcmd' => complete("_root_command", qw(nuc)),
    'igcmd' => complete("_igcmd", qw(ig igcmd)),
    'led' => complete("_led", qw(led)),
    'mnt' => complete("_mnt", qw(mnt mnto)),
    'mtest' => complete("_mtest", qw(mtest)),
    'nes' => complete("_nes", qw(nes)),
    'play-show' => complete("_play_show", qw(play-show pl)),
    'psx' => complete("_psx", qw(psx)),
    'pubkeys' => complete("_pubkeys", qw(pubkeys)),
    'sheetmusic' => complete("_sheetmusic", qw(sheetmusic sm)),
    'sms-search' => complete("_sms_search", qw(sms-search)),
    'spawn' => complete("_root_command", qw(spawn spawnex s sx spawnexsudo)),
    'screen-daemon' => complete("_screen_daemon", qw(screen-daemon sd)),
    'ssrun' => complete("_ssrun", qw(ssrun)),
    'sudo-aliases' => complete("_root_command", qw(suod sudp)),
    'taffybar-run' => complete("_taffybar_run", qw(taffybar-run)),
    'update-repo' => complete("_repo_lists", qw(update-repo)),
    'xmonad-bindings' => complete("_xmonad_bindings", qw(xmonad-bindings xmb)),
    'completion-aliases' => completionAliases(
       'evince' => [qw(evi)],
       'git'    => [qw(g)],
       'mkdir'  => [qw(mkdit)],
       'vim'    => [qw(bim cim)],
       ),
  };

  for my $file(keys %$files){
    writeFile "$dir/$file", $$files{$file};
  }
}

sub complete($@){
  my ($fct, @cmds) = @_;
  my $fctImpls = getFctImpls;
  my $complete = '';
  if(defined $$fctImpls{$fct}){
    $complete .= "$fct()$$fctImpls{$fct}\n";
  }elsif(not defined $okFcts{$fct}){
    die "no implementation for $fct\n";
  }
  $complete .= "complete -F $fct @cmds\n";
  print "  completing $fct => @cmds\n";
  return $complete;
}

sub getFctImpls(){
  my $autoCompleteImpls = {};
  for my $cmd(@autoCompleteCommands){
    my $fct = "_$cmd";
    $fct =~ s/\W+/_/g;
    $$autoCompleteImpls{$fct} = '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( ' . $cmd . ' --bash-complete "$COMP_LINE" "$COMP_POINT" )
      oldifs="$IFS"
      IFS=$\'\n\'

      compopt -o filenames
      COMPREPLY=( $(compgen -W "$words" -- $cur) )

      IFS="$oldifs"
    }',
  }

  return {%$autoCompleteImpls,
    "_ssrun" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      scriptNames="$(ssrun runsub getScriptNames 2>/dev/null)"
      subNames="$(ssrun runsub getSubNames 2>/dev/null)"
      installNames="$(ssrun runsub getInstallNames 2>/dev/null)"

      if [ ${#COMP_WORDS[@]} == 2 ]; then
        COMPREPLY=( $(compgen -W "$scriptNames" -- $cur) )
      elif [ ${#COMP_WORDS[@]} == 3 ] && [ "${COMP_WORDS[1]}" == "runsub" ]; then
        COMPREPLY=( $(compgen -W "$subNames" -- $cur) )
      elif [ ${#COMP_WORDS[@]} == 3 ] && [ "${COMP_WORDS[1]}" == "install" ]; then
        COMPREPLY=( $(compgen -W "$installNames" -- $cur) )
      else
        COMPREPLY=()
      fi
    }',

    "_repo_lists" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"

      COMPREPLY=($(
        find /etc/apt/sources.list.d/ \
          -iname "*$cur*.list" \
          -exec basename {} \; \
          2> /dev/null \
        | sort \
      ))
      return 0
    }',

    "_compsql" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"

      COMPREPLY=($(
        find $HOME/pkg/ \
          -iname "*$cur*.sql" \
          -exec basename {} \; \
          2> /dev/null \
        | sort \
      ))
      return 0
    }',
  };
}

sub completionAliases(%){
  my %aliases = @_;

  print join "\n",
    "  completing _completion_aliases => {",
    (map { my $realcmd = $_;
    "    @{$aliases{$realcmd}} => $realcmd,"
    } sort keys %aliases),
    "  }",
    "";

  return join "\n",
    'declare -A _completion_alias_map',
    '_completion_alias_map=(',
    (map { my $realcmd = $_; map { my $cmd = $_;
    "  [\"$cmd\"]=\"$realcmd\""
    } sort @{$aliases{$realcmd}} } sort keys %aliases),
    '  )',
    '',
    'function _completion_aliases {',
    '  local cmd=${COMP_WORDS[0]}',
    '  local realcmd=${_completion_alias_map[$cmd]}',
    '',
    '  COMP_LINE="$realcmd $(echo "$COMP_LINE" | cut -d" " -f2-)"',
    '  COMP_WORDS[0]="$realcmd"',
    '  ((COMP_POINT+=${#realcmd}-${#cmd}))',
    '  _command_offset 0',
    '}',
    '',
    'complete -F _completion_aliases ${!_completion_alias_map[@]}',
    '';
}

&main(@ARGV);
