#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub getLinuxMenuReplacements();
sub formatMenuConfig($);
sub formatCustomMenuEntries(@);

my $grubCfgFile = "/etc/default/grub.d/xx_" . getUsername() . ".cfg";
my $menuCfgFile = "/etc/grub.d/07_" . getUsername();
my $linuxMenuFile = "/etc/grub.d/10_linux";
my $customMenuFile = "/etc/grub.d/40_custom";

my $backgroundSrc = getInstallPath "images/grub.jpg";
my $backgroundDest = "/usr/local/share/images/grub.jpg";

my $linux = "quiet splash msr.allow_writes=on";
$linux .= " intel_iommu=off";
$linux .= " init=/bin/systemd" if -x "/bin/systemd";

my $grubConfig = {
  GRUB_DEFAULT => "0", #"0", "saved", etc
  GRUB_SAVEDEFAULT => "false",

  GRUB_TIMEOUT => 4,
  GRUB_GFXMODE => "800x600",
  GRUB_DISABLE_RECOVERY => "false",
  GRUB_BACKGROUND => $backgroundDest,
  GRUB_CMDLINE_LINUX_DEFAULT => "\"$linux\"",
  GRUB_DISTRIBUTOR => "\"siduction\"",
  GRUB_THEME => "",
  GRUB_DISABLE_SUBMENU => "y",
};

my $menuConfig = {
  color_highlight => "blue/light-gray",
  color_normal => "blue/black",
  menu_color_highlight => "blue/light-gray",
  menu_color_normal => "blue/black",
};

my @customMenuEntries = (
);
my $customMenuEntriesByMachineType = {
  tv => [ ''
        . "menuentry \"OpenELEC\" {\n"
        . "   search --set=root --label OE_SYSTEM --hint hd0,msdos3\n"
        . "   linux /KERNEL boot=LABEL=OE_SYSTEM disk=LABEL=OE_DATA quiet\n"
        . "}"
        ],
};

sub main(@) {
  getRoot @_;

  my $machineType = getMachineType();
  my $machineTypeEntries = $$customMenuEntriesByMachineType{$machineType};
  if(defined $machineTypeEntries){
    for my $entry(@$machineTypeEntries){
      push @customMenuEntries, $entry;
    }
  }

  ### grub config
  my $bgDir = $backgroundDest;
  $bgDir =~ s/\/[^\/]*$//;
  run "mkdir", "-p", $bgDir;
  run "cp", $backgroundSrc, $backgroundDest;

  run "touch", $grubCfgFile;
  editSimpleConf $grubCfgFile, getUsername, $grubConfig;

  ### menu config
  writeFile $menuCfgFile, formatMenuConfig($menuConfig);
  run "chmod", "755", $menuCfgFile;

  ### linux menu entries
  editFile $linuxMenuFile, "add-kernel-to-simple", sub {
    my $config = shift;
    for my $replacementPair(getLinuxMenuReplacements()){
      my ($regex, $replacement) = @$replacementPair;
      replaceLine $config, $regex, $replacement;
    }
    $config;
  };

  ### custom menu entries
  writeFile $customMenuFile, formatCustomMenuEntries(@customMenuEntries);
  run "chmod", "755", $customMenuFile;

  ### update grub
  run "update-grub";
}

sub getLinuxMenuReplacements(){
  my $simpleCfgRegex = ''
    . '.*echo.*menuentry.*menuentry_id_option.*gnulinux-simple.*'
    ;
  my $simpleCfgReplacement = ''
    . '      '
    . 'title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")"'
    . "\n"
    . '      '
    . 'echo "menuentry \'$(echo "$title" | grub_quote)\''
    . ' ${CLASS} \$menuentry_id_option \'gnulinux-simple-$boot_device_id\''
    . ' {" | sed "s/^/$submenu_indentation/"'
    . "\n"
    ;

  return ([$simpleCfgRegex, $simpleCfgReplacement]);
}

sub formatMenuConfig($){
  my $config = shift;
  my $s = '';
  $s .= "cat << EOF\n";
  for my $key(sort keys %$config){
    $s .= "set $key=$$config{$key}\n";
  }
  $s .= "EOF\n";
  return $s;
}

sub formatCustomMenuEntries(@){
  my $prefix = ""
    . "#!/bin/sh\n"
    . "exec tail -n +3 \$0\n"
    . "# This file provides an easy way to add custom menu entries.  Simply type the\n"
    . "# menu entries you want to add after this comment.  Be careful not to change\n"
    . "# the 'exec tail' line above.\n"
    ;
  my @entries = map {s/\n$//; s/^\n$//; "\n$_\n"} @_;
  return $prefix . (join '', @entries);
}

&main(@ARGV);
